
snmpstmf7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fe0c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004a40  08020010  08020010  00030010  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024a50  08024a50  0004023c  2**0
                  CONTENTS
  4 .ARM          00000008  08024a50  08024a50  00034a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024a58  08024a58  0004023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024a58  08024a58  00034a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024a5c  08024a5c  00034a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  08024a60  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000730c  2000023c  08024c9c  0004023c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007548  08024c9c  00047548  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0004023c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003fcaa  00000000  00000000  0004026a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009223  00000000  00000000  0007ff14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002780  00000000  00000000  00089138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000025b0  00000000  00000000  0008b8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d0a6  00000000  00000000  0008de68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004693a  00000000  00000000  000caf0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001206d2  00000000  00000000  00111848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00231f1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b584  00000000  00000000  00231f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000023c 	.word	0x2000023c
 800021c:	00000000 	.word	0x00000000
 8000220:	0801fff4 	.word	0x0801fff4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000240 	.word	0x20000240
 800023c:	0801fff4 	.word	0x0801fff4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <BH1750_send_command>:
  }
}


HAL_StatusTypeDef BH1750_send_command(BH1750_device_t* dev, uint8_t cmd)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af02      	add	r7, sp, #8
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	460b      	mov	r3, r1
 80009e6:	70fb      	strb	r3, [r7, #3]
	//TODO hal checks
	uint8_t u;
	if(u=HAL_I2C_Master_Transmit(
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6858      	ldr	r0, [r3, #4]
			dev->i2c_handle,	//I2C Handle
			dev->address_w,		//I2C addr of dev
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	7a5b      	ldrb	r3, [r3, #9]
	if(u=HAL_I2C_Master_Transmit(
 80009f0:	b299      	uxth	r1, r3
 80009f2:	1cfa      	adds	r2, r7, #3
 80009f4:	230a      	movs	r3, #10
 80009f6:	9300      	str	r3, [sp, #0]
 80009f8:	2301      	movs	r3, #1
 80009fa:	f002 ff1f 	bl	800383c <HAL_I2C_Master_Transmit>
 80009fe:	4603      	mov	r3, r0
			&cmd,				//CMD to be executed
			1,					//8bit addr
			10					//Wait time
		) != HAL_OK) return HAL_ERROR;
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	bf14      	ite	ne
 8000a04:	2301      	movne	r3, #1
 8000a06:	2300      	moveq	r3, #0
 8000a08:	b2db      	uxtb	r3, r3
	if(u=HAL_I2C_Master_Transmit(
 8000a0a:	73fb      	strb	r3, [r7, #15]
 8000a0c:	7bfb      	ldrb	r3, [r7, #15]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <BH1750_send_command+0x3a>
		) != HAL_OK) return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e000      	b.n	8000a18 <BH1750_send_command+0x3c>

	return HAL_OK;
 8000a16:	2300      	movs	r3, #0
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <BH1750_poll_self>:

void BH1750_poll_self(BH1750_device_t* self)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	BH1750_get_lumen(self);
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f000 f8cd 	bl	8000bc8 <BH1750_get_lumen>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <BH1750_init_dev_struct>:

BH1750_device_t* BH1750_init_dev_struct(I2C_HandleTypeDef* i2c_handle,
		char* name, bool addr_grounded)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	4613      	mov	r3, r2
 8000a44:	71fb      	strb	r3, [r7, #7]
	BH1750_device_t* init =
			(BH1750_device_t*)calloc(1, sizeof(BH1750_device_t));
 8000a46:	2114      	movs	r1, #20
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f01a febf 	bl	801b7cc <calloc>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	617b      	str	r3, [r7, #20]

	if(init == NULL) return NULL;
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d101      	bne.n	8000a5c <BH1750_init_dev_struct+0x24>
 8000a58:	2300      	movs	r3, #0
 8000a5a:	e02d      	b.n	8000ab8 <BH1750_init_dev_struct+0x80>

	if(addr_grounded){
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d006      	beq.n	8000a70 <BH1750_init_dev_struct+0x38>
		init->address_r = BH1750_GROUND_ADDR_READ;
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	2247      	movs	r2, #71	; 0x47
 8000a66:	721a      	strb	r2, [r3, #8]
		init->address_w = BH1750_GROUND_ADDR_WRITE;
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	2246      	movs	r2, #70	; 0x46
 8000a6c:	725a      	strb	r2, [r3, #9]
 8000a6e:	e005      	b.n	8000a7c <BH1750_init_dev_struct+0x44>
	}else{
		init->address_r = BH1750_NO_GROUND_ADDR_READ;
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	22ba      	movs	r2, #186	; 0xba
 8000a74:	721a      	strb	r2, [r3, #8]
		init->address_w = BH1750_NO_GROUND_ADDR_WRITE;
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	22b9      	movs	r2, #185	; 0xb9
 8000a7a:	725a      	strb	r2, [r3, #9]
	}

	init->name = (char*)malloc(sizeof(char) * strlen(name));
 8000a7c:	68b8      	ldr	r0, [r7, #8]
 8000a7e:	f7ff fbdf 	bl	8000240 <strlen>
 8000a82:	4603      	mov	r3, r0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f01a fecd 	bl	801b824 <malloc>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	601a      	str	r2, [r3, #0]

	if(init->name == NULL) return NULL;
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d101      	bne.n	8000a9e <BH1750_init_dev_struct+0x66>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e00c      	b.n	8000ab8 <BH1750_init_dev_struct+0x80>

	init->i2c_handle = i2c_handle;
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	68fa      	ldr	r2, [r7, #12]
 8000aa2:	605a      	str	r2, [r3, #4]

	strcpy(init->name, name);
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	68b9      	ldr	r1, [r7, #8]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f01b fecc 	bl	801c848 <strcpy>

	init->poll = &BH1750_poll_self;
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	4a03      	ldr	r2, [pc, #12]	; (8000ac0 <BH1750_init_dev_struct+0x88>)
 8000ab4:	611a      	str	r2, [r3, #16]

	return init;
 8000ab6:	697b      	ldr	r3, [r7, #20]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3718      	adds	r7, #24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	08000a21 	.word	0x08000a21

08000ac4 <BH1750_init_dev>:

HAL_StatusTypeDef BH1750_init_dev(BH1750_device_t* dev)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	BH1750_send_command(dev, CMD_POWER_ON);
 8000acc:	2101      	movs	r1, #1
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff ff84 	bl	80009dc <BH1750_send_command>
	BH1750_send_command(dev, CMD_RESET);
 8000ad4:	2103      	movs	r1, #3
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff ff80 	bl	80009dc <BH1750_send_command>
	BH1750_send_command(dev, CMD_H_RES_MODE);
 8000adc:	2110      	movs	r1, #16
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff ff7c 	bl	80009dc <BH1750_send_command>

	return HAL_OK;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <BH1750_read_dev>:

HAL_StatusTypeDef BH1750_read_dev(BH1750_device_t* dev)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b084      	sub	sp, #16
 8000af2:	af02      	add	r7, sp, #8
 8000af4:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6858      	ldr	r0, [r3, #4]
			dev->address_r,
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	7a1b      	ldrb	r3, [r3, #8]
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 8000afe:	b299      	uxth	r1, r3
			dev->buffer,
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f103 020c 	add.w	r2, r3, #12
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 8000b06:	230a      	movs	r3, #10
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	f002 ff8a 	bl	8003a24 <HAL_I2C_Master_Receive>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <BH1750_read_dev+0x2c>
			2,
			10
	) != HAL_OK) return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e000      	b.n	8000b1c <BH1750_read_dev+0x2e>

	return HAL_OK;
 8000b1a:	2300      	movs	r3, #0
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	0000      	movs	r0, r0
	...

08000b28 <BH1750_convert>:

HAL_StatusTypeDef BH1750_convert(BH1750_device_t* dev)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	dev->value = dev->buffer[0];
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7b1b      	ldrb	r3, [r3, #12]
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	815a      	strh	r2, [r3, #10]
	dev->value = (dev->value << 8) | dev->buffer[1];
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	895b      	ldrh	r3, [r3, #10]
 8000b3e:	021b      	lsls	r3, r3, #8
 8000b40:	b21a      	sxth	r2, r3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	7b5b      	ldrb	r3, [r3, #13]
 8000b46:	b21b      	sxth	r3, r3
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	815a      	strh	r2, [r3, #10]
	uint8_t size;
	//TODO check float stuff
	dev->value/=1.2;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	895b      	ldrh	r3, [r3, #10]
 8000b56:	ee07 3a90 	vmov	s15, r3
 8000b5a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b5e:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8000bb0 <BH1750_convert+0x88>
 8000b62:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b66:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b6a:	ee17 3a90 	vmov	r3, s15
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	815a      	strh	r2, [r3, #10]
	lux=dev->value;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	895a      	ldrh	r2, [r3, #10]
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <BH1750_convert+0x90>)
 8000b7a:	801a      	strh	r2, [r3, #0]
    size = sprintf(BHbuffer,"\"Lux\": %d\n\r", dev->value);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	895b      	ldrh	r3, [r3, #10]
 8000b80:	461a      	mov	r2, r3
 8000b82:	490e      	ldr	r1, [pc, #56]	; (8000bbc <BH1750_convert+0x94>)
 8000b84:	480e      	ldr	r0, [pc, #56]	; (8000bc0 <BH1750_convert+0x98>)
 8000b86:	f01b fe3f 	bl	801c808 <siprintf>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&huart3,BHbuffer , strlen(BHbuffer), 1000);
 8000b8e:	480c      	ldr	r0, [pc, #48]	; (8000bc0 <BH1750_convert+0x98>)
 8000b90:	f7ff fb56 	bl	8000240 <strlen>
 8000b94:	4603      	mov	r3, r0
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9c:	4908      	ldr	r1, [pc, #32]	; (8000bc0 <BH1750_convert+0x98>)
 8000b9e:	4809      	ldr	r0, [pc, #36]	; (8000bc4 <BH1750_convert+0x9c>)
 8000ba0:	f005 fa62 	bl	8006068 <HAL_UART_Transmit>
//	sprintf(BHbuffer, "\"Lux\": %d",455 );
	return HAL_OK;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	33333333 	.word	0x33333333
 8000bb4:	3ff33333 	.word	0x3ff33333
 8000bb8:	20000258 	.word	0x20000258
 8000bbc:	08020010 	.word	0x08020010
 8000bc0:	20000474 	.word	0x20000474
 8000bc4:	200003f0 	.word	0x200003f0

08000bc8 <BH1750_get_lumen>:

HAL_StatusTypeDef BH1750_get_lumen(BH1750_device_t* dev)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	BH1750_read_dev(dev);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff ff8c 	bl	8000aee <BH1750_read_dev>
	BH1750_convert(dev);
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff ffa6 	bl	8000b28 <BH1750_convert>
	return HAL_OK;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bee:	f001 f94c 	bl	8001e8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf2:	f000 f8a5 	bl	8000d40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf6:	f000 faa1 	bl	800113c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000bfa:	f000 fa6f 	bl	80010dc <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000bfe:	f000 f911 	bl	8000e24 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c02:	f000 f98f 	bl	8000f24 <MX_SPI1_Init>
  MX_LWIP_Init();
 8000c06:	f005 fed7 	bl	80069b8 <MX_LWIP_Init>
  MX_TIM2_Init();
 8000c0a:	f000 f9c9 	bl	8000fa0 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000c0e:	f000 fa15 	bl	800103c <MX_TIM4_Init>
  MX_I2C2_Init();
 8000c12:	f000 f947 	bl	8000ea4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
test_dev = BH1750_init_dev_struct(&hi2c2, "test device", true);
 8000c16:	2201      	movs	r2, #1
 8000c18:	4935      	ldr	r1, [pc, #212]	; (8000cf0 <main+0x108>)
 8000c1a:	4836      	ldr	r0, [pc, #216]	; (8000cf4 <main+0x10c>)
 8000c1c:	f7ff ff0c 	bl	8000a38 <BH1750_init_dev_struct>
 8000c20:	4603      	mov	r3, r0
 8000c22:	4a35      	ldr	r2, [pc, #212]	; (8000cf8 <main+0x110>)
 8000c24:	6013      	str	r3, [r2, #0]
  BH1750_init_dev(test_dev);
 8000c26:	4b34      	ldr	r3, [pc, #208]	; (8000cf8 <main+0x110>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff ff4a 	bl	8000ac4 <BH1750_init_dev>
	SHT2x_Init(&hi2c1);
 8000c30:	4832      	ldr	r0, [pc, #200]	; (8000cfc <main+0x114>)
 8000c32:	f000 fc9d 	bl	8001570 <SHT2x_Init>
	SHT2x_SetResolution(RES_14_12);
 8000c36:	2000      	movs	r0, #0
 8000c38:	f000 fd5e 	bl	80016f8 <SHT2x_SetResolution>

  /* USER CODE END 2 */
  if(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8000c3c:	4830      	ldr	r0, [pc, #192]	; (8000d00 <main+0x118>)
 8000c3e:	f004 fd55 	bl	80056ec <HAL_TIM_Base_Start_IT>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <main+0x64>
  {
    /* Starting Error */
    Error_Handler();
 8000c48:	f000 fbfe 	bl	8001448 <Error_Handler>
  }
  if(HAL_TIM_Base_Start_IT(&htim4) != HAL_OK)
 8000c4c:	482d      	ldr	r0, [pc, #180]	; (8000d04 <main+0x11c>)
 8000c4e:	f004 fd4d 	bl	80056ec <HAL_TIM_Base_Start_IT>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <main+0x74>
  {
    /* Starting Error */
    Error_Handler();
 8000c58:	f000 fbf6 	bl	8001448 <Error_Handler>
  }
  u32_t gpiovalue = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	607b      	str	r3, [r7, #4]
  	xgpio = &gpiovalue;
 8000c60:	4a29      	ldr	r2, [pc, #164]	; (8000d08 <main+0x120>)
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	6013      	str	r3, [r2, #0]
	leds = (u32_t*) LD2_Pin;
 8000c66:	4b29      	ldr	r3, [pc, #164]	; (8000d0c <main+0x124>)
 8000c68:	2280      	movs	r2, #128	; 0x80
 8000c6a:	601a      	str	r2, [r3, #0]
	switches = (u32_t*) USER_Btn_Pin; //as example
 8000c6c:	4b28      	ldr	r3, [pc, #160]	; (8000d10 <main+0x128>)
 8000c6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c72:	601a      	str	r2, [r3, #0]
	snmp_mib2_set_syscontact(SNMP_SYSCONTACT, &SNMP_SYSCONTACT_LEN, snmp_buffer);
 8000c74:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <main+0x12c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a27      	ldr	r2, [pc, #156]	; (8000d18 <main+0x130>)
 8000c7a:	8812      	ldrh	r2, [r2, #0]
 8000c7c:	4927      	ldr	r1, [pc, #156]	; (8000d1c <main+0x134>)
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f009 f892 	bl	8009da8 <snmp_mib2_set_syscontact>
		snmp_mib2_set_syslocation(SNMP_SYSLOCATION, &SNMP_SYSLOCATION_LEN, snmp_buffer);
 8000c84:	4b26      	ldr	r3, [pc, #152]	; (8000d20 <main+0x138>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a23      	ldr	r2, [pc, #140]	; (8000d18 <main+0x130>)
 8000c8a:	8812      	ldrh	r2, [r2, #0]
 8000c8c:	4925      	ldr	r1, [pc, #148]	; (8000d24 <main+0x13c>)
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f009 f8de 	bl	8009e50 <snmp_mib2_set_syslocation>
		snmp_set_auth_traps_enabled(ENABLE);
 8000c94:	2001      	movs	r0, #1
 8000c96:	f00d f841 	bl	800dd1c <snmp_set_auth_traps_enabled>
		snmp_mib2_set_sysdescr(SNMP_SYSDESCR, &SNMP_SYSDESCR_LEN);
 8000c9a:	4b23      	ldr	r3, [pc, #140]	; (8000d28 <main+0x140>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4923      	ldr	r1, [pc, #140]	; (8000d2c <main+0x144>)
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f009 f869 	bl	8009d78 <snmp_mib2_set_sysdescr>
		snmp_mib2_set_sysname(SNMP_SYSNAME, &SNMP_SYSNAME_LEN, snmp_buffer);
 8000ca6:	4b22      	ldr	r3, [pc, #136]	; (8000d30 <main+0x148>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a1b      	ldr	r2, [pc, #108]	; (8000d18 <main+0x130>)
 8000cac:	8812      	ldrh	r2, [r2, #0]
 8000cae:	4921      	ldr	r1, [pc, #132]	; (8000d34 <main+0x14c>)
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f009 f8a3 	bl	8009dfc <snmp_mib2_set_sysname>

		ip_addr_t gw = { 0 };
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
	    ipaddr_aton(SNMP_SERVER_IP,&gw);
 8000cba:	463b      	mov	r3, r7
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	481e      	ldr	r0, [pc, #120]	; (8000d38 <main+0x150>)
 8000cc0:	f019 fcbe 	bl	801a640 <ip4addr_aton>

		snmp_trap_dst_ip_set(TRAP_DESTINATION_INDEX, &gw);
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f00d f80b 	bl	800dce4 <snmp_trap_dst_ip_set>
		snmp_trap_dst_enable(TRAP_DESTINATION_INDEX, ENABLE);
 8000cce:	2101      	movs	r1, #1
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f00c ffed 	bl	800dcb0 <snmp_trap_dst_enable>
		snmp_set_mibs(my_snmp_mibs, LWIP_ARRAYSIZE(my_snmp_mibs));
 8000cd6:	2102      	movs	r1, #2
 8000cd8:	4818      	ldr	r0, [pc, #96]	; (8000d3c <main+0x154>)
 8000cda:	f007 f89b 	bl	8007e14 <snmp_set_mibs>

	    snmp_init();
 8000cde:	f00c fb07 	bl	800d2f0 <snmp_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8000ce2:	f005 ffa7 	bl	8006c34 <MX_LWIP_Process>
			HAL_Delay(1);
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f001 f92c 	bl	8001f44 <HAL_Delay>
	  MX_LWIP_Process();
 8000cec:	e7f9      	b.n	8000ce2 <main+0xfa>
 8000cee:	bf00      	nop
 8000cf0:	0802007c 	.word	0x0802007c
 8000cf4:	200002a8 	.word	0x200002a8
 8000cf8:	200004a8 	.word	0x200004a8
 8000cfc:	2000025c 	.word	0x2000025c
 8000d00:	20000358 	.word	0x20000358
 8000d04:	200003a4 	.word	0x200003a4
 8000d08:	20000520 	.word	0x20000520
 8000d0c:	20000518 	.word	0x20000518
 8000d10:	2000051c 	.word	0x2000051c
 8000d14:	2000000c 	.word	0x2000000c
 8000d18:	20000022 	.word	0x20000022
 8000d1c:	20000010 	.word	0x20000010
 8000d20:	2000001c 	.word	0x2000001c
 8000d24:	20000020 	.word	0x20000020
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	08023460 	.word	0x08023460
 8000d30:	20000014 	.word	0x20000014
 8000d34:	20000018 	.word	0x20000018
 8000d38:	08020088 	.word	0x08020088
 8000d3c:	20000000 	.word	0x20000000

08000d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b094      	sub	sp, #80	; 0x50
 8000d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	2234      	movs	r2, #52	; 0x34
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f01a fda8 	bl	801b8a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d54:	f107 0308 	add.w	r3, r7, #8
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d64:	f003 fa64 	bl	8004230 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d68:	4b2c      	ldr	r3, [pc, #176]	; (8000e1c <SystemClock_Config+0xdc>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	4a2b      	ldr	r2, [pc, #172]	; (8000e1c <SystemClock_Config+0xdc>)
 8000d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d72:	6413      	str	r3, [r2, #64]	; 0x40
 8000d74:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <SystemClock_Config+0xdc>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d80:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <SystemClock_Config+0xe0>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d88:	4a25      	ldr	r2, [pc, #148]	; (8000e20 <SystemClock_Config+0xe0>)
 8000d8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	4b23      	ldr	r3, [pc, #140]	; (8000e20 <SystemClock_Config+0xe0>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d98:	603b      	str	r3, [r7, #0]
 8000d9a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000da0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000da4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da6:	2302      	movs	r3, #2
 8000da8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000daa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000db0:	2304      	movs	r3, #4
 8000db2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000db4:	2360      	movs	r3, #96	; 0x60
 8000db6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000db8:	2302      	movs	r3, #2
 8000dba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f003 fa91 	bl	80042f0 <HAL_RCC_OscConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000dd4:	f000 fb38 	bl	8001448 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000dd8:	f003 fa3a 	bl	8004250 <HAL_PWREx_EnableOverDrive>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000de2:	f000 fb31 	bl	8001448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de6:	230f      	movs	r3, #15
 8000de8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dea:	2302      	movs	r3, #2
 8000dec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000df2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000dfc:	f107 0308 	add.w	r3, r7, #8
 8000e00:	2103      	movs	r1, #3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f003 fd22 	bl	800484c <HAL_RCC_ClockConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000e0e:	f000 fb1b 	bl	8001448 <Error_Handler>
  }
}
 8000e12:	bf00      	nop
 8000e14:	3750      	adds	r7, #80	; 0x50
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40007000 	.word	0x40007000

08000e24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e28:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <MX_I2C1_Init+0x74>)
 8000e2a:	4a1c      	ldr	r2, [pc, #112]	; (8000e9c <MX_I2C1_Init+0x78>)
 8000e2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000e2e:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <MX_I2C1_Init+0x74>)
 8000e30:	4a1b      	ldr	r2, [pc, #108]	; (8000ea0 <MX_I2C1_Init+0x7c>)
 8000e32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e34:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <MX_I2C1_Init+0x74>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e3a:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <MX_I2C1_Init+0x74>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <MX_I2C1_Init+0x74>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e46:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <MX_I2C1_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <MX_I2C1_Init+0x74>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <MX_I2C1_Init+0x74>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <MX_I2C1_Init+0x74>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e5e:	480e      	ldr	r0, [pc, #56]	; (8000e98 <MX_I2C1_Init+0x74>)
 8000e60:	f002 fc5c 	bl	800371c <HAL_I2C_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e6a:	f000 faed 	bl	8001448 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4809      	ldr	r0, [pc, #36]	; (8000e98 <MX_I2C1_Init+0x74>)
 8000e72:	f003 f945 	bl	8004100 <HAL_I2CEx_ConfigAnalogFilter>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e7c:	f000 fae4 	bl	8001448 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e80:	2100      	movs	r1, #0
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_I2C1_Init+0x74>)
 8000e84:	f003 f987 	bl	8004196 <HAL_I2CEx_ConfigDigitalFilter>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e8e:	f000 fadb 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	2000025c 	.word	0x2000025c
 8000e9c:	40005400 	.word	0x40005400
 8000ea0:	20303e5d 	.word	0x20303e5d

08000ea4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ea8:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <MX_I2C2_Init+0x74>)
 8000eaa:	4a1c      	ldr	r2, [pc, #112]	; (8000f1c <MX_I2C2_Init+0x78>)
 8000eac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <MX_I2C2_Init+0x74>)
 8000eb0:	4a1b      	ldr	r2, [pc, #108]	; (8000f20 <MX_I2C2_Init+0x7c>)
 8000eb2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000eb4:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <MX_I2C2_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <MX_I2C2_Init+0x74>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <MX_I2C2_Init+0x74>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_I2C2_Init+0x74>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <MX_I2C2_Init+0x74>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_I2C2_Init+0x74>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <MX_I2C2_Init+0x74>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ede:	480e      	ldr	r0, [pc, #56]	; (8000f18 <MX_I2C2_Init+0x74>)
 8000ee0:	f002 fc1c 	bl	800371c <HAL_I2C_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000eea:	f000 faad 	bl	8001448 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4809      	ldr	r0, [pc, #36]	; (8000f18 <MX_I2C2_Init+0x74>)
 8000ef2:	f003 f905 	bl	8004100 <HAL_I2CEx_ConfigAnalogFilter>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000efc:	f000 faa4 	bl	8001448 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000f00:	2100      	movs	r1, #0
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_I2C2_Init+0x74>)
 8000f04:	f003 f947 	bl	8004196 <HAL_I2CEx_ConfigDigitalFilter>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f0e:	f000 fa9b 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200002a8 	.word	0x200002a8
 8000f1c:	40005800 	.word	0x40005800
 8000f20:	20303e5d 	.word	0x20303e5d

08000f24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <MX_SPI1_Init+0x74>)
 8000f2a:	4a1c      	ldr	r2, [pc, #112]	; (8000f9c <MX_SPI1_Init+0x78>)
 8000f2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f2e:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <MX_SPI1_Init+0x74>)
 8000f30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <MX_SPI1_Init+0x74>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f3c:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <MX_SPI1_Init+0x74>)
 8000f3e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f42:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_SPI1_Init+0x74>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <MX_SPI1_Init+0x74>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_SPI1_Init+0x74>)
 8000f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f56:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_SPI1_Init+0x74>)
 8000f5a:	2208      	movs	r2, #8
 8000f5c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_SPI1_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <MX_SPI1_Init+0x74>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <MX_SPI1_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MX_SPI1_Init+0x74>)
 8000f72:	2207      	movs	r2, #7
 8000f74:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <MX_SPI1_Init+0x74>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_SPI1_Init+0x74>)
 8000f7e:	2208      	movs	r2, #8
 8000f80:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_SPI1_Init+0x74>)
 8000f84:	f004 fab0 	bl	80054e8 <HAL_SPI_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f8e:	f000 fa5b 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200002f4 	.word	0x200002f4
 8000f9c:	40013000 	.word	0x40013000

08000fa0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa6:	f107 0310 	add.w	r3, r7, #16
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <MX_TIM2_Init+0x98>)
 8000fc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fc4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 960;
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <MX_TIM2_Init+0x98>)
 8000fc8:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8000fcc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fce:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <MX_TIM2_Init+0x98>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <MX_TIM2_Init+0x98>)
 8000fd6:	f242 720f 	movw	r2, #9999	; 0x270f
 8000fda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <MX_TIM2_Init+0x98>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <MX_TIM2_Init+0x98>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fe8:	4813      	ldr	r0, [pc, #76]	; (8001038 <MX_TIM2_Init+0x98>)
 8000fea:	f004 fb28 	bl	800563e <HAL_TIM_Base_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000ff4:	f000 fa28 	bl	8001448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4619      	mov	r1, r3
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <MX_TIM2_Init+0x98>)
 8001006:	f004 fd09 	bl	8005a1c <HAL_TIM_ConfigClockSource>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001010:	f000 fa1a 	bl	8001448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	4619      	mov	r1, r3
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_TIM2_Init+0x98>)
 8001022:	f004 ff27 	bl	8005e74 <HAL_TIMEx_MasterConfigSynchronization>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800102c:	f000 fa0c 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000358 	.word	0x20000358

0800103c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800105a:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <MX_TIM4_Init+0x98>)
 800105c:	4a1e      	ldr	r2, [pc, #120]	; (80010d8 <MX_TIM4_Init+0x9c>)
 800105e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 960;
 8001060:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <MX_TIM4_Init+0x98>)
 8001062:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8001066:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <MX_TIM4_Init+0x98>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800106e:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <MX_TIM4_Init+0x98>)
 8001070:	f242 720f 	movw	r2, #9999	; 0x270f
 8001074:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001076:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <MX_TIM4_Init+0x98>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <MX_TIM4_Init+0x98>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001082:	4814      	ldr	r0, [pc, #80]	; (80010d4 <MX_TIM4_Init+0x98>)
 8001084:	f004 fadb 	bl	800563e <HAL_TIM_Base_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800108e:	f000 f9db 	bl	8001448 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001096:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	4619      	mov	r1, r3
 800109e:	480d      	ldr	r0, [pc, #52]	; (80010d4 <MX_TIM4_Init+0x98>)
 80010a0:	f004 fcbc 	bl	8005a1c <HAL_TIM_ConfigClockSource>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80010aa:	f000 f9cd 	bl	8001448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	4619      	mov	r1, r3
 80010ba:	4806      	ldr	r0, [pc, #24]	; (80010d4 <MX_TIM4_Init+0x98>)
 80010bc:	f004 feda 	bl	8005e74 <HAL_TIMEx_MasterConfigSynchronization>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80010c6:	f000 f9bf 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	3720      	adds	r7, #32
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200003a4 	.word	0x200003a4
 80010d8:	40000800 	.word	0x40000800

080010dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010e0:	4b14      	ldr	r3, [pc, #80]	; (8001134 <MX_USART3_UART_Init+0x58>)
 80010e2:	4a15      	ldr	r2, [pc, #84]	; (8001138 <MX_USART3_UART_Init+0x5c>)
 80010e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010e6:	4b13      	ldr	r3, [pc, #76]	; (8001134 <MX_USART3_UART_Init+0x58>)
 80010e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_USART3_UART_Init+0x58>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <MX_USART3_UART_Init+0x58>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_USART3_UART_Init+0x58>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_USART3_UART_Init+0x58>)
 8001102:	220c      	movs	r2, #12
 8001104:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <MX_USART3_UART_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800110c:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_USART3_UART_Init+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <MX_USART3_UART_Init+0x58>)
 8001114:	2200      	movs	r2, #0
 8001116:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <MX_USART3_UART_Init+0x58>)
 800111a:	2200      	movs	r2, #0
 800111c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <MX_USART3_UART_Init+0x58>)
 8001120:	f004 ff54 	bl	8005fcc <HAL_UART_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800112a:	f000 f98d 	bl	8001448 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200003f0 	.word	0x200003f0
 8001138:	40004800 	.word	0x40004800

0800113c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08c      	sub	sp, #48	; 0x30
 8001140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	4b5c      	ldr	r3, [pc, #368]	; (80012c4 <MX_GPIO_Init+0x188>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a5b      	ldr	r2, [pc, #364]	; (80012c4 <MX_GPIO_Init+0x188>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b59      	ldr	r3, [pc, #356]	; (80012c4 <MX_GPIO_Init+0x188>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	61bb      	str	r3, [r7, #24]
 8001168:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800116a:	4b56      	ldr	r3, [pc, #344]	; (80012c4 <MX_GPIO_Init+0x188>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a55      	ldr	r2, [pc, #340]	; (80012c4 <MX_GPIO_Init+0x188>)
 8001170:	f043 0320 	orr.w	r3, r3, #32
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b53      	ldr	r3, [pc, #332]	; (80012c4 <MX_GPIO_Init+0x188>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0320 	and.w	r3, r3, #32
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001182:	4b50      	ldr	r3, [pc, #320]	; (80012c4 <MX_GPIO_Init+0x188>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a4f      	ldr	r2, [pc, #316]	; (80012c4 <MX_GPIO_Init+0x188>)
 8001188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b4d      	ldr	r3, [pc, #308]	; (80012c4 <MX_GPIO_Init+0x188>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	4b4a      	ldr	r3, [pc, #296]	; (80012c4 <MX_GPIO_Init+0x188>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a49      	ldr	r2, [pc, #292]	; (80012c4 <MX_GPIO_Init+0x188>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b47      	ldr	r3, [pc, #284]	; (80012c4 <MX_GPIO_Init+0x188>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	4b44      	ldr	r3, [pc, #272]	; (80012c4 <MX_GPIO_Init+0x188>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a43      	ldr	r2, [pc, #268]	; (80012c4 <MX_GPIO_Init+0x188>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b41      	ldr	r3, [pc, #260]	; (80012c4 <MX_GPIO_Init+0x188>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ca:	4b3e      	ldr	r3, [pc, #248]	; (80012c4 <MX_GPIO_Init+0x188>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a3d      	ldr	r2, [pc, #244]	; (80012c4 <MX_GPIO_Init+0x188>)
 80011d0:	f043 0308 	orr.w	r3, r3, #8
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <MX_GPIO_Init+0x188>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011e2:	4b38      	ldr	r3, [pc, #224]	; (80012c4 <MX_GPIO_Init+0x188>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a37      	ldr	r2, [pc, #220]	; (80012c4 <MX_GPIO_Init+0x188>)
 80011e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b35      	ldr	r3, [pc, #212]	; (80012c4 <MX_GPIO_Init+0x188>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	f244 0181 	movw	r1, #16513	; 0x4081
 8001200:	4831      	ldr	r0, [pc, #196]	; (80012c8 <MX_GPIO_Init+0x18c>)
 8001202:	f002 fa71 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	2140      	movs	r1, #64	; 0x40
 800120a:	4830      	ldr	r0, [pc, #192]	; (80012cc <MX_GPIO_Init+0x190>)
 800120c:	f002 fa6c 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001210:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001216:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800121a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	4619      	mov	r1, r3
 8001226:	482a      	ldr	r0, [pc, #168]	; (80012d0 <MX_GPIO_Init+0x194>)
 8001228:	f002 f8b2 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800122c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001232:	2301      	movs	r3, #1
 8001234:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	4619      	mov	r1, r3
 8001244:	4820      	ldr	r0, [pc, #128]	; (80012c8 <MX_GPIO_Init+0x18c>)
 8001246:	f002 f8a3 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800124a:	2340      	movs	r3, #64	; 0x40
 800124c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124e:	2301      	movs	r3, #1
 8001250:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	4619      	mov	r1, r3
 8001260:	481a      	ldr	r0, [pc, #104]	; (80012cc <MX_GPIO_Init+0x190>)
 8001262:	f002 f895 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001266:	2380      	movs	r3, #128	; 0x80
 8001268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	4619      	mov	r1, r3
 8001278:	4814      	ldr	r0, [pc, #80]	; (80012cc <MX_GPIO_Init+0x190>)
 800127a:	f002 f889 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800127e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	2303      	movs	r3, #3
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001290:	230a      	movs	r3, #10
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	4619      	mov	r1, r3
 800129a:	480e      	ldr	r0, [pc, #56]	; (80012d4 <MX_GPIO_Init+0x198>)
 800129c:	f002 f878 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80012a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	4619      	mov	r1, r3
 80012b4:	4807      	ldr	r0, [pc, #28]	; (80012d4 <MX_GPIO_Init+0x198>)
 80012b6:	f002 f86b 	bl	8003390 <HAL_GPIO_Init>

}
 80012ba:	bf00      	nop
 80012bc:	3730      	adds	r7, #48	; 0x30
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020400 	.word	0x40020400
 80012cc:	40021800 	.word	0x40021800
 80012d0:	40020800 	.word	0x40020800
 80012d4:	40020000 	.word	0x40020000

080012d8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012dc:	b08d      	sub	sp, #52	; 0x34
 80012de:	af06      	add	r7, sp, #24
 80012e0:	60f8      	str	r0, [r7, #12]
if(htim->Instance==TIM2){
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012ea:	d112      	bne.n	8001312 <HAL_TIM_PeriodElapsedCallback+0x3a>
	luxtimer++;
 80012ec:	4b4d      	ldr	r3, [pc, #308]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	3301      	adds	r3, #1
 80012f2:	4a4c      	ldr	r2, [pc, #304]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80012f4:	6013      	str	r3, [r2, #0]
	if(luxtimer==30){
 80012f6:	4b4b      	ldr	r3, [pc, #300]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2b1e      	cmp	r3, #30
 80012fc:	d109      	bne.n	8001312 <HAL_TIM_PeriodElapsedCallback+0x3a>
    test_dev->poll(test_dev);
 80012fe:	4b4a      	ldr	r3, [pc, #296]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	4a48      	ldr	r2, [pc, #288]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	4610      	mov	r0, r2
 800130a:	4798      	blx	r3
    luxtimer=0;
 800130c:	4b45      	ldr	r3, [pc, #276]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
	}

}
if(htim->Instance==TIM4){
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a45      	ldr	r2, [pc, #276]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d17e      	bne.n	800141a <HAL_TIM_PeriodElapsedCallback+0x142>
	temptimer++;
 800131c:	4b44      	ldr	r3, [pc, #272]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	4a43      	ldr	r2, [pc, #268]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001324:	6013      	str	r3, [r2, #0]
	if(temptimer==30){
 8001326:	4b42      	ldr	r3, [pc, #264]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b1e      	cmp	r3, #30
 800132c:	d175      	bne.n	800141a <HAL_TIM_PeriodElapsedCallback+0x142>
	 cel1 = SHT2x_GetTemperature(1);
 800132e:	2001      	movs	r0, #1
 8001330:	f000 f97e 	bl	8001630 <SHT2x_GetTemperature>
 8001334:	eef0 7a40 	vmov.f32	s15, s0
 8001338:	4b3e      	ldr	r3, [pc, #248]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800133a:	edc3 7a00 	vstr	s15, [r3]
		/* Converts temperature to degrees Fahrenheit and Kelvin */
		float fah1 = SHT2x_CelsiusToFahrenheit(cel1);
 800133e:	4b3d      	ldr	r3, [pc, #244]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001340:	edd3 7a00 	vldr	s15, [r3]
 8001344:	eeb0 0a67 	vmov.f32	s0, s15
 8001348:	f000 f9fe 	bl	8001748 <SHT2x_CelsiusToFahrenheit>
 800134c:	ed87 0a05 	vstr	s0, [r7, #20]
		float kel1= SHT2x_CelsiusToKelvin(cel1);
 8001350:	4b38      	ldr	r3, [pc, #224]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001352:	edd3 7a00 	vldr	s15, [r3]
 8001356:	eeb0 0a67 	vmov.f32	s0, s15
 800135a:	f000 fa19 	bl	8001790 <SHT2x_CelsiusToKelvin>
 800135e:	ed87 0a04 	vstr	s0, [r7, #16]
		 rh1 = SHT2x_GetRelativeHumidity(1);
 8001362:	2001      	movs	r0, #1
 8001364:	f000 f998 	bl	8001698 <SHT2x_GetRelativeHumidity>
 8001368:	eef0 7a40 	vmov.f32	s15, s0
 800136c:	4b32      	ldr	r3, [pc, #200]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800136e:	edc3 7a00 	vstr	s15, [r3]
			sprintf(SHTbuffer,
 8001372:	4b30      	ldr	r3, [pc, #192]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	eeb0 0a67 	vmov.f32	s0, s15
 800137c:	f000 fa1c 	bl	80017b8 <SHT2x_GetInteger>
 8001380:	4680      	mov	r8, r0
 8001382:	4b2c      	ldr	r3, [pc, #176]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001384:	edd3 7a00 	vldr	s15, [r3]
 8001388:	2001      	movs	r0, #1
 800138a:	eeb0 0a67 	vmov.f32	s0, s15
 800138e:	f000 fa24 	bl	80017da <SHT2x_GetDecimal>
 8001392:	4681      	mov	r9, r0
 8001394:	ed97 0a05 	vldr	s0, [r7, #20]
 8001398:	f000 fa0e 	bl	80017b8 <SHT2x_GetInteger>
 800139c:	4604      	mov	r4, r0
 800139e:	2001      	movs	r0, #1
 80013a0:	ed97 0a05 	vldr	s0, [r7, #20]
 80013a4:	f000 fa19 	bl	80017da <SHT2x_GetDecimal>
 80013a8:	4605      	mov	r5, r0
 80013aa:	ed97 0a04 	vldr	s0, [r7, #16]
 80013ae:	f000 fa03 	bl	80017b8 <SHT2x_GetInteger>
 80013b2:	4606      	mov	r6, r0
 80013b4:	2001      	movs	r0, #1
 80013b6:	ed97 0a04 	vldr	s0, [r7, #16]
 80013ba:	f000 fa0e 	bl	80017da <SHT2x_GetDecimal>
 80013be:	60b8      	str	r0, [r7, #8]
 80013c0:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80013c2:	edd3 7a00 	vldr	s15, [r3]
 80013c6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ca:	f000 f9f5 	bl	80017b8 <SHT2x_GetInteger>
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	4b19      	ldr	r3, [pc, #100]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80013d2:	edd3 7a00 	vldr	s15, [r3]
 80013d6:	2001      	movs	r0, #1
 80013d8:	eeb0 0a67 	vmov.f32	s0, s15
 80013dc:	f000 f9fd 	bl	80017da <SHT2x_GetDecimal>
 80013e0:	4603      	mov	r3, r0
 80013e2:	9305      	str	r3, [sp, #20]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	9304      	str	r3, [sp, #16]
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	9303      	str	r3, [sp, #12]
 80013ec:	9602      	str	r6, [sp, #8]
 80013ee:	9501      	str	r5, [sp, #4]
 80013f0:	9400      	str	r4, [sp, #0]
 80013f2:	464b      	mov	r3, r9
 80013f4:	4642      	mov	r2, r8
 80013f6:	4911      	ldr	r1, [pc, #68]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x164>)
 80013f8:	4811      	ldr	r0, [pc, #68]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80013fa:	f01b fa05 	bl	801c808 <siprintf>
						"%d.%dºC, %d.%dºF, %d.%d K, %d.%d%% RH\n\r",
						SHT2x_GetInteger(cel1), SHT2x_GetDecimal(cel1, 1),
						SHT2x_GetInteger(fah1), SHT2x_GetDecimal(fah1, 1),
						SHT2x_GetInteger(kel1), SHT2x_GetDecimal(kel1, 1),
						SHT2x_GetInteger(rh1), SHT2x_GetDecimal(rh1, 1));
				HAL_UART_Transmit(&huart3, SHTbuffer, strlen(SHTbuffer), 1000);
 80013fe:	4810      	ldr	r0, [pc, #64]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001400:	f7fe ff1e 	bl	8000240 <strlen>
 8001404:	4603      	mov	r3, r0
 8001406:	b29a      	uxth	r2, r3
 8001408:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140c:	490c      	ldr	r1, [pc, #48]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800140e:	480d      	ldr	r0, [pc, #52]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001410:	f004 fe2a 	bl	8006068 <HAL_UART_Transmit>
				temptimer=0;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
	}
}
}
 800141a:	bf00      	nop
 800141c:	371c      	adds	r7, #28
 800141e:	46bd      	mov	sp, r7
 8001420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001424:	20000510 	.word	0x20000510
 8001428:	200004a8 	.word	0x200004a8
 800142c:	40000800 	.word	0x40000800
 8001430:	20000514 	.word	0x20000514
 8001434:	20000524 	.word	0x20000524
 8001438:	20000528 	.word	0x20000528
 800143c:	08020098 	.word	0x08020098
 8001440:	200004ac 	.word	0x200004ac
 8001444:	200003f0 	.word	0x200003f0

08001448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800144c:	b672      	cpsid	i
}
 800144e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001450:	e7fe      	b.n	8001450 <Error_Handler+0x8>
	...

08001454 <get_tem_value>:
const struct snmp_mib parm_mib = SNMP_MIB_CREATE(my_base_oid, &parm_tree_node.node);
extern uint16_t lux;


/* leds value .1.3.6.1.4.1.26381.1.1.0 */
static int16_t get_tem_value(struct snmp_node_instance* instance, void* value) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
	uint32_t *uint_ptr = (uint32_t*) value;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	60fb      	str	r3, [r7, #12]
//	convergpio_toRead();
	*uint_ptr = (int16_t) SHT2x_GetInteger(cel1);
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <get_tem_value+0x30>)
 8001464:	edd3 7a00 	vldr	s15, [r3]
 8001468:	eeb0 0a67 	vmov.f32	s0, s15
 800146c:	f000 f9a4 	bl	80017b8 <SHT2x_GetInteger>
 8001470:	4603      	mov	r3, r0
 8001472:	b21b      	sxth	r3, r3
 8001474:	461a      	mov	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	601a      	str	r2, [r3, #0]
	/* get structure values */
//	convergpio_toWrite();
	return sizeof(*uint_ptr);
 800147a:	2304      	movs	r3, #4
}
 800147c:	4618      	mov	r0, r3
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000524 	.word	0x20000524

08001488 <get_hum_value>:

/* switches value .1.3.6.1.4.1.26381.1.2.0 */
static int16_t get_hum_value(struct snmp_node_instance* instance, void* value)
{
 8001488:	b590      	push	{r4, r7, lr}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
	uint32_t *uint_ptr = (uint32_t*) value;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	60fb      	str	r3, [r7, #12]
	//*uint_ptr = (uint32_t) HAL_GPIO_ReadPin(GPIOB, *(&switches)); /* get structure values */
	//rh1 = SHT2x_GetRelativeHumidity(1);
	*uint_ptr = (int16_t) SHT2x_GetInteger(rh1);
 8001496:	4b19      	ldr	r3, [pc, #100]	; (80014fc <get_hum_value+0x74>)
 8001498:	edd3 7a00 	vldr	s15, [r3]
 800149c:	eeb0 0a67 	vmov.f32	s0, s15
 80014a0:	f000 f98a 	bl	80017b8 <SHT2x_GetInteger>
 80014a4:	4603      	mov	r3, r0
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	461a      	mov	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	601a      	str	r2, [r3, #0]
	sprintf(SHTbuffer, "snmp:%d.%d%% RH\n\r",SHT2x_GetInteger(rh1), SHT2x_GetDecimal(rh1, 1));
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <get_hum_value+0x74>)
 80014b0:	edd3 7a00 	vldr	s15, [r3]
 80014b4:	eeb0 0a67 	vmov.f32	s0, s15
 80014b8:	f000 f97e 	bl	80017b8 <SHT2x_GetInteger>
 80014bc:	4604      	mov	r4, r0
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <get_hum_value+0x74>)
 80014c0:	edd3 7a00 	vldr	s15, [r3]
 80014c4:	2001      	movs	r0, #1
 80014c6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ca:	f000 f986 	bl	80017da <SHT2x_GetDecimal>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4622      	mov	r2, r4
 80014d2:	490b      	ldr	r1, [pc, #44]	; (8001500 <get_hum_value+0x78>)
 80014d4:	480b      	ldr	r0, [pc, #44]	; (8001504 <get_hum_value+0x7c>)
 80014d6:	f01b f997 	bl	801c808 <siprintf>
	HAL_UART_Transmit(&huart3, SHTbuffer, strlen(SHTbuffer), 1000);
 80014da:	480a      	ldr	r0, [pc, #40]	; (8001504 <get_hum_value+0x7c>)
 80014dc:	f7fe feb0 	bl	8000240 <strlen>
 80014e0:	4603      	mov	r3, r0
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e8:	4906      	ldr	r1, [pc, #24]	; (8001504 <get_hum_value+0x7c>)
 80014ea:	4807      	ldr	r0, [pc, #28]	; (8001508 <get_hum_value+0x80>)
 80014ec:	f004 fdbc 	bl	8006068 <HAL_UART_Transmit>

	return sizeof(*uint_ptr);
 80014f0:	2304      	movs	r3, #4
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd90      	pop	{r4, r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000528 	.word	0x20000528
 8001500:	080200c4 	.word	0x080200c4
 8001504:	200004ac 	.word	0x200004ac
 8001508:	200003f0 	.word	0x200003f0

0800150c <get_lux_value>:

/* xgpio value .1.3.6.1.4.1.26381.1.3.0 */
static int16_t get_lux_value(struct snmp_node_instance* instance, void* value) {
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
	u32_t *uint_ptr = (uint32_t*) value;
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	60fb      	str	r3, [r7, #12]
	*uint_ptr = (int16_t) lux;
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <get_lux_value+0x28>)
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	b21b      	sxth	r3, r3
 8001520:	461a      	mov	r2, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	601a      	str	r2, [r3, #0]
;
	return sizeof(*uint_ptr);
 8001526:	2304      	movs	r3, #4
}
 8001528:	4618      	mov	r0, r3
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	20000258 	.word	0x20000258

08001538 <set_leds_value>:

static snmp_err_t set_leds_value(struct snmp_node_instance* instance, uint16_t len, void *value)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	460b      	mov	r3, r1
 8001542:	607a      	str	r2, [r7, #4]
 8001544:	817b      	strh	r3, [r7, #10]
	uint32_t val = *((u32_t*)value);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_WritePin(GPIOB ,*(&leds), (uint32_t) val); /* write a value in struture */
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <set_leds_value+0x30>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	b29b      	uxth	r3, r3
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	4619      	mov	r1, r3
 8001558:	4804      	ldr	r0, [pc, #16]	; (800156c <set_leds_value+0x34>)
 800155a:	f002 f8c5 	bl	80036e8 <HAL_GPIO_WritePin>
	return SNMP_ERR_NOERROR;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000518 	.word	0x20000518
 800156c:	40020400 	.word	0x40020400

08001570 <SHT2x_Init>:

/**
 * @brief Initializes the SHT2x temperature/humidity sensor.
 * @param hi2c User I2C handle pointer.
 */
void SHT2x_Init(I2C_HandleTypeDef *hi2c) {
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	_sht2x_ui2c = hi2c;
 8001578:	4a04      	ldr	r2, [pc, #16]	; (800158c <SHT2x_Init+0x1c>)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6013      	str	r3, [r2, #0]
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	2000052c 	.word	0x2000052c

08001590 <SHT2x_ReadUserReg>:

/**
 * @brief Gets the value stored in user register.
 * @return 8-bit value stored in user register, 0 to 255.
 */
uint8_t SHT2x_ReadUserReg(void) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af02      	add	r7, sp, #8
	uint8_t val;
	uint8_t cmd = SHT2x_READ_REG;
 8001596:	23e7      	movs	r3, #231	; 0xe7
 8001598:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 800159a:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <SHT2x_ReadUserReg+0x3c>)
 800159c:	6818      	ldr	r0, [r3, #0]
 800159e:	1dba      	adds	r2, r7, #6
 80015a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	2301      	movs	r3, #1
 80015a8:	2180      	movs	r1, #128	; 0x80
 80015aa:	f002 f947 	bl	800383c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &val, 1, SHT2x_TIMEOUT);
 80015ae:	4b07      	ldr	r3, [pc, #28]	; (80015cc <SHT2x_ReadUserReg+0x3c>)
 80015b0:	6818      	ldr	r0, [r3, #0]
 80015b2:	1dfa      	adds	r2, r7, #7
 80015b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	2301      	movs	r3, #1
 80015bc:	2180      	movs	r1, #128	; 0x80
 80015be:	f002 fa31 	bl	8003a24 <HAL_I2C_Master_Receive>
	return val;
 80015c2:	79fb      	ldrb	r3, [r7, #7]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	2000052c 	.word	0x2000052c

080015d0 <SHT2x_GetRaw>:
/**
 * @brief Sends the designated command to sensor and read a 16-bit raw value.
 * @param cmd Command to send to sensor.
 * @return 16-bit raw value, 0 to 65535.
 */
uint16_t SHT2x_GetRaw(uint8_t cmd) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
	uint8_t val[3] = { 0 };
 80015da:	4b13      	ldr	r3, [pc, #76]	; (8001628 <SHT2x_GetRaw+0x58>)
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	81bb      	strh	r3, [r7, #12]
 80015e0:	2300      	movs	r3, #0
 80015e2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, &cmd, 1, SHT2x_TIMEOUT);
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <SHT2x_GetRaw+0x5c>)
 80015e6:	6818      	ldr	r0, [r3, #0]
 80015e8:	1dfa      	adds	r2, r7, #7
 80015ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	2301      	movs	r3, #1
 80015f2:	2180      	movs	r1, #128	; 0x80
 80015f4:	f002 f922 	bl	800383c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, val, 3, SHT2x_TIMEOUT);
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <SHT2x_GetRaw+0x5c>)
 80015fa:	6818      	ldr	r0, [r3, #0]
 80015fc:	f107 020c 	add.w	r2, r7, #12
 8001600:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	2303      	movs	r3, #3
 8001608:	2180      	movs	r1, #128	; 0x80
 800160a:	f002 fa0b 	bl	8003a24 <HAL_I2C_Master_Receive>
	return val[0] << 8 | val[1];
 800160e:	7b3b      	ldrb	r3, [r7, #12]
 8001610:	021b      	lsls	r3, r3, #8
 8001612:	b21a      	sxth	r2, r3
 8001614:	7b7b      	ldrb	r3, [r7, #13]
 8001616:	b21b      	sxth	r3, r3
 8001618:	4313      	orrs	r3, r2
 800161a:	b21b      	sxth	r3, r3
 800161c:	b29b      	uxth	r3, r3
}
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	080200d8 	.word	0x080200d8
 800162c:	2000052c 	.word	0x2000052c

08001630 <SHT2x_GetTemperature>:
/**
 * @brief Measures and gets the current temperature.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point temperature value.
 */
float SHT2x_GetTemperature(uint8_t hold) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = (hold ? SHT2x_READ_TEMP_HOLD : SHT2x_READ_TEMP_NOHOLD);
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <SHT2x_GetTemperature+0x14>
 8001640:	23e3      	movs	r3, #227	; 0xe3
 8001642:	e000      	b.n	8001646 <SHT2x_GetTemperature+0x16>
 8001644:	23f3      	movs	r3, #243	; 0xf3
 8001646:	73fb      	strb	r3, [r7, #15]
	return -46.85 + 175.72 * (SHT2x_GetRaw(cmd) / 65536.0);
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ffc0 	bl	80015d0 <SHT2x_GetRaw>
 8001650:	4603      	mov	r3, r0
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800165a:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8001680 <SHT2x_GetTemperature+0x50>
 800165e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001662:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8001688 <SHT2x_GetTemperature+0x58>
 8001666:	ee27 7b06 	vmul.f64	d7, d7, d6
 800166a:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8001690 <SHT2x_GetTemperature+0x60>
 800166e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001672:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8001676:	eeb0 0a67 	vmov.f32	s0, s15
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	00000000 	.word	0x00000000
 8001684:	40f00000 	.word	0x40f00000
 8001688:	3d70a3d7 	.word	0x3d70a3d7
 800168c:	4065f70a 	.word	0x4065f70a
 8001690:	cccccccd 	.word	0xcccccccd
 8001694:	40476ccc 	.word	0x40476ccc

08001698 <SHT2x_GetRelativeHumidity>:
/**
 * @brief Measures and gets the current relative humidity.
 * @param hold Holding mode, 0 for no hold master, 1 for hold master.
 * @return Floating point relative humidity value.
 */
float SHT2x_GetRelativeHumidity(uint8_t hold) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = (hold ? SHT2x_READ_RH_HOLD : SHT2x_READ_RH_NOHOLD);
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <SHT2x_GetRelativeHumidity+0x14>
 80016a8:	23e5      	movs	r3, #229	; 0xe5
 80016aa:	e000      	b.n	80016ae <SHT2x_GetRelativeHumidity+0x16>
 80016ac:	23f5      	movs	r3, #245	; 0xf5
 80016ae:	73fb      	strb	r3, [r7, #15]
	return -6 + 125.00 * (SHT2x_GetRaw(cmd) / 65536.0);
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ff8c 	bl	80015d0 <SHT2x_GetRaw>
 80016b8:	4603      	mov	r3, r0
 80016ba:	ee07 3a90 	vmov	s15, r3
 80016be:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80016c2:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80016e8 <SHT2x_GetRelativeHumidity+0x50>
 80016c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016ca:	ed9f 6b09 	vldr	d6, [pc, #36]	; 80016f0 <SHT2x_GetRelativeHumidity+0x58>
 80016ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80016d2:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 80016d6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80016da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 80016de:	eeb0 0a67 	vmov.f32	s0, s15
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	00000000 	.word	0x00000000
 80016ec:	40f00000 	.word	0x40f00000
 80016f0:	00000000 	.word	0x00000000
 80016f4:	405f4000 	.word	0x405f4000

080016f8 <SHT2x_SetResolution>:
 * @brief Sets the measurement resolution.
 * @param res Enum resolution.
 * @note Available resolutions: RES_14_12, RES_12_8, RES_13_10, RES_11_11.
 * @note RES_14_12 = 14-bit temperature and 12-bit RH resolution, etc.
 */
void SHT2x_SetResolution(SHT2x_Resolution res) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af02      	add	r7, sp, #8
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
	uint8_t val = SHT2x_ReadUserReg();
 8001702:	f7ff ff45 	bl	8001590 <SHT2x_ReadUserReg>
 8001706:	4603      	mov	r3, r0
 8001708:	73fb      	strb	r3, [r7, #15]
	val = (val & 0x7e) | res;
 800170a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001712:	b25a      	sxtb	r2, r3
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	4313      	orrs	r3, r2
 800171a:	b25b      	sxtb	r3, r3
 800171c:	73fb      	strb	r3, [r7, #15]
	uint8_t temp[2] = { SHT2x_WRITE_REG, val };
 800171e:	23e6      	movs	r3, #230	; 0xe6
 8001720:	733b      	strb	r3, [r7, #12]
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_sht2x_ui2c, SHT2x_I2C_ADDR << 1, temp, 2, SHT2x_TIMEOUT);
 8001726:	4b07      	ldr	r3, [pc, #28]	; (8001744 <SHT2x_SetResolution+0x4c>)
 8001728:	6818      	ldr	r0, [r3, #0]
 800172a:	f107 020c 	add.w	r2, r7, #12
 800172e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	2302      	movs	r3, #2
 8001736:	2180      	movs	r1, #128	; 0x80
 8001738:	f002 f880 	bl	800383c <HAL_I2C_Master_Transmit>
}
 800173c:	bf00      	nop
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	2000052c 	.word	0x2000052c

08001748 <SHT2x_CelsiusToFahrenheit>:
/**
 * @brief Converts degrees Celsius to degrees Fahrenheit.
 * @param celsius Floating point temperature in degrees Celsius.
 * @return Floating point temperature in degrees Fahrenheit.
 */
float SHT2x_CelsiusToFahrenheit(float celsius) {
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	ed87 0a01 	vstr	s0, [r7, #4]
	return (9.0 / 5.0) * celsius + 32;
 8001752:	edd7 7a01 	vldr	s15, [r7, #4]
 8001756:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800175a:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8001780 <SHT2x_CelsiusToFahrenheit+0x38>
 800175e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001762:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8001788 <SHT2x_CelsiusToFahrenheit+0x40>
 8001766:	ee37 7b06 	vadd.f64	d7, d7, d6
 800176a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800176e:	eeb0 0a67 	vmov.f32	s0, s15
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	f3af 8000 	nop.w
 8001780:	cccccccd 	.word	0xcccccccd
 8001784:	3ffccccc 	.word	0x3ffccccc
 8001788:	00000000 	.word	0x00000000
 800178c:	40400000 	.word	0x40400000

08001790 <SHT2x_CelsiusToKelvin>:
/**
 * @brief Converts degrees Celsius to Kelvin.
 * @param celsius Floating point temperature in degrees Celsius.
 * @return Floating point temperature in Kelvin.
 */
float SHT2x_CelsiusToKelvin(float celsius) {
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	ed87 0a01 	vstr	s0, [r7, #4]
	return celsius + 273;
 800179a:	edd7 7a01 	vldr	s15, [r7, #4]
 800179e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80017b4 <SHT2x_CelsiusToKelvin+0x24>
 80017a2:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80017a6:	eeb0 0a67 	vmov.f32	s0, s15
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	43888000 	.word	0x43888000

080017b8 <SHT2x_GetInteger>:
 * @brief Gets the integer part of a floating point number.
 * @note Avoids the use of sprinf floating point formatting.
 * @param num Floating point number.
 * @return Integer part of floating point number.
 */
int32_t SHT2x_GetInteger(float num) {
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	ed87 0a01 	vstr	s0, [r7, #4]
	return num / 1;
 80017c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80017c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017ca:	ee17 3a90 	vmov	r3, s15
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <SHT2x_GetDecimal>:
 * @brief Gets the decimal part of a floating point number.
 * @note Avoids the use of sprinf floating point formatting.
 * @param num Floating point number.
 * @return Decimal part of floating point number.
 */
uint32_t SHT2x_GetDecimal(float num, int digits) {
 80017da:	b580      	push	{r7, lr}
 80017dc:	b084      	sub	sp, #16
 80017de:	af00      	add	r7, sp, #0
 80017e0:	ed87 0a01 	vstr	s0, [r7, #4]
 80017e4:	6038      	str	r0, [r7, #0]
	float postDec = num - SHT2x_GetInteger(num);
 80017e6:	ed97 0a01 	vldr	s0, [r7, #4]
 80017ea:	f7ff ffe5 	bl	80017b8 <SHT2x_GetInteger>
 80017ee:	ee07 0a90 	vmov	s15, r0
 80017f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80017fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017fe:	edc7 7a03 	vstr	s15, [r7, #12]
	return postDec * SHT2x_Ipow(10, digits);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	4619      	mov	r1, r3
 8001806:	200a      	movs	r0, #10
 8001808:	f000 f810 	bl	800182c <SHT2x_Ipow>
 800180c:	ee07 0a90 	vmov	s15, r0
 8001810:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001814:	edd7 7a03 	vldr	s15, [r7, #12]
 8001818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800181c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001820:	ee17 3a90 	vmov	r3, s15
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <SHT2x_Ipow>:
 * @brief Integer equivalent of pow() in math.h.
 * @param base Base.
 * @param power Power.
 * @return
 */
uint32_t SHT2x_Ipow(uint32_t base, uint32_t power) {
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
	uint32_t temp = base;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 1; i < power; i++)
 800183a:	2301      	movs	r3, #1
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	e007      	b.n	8001850 <SHT2x_Ipow+0x24>
		temp *= base;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	fb02 f303 	mul.w	r3, r2, r3
 8001848:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 1; i < power; i++)
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	3301      	adds	r3, #1
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68ba      	ldr	r2, [r7, #8]
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	d3f3      	bcc.n	8001840 <SHT2x_Ipow+0x14>
	return temp;
 8001858:	68fb      	ldr	r3, [r7, #12]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <HAL_MspInit+0x44>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	4a0e      	ldr	r2, [pc, #56]	; (80018ac <HAL_MspInit+0x44>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001878:	6413      	str	r3, [r2, #64]	; 0x40
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <HAL_MspInit+0x44>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_MspInit+0x44>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188a:	4a08      	ldr	r2, [pc, #32]	; (80018ac <HAL_MspInit+0x44>)
 800188c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001890:	6453      	str	r3, [r2, #68]	; 0x44
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_MspInit+0x44>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800

080018b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b0b0      	sub	sp, #192	; 0xc0
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	2290      	movs	r2, #144	; 0x90
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f019 ffe7 	bl	801b8a4 <memset>
  if(hi2c->Instance==I2C1)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a44      	ldr	r2, [pc, #272]	; (80019ec <HAL_I2C_MspInit+0x13c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d13e      	bne.n	800195e <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018e4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4618      	mov	r0, r3
 80018f2:	f003 f9d1 	bl	8004c98 <HAL_RCCEx_PeriphCLKConfig>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80018fc:	f7ff fda4 	bl	8001448 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001900:	4b3b      	ldr	r3, [pc, #236]	; (80019f0 <HAL_I2C_MspInit+0x140>)
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	4a3a      	ldr	r2, [pc, #232]	; (80019f0 <HAL_I2C_MspInit+0x140>)
 8001906:	f043 0302 	orr.w	r3, r3, #2
 800190a:	6313      	str	r3, [r2, #48]	; 0x30
 800190c:	4b38      	ldr	r3, [pc, #224]	; (80019f0 <HAL_I2C_MspInit+0x140>)
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	61bb      	str	r3, [r7, #24]
 8001916:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001918:	f44f 7310 	mov.w	r3, #576	; 0x240
 800191c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001920:	2312      	movs	r3, #18
 8001922:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001932:	2304      	movs	r3, #4
 8001934:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001938:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800193c:	4619      	mov	r1, r3
 800193e:	482d      	ldr	r0, [pc, #180]	; (80019f4 <HAL_I2C_MspInit+0x144>)
 8001940:	f001 fd26 	bl	8003390 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001944:	4b2a      	ldr	r3, [pc, #168]	; (80019f0 <HAL_I2C_MspInit+0x140>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	4a29      	ldr	r2, [pc, #164]	; (80019f0 <HAL_I2C_MspInit+0x140>)
 800194a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800194e:	6413      	str	r3, [r2, #64]	; 0x40
 8001950:	4b27      	ldr	r3, [pc, #156]	; (80019f0 <HAL_I2C_MspInit+0x140>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800195c:	e041      	b.n	80019e2 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C2)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a25      	ldr	r2, [pc, #148]	; (80019f8 <HAL_I2C_MspInit+0x148>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d13c      	bne.n	80019e2 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001968:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800196c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800196e:	2300      	movs	r3, #0
 8001970:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001974:	f107 031c 	add.w	r3, r7, #28
 8001978:	4618      	mov	r0, r3
 800197a:	f003 f98d 	bl	8004c98 <HAL_RCCEx_PeriphCLKConfig>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001984:	f7ff fd60 	bl	8001448 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001988:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <HAL_I2C_MspInit+0x140>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	4a18      	ldr	r2, [pc, #96]	; (80019f0 <HAL_I2C_MspInit+0x140>)
 800198e:	f043 0320 	orr.w	r3, r3, #32
 8001992:	6313      	str	r3, [r2, #48]	; 0x30
 8001994:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <HAL_I2C_MspInit+0x140>)
 8001996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001998:	f003 0320 	and.w	r3, r3, #32
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019a0:	2303      	movs	r3, #3
 80019a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a6:	2312      	movs	r3, #18
 80019a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b2:	2303      	movs	r3, #3
 80019b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019b8:	2304      	movs	r3, #4
 80019ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019be:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80019c2:	4619      	mov	r1, r3
 80019c4:	480d      	ldr	r0, [pc, #52]	; (80019fc <HAL_I2C_MspInit+0x14c>)
 80019c6:	f001 fce3 	bl	8003390 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_I2C_MspInit+0x140>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	4a08      	ldr	r2, [pc, #32]	; (80019f0 <HAL_I2C_MspInit+0x140>)
 80019d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019d4:	6413      	str	r3, [r2, #64]	; 0x40
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_I2C_MspInit+0x140>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
}
 80019e2:	bf00      	nop
 80019e4:	37c0      	adds	r7, #192	; 0xc0
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40005400 	.word	0x40005400
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40020400 	.word	0x40020400
 80019f8:	40005800 	.word	0x40005800
 80019fc:	40021400 	.word	0x40021400

08001a00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	; 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a25      	ldr	r2, [pc, #148]	; (8001ab4 <HAL_SPI_MspInit+0xb4>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d143      	bne.n	8001aaa <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a22:	4b25      	ldr	r3, [pc, #148]	; (8001ab8 <HAL_SPI_MspInit+0xb8>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	4a24      	ldr	r2, [pc, #144]	; (8001ab8 <HAL_SPI_MspInit+0xb8>)
 8001a28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2e:	4b22      	ldr	r3, [pc, #136]	; (8001ab8 <HAL_SPI_MspInit+0xb8>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	; (8001ab8 <HAL_SPI_MspInit+0xb8>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a1e      	ldr	r2, [pc, #120]	; (8001ab8 <HAL_SPI_MspInit+0xb8>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <HAL_SPI_MspInit+0xb8>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a52:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <HAL_SPI_MspInit+0xb8>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a18      	ldr	r2, [pc, #96]	; (8001ab8 <HAL_SPI_MspInit+0xb8>)
 8001a58:	f043 0308 	orr.w	r3, r3, #8
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <HAL_SPI_MspInit+0xb8>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001a6a:	2360      	movs	r3, #96	; 0x60
 8001a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a76:	2303      	movs	r3, #3
 8001a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a7a:	2305      	movs	r3, #5
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4619      	mov	r1, r3
 8001a84:	480d      	ldr	r0, [pc, #52]	; (8001abc <HAL_SPI_MspInit+0xbc>)
 8001a86:	f001 fc83 	bl	8003390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a8a:	2380      	movs	r3, #128	; 0x80
 8001a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a96:	2303      	movs	r3, #3
 8001a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a9a:	2305      	movs	r3, #5
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <HAL_SPI_MspInit+0xc0>)
 8001aa6:	f001 fc73 	bl	8003390 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001aaa:	bf00      	nop
 8001aac:	3728      	adds	r7, #40	; 0x28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40013000 	.word	0x40013000
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40020000 	.word	0x40020000
 8001ac0:	40020c00 	.word	0x40020c00

08001ac4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad4:	d114      	bne.n	8001b00 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ad6:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <HAL_TIM_Base_MspInit+0x78>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	4a18      	ldr	r2, [pc, #96]	; (8001b3c <HAL_TIM_Base_MspInit+0x78>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <HAL_TIM_Base_MspInit+0x78>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	201c      	movs	r0, #28
 8001af4:	f000 fb25 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001af8:	201c      	movs	r0, #28
 8001afa:	f000 fb3e 	bl	800217a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001afe:	e018      	b.n	8001b32 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <HAL_TIM_Base_MspInit+0x7c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d113      	bne.n	8001b32 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <HAL_TIM_Base_MspInit+0x78>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	4a0b      	ldr	r2, [pc, #44]	; (8001b3c <HAL_TIM_Base_MspInit+0x78>)
 8001b10:	f043 0304 	orr.w	r3, r3, #4
 8001b14:	6413      	str	r3, [r2, #64]	; 0x40
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_TIM_Base_MspInit+0x78>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	201e      	movs	r0, #30
 8001b28:	f000 fb0b 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b2c:	201e      	movs	r0, #30
 8001b2e:	f000 fb24 	bl	800217a <HAL_NVIC_EnableIRQ>
}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40000800 	.word	0x40000800

08001b44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b0ae      	sub	sp, #184	; 0xb8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	2290      	movs	r2, #144	; 0x90
 8001b62:	2100      	movs	r1, #0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f019 fe9d 	bl	801b8a4 <memset>
  if(huart->Instance==USART3)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a22      	ldr	r2, [pc, #136]	; (8001bf8 <HAL_UART_MspInit+0xb4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d13c      	bne.n	8001bee <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b78:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 f888 	bl	8004c98 <HAL_RCCEx_PeriphCLKConfig>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b8e:	f7ff fc5b 	bl	8001448 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b92:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <HAL_UART_MspInit+0xb8>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	4a19      	ldr	r2, [pc, #100]	; (8001bfc <HAL_UART_MspInit+0xb8>)
 8001b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <HAL_UART_MspInit+0xb8>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001baa:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <HAL_UART_MspInit+0xb8>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a13      	ldr	r2, [pc, #76]	; (8001bfc <HAL_UART_MspInit+0xb8>)
 8001bb0:	f043 0308 	orr.w	r3, r3, #8
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <HAL_UART_MspInit+0xb8>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001bc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bdc:	2307      	movs	r3, #7
 8001bde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001be6:	4619      	mov	r1, r3
 8001be8:	4805      	ldr	r0, [pc, #20]	; (8001c00 <HAL_UART_MspInit+0xbc>)
 8001bea:	f001 fbd1 	bl	8003390 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bee:	bf00      	nop
 8001bf0:	37b8      	adds	r7, #184	; 0xb8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40004800 	.word	0x40004800
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40020c00 	.word	0x40020c00

08001c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <NMI_Handler+0x4>

08001c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c0e:	e7fe      	b.n	8001c0e <HardFault_Handler+0x4>

08001c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <MemManage_Handler+0x4>

08001c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c1a:	e7fe      	b.n	8001c1a <BusFault_Handler+0x4>

08001c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c20:	e7fe      	b.n	8001c20 <UsageFault_Handler+0x4>

08001c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c50:	f000 f958 	bl	8001f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c54:	bf00      	nop
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c5c:	4802      	ldr	r0, [pc, #8]	; (8001c68 <TIM2_IRQHandler+0x10>)
 8001c5e:	f003 fdbd 	bl	80057dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000358 	.word	0x20000358

08001c6c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c70:	4802      	ldr	r0, [pc, #8]	; (8001c7c <TIM4_IRQHandler+0x10>)
 8001c72:	f003 fdb3 	bl	80057dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200003a4 	.word	0x200003a4

08001c80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
	return 1;
 8001c84:	2301      	movs	r3, #1
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <_kill>:

int _kill(int pid, int sig)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c9a:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <_kill+0x20>)
 8001c9c:	2216      	movs	r2, #22
 8001c9e:	601a      	str	r2, [r3, #0]
	return -1;
 8001ca0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	20007540 	.word	0x20007540

08001cb4 <_exit>:

void _exit (int status)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ffe5 	bl	8001c90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cc6:	e7fe      	b.n	8001cc6 <_exit+0x12>

08001cc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	e00a      	b.n	8001cf0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cda:	f3af 8000 	nop.w
 8001cde:	4601      	mov	r1, r0
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	60ba      	str	r2, [r7, #8]
 8001ce6:	b2ca      	uxtb	r2, r1
 8001ce8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	3301      	adds	r3, #1
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	dbf0      	blt.n	8001cda <_read+0x12>
	}

return len;
 8001cf8:	687b      	ldr	r3, [r7, #4]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3718      	adds	r7, #24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b086      	sub	sp, #24
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	e009      	b.n	8001d28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	60ba      	str	r2, [r7, #8]
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	3301      	adds	r3, #1
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	dbf1      	blt.n	8001d14 <_write+0x12>
	}
	return len;
 8001d30:	687b      	ldr	r3, [r7, #4]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <_close>:

int _close(int file)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
	return -1;
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d62:	605a      	str	r2, [r3, #4]
	return 0;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <_isatty>:

int _isatty(int file)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
	return 1;
 8001d7a:	2301      	movs	r3, #1
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
	return 0;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b087      	sub	sp, #28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dac:	4a14      	ldr	r2, [pc, #80]	; (8001e00 <_sbrk+0x5c>)
 8001dae:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <_sbrk+0x60>)
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db8:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <_sbrk+0x64>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d102      	bne.n	8001dc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <_sbrk+0x64>)
 8001dc2:	4a12      	ldr	r2, [pc, #72]	; (8001e0c <_sbrk+0x68>)
 8001dc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dc6:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <_sbrk+0x64>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d205      	bcs.n	8001de0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <_sbrk+0x6c>)
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295
 8001dde:	e009      	b.n	8001df4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <_sbrk+0x64>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	4a06      	ldr	r2, [pc, #24]	; (8001e08 <_sbrk+0x64>)
 8001df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001df2:	68fb      	ldr	r3, [r7, #12]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	371c      	adds	r7, #28
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	20080000 	.word	0x20080000
 8001e04:	00000400 	.word	0x00000400
 8001e08:	20000530 	.word	0x20000530
 8001e0c:	20007548 	.word	0x20007548
 8001e10:	20007540 	.word	0x20007540

08001e14 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <SystemInit+0x20>)
 8001e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e1e:	4a05      	ldr	r2, [pc, #20]	; (8001e34 <SystemInit+0x20>)
 8001e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e3c:	480d      	ldr	r0, [pc, #52]	; (8001e74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e3e:	490e      	ldr	r1, [pc, #56]	; (8001e78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e40:	4a0e      	ldr	r2, [pc, #56]	; (8001e7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e44:	e002      	b.n	8001e4c <LoopCopyDataInit>

08001e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e4a:	3304      	adds	r3, #4

08001e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e50:	d3f9      	bcc.n	8001e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e52:	4a0b      	ldr	r2, [pc, #44]	; (8001e80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e54:	4c0b      	ldr	r4, [pc, #44]	; (8001e84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e58:	e001      	b.n	8001e5e <LoopFillZerobss>

08001e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e5c:	3204      	adds	r2, #4

08001e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e60:	d3fb      	bcc.n	8001e5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e62:	f7ff ffd7 	bl	8001e14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e66:	f019 fcb9 	bl	801b7dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e6a:	f7fe febd 	bl	8000be8 <main>
  bx  lr    
 8001e6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e70:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e78:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 8001e7c:	08024a60 	.word	0x08024a60
  ldr r2, =_sbss
 8001e80:	2000023c 	.word	0x2000023c
  ldr r4, =_ebss
 8001e84:	20007548 	.word	0x20007548

08001e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e88:	e7fe      	b.n	8001e88 <ADC_IRQHandler>

08001e8a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e8e:	2003      	movs	r0, #3
 8001e90:	f000 f94c 	bl	800212c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e94:	2000      	movs	r0, #0
 8001e96:	f000 f805 	bl	8001ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e9a:	f7ff fce5 	bl	8001868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_InitTick+0x54>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_InitTick+0x58>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f967 	bl	8002196 <HAL_SYSTICK_Config>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e00e      	b.n	8001ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b0f      	cmp	r3, #15
 8001ed6:	d80a      	bhi.n	8001eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee0:	f000 f92f 	bl	8002142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ee4:	4a06      	ldr	r2, [pc, #24]	; (8001f00 <HAL_InitTick+0x5c>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	e000      	b.n	8001ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000024 	.word	0x20000024
 8001efc:	2000002c 	.word	0x2000002c
 8001f00:	20000028 	.word	0x20000028

08001f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_IncTick+0x20>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_IncTick+0x24>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4413      	add	r3, r2
 8001f14:	4a04      	ldr	r2, [pc, #16]	; (8001f28 <HAL_IncTick+0x24>)
 8001f16:	6013      	str	r3, [r2, #0]
}
 8001f18:	bf00      	nop
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	2000002c 	.word	0x2000002c
 8001f28:	20000534 	.word	0x20000534

08001f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <HAL_GetTick+0x14>)
 8001f32:	681b      	ldr	r3, [r3, #0]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20000534 	.word	0x20000534

08001f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f4c:	f7ff ffee 	bl	8001f2c <HAL_GetTick>
 8001f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5c:	d005      	beq.n	8001f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <HAL_Delay+0x44>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	461a      	mov	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4413      	add	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f6a:	bf00      	nop
 8001f6c:	f7ff ffde 	bl	8001f2c <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d8f7      	bhi.n	8001f6c <HAL_Delay+0x28>
  {
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	bf00      	nop
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	2000002c 	.word	0x2000002c

08001f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <__NVIC_SetPriorityGrouping+0x40>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fba:	4a04      	ldr	r2, [pc, #16]	; (8001fcc <__NVIC_SetPriorityGrouping+0x40>)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	60d3      	str	r3, [r2, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000ed00 	.word	0xe000ed00
 8001fd0:	05fa0000 	.word	0x05fa0000

08001fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd8:	4b04      	ldr	r3, [pc, #16]	; (8001fec <__NVIC_GetPriorityGrouping+0x18>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	f003 0307 	and.w	r3, r3, #7
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	db0b      	blt.n	800201a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	f003 021f 	and.w	r2, r3, #31
 8002008:	4907      	ldr	r1, [pc, #28]	; (8002028 <__NVIC_EnableIRQ+0x38>)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	095b      	lsrs	r3, r3, #5
 8002010:	2001      	movs	r0, #1
 8002012:	fa00 f202 	lsl.w	r2, r0, r2
 8002016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	e000e100 	.word	0xe000e100

0800202c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	6039      	str	r1, [r7, #0]
 8002036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203c:	2b00      	cmp	r3, #0
 800203e:	db0a      	blt.n	8002056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	b2da      	uxtb	r2, r3
 8002044:	490c      	ldr	r1, [pc, #48]	; (8002078 <__NVIC_SetPriority+0x4c>)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	0112      	lsls	r2, r2, #4
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	440b      	add	r3, r1
 8002050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002054:	e00a      	b.n	800206c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	b2da      	uxtb	r2, r3
 800205a:	4908      	ldr	r1, [pc, #32]	; (800207c <__NVIC_SetPriority+0x50>)
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	3b04      	subs	r3, #4
 8002064:	0112      	lsls	r2, r2, #4
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	440b      	add	r3, r1
 800206a:	761a      	strb	r2, [r3, #24]
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000e100 	.word	0xe000e100
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002080:	b480      	push	{r7}
 8002082:	b089      	sub	sp, #36	; 0x24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f1c3 0307 	rsb	r3, r3, #7
 800209a:	2b04      	cmp	r3, #4
 800209c:	bf28      	it	cs
 800209e:	2304      	movcs	r3, #4
 80020a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3304      	adds	r3, #4
 80020a6:	2b06      	cmp	r3, #6
 80020a8:	d902      	bls.n	80020b0 <NVIC_EncodePriority+0x30>
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3b03      	subs	r3, #3
 80020ae:	e000      	b.n	80020b2 <NVIC_EncodePriority+0x32>
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b4:	f04f 32ff 	mov.w	r2, #4294967295
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43da      	mvns	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	401a      	ands	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c8:	f04f 31ff 	mov.w	r1, #4294967295
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	43d9      	mvns	r1, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d8:	4313      	orrs	r3, r2
         );
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3724      	adds	r7, #36	; 0x24
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f8:	d301      	bcc.n	80020fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020fa:	2301      	movs	r3, #1
 80020fc:	e00f      	b.n	800211e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fe:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <SysTick_Config+0x40>)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002106:	210f      	movs	r1, #15
 8002108:	f04f 30ff 	mov.w	r0, #4294967295
 800210c:	f7ff ff8e 	bl	800202c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <SysTick_Config+0x40>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002116:	4b04      	ldr	r3, [pc, #16]	; (8002128 <SysTick_Config+0x40>)
 8002118:	2207      	movs	r2, #7
 800211a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	e000e010 	.word	0xe000e010

0800212c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff ff29 	bl	8001f8c <__NVIC_SetPriorityGrouping>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002142:	b580      	push	{r7, lr}
 8002144:	b086      	sub	sp, #24
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002154:	f7ff ff3e 	bl	8001fd4 <__NVIC_GetPriorityGrouping>
 8002158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	6978      	ldr	r0, [r7, #20]
 8002160:	f7ff ff8e 	bl	8002080 <NVIC_EncodePriority>
 8002164:	4602      	mov	r2, r0
 8002166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff5d 	bl	800202c <__NVIC_SetPriority>
}
 8002172:	bf00      	nop
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	4603      	mov	r3, r0
 8002182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff31 	bl	8001ff0 <__NVIC_EnableIRQ>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff ffa2 	bl	80020e8 <SysTick_Config>
 80021a4:	4603      	mov	r3, r0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	61fb      	str	r3, [r7, #28]
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80021c0:	4ba0      	ldr	r3, [pc, #640]	; (8002444 <HAL_ETH_Init+0x294>)
 80021c2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e180      	b.n	80024d8 <HAL_ETH_Init+0x328>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d106      	bne.n	80021f0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f004 fd2e 	bl	8006c4c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f0:	4b95      	ldr	r3, [pc, #596]	; (8002448 <HAL_ETH_Init+0x298>)
 80021f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f4:	4a94      	ldr	r2, [pc, #592]	; (8002448 <HAL_ETH_Init+0x298>)
 80021f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021fa:	6453      	str	r3, [r2, #68]	; 0x44
 80021fc:	4b92      	ldr	r3, [pc, #584]	; (8002448 <HAL_ETH_Init+0x298>)
 80021fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002208:	4b90      	ldr	r3, [pc, #576]	; (800244c <HAL_ETH_Init+0x29c>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	4a8f      	ldr	r2, [pc, #572]	; (800244c <HAL_ETH_Init+0x29c>)
 800220e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002212:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002214:	4b8d      	ldr	r3, [pc, #564]	; (800244c <HAL_ETH_Init+0x29c>)
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	498b      	ldr	r1, [pc, #556]	; (800244c <HAL_ETH_Init+0x29c>)
 800221e:	4313      	orrs	r3, r2
 8002220:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002238:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800223a:	f7ff fe77 	bl	8001f2c <HAL_GetTick>
 800223e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002240:	e011      	b.n	8002266 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002242:	f7ff fe73 	bl	8001f2c <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002250:	d909      	bls.n	8002266 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2203      	movs	r2, #3
 8002256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e138      	b.n	80024d8 <HAL_ETH_Init+0x328>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1e4      	bne.n	8002242 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f023 031c 	bic.w	r3, r3, #28
 8002286:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002288:	f002 fcd2 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 800228c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	4a6f      	ldr	r2, [pc, #444]	; (8002450 <HAL_ETH_Init+0x2a0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d908      	bls.n	80022a8 <HAL_ETH_Init+0xf8>
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	4a6e      	ldr	r2, [pc, #440]	; (8002454 <HAL_ETH_Init+0x2a4>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d804      	bhi.n	80022a8 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	f043 0308 	orr.w	r3, r3, #8
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	e027      	b.n	80022f8 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	4a6a      	ldr	r2, [pc, #424]	; (8002454 <HAL_ETH_Init+0x2a4>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d908      	bls.n	80022c2 <HAL_ETH_Init+0x112>
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	4a64      	ldr	r2, [pc, #400]	; (8002444 <HAL_ETH_Init+0x294>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d204      	bcs.n	80022c2 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f043 030c 	orr.w	r3, r3, #12
 80022be:	61fb      	str	r3, [r7, #28]
 80022c0:	e01a      	b.n	80022f8 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	4a5f      	ldr	r2, [pc, #380]	; (8002444 <HAL_ETH_Init+0x294>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d303      	bcc.n	80022d2 <HAL_ETH_Init+0x122>
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	4a62      	ldr	r2, [pc, #392]	; (8002458 <HAL_ETH_Init+0x2a8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d911      	bls.n	80022f6 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	4a60      	ldr	r2, [pc, #384]	; (8002458 <HAL_ETH_Init+0x2a8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d908      	bls.n	80022ec <HAL_ETH_Init+0x13c>
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	4a5f      	ldr	r2, [pc, #380]	; (800245c <HAL_ETH_Init+0x2ac>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d804      	bhi.n	80022ec <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	f043 0304 	orr.w	r3, r3, #4
 80022e8:	61fb      	str	r3, [r7, #28]
 80022ea:	e005      	b.n	80022f8 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f043 0310 	orr.w	r3, r3, #16
 80022f2:	61fb      	str	r3, [r7, #28]
 80022f4:	e000      	b.n	80022f8 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80022f6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002300:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002304:	2100      	movs	r1, #0
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 fb94 	bl	8002a34 <HAL_ETH_WritePHYRegister>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00b      	beq.n	800232a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002316:	6939      	ldr	r1, [r7, #16]
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 fd49 	bl	8002db0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e0d6      	b.n	80024d8 <HAL_ETH_Init+0x328>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800232a:	20ff      	movs	r0, #255	; 0xff
 800232c:	f7ff fe0a 	bl	8001f44 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80a4 	beq.w	8002482 <HAL_ETH_Init+0x2d2>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800233a:	f7ff fdf7 	bl	8001f2c <HAL_GetTick>
 800233e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002340:	f107 030c 	add.w	r3, r7, #12
 8002344:	461a      	mov	r2, r3
 8002346:	2101      	movs	r1, #1
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 fb0b 	bl	8002964 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800234e:	f7ff fded 	bl	8001f2c <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	f241 3288 	movw	r2, #5000	; 0x1388
 800235c:	4293      	cmp	r3, r2
 800235e:	d90f      	bls.n	8002380 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002364:	6939      	ldr	r1, [r7, #16]
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 fd22 	bl	8002db0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e0ab      	b.n	80024d8 <HAL_ETH_Init+0x328>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0da      	beq.n	8002340 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800238a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800238e:	2100      	movs	r1, #0
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 fb4f 	bl	8002a34 <HAL_ETH_WritePHYRegister>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00b      	beq.n	80023b4 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80023a0:	6939      	ldr	r1, [r7, #16]
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 fd04 	bl	8002db0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80023b0:	2301      	movs	r3, #1
 80023b2:	e091      	b.n	80024d8 <HAL_ETH_Init+0x328>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80023b4:	f7ff fdba 	bl	8001f2c <HAL_GetTick>
 80023b8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	461a      	mov	r2, r3
 80023c0:	2101      	movs	r1, #1
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 face 	bl	8002964 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80023c8:	f7ff fdb0 	bl	8001f2c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d90f      	bls.n	80023fa <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80023de:	6939      	ldr	r1, [r7, #16]
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 fce5 	bl	8002db0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e06e      	b.n	80024d8 <HAL_ETH_Init+0x328>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f003 0320 	and.w	r3, r3, #32
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0da      	beq.n	80023ba <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002404:	f107 030c 	add.w	r3, r7, #12
 8002408:	461a      	mov	r2, r3
 800240a:	2110      	movs	r1, #16
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 faa9 	bl	8002964 <HAL_ETH_ReadPHYRegister>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00b      	beq.n	8002430 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800241c:	6939      	ldr	r1, [r7, #16]
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 fcc6 	bl	8002db0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800242c:	2301      	movs	r3, #1
 800242e:	e053      	b.n	80024d8 <HAL_ETH_Init+0x328>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	2b00      	cmp	r3, #0
 8002438:	d012      	beq.n	8002460 <HAL_ETH_Init+0x2b0>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	e010      	b.n	8002466 <HAL_ETH_Init+0x2b6>
 8002444:	03938700 	.word	0x03938700
 8002448:	40023800 	.word	0x40023800
 800244c:	40013800 	.word	0x40013800
 8002450:	01312cff 	.word	0x01312cff
 8002454:	02160ebf 	.word	0x02160ebf
 8002458:	05f5e0ff 	.word	0x05f5e0ff
 800245c:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_ETH_Init+0x2c8>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	609a      	str	r2, [r3, #8]
 8002476:	e026      	b.n	80024c6 <HAL_ETH_Init+0x316>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	e021      	b.n	80024c6 <HAL_ETH_Init+0x316>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	08db      	lsrs	r3, r3, #3
 8002488:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	085b      	lsrs	r3, r3, #1
 8002490:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002492:	4313      	orrs	r3, r2
 8002494:	b29b      	uxth	r3, r3
 8002496:	461a      	mov	r2, r3
 8002498:	2100      	movs	r1, #0
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 faca 	bl	8002a34 <HAL_ETH_WritePHYRegister>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00b      	beq.n	80024be <HAL_ETH_Init+0x30e>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80024aa:	6939      	ldr	r1, [r7, #16]
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 fc7f 	bl	8002db0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e00c      	b.n	80024d8 <HAL_ETH_Init+0x328>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80024be:	f640 70ff 	movw	r0, #4095	; 0xfff
 80024c2:	f7ff fd3f 	bl	8001f44 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80024c6:	6939      	ldr	r1, [r7, #16]
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 fc71 	bl	8002db0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3720      	adds	r7, #32
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d101      	bne.n	8002500 <HAL_ETH_DMATxDescListInit+0x20>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e051      	b.n	80025a4 <HAL_ETH_DMATxDescListInit+0xc4>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	e030      	b.n	800257e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	015b      	lsls	r3, r3, #5
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	4413      	add	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800252c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002534:	fb02 f303 	mul.w	r3, r2, r3
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	4413      	add	r3, r2
 800253c:	461a      	mov	r2, r3
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d105      	bne.n	8002556 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	3b01      	subs	r3, #1
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	429a      	cmp	r2, r3
 800255e:	d208      	bcs.n	8002572 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	3301      	adds	r3, #1
 8002564:	015b      	lsls	r3, r3, #5
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	4413      	add	r3, r2
 800256a:	461a      	mov	r2, r3
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	60da      	str	r2, [r3, #12]
 8002570:	e002      	b.n	8002578 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	3301      	adds	r3, #1
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d3ca      	bcc.n	800251c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002590:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	371c      	adds	r7, #28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b087      	sub	sp, #28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
 80025bc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <HAL_ETH_DMARxDescListInit+0x20>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e055      	b.n	800267c <HAL_ETH_DMARxDescListInit+0xcc>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]
 80025ea:	e034      	b.n	8002656 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	015b      	lsls	r3, r3, #5
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	4413      	add	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80025fc:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002604:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800260c:	fb02 f303 	mul.w	r3, r2, r3
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	4413      	add	r3, r2
 8002614:	461a      	mov	r2, r3
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d105      	bne.n	800262e <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	3b01      	subs	r3, #1
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	429a      	cmp	r2, r3
 8002636:	d208      	bcs.n	800264a <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	3301      	adds	r3, #1
 800263c:	015b      	lsls	r3, r3, #5
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	4413      	add	r3, r2
 8002642:	461a      	mov	r2, r3
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	60da      	str	r2, [r3, #12]
 8002648:	e002      	b.n	8002650 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	3301      	adds	r3, #1
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d3c6      	bcc.n	80025ec <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002668:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	371c      	adds	r7, #28
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002688:	b480      	push	{r7}
 800268a:	b087      	sub	sp, #28
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_ETH_TransmitFrame+0x24>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e0cc      	b.n	8002846 <HAL_ETH_TransmitFrame+0x1be>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80026d2:	2301      	movs	r3, #1
 80026d4:	e0b7      	b.n	8002846 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	da09      	bge.n	80026f4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2212      	movs	r2, #18
 80026e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0a8      	b.n	8002846 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d915      	bls.n	800272a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	4a54      	ldr	r2, [pc, #336]	; (8002854 <HAL_ETH_TransmitFrame+0x1cc>)
 8002702:	fba2 2303 	umull	r2, r3, r2, r3
 8002706:	0a9b      	lsrs	r3, r3, #10
 8002708:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	4b51      	ldr	r3, [pc, #324]	; (8002854 <HAL_ETH_TransmitFrame+0x1cc>)
 800270e:	fba3 1302 	umull	r1, r3, r3, r2
 8002712:	0a9b      	lsrs	r3, r3, #10
 8002714:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d005      	beq.n	800272e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	3301      	adds	r3, #1
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	e001      	b.n	800272e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800272a:	2301      	movs	r3, #1
 800272c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d11c      	bne.n	800276e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002742:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800274e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800275e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	461a      	mov	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	62da      	str	r2, [r3, #44]	; 0x2c
 800276c:	e04b      	b.n	8002806 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	e044      	b.n	80027fe <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002782:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d107      	bne.n	800279a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002798:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80027a2:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d116      	bne.n	80027dc <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80027bc:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	4a25      	ldr	r2, [pc, #148]	; (8002858 <HAL_ETH_TransmitFrame+0x1d0>)
 80027c2:	fb03 f202 	mul.w	r2, r3, r2
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	4413      	add	r3, r2
 80027ca:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80027ce:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80027da:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80027ea:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	461a      	mov	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	3301      	adds	r3, #1
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	429a      	cmp	r2, r3
 8002804:	d3b6      	bcc.n	8002774 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00d      	beq.n	8002834 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002820:	461a      	mov	r2, r3
 8002822:	2304      	movs	r3, #4
 8002824:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800282e:	461a      	mov	r2, r3
 8002830:	2300      	movs	r3, #0
 8002832:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	371c      	adds	r7, #28
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	ac02b00b 	.word	0xac02b00b
 8002858:	fffffa0c 	.word	0xfffffa0c

0800285c <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800286e:	2b01      	cmp	r3, #1
 8002870:	d101      	bne.n	8002876 <HAL_ETH_GetReceivedFrame+0x1a>
 8002872:	2302      	movs	r3, #2
 8002874:	e070      	b.n	8002958 <HAL_ETH_GetReceivedFrame+0xfc>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2202      	movs	r2, #2
 8002882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	db5a      	blt.n	8002946 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289a:	2b00      	cmp	r3, #0
 800289c:	d030      	beq.n	8002900 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d103      	bne.n	80028b8 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	0c1b      	lsrs	r3, r3, #16
 80028c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80028cc:	3b04      	subs	r3, #4
 80028ce:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	461a      	mov	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	e02b      	b.n	8002958 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800290a:	2b00      	cmp	r3, #0
 800290c:	d010      	beq.n	8002930 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	461a      	mov	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	629a      	str	r2, [r3, #40]	; 0x28
 800292e:	e00a      	b.n	8002946 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	461a      	mov	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
}
 8002958:	4618      	mov	r0, r3
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	460b      	mov	r3, r1
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b82      	cmp	r3, #130	; 0x82
 8002984:	d101      	bne.n	800298a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002986:	2302      	movs	r3, #2
 8002988:	e050      	b.n	8002a2c <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2282      	movs	r2, #130	; 0x82
 800298e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f003 031c 	and.w	r3, r3, #28
 80029a0:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8a1b      	ldrh	r3, [r3, #16]
 80029a6:	02db      	lsls	r3, r3, #11
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80029b0:	897b      	ldrh	r3, [r7, #10]
 80029b2:	019b      	lsls	r3, r3, #6
 80029b4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f023 0302 	bic.w	r3, r3, #2
 80029c4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80029d6:	f7ff faa9 	bl	8001f2c <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80029dc:	e015      	b.n	8002a0a <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80029de:	f7ff faa5 	bl	8001f2c <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ec:	d309      	bcc.n	8002a02 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e014      	b.n	8002a2c <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1e4      	bne.n	80029de <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b42      	cmp	r3, #66	; 0x42
 8002a54:	d101      	bne.n	8002a5a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002a56:	2302      	movs	r3, #2
 8002a58:	e04e      	b.n	8002af8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2242      	movs	r2, #66	; 0x42
 8002a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f003 031c 	and.w	r3, r3, #28
 8002a70:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8a1b      	ldrh	r3, [r3, #16]
 8002a76:	02db      	lsls	r3, r3, #11
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002a80:	897b      	ldrh	r3, [r7, #10]
 8002a82:	019b      	lsls	r3, r3, #6
 8002a84:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f043 0302 	orr.w	r3, r3, #2
 8002a94:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002ab0:	f7ff fa3c 	bl	8001f2c <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ab6:	e015      	b.n	8002ae4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002ab8:	f7ff fa38 	bl	8001f2c <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac6:	d309      	bcc.n	8002adc <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e00d      	b.n	8002af8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1e4      	bne.n	8002ab8 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <HAL_ETH_Start+0x16>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e01f      	b.n	8002b56 <HAL_ETH_Start+0x56>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2202      	movs	r2, #2
 8002b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 fb40 	bl	80031ac <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 fb77 	bl	8003220 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fc06 	bl	8003344 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 fbab 	bl	8003294 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 fbd4 	bl	80032ec <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_ETH_Stop+0x16>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e01f      	b.n	8002bb4 <HAL_ETH_Stop+0x56>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fb9b 	bl	80032c0 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 fbc4 	bl	8003318 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 fb62 	bl	800325a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fbd4 	bl	8003344 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 fb22 	bl	80031e6 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_ETH_ConfigMAC+0x1c>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e0e4      	b.n	8002da2 <HAL_ETH_ConfigMAC+0x1e6>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2202      	movs	r2, #2
 8002be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 80b1 	beq.w	8002d52 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4b6c      	ldr	r3, [pc, #432]	; (8002dac <HAL_ETH_ConfigMAC+0x1f0>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002c08:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002c0e:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002c14:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002c1a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002c20:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002c26:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002c2c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002c32:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002c38:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002c3e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002c44:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002c4a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c62:	2001      	movs	r0, #1
 8002c64:	f7ff f96e 	bl	8001f44 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002c78:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002c7e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002c84:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8002c8a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002c90:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002c96:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002ca2:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002ca4:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cae:	2001      	movs	r0, #1
 8002cb0:	f7ff f948 	bl	8001f44 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002cc4:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002cce:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002cde:	4013      	ands	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002cec:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002cf2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002cf8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002cfe:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002d04:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d1c:	2001      	movs	r0, #1
 8002d1e:	f7ff f911 	bl	8001f44 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d42:	2001      	movs	r0, #1
 8002d44:	f7ff f8fe 	bl	8001f44 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	61da      	str	r2, [r3, #28]
 8002d50:	e01e      	b.n	8002d90 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002d60:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d82:	2001      	movs	r0, #1
 8002d84:	f7ff f8de 	bl	8001f44 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	ff20810f 	.word	0xff20810f

08002db0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b0b0      	sub	sp, #192	; 0xc0
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d007      	beq.n	8002dd6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dcc:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002dd4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002dde:	2300      	movs	r3, #0
 8002de0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002de2:	2300      	movs	r3, #0
 8002de4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002de6:	2300      	movs	r3, #0
 8002de8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002dea:	2300      	movs	r3, #0
 8002dec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d103      	bne.n	8002dfe <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002df6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dfa:	663b      	str	r3, [r7, #96]	; 0x60
 8002dfc:	e001      	b.n	8002e02 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002e02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e06:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002e10:	2300      	movs	r3, #0
 8002e12:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002e14:	2300      	movs	r3, #0
 8002e16:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002e1c:	2340      	movs	r3, #64	; 0x40
 8002e1e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002e20:	2300      	movs	r3, #0
 8002e22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002e32:	2300      	movs	r3, #0
 8002e34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002e50:	2380      	movs	r3, #128	; 0x80
 8002e52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002e56:	2300      	movs	r3, #0
 8002e58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002e62:	2300      	movs	r3, #0
 8002e64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002e84:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e88:	4ba9      	ldr	r3, [pc, #676]	; (8003130 <ETH_MACDMAConfig+0x380>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002e90:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002e94:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002e98:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002e9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002e9c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002ea2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002ea4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002ea6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002eaa:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002eb0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002eb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002eb4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002eb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002eb8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002eba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002ebc:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002ec0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002ec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002ec4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002ec6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ed8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	f7ff f82d 	bl	8001f44 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ef2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002ef4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002ef6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002ef8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002efa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002efc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002efe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002f02:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002f04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002f08:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002f0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002f0e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002f14:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002f18:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002f20:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002f22:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f2e:	2001      	movs	r0, #1
 8002f30:	f7ff f808 	bl	8001f44 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f3c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f46:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002f50:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002f5c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f60:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002f64:	4013      	ands	r3, r2
 8002f66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002f6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f6e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002f70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002f74:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002f76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002f7a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002f7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002f80:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002f82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002f86:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002f88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002f8c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002f8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002fa0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fac:	2001      	movs	r0, #1
 8002fae:	f7fe ffc9 	bl	8001f44 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002fba:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002fbc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002fc0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fd6:	2001      	movs	r0, #1
 8002fd8:	f7fe ffb4 	bl	8001f44 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002fe4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002fea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fee:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002ff4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ff8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003002:	2300      	movs	r3, #0
 8003004:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003006:	2300      	movs	r3, #0
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800300a:	2304      	movs	r3, #4
 800300c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800300e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003012:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003014:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003018:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800301a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800301e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003020:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003024:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800302a:	2300      	movs	r3, #0
 800302c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800302e:	2300      	movs	r3, #0
 8003030:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8003040:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003044:	4b3b      	ldr	r3, [pc, #236]	; (8003134 <ETH_MACDMAConfig+0x384>)
 8003046:	4013      	ands	r3, r2
 8003048:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800304c:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800304e:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003050:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003052:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003054:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003056:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003058:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800305a:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800305c:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800305e:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003060:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003062:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003064:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003068:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800306a:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800306c:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800306e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003072:	4313      	orrs	r3, r2
 8003074:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003080:	461a      	mov	r2, r3
 8003082:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003086:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003096:	2001      	movs	r0, #1
 8003098:	f7fe ff54 	bl	8001f44 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030a4:	461a      	mov	r2, r3
 80030a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80030aa:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80030ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80030ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80030b0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80030b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80030b4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80030b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80030b8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80030ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80030bc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80030be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030c0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80030c2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80030c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80030c6:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030d4:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80030e4:	2001      	movs	r0, #1
 80030e6:	f7fe ff2d 	bl	8001f44 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030f2:	461a      	mov	r2, r3
 80030f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80030f8:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d10b      	bne.n	800311a <ETH_MACDMAConfig+0x36a>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800310a:	69d9      	ldr	r1, [r3, #28]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4b09      	ldr	r3, [pc, #36]	; (8003138 <ETH_MACDMAConfig+0x388>)
 8003112:	430b      	orrs	r3, r1
 8003114:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003118:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	461a      	mov	r2, r3
 8003120:	2100      	movs	r1, #0
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f80a 	bl	800313c <ETH_MACAddressConfig>
}
 8003128:	bf00      	nop
 800312a:	37c0      	adds	r7, #192	; 0xc0
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	ff20810f 	.word	0xff20810f
 8003134:	f8de3f23 	.word	0xf8de3f23
 8003138:	00010040 	.word	0x00010040

0800313c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3305      	adds	r3, #5
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	3204      	adds	r2, #4
 8003154:	7812      	ldrb	r2, [r2, #0]
 8003156:	4313      	orrs	r3, r2
 8003158:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <ETH_MACAddressConfig+0x68>)
 800315e:	4413      	add	r3, r2
 8003160:	461a      	mov	r2, r3
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3303      	adds	r3, #3
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	061a      	lsls	r2, r3, #24
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3302      	adds	r3, #2
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	041b      	lsls	r3, r3, #16
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3301      	adds	r3, #1
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	021b      	lsls	r3, r3, #8
 8003180:	4313      	orrs	r3, r2
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	7812      	ldrb	r2, [r2, #0]
 8003186:	4313      	orrs	r3, r2
 8003188:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <ETH_MACAddressConfig+0x6c>)
 800318e:	4413      	add	r3, r2
 8003190:	461a      	mov	r2, r3
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	6013      	str	r3, [r2, #0]
}
 8003196:	bf00      	nop
 8003198:	371c      	adds	r7, #28
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40028040 	.word	0x40028040
 80031a8:	40028044 	.word	0x40028044

080031ac <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80031b4:	2300      	movs	r3, #0
 80031b6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0208 	orr.w	r2, r2, #8
 80031c6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80031d0:	2001      	movs	r0, #1
 80031d2:	f7fe feb7 	bl	8001f44 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	601a      	str	r2, [r3, #0]
}
 80031de:	bf00      	nop
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b084      	sub	sp, #16
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0208 	bic.w	r2, r2, #8
 8003200:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800320a:	2001      	movs	r0, #1
 800320c:	f7fe fe9a 	bl	8001f44 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	601a      	str	r2, [r3, #0]
}
 8003218:	bf00      	nop
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003228:	2300      	movs	r3, #0
 800322a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0204 	orr.w	r2, r2, #4
 800323a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003244:	2001      	movs	r0, #1
 8003246:	f7fe fe7d 	bl	8001f44 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	601a      	str	r2, [r3, #0]
}
 8003252:	bf00      	nop
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800325a:	b580      	push	{r7, lr}
 800325c:	b084      	sub	sp, #16
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0204 	bic.w	r2, r2, #4
 8003274:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800327e:	2001      	movs	r0, #1
 8003280:	f7fe fe60 	bl	8001f44 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	601a      	str	r2, [r3, #0]
}
 800328c:	bf00      	nop
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6812      	ldr	r2, [r2, #0]
 80032aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80032ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80032b2:	6193      	str	r3, [r2, #24]
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6812      	ldr	r2, [r2, #0]
 80032d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80032de:	6193      	str	r3, [r2, #24]
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6812      	ldr	r2, [r2, #0]
 8003302:	f043 0302 	orr.w	r3, r3, #2
 8003306:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800330a:	6193      	str	r3, [r2, #24]
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6812      	ldr	r2, [r2, #0]
 800332e:	f023 0302 	bic.w	r3, r3, #2
 8003332:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003336:	6193      	str	r3, [r2, #24]
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6812      	ldr	r2, [r2, #0]
 800335e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003362:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003366:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003374:	2001      	movs	r0, #1
 8003376:	f7fe fde5 	bl	8001f44 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003384:	6193      	str	r3, [r2, #24]
}
 8003386:	bf00      	nop
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003390:	b480      	push	{r7}
 8003392:	b089      	sub	sp, #36	; 0x24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800339a:	2300      	movs	r3, #0
 800339c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80033a2:	2300      	movs	r3, #0
 80033a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80033aa:	2300      	movs	r3, #0
 80033ac:	61fb      	str	r3, [r7, #28]
 80033ae:	e175      	b.n	800369c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80033b0:	2201      	movs	r2, #1
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	4013      	ands	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	f040 8164 	bne.w	8003696 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d005      	beq.n	80033e6 <HAL_GPIO_Init+0x56>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d130      	bne.n	8003448 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	2203      	movs	r2, #3
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43db      	mvns	r3, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4013      	ands	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4313      	orrs	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800341c:	2201      	movs	r2, #1
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4013      	ands	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	091b      	lsrs	r3, r3, #4
 8003432:	f003 0201 	and.w	r2, r3, #1
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4313      	orrs	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	2b03      	cmp	r3, #3
 8003452:	d017      	beq.n	8003484 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	2203      	movs	r2, #3
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d123      	bne.n	80034d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	08da      	lsrs	r2, r3, #3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3208      	adds	r2, #8
 8003498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800349c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	220f      	movs	r2, #15
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	4013      	ands	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	08da      	lsrs	r2, r3, #3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3208      	adds	r2, #8
 80034d2:	69b9      	ldr	r1, [r7, #24]
 80034d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	2203      	movs	r2, #3
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4013      	ands	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0203 	and.w	r2, r3, #3
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	4313      	orrs	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 80be 	beq.w	8003696 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800351a:	4b66      	ldr	r3, [pc, #408]	; (80036b4 <HAL_GPIO_Init+0x324>)
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	4a65      	ldr	r2, [pc, #404]	; (80036b4 <HAL_GPIO_Init+0x324>)
 8003520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003524:	6453      	str	r3, [r2, #68]	; 0x44
 8003526:	4b63      	ldr	r3, [pc, #396]	; (80036b4 <HAL_GPIO_Init+0x324>)
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003532:	4a61      	ldr	r2, [pc, #388]	; (80036b8 <HAL_GPIO_Init+0x328>)
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	089b      	lsrs	r3, r3, #2
 8003538:	3302      	adds	r3, #2
 800353a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800353e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	220f      	movs	r2, #15
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43db      	mvns	r3, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4013      	ands	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a58      	ldr	r2, [pc, #352]	; (80036bc <HAL_GPIO_Init+0x32c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d037      	beq.n	80035ce <HAL_GPIO_Init+0x23e>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a57      	ldr	r2, [pc, #348]	; (80036c0 <HAL_GPIO_Init+0x330>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d031      	beq.n	80035ca <HAL_GPIO_Init+0x23a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a56      	ldr	r2, [pc, #344]	; (80036c4 <HAL_GPIO_Init+0x334>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d02b      	beq.n	80035c6 <HAL_GPIO_Init+0x236>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a55      	ldr	r2, [pc, #340]	; (80036c8 <HAL_GPIO_Init+0x338>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d025      	beq.n	80035c2 <HAL_GPIO_Init+0x232>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a54      	ldr	r2, [pc, #336]	; (80036cc <HAL_GPIO_Init+0x33c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d01f      	beq.n	80035be <HAL_GPIO_Init+0x22e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a53      	ldr	r2, [pc, #332]	; (80036d0 <HAL_GPIO_Init+0x340>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d019      	beq.n	80035ba <HAL_GPIO_Init+0x22a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a52      	ldr	r2, [pc, #328]	; (80036d4 <HAL_GPIO_Init+0x344>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d013      	beq.n	80035b6 <HAL_GPIO_Init+0x226>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a51      	ldr	r2, [pc, #324]	; (80036d8 <HAL_GPIO_Init+0x348>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d00d      	beq.n	80035b2 <HAL_GPIO_Init+0x222>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a50      	ldr	r2, [pc, #320]	; (80036dc <HAL_GPIO_Init+0x34c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d007      	beq.n	80035ae <HAL_GPIO_Init+0x21e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a4f      	ldr	r2, [pc, #316]	; (80036e0 <HAL_GPIO_Init+0x350>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d101      	bne.n	80035aa <HAL_GPIO_Init+0x21a>
 80035a6:	2309      	movs	r3, #9
 80035a8:	e012      	b.n	80035d0 <HAL_GPIO_Init+0x240>
 80035aa:	230a      	movs	r3, #10
 80035ac:	e010      	b.n	80035d0 <HAL_GPIO_Init+0x240>
 80035ae:	2308      	movs	r3, #8
 80035b0:	e00e      	b.n	80035d0 <HAL_GPIO_Init+0x240>
 80035b2:	2307      	movs	r3, #7
 80035b4:	e00c      	b.n	80035d0 <HAL_GPIO_Init+0x240>
 80035b6:	2306      	movs	r3, #6
 80035b8:	e00a      	b.n	80035d0 <HAL_GPIO_Init+0x240>
 80035ba:	2305      	movs	r3, #5
 80035bc:	e008      	b.n	80035d0 <HAL_GPIO_Init+0x240>
 80035be:	2304      	movs	r3, #4
 80035c0:	e006      	b.n	80035d0 <HAL_GPIO_Init+0x240>
 80035c2:	2303      	movs	r3, #3
 80035c4:	e004      	b.n	80035d0 <HAL_GPIO_Init+0x240>
 80035c6:	2302      	movs	r3, #2
 80035c8:	e002      	b.n	80035d0 <HAL_GPIO_Init+0x240>
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <HAL_GPIO_Init+0x240>
 80035ce:	2300      	movs	r3, #0
 80035d0:	69fa      	ldr	r2, [r7, #28]
 80035d2:	f002 0203 	and.w	r2, r2, #3
 80035d6:	0092      	lsls	r2, r2, #2
 80035d8:	4093      	lsls	r3, r2
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4313      	orrs	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80035e0:	4935      	ldr	r1, [pc, #212]	; (80036b8 <HAL_GPIO_Init+0x328>)
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	089b      	lsrs	r3, r3, #2
 80035e6:	3302      	adds	r3, #2
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035ee:	4b3d      	ldr	r3, [pc, #244]	; (80036e4 <HAL_GPIO_Init+0x354>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	43db      	mvns	r3, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4013      	ands	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	4313      	orrs	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003612:	4a34      	ldr	r2, [pc, #208]	; (80036e4 <HAL_GPIO_Init+0x354>)
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003618:	4b32      	ldr	r3, [pc, #200]	; (80036e4 <HAL_GPIO_Init+0x354>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	43db      	mvns	r3, r3
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	4013      	ands	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800363c:	4a29      	ldr	r2, [pc, #164]	; (80036e4 <HAL_GPIO_Init+0x354>)
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003642:	4b28      	ldr	r3, [pc, #160]	; (80036e4 <HAL_GPIO_Init+0x354>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	43db      	mvns	r3, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4013      	ands	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003666:	4a1f      	ldr	r2, [pc, #124]	; (80036e4 <HAL_GPIO_Init+0x354>)
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800366c:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <HAL_GPIO_Init+0x354>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	43db      	mvns	r3, r3
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4013      	ands	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003690:	4a14      	ldr	r2, [pc, #80]	; (80036e4 <HAL_GPIO_Init+0x354>)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	3301      	adds	r3, #1
 800369a:	61fb      	str	r3, [r7, #28]
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	2b0f      	cmp	r3, #15
 80036a0:	f67f ae86 	bls.w	80033b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80036a4:	bf00      	nop
 80036a6:	bf00      	nop
 80036a8:	3724      	adds	r7, #36	; 0x24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	40023800 	.word	0x40023800
 80036b8:	40013800 	.word	0x40013800
 80036bc:	40020000 	.word	0x40020000
 80036c0:	40020400 	.word	0x40020400
 80036c4:	40020800 	.word	0x40020800
 80036c8:	40020c00 	.word	0x40020c00
 80036cc:	40021000 	.word	0x40021000
 80036d0:	40021400 	.word	0x40021400
 80036d4:	40021800 	.word	0x40021800
 80036d8:	40021c00 	.word	0x40021c00
 80036dc:	40022000 	.word	0x40022000
 80036e0:	40022400 	.word	0x40022400
 80036e4:	40013c00 	.word	0x40013c00

080036e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	807b      	strh	r3, [r7, #2]
 80036f4:	4613      	mov	r3, r2
 80036f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036f8:	787b      	ldrb	r3, [r7, #1]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036fe:	887a      	ldrh	r2, [r7, #2]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003704:	e003      	b.n	800370e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003706:	887b      	ldrh	r3, [r7, #2]
 8003708:	041a      	lsls	r2, r3, #16
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	619a      	str	r2, [r3, #24]
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
	...

0800371c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e07f      	b.n	800382e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d106      	bne.n	8003748 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fe f8b4 	bl	80018b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2224      	movs	r2, #36	; 0x24
 800374c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0201 	bic.w	r2, r2, #1
 800375e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800376c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800377c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d107      	bne.n	8003796 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	e006      	b.n	80037a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80037a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d104      	bne.n	80037b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6859      	ldr	r1, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4b1d      	ldr	r3, [pc, #116]	; (8003838 <HAL_I2C_Init+0x11c>)
 80037c2:	430b      	orrs	r3, r1
 80037c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691a      	ldr	r2, [r3, #16]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	69d9      	ldr	r1, [r3, #28]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a1a      	ldr	r2, [r3, #32]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	02008000 	.word	0x02008000

0800383c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af02      	add	r7, sp, #8
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	607a      	str	r2, [r7, #4]
 8003846:	461a      	mov	r2, r3
 8003848:	460b      	mov	r3, r1
 800384a:	817b      	strh	r3, [r7, #10]
 800384c:	4613      	mov	r3, r2
 800384e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b20      	cmp	r3, #32
 800385a:	f040 80da 	bne.w	8003a12 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_I2C_Master_Transmit+0x30>
 8003868:	2302      	movs	r3, #2
 800386a:	e0d3      	b.n	8003a14 <HAL_I2C_Master_Transmit+0x1d8>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003874:	f7fe fb5a 	bl	8001f2c <HAL_GetTick>
 8003878:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	2319      	movs	r3, #25
 8003880:	2201      	movs	r2, #1
 8003882:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 f9e6 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e0be      	b.n	8003a14 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2221      	movs	r2, #33	; 0x21
 800389a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2210      	movs	r2, #16
 80038a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	893a      	ldrh	r2, [r7, #8]
 80038b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2bff      	cmp	r3, #255	; 0xff
 80038c6:	d90e      	bls.n	80038e6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	22ff      	movs	r2, #255	; 0xff
 80038cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	8979      	ldrh	r1, [r7, #10]
 80038d6:	4b51      	ldr	r3, [pc, #324]	; (8003a1c <HAL_I2C_Master_Transmit+0x1e0>)
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 fbdc 	bl	800409c <I2C_TransferConfig>
 80038e4:	e06c      	b.n	80039c0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f4:	b2da      	uxtb	r2, r3
 80038f6:	8979      	ldrh	r1, [r7, #10]
 80038f8:	4b48      	ldr	r3, [pc, #288]	; (8003a1c <HAL_I2C_Master_Transmit+0x1e0>)
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f000 fbcb 	bl	800409c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003906:	e05b      	b.n	80039c0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	6a39      	ldr	r1, [r7, #32]
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f000 f9e3 	bl	8003cd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e07b      	b.n	8003a14 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	781a      	ldrb	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d034      	beq.n	80039c0 <HAL_I2C_Master_Transmit+0x184>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395a:	2b00      	cmp	r3, #0
 800395c:	d130      	bne.n	80039c0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	2200      	movs	r2, #0
 8003966:	2180      	movs	r1, #128	; 0x80
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 f975 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e04d      	b.n	8003a14 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397c:	b29b      	uxth	r3, r3
 800397e:	2bff      	cmp	r3, #255	; 0xff
 8003980:	d90e      	bls.n	80039a0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	22ff      	movs	r2, #255	; 0xff
 8003986:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398c:	b2da      	uxtb	r2, r3
 800398e:	8979      	ldrh	r1, [r7, #10]
 8003990:	2300      	movs	r3, #0
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 fb7f 	bl	800409c <I2C_TransferConfig>
 800399e:	e00f      	b.n	80039c0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	8979      	ldrh	r1, [r7, #10]
 80039b2:	2300      	movs	r3, #0
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 fb6e 	bl	800409c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d19e      	bne.n	8003908 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	6a39      	ldr	r1, [r7, #32]
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 f9c2 	bl	8003d58 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e01a      	b.n	8003a14 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2220      	movs	r2, #32
 80039e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6859      	ldr	r1, [r3, #4]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <HAL_I2C_Master_Transmit+0x1e4>)
 80039f2:	400b      	ands	r3, r1
 80039f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	e000      	b.n	8003a14 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003a12:	2302      	movs	r3, #2
  }
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	80002000 	.word	0x80002000
 8003a20:	fe00e800 	.word	0xfe00e800

08003a24 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	607a      	str	r2, [r7, #4]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	460b      	mov	r3, r1
 8003a32:	817b      	strh	r3, [r7, #10]
 8003a34:	4613      	mov	r3, r2
 8003a36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	f040 80db 	bne.w	8003bfc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d101      	bne.n	8003a54 <HAL_I2C_Master_Receive+0x30>
 8003a50:	2302      	movs	r3, #2
 8003a52:	e0d4      	b.n	8003bfe <HAL_I2C_Master_Receive+0x1da>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a5c:	f7fe fa66 	bl	8001f2c <HAL_GetTick>
 8003a60:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	2319      	movs	r3, #25
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f8f2 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e0bf      	b.n	8003bfe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2222      	movs	r2, #34	; 0x22
 8003a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2210      	movs	r2, #16
 8003a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	893a      	ldrh	r2, [r7, #8]
 8003a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	2bff      	cmp	r3, #255	; 0xff
 8003aae:	d90e      	bls.n	8003ace <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	22ff      	movs	r2, #255	; 0xff
 8003ab4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	8979      	ldrh	r1, [r7, #10]
 8003abe:	4b52      	ldr	r3, [pc, #328]	; (8003c08 <HAL_I2C_Master_Receive+0x1e4>)
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 fae8 	bl	800409c <I2C_TransferConfig>
 8003acc:	e06d      	b.n	8003baa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	8979      	ldrh	r1, [r7, #10]
 8003ae0:	4b49      	ldr	r3, [pc, #292]	; (8003c08 <HAL_I2C_Master_Receive+0x1e4>)
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 fad7 	bl	800409c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003aee:	e05c      	b.n	8003baa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	6a39      	ldr	r1, [r7, #32]
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 f96b 	bl	8003dd0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e07c      	b.n	8003bfe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b20:	3b01      	subs	r3, #1
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d034      	beq.n	8003baa <HAL_I2C_Master_Receive+0x186>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d130      	bne.n	8003baa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	2180      	movs	r1, #128	; 0x80
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 f880 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e04d      	b.n	8003bfe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2bff      	cmp	r3, #255	; 0xff
 8003b6a:	d90e      	bls.n	8003b8a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	22ff      	movs	r2, #255	; 0xff
 8003b70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	8979      	ldrh	r1, [r7, #10]
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 fa8a 	bl	800409c <I2C_TransferConfig>
 8003b88:	e00f      	b.n	8003baa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	8979      	ldrh	r1, [r7, #10]
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 fa79 	bl	800409c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d19d      	bne.n	8003af0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	6a39      	ldr	r1, [r7, #32]
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 f8cd 	bl	8003d58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e01a      	b.n	8003bfe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6859      	ldr	r1, [r3, #4]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <HAL_I2C_Master_Receive+0x1e8>)
 8003bdc:	400b      	ands	r3, r1
 8003bde:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	e000      	b.n	8003bfe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003bfc:	2302      	movs	r3, #2
  }
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	80002400 	.word	0x80002400
 8003c0c:	fe00e800 	.word	0xfe00e800

08003c10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d103      	bne.n	8003c2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d007      	beq.n	8003c4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0201 	orr.w	r2, r2, #1
 8003c4a:	619a      	str	r2, [r3, #24]
  }
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	4613      	mov	r3, r2
 8003c66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c68:	e022      	b.n	8003cb0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c70:	d01e      	beq.n	8003cb0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c72:	f7fe f95b 	bl	8001f2c <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d302      	bcc.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d113      	bne.n	8003cb0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8c:	f043 0220 	orr.w	r2, r3, #32
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e00f      	b.n	8003cd0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699a      	ldr	r2, [r3, #24]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	bf0c      	ite	eq
 8003cc0:	2301      	moveq	r3, #1
 8003cc2:	2300      	movne	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	79fb      	ldrb	r3, [r7, #7]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d0cd      	beq.n	8003c6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ce4:	e02c      	b.n	8003d40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	68b9      	ldr	r1, [r7, #8]
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f8ea 	bl	8003ec4 <I2C_IsErrorOccurred>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e02a      	b.n	8003d50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d00:	d01e      	beq.n	8003d40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d02:	f7fe f913 	bl	8001f2c <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d302      	bcc.n	8003d18 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d113      	bne.n	8003d40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1c:	f043 0220 	orr.w	r2, r3, #32
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e007      	b.n	8003d50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d1cb      	bne.n	8003ce6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d64:	e028      	b.n	8003db8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	68b9      	ldr	r1, [r7, #8]
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 f8aa 	bl	8003ec4 <I2C_IsErrorOccurred>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e026      	b.n	8003dc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d7a:	f7fe f8d7 	bl	8001f2c <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d302      	bcc.n	8003d90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d113      	bne.n	8003db8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d94:	f043 0220 	orr.w	r2, r3, #32
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e007      	b.n	8003dc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	f003 0320 	and.w	r3, r3, #32
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	d1cf      	bne.n	8003d66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ddc:	e064      	b.n	8003ea8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	68b9      	ldr	r1, [r7, #8]
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 f86e 	bl	8003ec4 <I2C_IsErrorOccurred>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e062      	b.n	8003eb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f003 0320 	and.w	r3, r3, #32
 8003dfc:	2b20      	cmp	r3, #32
 8003dfe:	d138      	bne.n	8003e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d105      	bne.n	8003e1a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003e16:	2300      	movs	r3, #0
 8003e18:	e04e      	b.n	8003eb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	f003 0310 	and.w	r3, r3, #16
 8003e24:	2b10      	cmp	r3, #16
 8003e26:	d107      	bne.n	8003e38 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2210      	movs	r2, #16
 8003e2e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2204      	movs	r2, #4
 8003e34:	645a      	str	r2, [r3, #68]	; 0x44
 8003e36:	e002      	b.n	8003e3e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2220      	movs	r2, #32
 8003e44:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6859      	ldr	r1, [r3, #4]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	4b1b      	ldr	r3, [pc, #108]	; (8003ec0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003e52:	400b      	ands	r3, r1
 8003e54:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e022      	b.n	8003eb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e72:	f7fe f85b 	bl	8001f2c <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d302      	bcc.n	8003e88 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10f      	bne.n	8003ea8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8c:	f043 0220 	orr.w	r2, r3, #32
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e007      	b.n	8003eb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d193      	bne.n	8003dde <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	fe00e800 	.word	0xfe00e800

08003ec4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08a      	sub	sp, #40	; 0x28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	f003 0310 	and.w	r3, r3, #16
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d075      	beq.n	8003fdc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2210      	movs	r2, #16
 8003ef6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ef8:	e056      	b.n	8003fa8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f00:	d052      	beq.n	8003fa8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f02:	f7fe f813 	bl	8001f2c <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d302      	bcc.n	8003f18 <I2C_IsErrorOccurred+0x54>
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d147      	bne.n	8003fa8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f22:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f2a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f3a:	d12e      	bne.n	8003f9a <I2C_IsErrorOccurred+0xd6>
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f42:	d02a      	beq.n	8003f9a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003f44:	7cfb      	ldrb	r3, [r7, #19]
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	d027      	beq.n	8003f9a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f58:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003f5a:	f7fd ffe7 	bl	8001f2c <HAL_GetTick>
 8003f5e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f60:	e01b      	b.n	8003f9a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003f62:	f7fd ffe3 	bl	8001f2c <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b19      	cmp	r3, #25
 8003f6e:	d914      	bls.n	8003f9a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f74:	f043 0220 	orr.w	r2, r3, #32
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	f003 0320 	and.w	r3, r3, #32
 8003fa4:	2b20      	cmp	r3, #32
 8003fa6:	d1dc      	bne.n	8003f62 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	f003 0320 	and.w	r3, r3, #32
 8003fb2:	2b20      	cmp	r3, #32
 8003fb4:	d003      	beq.n	8003fbe <I2C_IsErrorOccurred+0xfa>
 8003fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d09d      	beq.n	8003efa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d103      	bne.n	8003fce <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	f043 0304 	orr.w	r3, r3, #4
 8003fd4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00b      	beq.n	8004006 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ffe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00b      	beq.n	8004028 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	f043 0308 	orr.w	r3, r3, #8
 8004016:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004020:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00b      	beq.n	800404a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	f043 0302 	orr.w	r3, r3, #2
 8004038:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004042:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800404a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800404e:	2b00      	cmp	r3, #0
 8004050:	d01c      	beq.n	800408c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f7ff fddc 	bl	8003c10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6859      	ldr	r1, [r3, #4]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	4b0d      	ldr	r3, [pc, #52]	; (8004098 <I2C_IsErrorOccurred+0x1d4>)
 8004064:	400b      	ands	r3, r1
 8004066:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	431a      	orrs	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800408c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004090:	4618      	mov	r0, r3
 8004092:	3728      	adds	r7, #40	; 0x28
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	fe00e800 	.word	0xfe00e800

0800409c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	607b      	str	r3, [r7, #4]
 80040a6:	460b      	mov	r3, r1
 80040a8:	817b      	strh	r3, [r7, #10]
 80040aa:	4613      	mov	r3, r2
 80040ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040ae:	897b      	ldrh	r3, [r7, #10]
 80040b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040b4:	7a7b      	ldrb	r3, [r7, #9]
 80040b6:	041b      	lsls	r3, r3, #16
 80040b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040bc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040ca:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	0d5b      	lsrs	r3, r3, #21
 80040d6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80040da:	4b08      	ldr	r3, [pc, #32]	; (80040fc <I2C_TransferConfig+0x60>)
 80040dc:	430b      	orrs	r3, r1
 80040de:	43db      	mvns	r3, r3
 80040e0:	ea02 0103 	and.w	r1, r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80040ee:	bf00      	nop
 80040f0:	371c      	adds	r7, #28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	03ff63ff 	.word	0x03ff63ff

08004100 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b20      	cmp	r3, #32
 8004114:	d138      	bne.n	8004188 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004120:	2302      	movs	r3, #2
 8004122:	e032      	b.n	800418a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2224      	movs	r2, #36	; 0x24
 8004130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0201 	bic.w	r2, r2, #1
 8004142:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004152:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6819      	ldr	r1, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0201 	orr.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	e000      	b.n	800418a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004188:	2302      	movs	r3, #2
  }
}
 800418a:	4618      	mov	r0, r3
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004196:	b480      	push	{r7}
 8004198:	b085      	sub	sp, #20
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	d139      	bne.n	8004220 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d101      	bne.n	80041ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041b6:	2302      	movs	r3, #2
 80041b8:	e033      	b.n	8004222 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2224      	movs	r2, #36	; 0x24
 80041c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0201 	bic.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	021b      	lsls	r3, r3, #8
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2220      	movs	r2, #32
 8004210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800421c:	2300      	movs	r3, #0
 800421e:	e000      	b.n	8004222 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004220:	2302      	movs	r3, #2
  }
}
 8004222:	4618      	mov	r0, r3
 8004224:	3714      	adds	r7, #20
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
	...

08004230 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004234:	4b05      	ldr	r3, [pc, #20]	; (800424c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a04      	ldr	r2, [pc, #16]	; (800424c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800423a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800423e:	6013      	str	r3, [r2, #0]
}
 8004240:	bf00      	nop
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40007000 	.word	0x40007000

08004250 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004256:	2300      	movs	r3, #0
 8004258:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800425a:	4b23      	ldr	r3, [pc, #140]	; (80042e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	4a22      	ldr	r2, [pc, #136]	; (80042e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004264:	6413      	str	r3, [r2, #64]	; 0x40
 8004266:	4b20      	ldr	r3, [pc, #128]	; (80042e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004272:	4b1e      	ldr	r3, [pc, #120]	; (80042ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a1d      	ldr	r2, [pc, #116]	; (80042ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8004278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800427c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800427e:	f7fd fe55 	bl	8001f2c <HAL_GetTick>
 8004282:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004284:	e009      	b.n	800429a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004286:	f7fd fe51 	bl	8001f2c <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004294:	d901      	bls.n	800429a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e022      	b.n	80042e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800429a:	4b14      	ldr	r3, [pc, #80]	; (80042ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a6:	d1ee      	bne.n	8004286 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80042a8:	4b10      	ldr	r3, [pc, #64]	; (80042ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a0f      	ldr	r2, [pc, #60]	; (80042ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80042ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042b4:	f7fd fe3a 	bl	8001f2c <HAL_GetTick>
 80042b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042ba:	e009      	b.n	80042d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042bc:	f7fd fe36 	bl	8001f2c <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042ca:	d901      	bls.n	80042d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e007      	b.n	80042e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042d0:	4b06      	ldr	r3, [pc, #24]	; (80042ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042dc:	d1ee      	bne.n	80042bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40023800 	.word	0x40023800
 80042ec:	40007000 	.word	0x40007000

080042f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80042f8:	2300      	movs	r3, #0
 80042fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e29b      	b.n	800483e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 8087 	beq.w	8004422 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004314:	4b96      	ldr	r3, [pc, #600]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 030c 	and.w	r3, r3, #12
 800431c:	2b04      	cmp	r3, #4
 800431e:	d00c      	beq.n	800433a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004320:	4b93      	ldr	r3, [pc, #588]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 030c 	and.w	r3, r3, #12
 8004328:	2b08      	cmp	r3, #8
 800432a:	d112      	bne.n	8004352 <HAL_RCC_OscConfig+0x62>
 800432c:	4b90      	ldr	r3, [pc, #576]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004334:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004338:	d10b      	bne.n	8004352 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800433a:	4b8d      	ldr	r3, [pc, #564]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d06c      	beq.n	8004420 <HAL_RCC_OscConfig+0x130>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d168      	bne.n	8004420 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e275      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800435a:	d106      	bne.n	800436a <HAL_RCC_OscConfig+0x7a>
 800435c:	4b84      	ldr	r3, [pc, #528]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a83      	ldr	r2, [pc, #524]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 8004362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	e02e      	b.n	80043c8 <HAL_RCC_OscConfig+0xd8>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10c      	bne.n	800438c <HAL_RCC_OscConfig+0x9c>
 8004372:	4b7f      	ldr	r3, [pc, #508]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a7e      	ldr	r2, [pc, #504]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 8004378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	4b7c      	ldr	r3, [pc, #496]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a7b      	ldr	r2, [pc, #492]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 8004384:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	e01d      	b.n	80043c8 <HAL_RCC_OscConfig+0xd8>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004394:	d10c      	bne.n	80043b0 <HAL_RCC_OscConfig+0xc0>
 8004396:	4b76      	ldr	r3, [pc, #472]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a75      	ldr	r2, [pc, #468]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 800439c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	4b73      	ldr	r3, [pc, #460]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a72      	ldr	r2, [pc, #456]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 80043a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	e00b      	b.n	80043c8 <HAL_RCC_OscConfig+0xd8>
 80043b0:	4b6f      	ldr	r3, [pc, #444]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a6e      	ldr	r2, [pc, #440]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 80043b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	4b6c      	ldr	r3, [pc, #432]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a6b      	ldr	r2, [pc, #428]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 80043c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d013      	beq.n	80043f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d0:	f7fd fdac 	bl	8001f2c <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d8:	f7fd fda8 	bl	8001f2c <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b64      	cmp	r3, #100	; 0x64
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e229      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ea:	4b61      	ldr	r3, [pc, #388]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0f0      	beq.n	80043d8 <HAL_RCC_OscConfig+0xe8>
 80043f6:	e014      	b.n	8004422 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f8:	f7fd fd98 	bl	8001f2c <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004400:	f7fd fd94 	bl	8001f2c <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b64      	cmp	r3, #100	; 0x64
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e215      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004412:	4b57      	ldr	r3, [pc, #348]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f0      	bne.n	8004400 <HAL_RCC_OscConfig+0x110>
 800441e:	e000      	b.n	8004422 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d069      	beq.n	8004502 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800442e:	4b50      	ldr	r3, [pc, #320]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 030c 	and.w	r3, r3, #12
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00b      	beq.n	8004452 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800443a:	4b4d      	ldr	r3, [pc, #308]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f003 030c 	and.w	r3, r3, #12
 8004442:	2b08      	cmp	r3, #8
 8004444:	d11c      	bne.n	8004480 <HAL_RCC_OscConfig+0x190>
 8004446:	4b4a      	ldr	r3, [pc, #296]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d116      	bne.n	8004480 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004452:	4b47      	ldr	r3, [pc, #284]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d005      	beq.n	800446a <HAL_RCC_OscConfig+0x17a>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d001      	beq.n	800446a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e1e9      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800446a:	4b41      	ldr	r3, [pc, #260]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	493d      	ldr	r1, [pc, #244]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 800447a:	4313      	orrs	r3, r2
 800447c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800447e:	e040      	b.n	8004502 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d023      	beq.n	80044d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004488:	4b39      	ldr	r3, [pc, #228]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a38      	ldr	r2, [pc, #224]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004494:	f7fd fd4a 	bl	8001f2c <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800449c:	f7fd fd46 	bl	8001f2c <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e1c7      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ae:	4b30      	ldr	r3, [pc, #192]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0f0      	beq.n	800449c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ba:	4b2d      	ldr	r3, [pc, #180]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	4929      	ldr	r1, [pc, #164]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	600b      	str	r3, [r1, #0]
 80044ce:	e018      	b.n	8004502 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044d0:	4b27      	ldr	r3, [pc, #156]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a26      	ldr	r2, [pc, #152]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 80044d6:	f023 0301 	bic.w	r3, r3, #1
 80044da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044dc:	f7fd fd26 	bl	8001f2c <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e4:	f7fd fd22 	bl	8001f2c <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e1a3      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f6:	4b1e      	ldr	r3, [pc, #120]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f0      	bne.n	80044e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0308 	and.w	r3, r3, #8
 800450a:	2b00      	cmp	r3, #0
 800450c:	d038      	beq.n	8004580 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d019      	beq.n	800454a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004516:	4b16      	ldr	r3, [pc, #88]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 8004518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800451a:	4a15      	ldr	r2, [pc, #84]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 800451c:	f043 0301 	orr.w	r3, r3, #1
 8004520:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004522:	f7fd fd03 	bl	8001f2c <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004528:	e008      	b.n	800453c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800452a:	f7fd fcff 	bl	8001f2c <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e180      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800453c:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 800453e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0f0      	beq.n	800452a <HAL_RCC_OscConfig+0x23a>
 8004548:	e01a      	b.n	8004580 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800454a:	4b09      	ldr	r3, [pc, #36]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 800454c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800454e:	4a08      	ldr	r2, [pc, #32]	; (8004570 <HAL_RCC_OscConfig+0x280>)
 8004550:	f023 0301 	bic.w	r3, r3, #1
 8004554:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004556:	f7fd fce9 	bl	8001f2c <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800455c:	e00a      	b.n	8004574 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800455e:	f7fd fce5 	bl	8001f2c <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d903      	bls.n	8004574 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e166      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
 8004570:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004574:	4b92      	ldr	r3, [pc, #584]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1ee      	bne.n	800455e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80a4 	beq.w	80046d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800458e:	4b8c      	ldr	r3, [pc, #560]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10d      	bne.n	80045b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800459a:	4b89      	ldr	r3, [pc, #548]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	4a88      	ldr	r2, [pc, #544]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 80045a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a4:	6413      	str	r3, [r2, #64]	; 0x40
 80045a6:	4b86      	ldr	r3, [pc, #536]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ae:	60bb      	str	r3, [r7, #8]
 80045b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045b2:	2301      	movs	r3, #1
 80045b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045b6:	4b83      	ldr	r3, [pc, #524]	; (80047c4 <HAL_RCC_OscConfig+0x4d4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d118      	bne.n	80045f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80045c2:	4b80      	ldr	r3, [pc, #512]	; (80047c4 <HAL_RCC_OscConfig+0x4d4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a7f      	ldr	r2, [pc, #508]	; (80047c4 <HAL_RCC_OscConfig+0x4d4>)
 80045c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ce:	f7fd fcad 	bl	8001f2c <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d6:	f7fd fca9 	bl	8001f2c <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b64      	cmp	r3, #100	; 0x64
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e12a      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045e8:	4b76      	ldr	r3, [pc, #472]	; (80047c4 <HAL_RCC_OscConfig+0x4d4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f0      	beq.n	80045d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d106      	bne.n	800460a <HAL_RCC_OscConfig+0x31a>
 80045fc:	4b70      	ldr	r3, [pc, #448]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 80045fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004600:	4a6f      	ldr	r2, [pc, #444]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004602:	f043 0301 	orr.w	r3, r3, #1
 8004606:	6713      	str	r3, [r2, #112]	; 0x70
 8004608:	e02d      	b.n	8004666 <HAL_RCC_OscConfig+0x376>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d10c      	bne.n	800462c <HAL_RCC_OscConfig+0x33c>
 8004612:	4b6b      	ldr	r3, [pc, #428]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004616:	4a6a      	ldr	r2, [pc, #424]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004618:	f023 0301 	bic.w	r3, r3, #1
 800461c:	6713      	str	r3, [r2, #112]	; 0x70
 800461e:	4b68      	ldr	r3, [pc, #416]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004622:	4a67      	ldr	r2, [pc, #412]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004624:	f023 0304 	bic.w	r3, r3, #4
 8004628:	6713      	str	r3, [r2, #112]	; 0x70
 800462a:	e01c      	b.n	8004666 <HAL_RCC_OscConfig+0x376>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	2b05      	cmp	r3, #5
 8004632:	d10c      	bne.n	800464e <HAL_RCC_OscConfig+0x35e>
 8004634:	4b62      	ldr	r3, [pc, #392]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004638:	4a61      	ldr	r2, [pc, #388]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 800463a:	f043 0304 	orr.w	r3, r3, #4
 800463e:	6713      	str	r3, [r2, #112]	; 0x70
 8004640:	4b5f      	ldr	r3, [pc, #380]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004644:	4a5e      	ldr	r2, [pc, #376]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	6713      	str	r3, [r2, #112]	; 0x70
 800464c:	e00b      	b.n	8004666 <HAL_RCC_OscConfig+0x376>
 800464e:	4b5c      	ldr	r3, [pc, #368]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004652:	4a5b      	ldr	r2, [pc, #364]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004654:	f023 0301 	bic.w	r3, r3, #1
 8004658:	6713      	str	r3, [r2, #112]	; 0x70
 800465a:	4b59      	ldr	r3, [pc, #356]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465e:	4a58      	ldr	r2, [pc, #352]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004660:	f023 0304 	bic.w	r3, r3, #4
 8004664:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d015      	beq.n	800469a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466e:	f7fd fc5d 	bl	8001f2c <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004674:	e00a      	b.n	800468c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004676:	f7fd fc59 	bl	8001f2c <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	f241 3288 	movw	r2, #5000	; 0x1388
 8004684:	4293      	cmp	r3, r2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e0d8      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468c:	4b4c      	ldr	r3, [pc, #304]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 800468e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0ee      	beq.n	8004676 <HAL_RCC_OscConfig+0x386>
 8004698:	e014      	b.n	80046c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469a:	f7fd fc47 	bl	8001f2c <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a0:	e00a      	b.n	80046b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a2:	f7fd fc43 	bl	8001f2c <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e0c2      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b8:	4b41      	ldr	r3, [pc, #260]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 80046ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1ee      	bne.n	80046a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046c4:	7dfb      	ldrb	r3, [r7, #23]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d105      	bne.n	80046d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ca:	4b3d      	ldr	r3, [pc, #244]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	4a3c      	ldr	r2, [pc, #240]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 80046d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 80ae 	beq.w	800483c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046e0:	4b37      	ldr	r3, [pc, #220]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 030c 	and.w	r3, r3, #12
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d06d      	beq.n	80047c8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d14b      	bne.n	800478c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f4:	4b32      	ldr	r3, [pc, #200]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a31      	ldr	r2, [pc, #196]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 80046fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004700:	f7fd fc14 	bl	8001f2c <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004708:	f7fd fc10 	bl	8001f2c <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e091      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800471a:	4b29      	ldr	r3, [pc, #164]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1f0      	bne.n	8004708 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69da      	ldr	r2, [r3, #28]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	019b      	lsls	r3, r3, #6
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473c:	085b      	lsrs	r3, r3, #1
 800473e:	3b01      	subs	r3, #1
 8004740:	041b      	lsls	r3, r3, #16
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	061b      	lsls	r3, r3, #24
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	071b      	lsls	r3, r3, #28
 8004752:	491b      	ldr	r1, [pc, #108]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004754:	4313      	orrs	r3, r2
 8004756:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004758:	4b19      	ldr	r3, [pc, #100]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a18      	ldr	r2, [pc, #96]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 800475e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004764:	f7fd fbe2 	bl	8001f2c <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800476c:	f7fd fbde 	bl	8001f2c <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e05f      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477e:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f0      	beq.n	800476c <HAL_RCC_OscConfig+0x47c>
 800478a:	e057      	b.n	800483c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478c:	4b0c      	ldr	r3, [pc, #48]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a0b      	ldr	r2, [pc, #44]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 8004792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004798:	f7fd fbc8 	bl	8001f2c <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a0:	f7fd fbc4 	bl	8001f2c <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e045      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b2:	4b03      	ldr	r3, [pc, #12]	; (80047c0 <HAL_RCC_OscConfig+0x4d0>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_OscConfig+0x4b0>
 80047be:	e03d      	b.n	800483c <HAL_RCC_OscConfig+0x54c>
 80047c0:	40023800 	.word	0x40023800
 80047c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80047c8:	4b1f      	ldr	r3, [pc, #124]	; (8004848 <HAL_RCC_OscConfig+0x558>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d030      	beq.n	8004838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d129      	bne.n	8004838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d122      	bne.n	8004838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047f8:	4013      	ands	r3, r2
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047fe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004800:	4293      	cmp	r3, r2
 8004802:	d119      	bne.n	8004838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480e:	085b      	lsrs	r3, r3, #1
 8004810:	3b01      	subs	r3, #1
 8004812:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004814:	429a      	cmp	r2, r3
 8004816:	d10f      	bne.n	8004838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004822:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004824:	429a      	cmp	r2, r3
 8004826:	d107      	bne.n	8004838 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004832:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004834:	429a      	cmp	r2, r3
 8004836:	d001      	beq.n	800483c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	40023800 	.word	0x40023800

0800484c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004856:	2300      	movs	r3, #0
 8004858:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e0d0      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004864:	4b6a      	ldr	r3, [pc, #424]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	429a      	cmp	r2, r3
 8004870:	d910      	bls.n	8004894 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004872:	4b67      	ldr	r3, [pc, #412]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f023 020f 	bic.w	r2, r3, #15
 800487a:	4965      	ldr	r1, [pc, #404]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	4313      	orrs	r3, r2
 8004880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004882:	4b63      	ldr	r3, [pc, #396]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d001      	beq.n	8004894 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e0b8      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d020      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d005      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048ac:	4b59      	ldr	r3, [pc, #356]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	4a58      	ldr	r2, [pc, #352]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80048b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0308 	and.w	r3, r3, #8
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d005      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048c4:	4b53      	ldr	r3, [pc, #332]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	4a52      	ldr	r2, [pc, #328]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80048ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d0:	4b50      	ldr	r3, [pc, #320]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	494d      	ldr	r1, [pc, #308]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d040      	beq.n	8004970 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d107      	bne.n	8004906 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f6:	4b47      	ldr	r3, [pc, #284]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d115      	bne.n	800492e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e07f      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b02      	cmp	r3, #2
 800490c:	d107      	bne.n	800491e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800490e:	4b41      	ldr	r3, [pc, #260]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d109      	bne.n	800492e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e073      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800491e:	4b3d      	ldr	r3, [pc, #244]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e06b      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800492e:	4b39      	ldr	r3, [pc, #228]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f023 0203 	bic.w	r2, r3, #3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	4936      	ldr	r1, [pc, #216]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 800493c:	4313      	orrs	r3, r2
 800493e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004940:	f7fd faf4 	bl	8001f2c <HAL_GetTick>
 8004944:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004946:	e00a      	b.n	800495e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004948:	f7fd faf0 	bl	8001f2c <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	f241 3288 	movw	r2, #5000	; 0x1388
 8004956:	4293      	cmp	r3, r2
 8004958:	d901      	bls.n	800495e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e053      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495e:	4b2d      	ldr	r3, [pc, #180]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 020c 	and.w	r2, r3, #12
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	429a      	cmp	r2, r3
 800496e:	d1eb      	bne.n	8004948 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004970:	4b27      	ldr	r3, [pc, #156]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 030f 	and.w	r3, r3, #15
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d210      	bcs.n	80049a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497e:	4b24      	ldr	r3, [pc, #144]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f023 020f 	bic.w	r2, r3, #15
 8004986:	4922      	ldr	r1, [pc, #136]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	4313      	orrs	r3, r2
 800498c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800498e:	4b20      	ldr	r3, [pc, #128]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	429a      	cmp	r2, r3
 800499a:	d001      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e032      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d008      	beq.n	80049be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049ac:	4b19      	ldr	r3, [pc, #100]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	4916      	ldr	r1, [pc, #88]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0308 	and.w	r3, r3, #8
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d009      	beq.n	80049de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049ca:	4b12      	ldr	r3, [pc, #72]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	490e      	ldr	r1, [pc, #56]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049de:	f000 f821 	bl	8004a24 <HAL_RCC_GetSysClockFreq>
 80049e2:	4602      	mov	r2, r0
 80049e4:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	091b      	lsrs	r3, r3, #4
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	490a      	ldr	r1, [pc, #40]	; (8004a18 <HAL_RCC_ClockConfig+0x1cc>)
 80049f0:	5ccb      	ldrb	r3, [r1, r3]
 80049f2:	fa22 f303 	lsr.w	r3, r2, r3
 80049f6:	4a09      	ldr	r2, [pc, #36]	; (8004a1c <HAL_RCC_ClockConfig+0x1d0>)
 80049f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049fa:	4b09      	ldr	r3, [pc, #36]	; (8004a20 <HAL_RCC_ClockConfig+0x1d4>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fd fa50 	bl	8001ea4 <HAL_InitTick>

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40023c00 	.word	0x40023c00
 8004a14:	40023800 	.word	0x40023800
 8004a18:	0802350c 	.word	0x0802350c
 8004a1c:	20000024 	.word	0x20000024
 8004a20:	20000028 	.word	0x20000028

08004a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a28:	b094      	sub	sp, #80	; 0x50
 8004a2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a30:	2300      	movs	r3, #0
 8004a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a34:	2300      	movs	r3, #0
 8004a36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a3c:	4b79      	ldr	r3, [pc, #484]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 030c 	and.w	r3, r3, #12
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d00d      	beq.n	8004a64 <HAL_RCC_GetSysClockFreq+0x40>
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	f200 80e1 	bhi.w	8004c10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <HAL_RCC_GetSysClockFreq+0x34>
 8004a52:	2b04      	cmp	r3, #4
 8004a54:	d003      	beq.n	8004a5e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a56:	e0db      	b.n	8004c10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a58:	4b73      	ldr	r3, [pc, #460]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a5c:	e0db      	b.n	8004c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a5e:	4b73      	ldr	r3, [pc, #460]	; (8004c2c <HAL_RCC_GetSysClockFreq+0x208>)
 8004a60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a62:	e0d8      	b.n	8004c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a64:	4b6f      	ldr	r3, [pc, #444]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a6c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004a6e:	4b6d      	ldr	r3, [pc, #436]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d063      	beq.n	8004b42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a7a:	4b6a      	ldr	r3, [pc, #424]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	099b      	lsrs	r3, r3, #6
 8004a80:	2200      	movs	r2, #0
 8004a82:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a8e:	2300      	movs	r3, #0
 8004a90:	637b      	str	r3, [r7, #52]	; 0x34
 8004a92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a96:	4622      	mov	r2, r4
 8004a98:	462b      	mov	r3, r5
 8004a9a:	f04f 0000 	mov.w	r0, #0
 8004a9e:	f04f 0100 	mov.w	r1, #0
 8004aa2:	0159      	lsls	r1, r3, #5
 8004aa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aa8:	0150      	lsls	r0, r2, #5
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	4621      	mov	r1, r4
 8004ab0:	1a51      	subs	r1, r2, r1
 8004ab2:	6139      	str	r1, [r7, #16]
 8004ab4:	4629      	mov	r1, r5
 8004ab6:	eb63 0301 	sbc.w	r3, r3, r1
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ac8:	4659      	mov	r1, fp
 8004aca:	018b      	lsls	r3, r1, #6
 8004acc:	4651      	mov	r1, sl
 8004ace:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ad2:	4651      	mov	r1, sl
 8004ad4:	018a      	lsls	r2, r1, #6
 8004ad6:	4651      	mov	r1, sl
 8004ad8:	ebb2 0801 	subs.w	r8, r2, r1
 8004adc:	4659      	mov	r1, fp
 8004ade:	eb63 0901 	sbc.w	r9, r3, r1
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	f04f 0300 	mov.w	r3, #0
 8004aea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004af2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004af6:	4690      	mov	r8, r2
 8004af8:	4699      	mov	r9, r3
 8004afa:	4623      	mov	r3, r4
 8004afc:	eb18 0303 	adds.w	r3, r8, r3
 8004b00:	60bb      	str	r3, [r7, #8]
 8004b02:	462b      	mov	r3, r5
 8004b04:	eb49 0303 	adc.w	r3, r9, r3
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	f04f 0300 	mov.w	r3, #0
 8004b12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b16:	4629      	mov	r1, r5
 8004b18:	024b      	lsls	r3, r1, #9
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b20:	4621      	mov	r1, r4
 8004b22:	024a      	lsls	r2, r1, #9
 8004b24:	4610      	mov	r0, r2
 8004b26:	4619      	mov	r1, r3
 8004b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b34:	f7fb fd98 	bl	8000668 <__aeabi_uldivmod>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b40:	e058      	b.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b42:	4b38      	ldr	r3, [pc, #224]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	099b      	lsrs	r3, r3, #6
 8004b48:	2200      	movs	r2, #0
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b52:	623b      	str	r3, [r7, #32]
 8004b54:	2300      	movs	r3, #0
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
 8004b58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b5c:	4642      	mov	r2, r8
 8004b5e:	464b      	mov	r3, r9
 8004b60:	f04f 0000 	mov.w	r0, #0
 8004b64:	f04f 0100 	mov.w	r1, #0
 8004b68:	0159      	lsls	r1, r3, #5
 8004b6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b6e:	0150      	lsls	r0, r2, #5
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	4641      	mov	r1, r8
 8004b76:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b7a:	4649      	mov	r1, r9
 8004b7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	f04f 0300 	mov.w	r3, #0
 8004b88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b94:	ebb2 040a 	subs.w	r4, r2, sl
 8004b98:	eb63 050b 	sbc.w	r5, r3, fp
 8004b9c:	f04f 0200 	mov.w	r2, #0
 8004ba0:	f04f 0300 	mov.w	r3, #0
 8004ba4:	00eb      	lsls	r3, r5, #3
 8004ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004baa:	00e2      	lsls	r2, r4, #3
 8004bac:	4614      	mov	r4, r2
 8004bae:	461d      	mov	r5, r3
 8004bb0:	4643      	mov	r3, r8
 8004bb2:	18e3      	adds	r3, r4, r3
 8004bb4:	603b      	str	r3, [r7, #0]
 8004bb6:	464b      	mov	r3, r9
 8004bb8:	eb45 0303 	adc.w	r3, r5, r3
 8004bbc:	607b      	str	r3, [r7, #4]
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	f04f 0300 	mov.w	r3, #0
 8004bc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bca:	4629      	mov	r1, r5
 8004bcc:	028b      	lsls	r3, r1, #10
 8004bce:	4621      	mov	r1, r4
 8004bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bd4:	4621      	mov	r1, r4
 8004bd6:	028a      	lsls	r2, r1, #10
 8004bd8:	4610      	mov	r0, r2
 8004bda:	4619      	mov	r1, r3
 8004bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bde:	2200      	movs	r2, #0
 8004be0:	61bb      	str	r3, [r7, #24]
 8004be2:	61fa      	str	r2, [r7, #28]
 8004be4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004be8:	f7fb fd3e 	bl	8000668 <__aeabi_uldivmod>
 8004bec:	4602      	mov	r2, r0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004bf4:	4b0b      	ldr	r3, [pc, #44]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	0c1b      	lsrs	r3, r3, #16
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	3301      	adds	r3, #1
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004c04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c0e:	e002      	b.n	8004c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c10:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3750      	adds	r7, #80	; 0x50
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c22:	bf00      	nop
 8004c24:	40023800 	.word	0x40023800
 8004c28:	00f42400 	.word	0x00f42400
 8004c2c:	007a1200 	.word	0x007a1200

08004c30 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c34:	4b03      	ldr	r3, [pc, #12]	; (8004c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c36:	681b      	ldr	r3, [r3, #0]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	20000024 	.word	0x20000024

08004c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c4c:	f7ff fff0 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 8004c50:	4602      	mov	r2, r0
 8004c52:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	0a9b      	lsrs	r3, r3, #10
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	4903      	ldr	r1, [pc, #12]	; (8004c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c5e:	5ccb      	ldrb	r3, [r1, r3]
 8004c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	40023800 	.word	0x40023800
 8004c6c:	0802351c 	.word	0x0802351c

08004c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c74:	f7ff ffdc 	bl	8004c30 <HAL_RCC_GetHCLKFreq>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	0b5b      	lsrs	r3, r3, #13
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	4903      	ldr	r1, [pc, #12]	; (8004c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c86:	5ccb      	ldrb	r3, [r1, r3]
 8004c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40023800 	.word	0x40023800
 8004c94:	0802351c 	.word	0x0802351c

08004c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d012      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004cc0:	4b69      	ldr	r3, [pc, #420]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	4a68      	ldr	r2, [pc, #416]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004cca:	6093      	str	r3, [r2, #8]
 8004ccc:	4b66      	ldr	r3, [pc, #408]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd4:	4964      	ldr	r1, [pc, #400]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d017      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cf2:	4b5d      	ldr	r3, [pc, #372]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d00:	4959      	ldr	r1, [pc, #356]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d10:	d101      	bne.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004d12:	2301      	movs	r3, #1
 8004d14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d017      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d2e:	4b4e      	ldr	r3, [pc, #312]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3c:	494a      	ldr	r1, [pc, #296]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d4c:	d101      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0320 	and.w	r3, r3, #32
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f000 808b 	beq.w	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d7c:	4b3a      	ldr	r3, [pc, #232]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	4a39      	ldr	r2, [pc, #228]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d86:	6413      	str	r3, [r2, #64]	; 0x40
 8004d88:	4b37      	ldr	r3, [pc, #220]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d94:	4b35      	ldr	r3, [pc, #212]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a34      	ldr	r2, [pc, #208]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da0:	f7fd f8c4 	bl	8001f2c <HAL_GetTick>
 8004da4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004da6:	e008      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004da8:	f7fd f8c0 	bl	8001f2c <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b64      	cmp	r3, #100	; 0x64
 8004db4:	d901      	bls.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e38f      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004dba:	4b2c      	ldr	r3, [pc, #176]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d0f0      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dc6:	4b28      	ldr	r3, [pc, #160]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d035      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d02e      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004de4:	4b20      	ldr	r3, [pc, #128]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dee:	4b1e      	ldr	r3, [pc, #120]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df2:	4a1d      	ldr	r2, [pc, #116]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dfa:	4b1b      	ldr	r3, [pc, #108]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfe:	4a1a      	ldr	r2, [pc, #104]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004e06:	4a18      	ldr	r2, [pc, #96]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e0c:	4b16      	ldr	r3, [pc, #88]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d114      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e18:	f7fd f888 	bl	8001f2c <HAL_GetTick>
 8004e1c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e1e:	e00a      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e20:	f7fd f884 	bl	8001f2c <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e351      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e36:	4b0c      	ldr	r3, [pc, #48]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d0ee      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e4e:	d111      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004e50:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e5c:	4b04      	ldr	r3, [pc, #16]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e5e:	400b      	ands	r3, r1
 8004e60:	4901      	ldr	r1, [pc, #4]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	608b      	str	r3, [r1, #8]
 8004e66:	e00b      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	40007000 	.word	0x40007000
 8004e70:	0ffffcff 	.word	0x0ffffcff
 8004e74:	4bac      	ldr	r3, [pc, #688]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	4aab      	ldr	r2, [pc, #684]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e7a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e7e:	6093      	str	r3, [r2, #8]
 8004e80:	4ba9      	ldr	r3, [pc, #676]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e8c:	49a6      	ldr	r1, [pc, #664]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0310 	and.w	r3, r3, #16
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d010      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e9e:	4ba2      	ldr	r3, [pc, #648]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ea4:	4aa0      	ldr	r2, [pc, #640]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eaa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004eae:	4b9e      	ldr	r3, [pc, #632]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eb0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb8:	499b      	ldr	r1, [pc, #620]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ecc:	4b96      	ldr	r3, [pc, #600]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eda:	4993      	ldr	r1, [pc, #588]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004eee:	4b8e      	ldr	r3, [pc, #568]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004efc:	498a      	ldr	r1, [pc, #552]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f10:	4b85      	ldr	r3, [pc, #532]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f1e:	4982      	ldr	r1, [pc, #520]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f32:	4b7d      	ldr	r3, [pc, #500]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f40:	4979      	ldr	r1, [pc, #484]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00a      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f54:	4b74      	ldr	r3, [pc, #464]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5a:	f023 0203 	bic.w	r2, r3, #3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f62:	4971      	ldr	r1, [pc, #452]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f76:	4b6c      	ldr	r3, [pc, #432]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7c:	f023 020c 	bic.w	r2, r3, #12
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f84:	4968      	ldr	r1, [pc, #416]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f98:	4b63      	ldr	r3, [pc, #396]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa6:	4960      	ldr	r1, [pc, #384]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fba:	4b5b      	ldr	r3, [pc, #364]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc8:	4957      	ldr	r1, [pc, #348]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00a      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fdc:	4b52      	ldr	r3, [pc, #328]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fea:	494f      	ldr	r1, [pc, #316]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004ffe:	4b4a      	ldr	r3, [pc, #296]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005004:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500c:	4946      	ldr	r1, [pc, #280]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00a      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005020:	4b41      	ldr	r3, [pc, #260]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005026:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800502e:	493e      	ldr	r1, [pc, #248]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005042:	4b39      	ldr	r3, [pc, #228]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005048:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005050:	4935      	ldr	r1, [pc, #212]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005052:	4313      	orrs	r3, r2
 8005054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00a      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005064:	4b30      	ldr	r3, [pc, #192]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005072:	492d      	ldr	r1, [pc, #180]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005074:	4313      	orrs	r3, r2
 8005076:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d011      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005086:	4b28      	ldr	r3, [pc, #160]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005094:	4924      	ldr	r1, [pc, #144]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005096:	4313      	orrs	r3, r2
 8005098:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050a4:	d101      	bne.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80050a6:	2301      	movs	r3, #1
 80050a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0308 	and.w	r3, r3, #8
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80050b6:	2301      	movs	r3, #1
 80050b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050c6:	4b18      	ldr	r3, [pc, #96]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050d4:	4914      	ldr	r1, [pc, #80]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00b      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050e8:	4b0f      	ldr	r3, [pc, #60]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050f8:	490b      	ldr	r1, [pc, #44]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00f      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800510c:	4b06      	ldr	r3, [pc, #24]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800510e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005112:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800511c:	4902      	ldr	r1, [pc, #8]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005124:	e002      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005126:	bf00      	nop
 8005128:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00b      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005138:	4b8a      	ldr	r3, [pc, #552]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800513a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800513e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005148:	4986      	ldr	r1, [pc, #536]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800514a:	4313      	orrs	r3, r2
 800514c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00b      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800515c:	4b81      	ldr	r3, [pc, #516]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800515e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005162:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800516c:	497d      	ldr	r1, [pc, #500]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d006      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 80d6 	beq.w	8005334 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005188:	4b76      	ldr	r3, [pc, #472]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a75      	ldr	r2, [pc, #468]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800518e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005192:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005194:	f7fc feca 	bl	8001f2c <HAL_GetTick>
 8005198:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800519a:	e008      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800519c:	f7fc fec6 	bl	8001f2c <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b64      	cmp	r3, #100	; 0x64
 80051a8:	d901      	bls.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e195      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051ae:	4b6d      	ldr	r3, [pc, #436]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1f0      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d021      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d11d      	bne.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051ce:	4b65      	ldr	r3, [pc, #404]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051d4:	0c1b      	lsrs	r3, r3, #16
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051dc:	4b61      	ldr	r3, [pc, #388]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e2:	0e1b      	lsrs	r3, r3, #24
 80051e4:	f003 030f 	and.w	r3, r3, #15
 80051e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	019a      	lsls	r2, r3, #6
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	041b      	lsls	r3, r3, #16
 80051f4:	431a      	orrs	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	061b      	lsls	r3, r3, #24
 80051fa:	431a      	orrs	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	071b      	lsls	r3, r3, #28
 8005202:	4958      	ldr	r1, [pc, #352]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005204:	4313      	orrs	r3, r2
 8005206:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d004      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800521e:	d00a      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005228:	2b00      	cmp	r3, #0
 800522a:	d02e      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005234:	d129      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005236:	4b4b      	ldr	r3, [pc, #300]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800523c:	0c1b      	lsrs	r3, r3, #16
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005244:	4b47      	ldr	r3, [pc, #284]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800524a:	0f1b      	lsrs	r3, r3, #28
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	019a      	lsls	r2, r3, #6
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	041b      	lsls	r3, r3, #16
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	061b      	lsls	r3, r3, #24
 8005264:	431a      	orrs	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	071b      	lsls	r3, r3, #28
 800526a:	493e      	ldr	r1, [pc, #248]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800526c:	4313      	orrs	r3, r2
 800526e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005272:	4b3c      	ldr	r3, [pc, #240]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005278:	f023 021f 	bic.w	r2, r3, #31
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	3b01      	subs	r3, #1
 8005282:	4938      	ldr	r1, [pc, #224]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005284:	4313      	orrs	r3, r2
 8005286:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d01d      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005296:	4b33      	ldr	r3, [pc, #204]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800529c:	0e1b      	lsrs	r3, r3, #24
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052a4:	4b2f      	ldr	r3, [pc, #188]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052aa:	0f1b      	lsrs	r3, r3, #28
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	019a      	lsls	r2, r3, #6
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	041b      	lsls	r3, r3, #16
 80052be:	431a      	orrs	r2, r3
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	061b      	lsls	r3, r3, #24
 80052c4:	431a      	orrs	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	071b      	lsls	r3, r3, #28
 80052ca:	4926      	ldr	r1, [pc, #152]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d011      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	019a      	lsls	r2, r3, #6
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	041b      	lsls	r3, r3, #16
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	061b      	lsls	r3, r3, #24
 80052f2:	431a      	orrs	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	071b      	lsls	r3, r3, #28
 80052fa:	491a      	ldr	r1, [pc, #104]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005302:	4b18      	ldr	r3, [pc, #96]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a17      	ldr	r2, [pc, #92]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005308:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800530c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800530e:	f7fc fe0d 	bl	8001f2c <HAL_GetTick>
 8005312:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005314:	e008      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005316:	f7fc fe09 	bl	8001f2c <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b64      	cmp	r3, #100	; 0x64
 8005322:	d901      	bls.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e0d8      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005328:	4b0e      	ldr	r3, [pc, #56]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0f0      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	2b01      	cmp	r3, #1
 8005338:	f040 80ce 	bne.w	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800533c:	4b09      	ldr	r3, [pc, #36]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a08      	ldr	r2, [pc, #32]	; (8005364 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005342:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005346:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005348:	f7fc fdf0 	bl	8001f2c <HAL_GetTick>
 800534c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800534e:	e00b      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005350:	f7fc fdec 	bl	8001f2c <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b64      	cmp	r3, #100	; 0x64
 800535c:	d904      	bls.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e0bb      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005362:	bf00      	nop
 8005364:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005368:	4b5e      	ldr	r3, [pc, #376]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005374:	d0ec      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005386:	2b00      	cmp	r3, #0
 8005388:	d009      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005392:	2b00      	cmp	r3, #0
 8005394:	d02e      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	2b00      	cmp	r3, #0
 800539c:	d12a      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800539e:	4b51      	ldr	r3, [pc, #324]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a4:	0c1b      	lsrs	r3, r3, #16
 80053a6:	f003 0303 	and.w	r3, r3, #3
 80053aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053ac:	4b4d      	ldr	r3, [pc, #308]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b2:	0f1b      	lsrs	r3, r3, #28
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	019a      	lsls	r2, r3, #6
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	041b      	lsls	r3, r3, #16
 80053c4:	431a      	orrs	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	061b      	lsls	r3, r3, #24
 80053cc:	431a      	orrs	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	071b      	lsls	r3, r3, #28
 80053d2:	4944      	ldr	r1, [pc, #272]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80053da:	4b42      	ldr	r3, [pc, #264]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e8:	3b01      	subs	r3, #1
 80053ea:	021b      	lsls	r3, r3, #8
 80053ec:	493d      	ldr	r1, [pc, #244]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d022      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005404:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005408:	d11d      	bne.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800540a:	4b36      	ldr	r3, [pc, #216]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800540c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005410:	0e1b      	lsrs	r3, r3, #24
 8005412:	f003 030f 	and.w	r3, r3, #15
 8005416:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005418:	4b32      	ldr	r3, [pc, #200]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800541a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541e:	0f1b      	lsrs	r3, r3, #28
 8005420:	f003 0307 	and.w	r3, r3, #7
 8005424:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	019a      	lsls	r2, r3, #6
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	041b      	lsls	r3, r3, #16
 8005432:	431a      	orrs	r2, r3
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	061b      	lsls	r3, r3, #24
 8005438:	431a      	orrs	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	071b      	lsls	r3, r3, #28
 800543e:	4929      	ldr	r1, [pc, #164]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005440:	4313      	orrs	r3, r2
 8005442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0308 	and.w	r3, r3, #8
 800544e:	2b00      	cmp	r3, #0
 8005450:	d028      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005452:	4b24      	ldr	r3, [pc, #144]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005458:	0e1b      	lsrs	r3, r3, #24
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005460:	4b20      	ldr	r3, [pc, #128]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005466:	0c1b      	lsrs	r3, r3, #16
 8005468:	f003 0303 	and.w	r3, r3, #3
 800546c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	019a      	lsls	r2, r3, #6
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	041b      	lsls	r3, r3, #16
 8005478:	431a      	orrs	r2, r3
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	061b      	lsls	r3, r3, #24
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	071b      	lsls	r3, r3, #28
 8005486:	4917      	ldr	r1, [pc, #92]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800548e:	4b15      	ldr	r3, [pc, #84]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005494:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549c:	4911      	ldr	r1, [pc, #68]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80054a4:	4b0f      	ldr	r3, [pc, #60]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a0e      	ldr	r2, [pc, #56]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054b0:	f7fc fd3c 	bl	8001f2c <HAL_GetTick>
 80054b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054b6:	e008      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054b8:	f7fc fd38 	bl	8001f2c <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b64      	cmp	r3, #100	; 0x64
 80054c4:	d901      	bls.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e007      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054ca:	4b06      	ldr	r3, [pc, #24]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054d6:	d1ef      	bne.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3720      	adds	r7, #32
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	40023800 	.word	0x40023800

080054e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e09d      	b.n	8005636 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d108      	bne.n	8005514 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800550a:	d009      	beq.n	8005520 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	61da      	str	r2, [r3, #28]
 8005512:	e005      	b.n	8005520 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d106      	bne.n	8005540 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7fc fa60 	bl	8001a00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005556:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005560:	d902      	bls.n	8005568 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005562:	2300      	movs	r3, #0
 8005564:	60fb      	str	r3, [r7, #12]
 8005566:	e002      	b.n	800556e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800556c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005576:	d007      	beq.n	8005588 <HAL_SPI_Init+0xa0>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005580:	d002      	beq.n	8005588 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005598:	431a      	orrs	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	431a      	orrs	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055b6:	431a      	orrs	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055c0:	431a      	orrs	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ca:	ea42 0103 	orr.w	r1, r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	0c1b      	lsrs	r3, r3, #16
 80055e4:	f003 0204 	and.w	r2, r3, #4
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	f003 0310 	and.w	r3, r3, #16
 80055f0:	431a      	orrs	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f6:	f003 0308 	and.w	r3, r3, #8
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005604:	ea42 0103 	orr.w	r1, r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69da      	ldr	r2, [r3, #28]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005624:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b082      	sub	sp, #8
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e049      	b.n	80056e4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b00      	cmp	r3, #0
 800565a:	d106      	bne.n	800566a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f7fc fa2d 	bl	8001ac4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2202      	movs	r2, #2
 800566e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	3304      	adds	r3, #4
 800567a:	4619      	mov	r1, r3
 800567c:	4610      	mov	r0, r2
 800567e:	f000 fabf 	bl	8005c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3708      	adds	r7, #8
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d001      	beq.n	8005704 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e054      	b.n	80057ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2202      	movs	r2, #2
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f042 0201 	orr.w	r2, r2, #1
 800571a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a26      	ldr	r2, [pc, #152]	; (80057bc <HAL_TIM_Base_Start_IT+0xd0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d022      	beq.n	800576c <HAL_TIM_Base_Start_IT+0x80>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800572e:	d01d      	beq.n	800576c <HAL_TIM_Base_Start_IT+0x80>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a22      	ldr	r2, [pc, #136]	; (80057c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d018      	beq.n	800576c <HAL_TIM_Base_Start_IT+0x80>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a21      	ldr	r2, [pc, #132]	; (80057c4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d013      	beq.n	800576c <HAL_TIM_Base_Start_IT+0x80>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a1f      	ldr	r2, [pc, #124]	; (80057c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d00e      	beq.n	800576c <HAL_TIM_Base_Start_IT+0x80>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a1e      	ldr	r2, [pc, #120]	; (80057cc <HAL_TIM_Base_Start_IT+0xe0>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d009      	beq.n	800576c <HAL_TIM_Base_Start_IT+0x80>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a1c      	ldr	r2, [pc, #112]	; (80057d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d004      	beq.n	800576c <HAL_TIM_Base_Start_IT+0x80>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a1b      	ldr	r2, [pc, #108]	; (80057d4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d115      	bne.n	8005798 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689a      	ldr	r2, [r3, #8]
 8005772:	4b19      	ldr	r3, [pc, #100]	; (80057d8 <HAL_TIM_Base_Start_IT+0xec>)
 8005774:	4013      	ands	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2b06      	cmp	r3, #6
 800577c:	d015      	beq.n	80057aa <HAL_TIM_Base_Start_IT+0xbe>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005784:	d011      	beq.n	80057aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 0201 	orr.w	r2, r2, #1
 8005794:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005796:	e008      	b.n	80057aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f042 0201 	orr.w	r2, r2, #1
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	e000      	b.n	80057ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	40010000 	.word	0x40010000
 80057c0:	40000400 	.word	0x40000400
 80057c4:	40000800 	.word	0x40000800
 80057c8:	40000c00 	.word	0x40000c00
 80057cc:	40010400 	.word	0x40010400
 80057d0:	40014000 	.word	0x40014000
 80057d4:	40001800 	.word	0x40001800
 80057d8:	00010007 	.word	0x00010007

080057dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d122      	bne.n	8005838 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d11b      	bne.n	8005838 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f06f 0202 	mvn.w	r2, #2
 8005808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	f003 0303 	and.w	r3, r3, #3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f9d0 	bl	8005bc4 <HAL_TIM_IC_CaptureCallback>
 8005824:	e005      	b.n	8005832 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f9c2 	bl	8005bb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f9d3 	bl	8005bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f003 0304 	and.w	r3, r3, #4
 8005842:	2b04      	cmp	r3, #4
 8005844:	d122      	bne.n	800588c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b04      	cmp	r3, #4
 8005852:	d11b      	bne.n	800588c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f06f 0204 	mvn.w	r2, #4
 800585c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2202      	movs	r2, #2
 8005862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f9a6 	bl	8005bc4 <HAL_TIM_IC_CaptureCallback>
 8005878:	e005      	b.n	8005886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f998 	bl	8005bb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f9a9 	bl	8005bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f003 0308 	and.w	r3, r3, #8
 8005896:	2b08      	cmp	r3, #8
 8005898:	d122      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f003 0308 	and.w	r3, r3, #8
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d11b      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0208 	mvn.w	r2, #8
 80058b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2204      	movs	r2, #4
 80058b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f97c 	bl	8005bc4 <HAL_TIM_IC_CaptureCallback>
 80058cc:	e005      	b.n	80058da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f96e 	bl	8005bb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f97f 	bl	8005bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f003 0310 	and.w	r3, r3, #16
 80058ea:	2b10      	cmp	r3, #16
 80058ec:	d122      	bne.n	8005934 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f003 0310 	and.w	r3, r3, #16
 80058f8:	2b10      	cmp	r3, #16
 80058fa:	d11b      	bne.n	8005934 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f06f 0210 	mvn.w	r2, #16
 8005904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2208      	movs	r2, #8
 800590a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f952 	bl	8005bc4 <HAL_TIM_IC_CaptureCallback>
 8005920:	e005      	b.n	800592e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f944 	bl	8005bb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f955 	bl	8005bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b01      	cmp	r3, #1
 8005940:	d10e      	bne.n	8005960 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b01      	cmp	r3, #1
 800594e:	d107      	bne.n	8005960 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f06f 0201 	mvn.w	r2, #1
 8005958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7fb fcbc 	bl	80012d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596a:	2b80      	cmp	r3, #128	; 0x80
 800596c:	d10e      	bne.n	800598c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005978:	2b80      	cmp	r3, #128	; 0x80
 800597a:	d107      	bne.n	800598c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fb0c 	bl	8005fa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800599a:	d10e      	bne.n	80059ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a6:	2b80      	cmp	r3, #128	; 0x80
 80059a8:	d107      	bne.n	80059ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 faff 	bl	8005fb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c4:	2b40      	cmp	r3, #64	; 0x40
 80059c6:	d10e      	bne.n	80059e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d2:	2b40      	cmp	r3, #64	; 0x40
 80059d4:	d107      	bne.n	80059e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f903 	bl	8005bec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	f003 0320 	and.w	r3, r3, #32
 80059f0:	2b20      	cmp	r3, #32
 80059f2:	d10e      	bne.n	8005a12 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	f003 0320 	and.w	r3, r3, #32
 80059fe:	2b20      	cmp	r3, #32
 8005a00:	d107      	bne.n	8005a12 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f06f 0220 	mvn.w	r2, #32
 8005a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fabf 	bl	8005f90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a12:	bf00      	nop
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
	...

08005a1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d101      	bne.n	8005a38 <HAL_TIM_ConfigClockSource+0x1c>
 8005a34:	2302      	movs	r3, #2
 8005a36:	e0b4      	b.n	8005ba2 <HAL_TIM_ConfigClockSource+0x186>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	4b56      	ldr	r3, [pc, #344]	; (8005bac <HAL_TIM_ConfigClockSource+0x190>)
 8005a54:	4013      	ands	r3, r2
 8005a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a70:	d03e      	beq.n	8005af0 <HAL_TIM_ConfigClockSource+0xd4>
 8005a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a76:	f200 8087 	bhi.w	8005b88 <HAL_TIM_ConfigClockSource+0x16c>
 8005a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a7e:	f000 8086 	beq.w	8005b8e <HAL_TIM_ConfigClockSource+0x172>
 8005a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a86:	d87f      	bhi.n	8005b88 <HAL_TIM_ConfigClockSource+0x16c>
 8005a88:	2b70      	cmp	r3, #112	; 0x70
 8005a8a:	d01a      	beq.n	8005ac2 <HAL_TIM_ConfigClockSource+0xa6>
 8005a8c:	2b70      	cmp	r3, #112	; 0x70
 8005a8e:	d87b      	bhi.n	8005b88 <HAL_TIM_ConfigClockSource+0x16c>
 8005a90:	2b60      	cmp	r3, #96	; 0x60
 8005a92:	d050      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0x11a>
 8005a94:	2b60      	cmp	r3, #96	; 0x60
 8005a96:	d877      	bhi.n	8005b88 <HAL_TIM_ConfigClockSource+0x16c>
 8005a98:	2b50      	cmp	r3, #80	; 0x50
 8005a9a:	d03c      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0xfa>
 8005a9c:	2b50      	cmp	r3, #80	; 0x50
 8005a9e:	d873      	bhi.n	8005b88 <HAL_TIM_ConfigClockSource+0x16c>
 8005aa0:	2b40      	cmp	r3, #64	; 0x40
 8005aa2:	d058      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0x13a>
 8005aa4:	2b40      	cmp	r3, #64	; 0x40
 8005aa6:	d86f      	bhi.n	8005b88 <HAL_TIM_ConfigClockSource+0x16c>
 8005aa8:	2b30      	cmp	r3, #48	; 0x30
 8005aaa:	d064      	beq.n	8005b76 <HAL_TIM_ConfigClockSource+0x15a>
 8005aac:	2b30      	cmp	r3, #48	; 0x30
 8005aae:	d86b      	bhi.n	8005b88 <HAL_TIM_ConfigClockSource+0x16c>
 8005ab0:	2b20      	cmp	r3, #32
 8005ab2:	d060      	beq.n	8005b76 <HAL_TIM_ConfigClockSource+0x15a>
 8005ab4:	2b20      	cmp	r3, #32
 8005ab6:	d867      	bhi.n	8005b88 <HAL_TIM_ConfigClockSource+0x16c>
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d05c      	beq.n	8005b76 <HAL_TIM_ConfigClockSource+0x15a>
 8005abc:	2b10      	cmp	r3, #16
 8005abe:	d05a      	beq.n	8005b76 <HAL_TIM_ConfigClockSource+0x15a>
 8005ac0:	e062      	b.n	8005b88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6818      	ldr	r0, [r3, #0]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	6899      	ldr	r1, [r3, #8]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f000 f9af 	bl	8005e34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ae4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	609a      	str	r2, [r3, #8]
      break;
 8005aee:	e04f      	b.n	8005b90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6818      	ldr	r0, [r3, #0]
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	6899      	ldr	r1, [r3, #8]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f000 f998 	bl	8005e34 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b12:	609a      	str	r2, [r3, #8]
      break;
 8005b14:	e03c      	b.n	8005b90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6818      	ldr	r0, [r3, #0]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	6859      	ldr	r1, [r3, #4]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	461a      	mov	r2, r3
 8005b24:	f000 f90c 	bl	8005d40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2150      	movs	r1, #80	; 0x50
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 f965 	bl	8005dfe <TIM_ITRx_SetConfig>
      break;
 8005b34:	e02c      	b.n	8005b90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6818      	ldr	r0, [r3, #0]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	6859      	ldr	r1, [r3, #4]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	461a      	mov	r2, r3
 8005b44:	f000 f92b 	bl	8005d9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2160      	movs	r1, #96	; 0x60
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 f955 	bl	8005dfe <TIM_ITRx_SetConfig>
      break;
 8005b54:	e01c      	b.n	8005b90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6818      	ldr	r0, [r3, #0]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	6859      	ldr	r1, [r3, #4]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	461a      	mov	r2, r3
 8005b64:	f000 f8ec 	bl	8005d40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2140      	movs	r1, #64	; 0x40
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 f945 	bl	8005dfe <TIM_ITRx_SetConfig>
      break;
 8005b74:	e00c      	b.n	8005b90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4619      	mov	r1, r3
 8005b80:	4610      	mov	r0, r2
 8005b82:	f000 f93c 	bl	8005dfe <TIM_ITRx_SetConfig>
      break;
 8005b86:	e003      	b.n	8005b90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b8c:	e000      	b.n	8005b90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	fffeff88 	.word	0xfffeff88

08005bb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a40      	ldr	r2, [pc, #256]	; (8005d14 <TIM_Base_SetConfig+0x114>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d013      	beq.n	8005c40 <TIM_Base_SetConfig+0x40>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c1e:	d00f      	beq.n	8005c40 <TIM_Base_SetConfig+0x40>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a3d      	ldr	r2, [pc, #244]	; (8005d18 <TIM_Base_SetConfig+0x118>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d00b      	beq.n	8005c40 <TIM_Base_SetConfig+0x40>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a3c      	ldr	r2, [pc, #240]	; (8005d1c <TIM_Base_SetConfig+0x11c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d007      	beq.n	8005c40 <TIM_Base_SetConfig+0x40>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a3b      	ldr	r2, [pc, #236]	; (8005d20 <TIM_Base_SetConfig+0x120>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d003      	beq.n	8005c40 <TIM_Base_SetConfig+0x40>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a3a      	ldr	r2, [pc, #232]	; (8005d24 <TIM_Base_SetConfig+0x124>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d108      	bne.n	8005c52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a2f      	ldr	r2, [pc, #188]	; (8005d14 <TIM_Base_SetConfig+0x114>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d02b      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c60:	d027      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a2c      	ldr	r2, [pc, #176]	; (8005d18 <TIM_Base_SetConfig+0x118>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d023      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a2b      	ldr	r2, [pc, #172]	; (8005d1c <TIM_Base_SetConfig+0x11c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d01f      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a2a      	ldr	r2, [pc, #168]	; (8005d20 <TIM_Base_SetConfig+0x120>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d01b      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a29      	ldr	r2, [pc, #164]	; (8005d24 <TIM_Base_SetConfig+0x124>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d017      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a28      	ldr	r2, [pc, #160]	; (8005d28 <TIM_Base_SetConfig+0x128>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d013      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a27      	ldr	r2, [pc, #156]	; (8005d2c <TIM_Base_SetConfig+0x12c>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00f      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a26      	ldr	r2, [pc, #152]	; (8005d30 <TIM_Base_SetConfig+0x130>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d00b      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a25      	ldr	r2, [pc, #148]	; (8005d34 <TIM_Base_SetConfig+0x134>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d007      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a24      	ldr	r2, [pc, #144]	; (8005d38 <TIM_Base_SetConfig+0x138>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d003      	beq.n	8005cb2 <TIM_Base_SetConfig+0xb2>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a23      	ldr	r2, [pc, #140]	; (8005d3c <TIM_Base_SetConfig+0x13c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d108      	bne.n	8005cc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a0a      	ldr	r2, [pc, #40]	; (8005d14 <TIM_Base_SetConfig+0x114>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d003      	beq.n	8005cf8 <TIM_Base_SetConfig+0xf8>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a0c      	ldr	r2, [pc, #48]	; (8005d24 <TIM_Base_SetConfig+0x124>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d103      	bne.n	8005d00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	691a      	ldr	r2, [r3, #16]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	615a      	str	r2, [r3, #20]
}
 8005d06:	bf00      	nop
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	40010000 	.word	0x40010000
 8005d18:	40000400 	.word	0x40000400
 8005d1c:	40000800 	.word	0x40000800
 8005d20:	40000c00 	.word	0x40000c00
 8005d24:	40010400 	.word	0x40010400
 8005d28:	40014000 	.word	0x40014000
 8005d2c:	40014400 	.word	0x40014400
 8005d30:	40014800 	.word	0x40014800
 8005d34:	40001800 	.word	0x40001800
 8005d38:	40001c00 	.word	0x40001c00
 8005d3c:	40002000 	.word	0x40002000

08005d40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	f023 0201 	bic.w	r2, r3, #1
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	011b      	lsls	r3, r3, #4
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f023 030a 	bic.w	r3, r3, #10
 8005d7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	621a      	str	r2, [r3, #32]
}
 8005d92:	bf00      	nop
 8005d94:	371c      	adds	r7, #28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b087      	sub	sp, #28
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	60f8      	str	r0, [r7, #12]
 8005da6:	60b9      	str	r1, [r7, #8]
 8005da8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f023 0210 	bic.w	r2, r3, #16
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6a1b      	ldr	r3, [r3, #32]
 8005dc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	031b      	lsls	r3, r3, #12
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	011b      	lsls	r3, r3, #4
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	621a      	str	r2, [r3, #32]
}
 8005df2:	bf00      	nop
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b085      	sub	sp, #20
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	f043 0307 	orr.w	r3, r3, #7
 8005e20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	609a      	str	r2, [r3, #8]
}
 8005e28:	bf00      	nop
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	021a      	lsls	r2, r3, #8
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	431a      	orrs	r2, r3
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	609a      	str	r2, [r3, #8]
}
 8005e68:	bf00      	nop
 8005e6a:	371c      	adds	r7, #28
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d101      	bne.n	8005e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	e06d      	b.n	8005f68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2202      	movs	r2, #2
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a30      	ldr	r2, [pc, #192]	; (8005f74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d004      	beq.n	8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a2f      	ldr	r2, [pc, #188]	; (8005f78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d108      	bne.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ec6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a20      	ldr	r2, [pc, #128]	; (8005f74 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d022      	beq.n	8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005efe:	d01d      	beq.n	8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a1d      	ldr	r2, [pc, #116]	; (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d018      	beq.n	8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a1c      	ldr	r2, [pc, #112]	; (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d013      	beq.n	8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a1a      	ldr	r2, [pc, #104]	; (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00e      	beq.n	8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a15      	ldr	r2, [pc, #84]	; (8005f78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d009      	beq.n	8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a16      	ldr	r2, [pc, #88]	; (8005f88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d004      	beq.n	8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a15      	ldr	r2, [pc, #84]	; (8005f8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d10c      	bne.n	8005f56 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	40010000 	.word	0x40010000
 8005f78:	40010400 	.word	0x40010400
 8005f7c:	40000400 	.word	0x40000400
 8005f80:	40000800 	.word	0x40000800
 8005f84:	40000c00 	.word	0x40000c00
 8005f88:	40014000 	.word	0x40014000
 8005f8c:	40001800 	.word	0x40001800

08005f90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e040      	b.n	8006060 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d106      	bne.n	8005ff4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7fb fda8 	bl	8001b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2224      	movs	r2, #36	; 0x24
 8005ff8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f022 0201 	bic.w	r2, r2, #1
 8006008:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f8c0 	bl	8006190 <UART_SetConfig>
 8006010:	4603      	mov	r3, r0
 8006012:	2b01      	cmp	r3, #1
 8006014:	d101      	bne.n	800601a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e022      	b.n	8006060 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601e:	2b00      	cmp	r3, #0
 8006020:	d002      	beq.n	8006028 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fb18 	bl	8006658 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006036:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689a      	ldr	r2, [r3, #8]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006046:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f042 0201 	orr.w	r2, r2, #1
 8006056:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fb9f 	bl	800679c <UART_CheckIdleState>
 800605e:	4603      	mov	r3, r0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b08a      	sub	sp, #40	; 0x28
 800606c:	af02      	add	r7, sp, #8
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	603b      	str	r3, [r7, #0]
 8006074:	4613      	mov	r3, r2
 8006076:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800607c:	2b20      	cmp	r3, #32
 800607e:	f040 8081 	bne.w	8006184 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d002      	beq.n	800608e <HAL_UART_Transmit+0x26>
 8006088:	88fb      	ldrh	r3, [r7, #6]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e079      	b.n	8006186 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006098:	2b01      	cmp	r3, #1
 800609a:	d101      	bne.n	80060a0 <HAL_UART_Transmit+0x38>
 800609c:	2302      	movs	r3, #2
 800609e:	e072      	b.n	8006186 <HAL_UART_Transmit+0x11e>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2221      	movs	r2, #33	; 0x21
 80060b4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060b6:	f7fb ff39 	bl	8001f2c <HAL_GetTick>
 80060ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	88fa      	ldrh	r2, [r7, #6]
 80060c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	88fa      	ldrh	r2, [r7, #6]
 80060c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d4:	d108      	bne.n	80060e8 <HAL_UART_Transmit+0x80>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d104      	bne.n	80060e8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80060de:	2300      	movs	r3, #0
 80060e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	61bb      	str	r3, [r7, #24]
 80060e6:	e003      	b.n	80060f0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060ec:	2300      	movs	r3, #0
 80060ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80060f8:	e02c      	b.n	8006154 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2200      	movs	r2, #0
 8006102:	2180      	movs	r1, #128	; 0x80
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f000 fb92 	bl	800682e <UART_WaitOnFlagUntilTimeout>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e038      	b.n	8006186 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10b      	bne.n	8006132 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	461a      	mov	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006128:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	3302      	adds	r3, #2
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	e007      	b.n	8006142 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	781a      	ldrb	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	3301      	adds	r3, #1
 8006140:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006148:	b29b      	uxth	r3, r3
 800614a:	3b01      	subs	r3, #1
 800614c:	b29a      	uxth	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800615a:	b29b      	uxth	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1cc      	bne.n	80060fa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	2200      	movs	r2, #0
 8006168:	2140      	movs	r1, #64	; 0x40
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 fb5f 	bl	800682e <UART_WaitOnFlagUntilTimeout>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e005      	b.n	8006186 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2220      	movs	r2, #32
 800617e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006180:	2300      	movs	r3, #0
 8006182:	e000      	b.n	8006186 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006184:	2302      	movs	r3, #2
  }
}
 8006186:	4618      	mov	r0, r3
 8006188:	3720      	adds	r7, #32
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
	...

08006190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006198:	2300      	movs	r3, #0
 800619a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689a      	ldr	r2, [r3, #8]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	431a      	orrs	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	4ba6      	ldr	r3, [pc, #664]	; (8006454 <UART_SetConfig+0x2c4>)
 80061bc:	4013      	ands	r3, r2
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	6812      	ldr	r2, [r2, #0]
 80061c2:	6979      	ldr	r1, [r7, #20]
 80061c4:	430b      	orrs	r3, r1
 80061c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	430a      	orrs	r2, r1
 8006200:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a94      	ldr	r2, [pc, #592]	; (8006458 <UART_SetConfig+0x2c8>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d120      	bne.n	800624e <UART_SetConfig+0xbe>
 800620c:	4b93      	ldr	r3, [pc, #588]	; (800645c <UART_SetConfig+0x2cc>)
 800620e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	2b03      	cmp	r3, #3
 8006218:	d816      	bhi.n	8006248 <UART_SetConfig+0xb8>
 800621a:	a201      	add	r2, pc, #4	; (adr r2, 8006220 <UART_SetConfig+0x90>)
 800621c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006220:	08006231 	.word	0x08006231
 8006224:	0800623d 	.word	0x0800623d
 8006228:	08006237 	.word	0x08006237
 800622c:	08006243 	.word	0x08006243
 8006230:	2301      	movs	r3, #1
 8006232:	77fb      	strb	r3, [r7, #31]
 8006234:	e150      	b.n	80064d8 <UART_SetConfig+0x348>
 8006236:	2302      	movs	r3, #2
 8006238:	77fb      	strb	r3, [r7, #31]
 800623a:	e14d      	b.n	80064d8 <UART_SetConfig+0x348>
 800623c:	2304      	movs	r3, #4
 800623e:	77fb      	strb	r3, [r7, #31]
 8006240:	e14a      	b.n	80064d8 <UART_SetConfig+0x348>
 8006242:	2308      	movs	r3, #8
 8006244:	77fb      	strb	r3, [r7, #31]
 8006246:	e147      	b.n	80064d8 <UART_SetConfig+0x348>
 8006248:	2310      	movs	r3, #16
 800624a:	77fb      	strb	r3, [r7, #31]
 800624c:	e144      	b.n	80064d8 <UART_SetConfig+0x348>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a83      	ldr	r2, [pc, #524]	; (8006460 <UART_SetConfig+0x2d0>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d132      	bne.n	80062be <UART_SetConfig+0x12e>
 8006258:	4b80      	ldr	r3, [pc, #512]	; (800645c <UART_SetConfig+0x2cc>)
 800625a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800625e:	f003 030c 	and.w	r3, r3, #12
 8006262:	2b0c      	cmp	r3, #12
 8006264:	d828      	bhi.n	80062b8 <UART_SetConfig+0x128>
 8006266:	a201      	add	r2, pc, #4	; (adr r2, 800626c <UART_SetConfig+0xdc>)
 8006268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626c:	080062a1 	.word	0x080062a1
 8006270:	080062b9 	.word	0x080062b9
 8006274:	080062b9 	.word	0x080062b9
 8006278:	080062b9 	.word	0x080062b9
 800627c:	080062ad 	.word	0x080062ad
 8006280:	080062b9 	.word	0x080062b9
 8006284:	080062b9 	.word	0x080062b9
 8006288:	080062b9 	.word	0x080062b9
 800628c:	080062a7 	.word	0x080062a7
 8006290:	080062b9 	.word	0x080062b9
 8006294:	080062b9 	.word	0x080062b9
 8006298:	080062b9 	.word	0x080062b9
 800629c:	080062b3 	.word	0x080062b3
 80062a0:	2300      	movs	r3, #0
 80062a2:	77fb      	strb	r3, [r7, #31]
 80062a4:	e118      	b.n	80064d8 <UART_SetConfig+0x348>
 80062a6:	2302      	movs	r3, #2
 80062a8:	77fb      	strb	r3, [r7, #31]
 80062aa:	e115      	b.n	80064d8 <UART_SetConfig+0x348>
 80062ac:	2304      	movs	r3, #4
 80062ae:	77fb      	strb	r3, [r7, #31]
 80062b0:	e112      	b.n	80064d8 <UART_SetConfig+0x348>
 80062b2:	2308      	movs	r3, #8
 80062b4:	77fb      	strb	r3, [r7, #31]
 80062b6:	e10f      	b.n	80064d8 <UART_SetConfig+0x348>
 80062b8:	2310      	movs	r3, #16
 80062ba:	77fb      	strb	r3, [r7, #31]
 80062bc:	e10c      	b.n	80064d8 <UART_SetConfig+0x348>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a68      	ldr	r2, [pc, #416]	; (8006464 <UART_SetConfig+0x2d4>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d120      	bne.n	800630a <UART_SetConfig+0x17a>
 80062c8:	4b64      	ldr	r3, [pc, #400]	; (800645c <UART_SetConfig+0x2cc>)
 80062ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062d2:	2b30      	cmp	r3, #48	; 0x30
 80062d4:	d013      	beq.n	80062fe <UART_SetConfig+0x16e>
 80062d6:	2b30      	cmp	r3, #48	; 0x30
 80062d8:	d814      	bhi.n	8006304 <UART_SetConfig+0x174>
 80062da:	2b20      	cmp	r3, #32
 80062dc:	d009      	beq.n	80062f2 <UART_SetConfig+0x162>
 80062de:	2b20      	cmp	r3, #32
 80062e0:	d810      	bhi.n	8006304 <UART_SetConfig+0x174>
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <UART_SetConfig+0x15c>
 80062e6:	2b10      	cmp	r3, #16
 80062e8:	d006      	beq.n	80062f8 <UART_SetConfig+0x168>
 80062ea:	e00b      	b.n	8006304 <UART_SetConfig+0x174>
 80062ec:	2300      	movs	r3, #0
 80062ee:	77fb      	strb	r3, [r7, #31]
 80062f0:	e0f2      	b.n	80064d8 <UART_SetConfig+0x348>
 80062f2:	2302      	movs	r3, #2
 80062f4:	77fb      	strb	r3, [r7, #31]
 80062f6:	e0ef      	b.n	80064d8 <UART_SetConfig+0x348>
 80062f8:	2304      	movs	r3, #4
 80062fa:	77fb      	strb	r3, [r7, #31]
 80062fc:	e0ec      	b.n	80064d8 <UART_SetConfig+0x348>
 80062fe:	2308      	movs	r3, #8
 8006300:	77fb      	strb	r3, [r7, #31]
 8006302:	e0e9      	b.n	80064d8 <UART_SetConfig+0x348>
 8006304:	2310      	movs	r3, #16
 8006306:	77fb      	strb	r3, [r7, #31]
 8006308:	e0e6      	b.n	80064d8 <UART_SetConfig+0x348>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a56      	ldr	r2, [pc, #344]	; (8006468 <UART_SetConfig+0x2d8>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d120      	bne.n	8006356 <UART_SetConfig+0x1c6>
 8006314:	4b51      	ldr	r3, [pc, #324]	; (800645c <UART_SetConfig+0x2cc>)
 8006316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800631a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800631e:	2bc0      	cmp	r3, #192	; 0xc0
 8006320:	d013      	beq.n	800634a <UART_SetConfig+0x1ba>
 8006322:	2bc0      	cmp	r3, #192	; 0xc0
 8006324:	d814      	bhi.n	8006350 <UART_SetConfig+0x1c0>
 8006326:	2b80      	cmp	r3, #128	; 0x80
 8006328:	d009      	beq.n	800633e <UART_SetConfig+0x1ae>
 800632a:	2b80      	cmp	r3, #128	; 0x80
 800632c:	d810      	bhi.n	8006350 <UART_SetConfig+0x1c0>
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <UART_SetConfig+0x1a8>
 8006332:	2b40      	cmp	r3, #64	; 0x40
 8006334:	d006      	beq.n	8006344 <UART_SetConfig+0x1b4>
 8006336:	e00b      	b.n	8006350 <UART_SetConfig+0x1c0>
 8006338:	2300      	movs	r3, #0
 800633a:	77fb      	strb	r3, [r7, #31]
 800633c:	e0cc      	b.n	80064d8 <UART_SetConfig+0x348>
 800633e:	2302      	movs	r3, #2
 8006340:	77fb      	strb	r3, [r7, #31]
 8006342:	e0c9      	b.n	80064d8 <UART_SetConfig+0x348>
 8006344:	2304      	movs	r3, #4
 8006346:	77fb      	strb	r3, [r7, #31]
 8006348:	e0c6      	b.n	80064d8 <UART_SetConfig+0x348>
 800634a:	2308      	movs	r3, #8
 800634c:	77fb      	strb	r3, [r7, #31]
 800634e:	e0c3      	b.n	80064d8 <UART_SetConfig+0x348>
 8006350:	2310      	movs	r3, #16
 8006352:	77fb      	strb	r3, [r7, #31]
 8006354:	e0c0      	b.n	80064d8 <UART_SetConfig+0x348>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a44      	ldr	r2, [pc, #272]	; (800646c <UART_SetConfig+0x2dc>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d125      	bne.n	80063ac <UART_SetConfig+0x21c>
 8006360:	4b3e      	ldr	r3, [pc, #248]	; (800645c <UART_SetConfig+0x2cc>)
 8006362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800636a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800636e:	d017      	beq.n	80063a0 <UART_SetConfig+0x210>
 8006370:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006374:	d817      	bhi.n	80063a6 <UART_SetConfig+0x216>
 8006376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800637a:	d00b      	beq.n	8006394 <UART_SetConfig+0x204>
 800637c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006380:	d811      	bhi.n	80063a6 <UART_SetConfig+0x216>
 8006382:	2b00      	cmp	r3, #0
 8006384:	d003      	beq.n	800638e <UART_SetConfig+0x1fe>
 8006386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800638a:	d006      	beq.n	800639a <UART_SetConfig+0x20a>
 800638c:	e00b      	b.n	80063a6 <UART_SetConfig+0x216>
 800638e:	2300      	movs	r3, #0
 8006390:	77fb      	strb	r3, [r7, #31]
 8006392:	e0a1      	b.n	80064d8 <UART_SetConfig+0x348>
 8006394:	2302      	movs	r3, #2
 8006396:	77fb      	strb	r3, [r7, #31]
 8006398:	e09e      	b.n	80064d8 <UART_SetConfig+0x348>
 800639a:	2304      	movs	r3, #4
 800639c:	77fb      	strb	r3, [r7, #31]
 800639e:	e09b      	b.n	80064d8 <UART_SetConfig+0x348>
 80063a0:	2308      	movs	r3, #8
 80063a2:	77fb      	strb	r3, [r7, #31]
 80063a4:	e098      	b.n	80064d8 <UART_SetConfig+0x348>
 80063a6:	2310      	movs	r3, #16
 80063a8:	77fb      	strb	r3, [r7, #31]
 80063aa:	e095      	b.n	80064d8 <UART_SetConfig+0x348>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a2f      	ldr	r2, [pc, #188]	; (8006470 <UART_SetConfig+0x2e0>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d125      	bne.n	8006402 <UART_SetConfig+0x272>
 80063b6:	4b29      	ldr	r3, [pc, #164]	; (800645c <UART_SetConfig+0x2cc>)
 80063b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80063c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063c4:	d017      	beq.n	80063f6 <UART_SetConfig+0x266>
 80063c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063ca:	d817      	bhi.n	80063fc <UART_SetConfig+0x26c>
 80063cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063d0:	d00b      	beq.n	80063ea <UART_SetConfig+0x25a>
 80063d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063d6:	d811      	bhi.n	80063fc <UART_SetConfig+0x26c>
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d003      	beq.n	80063e4 <UART_SetConfig+0x254>
 80063dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063e0:	d006      	beq.n	80063f0 <UART_SetConfig+0x260>
 80063e2:	e00b      	b.n	80063fc <UART_SetConfig+0x26c>
 80063e4:	2301      	movs	r3, #1
 80063e6:	77fb      	strb	r3, [r7, #31]
 80063e8:	e076      	b.n	80064d8 <UART_SetConfig+0x348>
 80063ea:	2302      	movs	r3, #2
 80063ec:	77fb      	strb	r3, [r7, #31]
 80063ee:	e073      	b.n	80064d8 <UART_SetConfig+0x348>
 80063f0:	2304      	movs	r3, #4
 80063f2:	77fb      	strb	r3, [r7, #31]
 80063f4:	e070      	b.n	80064d8 <UART_SetConfig+0x348>
 80063f6:	2308      	movs	r3, #8
 80063f8:	77fb      	strb	r3, [r7, #31]
 80063fa:	e06d      	b.n	80064d8 <UART_SetConfig+0x348>
 80063fc:	2310      	movs	r3, #16
 80063fe:	77fb      	strb	r3, [r7, #31]
 8006400:	e06a      	b.n	80064d8 <UART_SetConfig+0x348>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a1b      	ldr	r2, [pc, #108]	; (8006474 <UART_SetConfig+0x2e4>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d138      	bne.n	800647e <UART_SetConfig+0x2ee>
 800640c:	4b13      	ldr	r3, [pc, #76]	; (800645c <UART_SetConfig+0x2cc>)
 800640e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006412:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006416:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800641a:	d017      	beq.n	800644c <UART_SetConfig+0x2bc>
 800641c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006420:	d82a      	bhi.n	8006478 <UART_SetConfig+0x2e8>
 8006422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006426:	d00b      	beq.n	8006440 <UART_SetConfig+0x2b0>
 8006428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800642c:	d824      	bhi.n	8006478 <UART_SetConfig+0x2e8>
 800642e:	2b00      	cmp	r3, #0
 8006430:	d003      	beq.n	800643a <UART_SetConfig+0x2aa>
 8006432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006436:	d006      	beq.n	8006446 <UART_SetConfig+0x2b6>
 8006438:	e01e      	b.n	8006478 <UART_SetConfig+0x2e8>
 800643a:	2300      	movs	r3, #0
 800643c:	77fb      	strb	r3, [r7, #31]
 800643e:	e04b      	b.n	80064d8 <UART_SetConfig+0x348>
 8006440:	2302      	movs	r3, #2
 8006442:	77fb      	strb	r3, [r7, #31]
 8006444:	e048      	b.n	80064d8 <UART_SetConfig+0x348>
 8006446:	2304      	movs	r3, #4
 8006448:	77fb      	strb	r3, [r7, #31]
 800644a:	e045      	b.n	80064d8 <UART_SetConfig+0x348>
 800644c:	2308      	movs	r3, #8
 800644e:	77fb      	strb	r3, [r7, #31]
 8006450:	e042      	b.n	80064d8 <UART_SetConfig+0x348>
 8006452:	bf00      	nop
 8006454:	efff69f3 	.word	0xefff69f3
 8006458:	40011000 	.word	0x40011000
 800645c:	40023800 	.word	0x40023800
 8006460:	40004400 	.word	0x40004400
 8006464:	40004800 	.word	0x40004800
 8006468:	40004c00 	.word	0x40004c00
 800646c:	40005000 	.word	0x40005000
 8006470:	40011400 	.word	0x40011400
 8006474:	40007800 	.word	0x40007800
 8006478:	2310      	movs	r3, #16
 800647a:	77fb      	strb	r3, [r7, #31]
 800647c:	e02c      	b.n	80064d8 <UART_SetConfig+0x348>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a72      	ldr	r2, [pc, #456]	; (800664c <UART_SetConfig+0x4bc>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d125      	bne.n	80064d4 <UART_SetConfig+0x344>
 8006488:	4b71      	ldr	r3, [pc, #452]	; (8006650 <UART_SetConfig+0x4c0>)
 800648a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800648e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006492:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006496:	d017      	beq.n	80064c8 <UART_SetConfig+0x338>
 8006498:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800649c:	d817      	bhi.n	80064ce <UART_SetConfig+0x33e>
 800649e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064a2:	d00b      	beq.n	80064bc <UART_SetConfig+0x32c>
 80064a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064a8:	d811      	bhi.n	80064ce <UART_SetConfig+0x33e>
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <UART_SetConfig+0x326>
 80064ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064b2:	d006      	beq.n	80064c2 <UART_SetConfig+0x332>
 80064b4:	e00b      	b.n	80064ce <UART_SetConfig+0x33e>
 80064b6:	2300      	movs	r3, #0
 80064b8:	77fb      	strb	r3, [r7, #31]
 80064ba:	e00d      	b.n	80064d8 <UART_SetConfig+0x348>
 80064bc:	2302      	movs	r3, #2
 80064be:	77fb      	strb	r3, [r7, #31]
 80064c0:	e00a      	b.n	80064d8 <UART_SetConfig+0x348>
 80064c2:	2304      	movs	r3, #4
 80064c4:	77fb      	strb	r3, [r7, #31]
 80064c6:	e007      	b.n	80064d8 <UART_SetConfig+0x348>
 80064c8:	2308      	movs	r3, #8
 80064ca:	77fb      	strb	r3, [r7, #31]
 80064cc:	e004      	b.n	80064d8 <UART_SetConfig+0x348>
 80064ce:	2310      	movs	r3, #16
 80064d0:	77fb      	strb	r3, [r7, #31]
 80064d2:	e001      	b.n	80064d8 <UART_SetConfig+0x348>
 80064d4:	2310      	movs	r3, #16
 80064d6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	69db      	ldr	r3, [r3, #28]
 80064dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064e0:	d15b      	bne.n	800659a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80064e2:	7ffb      	ldrb	r3, [r7, #31]
 80064e4:	2b08      	cmp	r3, #8
 80064e6:	d828      	bhi.n	800653a <UART_SetConfig+0x3aa>
 80064e8:	a201      	add	r2, pc, #4	; (adr r2, 80064f0 <UART_SetConfig+0x360>)
 80064ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ee:	bf00      	nop
 80064f0:	08006515 	.word	0x08006515
 80064f4:	0800651d 	.word	0x0800651d
 80064f8:	08006525 	.word	0x08006525
 80064fc:	0800653b 	.word	0x0800653b
 8006500:	0800652b 	.word	0x0800652b
 8006504:	0800653b 	.word	0x0800653b
 8006508:	0800653b 	.word	0x0800653b
 800650c:	0800653b 	.word	0x0800653b
 8006510:	08006533 	.word	0x08006533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006514:	f7fe fb98 	bl	8004c48 <HAL_RCC_GetPCLK1Freq>
 8006518:	61b8      	str	r0, [r7, #24]
        break;
 800651a:	e013      	b.n	8006544 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800651c:	f7fe fba8 	bl	8004c70 <HAL_RCC_GetPCLK2Freq>
 8006520:	61b8      	str	r0, [r7, #24]
        break;
 8006522:	e00f      	b.n	8006544 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006524:	4b4b      	ldr	r3, [pc, #300]	; (8006654 <UART_SetConfig+0x4c4>)
 8006526:	61bb      	str	r3, [r7, #24]
        break;
 8006528:	e00c      	b.n	8006544 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800652a:	f7fe fa7b 	bl	8004a24 <HAL_RCC_GetSysClockFreq>
 800652e:	61b8      	str	r0, [r7, #24]
        break;
 8006530:	e008      	b.n	8006544 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006536:	61bb      	str	r3, [r7, #24]
        break;
 8006538:	e004      	b.n	8006544 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800653a:	2300      	movs	r3, #0
 800653c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	77bb      	strb	r3, [r7, #30]
        break;
 8006542:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d074      	beq.n	8006634 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	005a      	lsls	r2, r3, #1
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	085b      	lsrs	r3, r3, #1
 8006554:	441a      	add	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	fbb2 f3f3 	udiv	r3, r2, r3
 800655e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	2b0f      	cmp	r3, #15
 8006564:	d916      	bls.n	8006594 <UART_SetConfig+0x404>
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800656c:	d212      	bcs.n	8006594 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	b29b      	uxth	r3, r3
 8006572:	f023 030f 	bic.w	r3, r3, #15
 8006576:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	085b      	lsrs	r3, r3, #1
 800657c:	b29b      	uxth	r3, r3
 800657e:	f003 0307 	and.w	r3, r3, #7
 8006582:	b29a      	uxth	r2, r3
 8006584:	89fb      	ldrh	r3, [r7, #14]
 8006586:	4313      	orrs	r3, r2
 8006588:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	89fa      	ldrh	r2, [r7, #14]
 8006590:	60da      	str	r2, [r3, #12]
 8006592:	e04f      	b.n	8006634 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	77bb      	strb	r3, [r7, #30]
 8006598:	e04c      	b.n	8006634 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800659a:	7ffb      	ldrb	r3, [r7, #31]
 800659c:	2b08      	cmp	r3, #8
 800659e:	d828      	bhi.n	80065f2 <UART_SetConfig+0x462>
 80065a0:	a201      	add	r2, pc, #4	; (adr r2, 80065a8 <UART_SetConfig+0x418>)
 80065a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a6:	bf00      	nop
 80065a8:	080065cd 	.word	0x080065cd
 80065ac:	080065d5 	.word	0x080065d5
 80065b0:	080065dd 	.word	0x080065dd
 80065b4:	080065f3 	.word	0x080065f3
 80065b8:	080065e3 	.word	0x080065e3
 80065bc:	080065f3 	.word	0x080065f3
 80065c0:	080065f3 	.word	0x080065f3
 80065c4:	080065f3 	.word	0x080065f3
 80065c8:	080065eb 	.word	0x080065eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065cc:	f7fe fb3c 	bl	8004c48 <HAL_RCC_GetPCLK1Freq>
 80065d0:	61b8      	str	r0, [r7, #24]
        break;
 80065d2:	e013      	b.n	80065fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065d4:	f7fe fb4c 	bl	8004c70 <HAL_RCC_GetPCLK2Freq>
 80065d8:	61b8      	str	r0, [r7, #24]
        break;
 80065da:	e00f      	b.n	80065fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065dc:	4b1d      	ldr	r3, [pc, #116]	; (8006654 <UART_SetConfig+0x4c4>)
 80065de:	61bb      	str	r3, [r7, #24]
        break;
 80065e0:	e00c      	b.n	80065fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065e2:	f7fe fa1f 	bl	8004a24 <HAL_RCC_GetSysClockFreq>
 80065e6:	61b8      	str	r0, [r7, #24]
        break;
 80065e8:	e008      	b.n	80065fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ee:	61bb      	str	r3, [r7, #24]
        break;
 80065f0:	e004      	b.n	80065fc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80065f2:	2300      	movs	r3, #0
 80065f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	77bb      	strb	r3, [r7, #30]
        break;
 80065fa:	bf00      	nop
    }

    if (pclk != 0U)
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d018      	beq.n	8006634 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	085a      	lsrs	r2, r3, #1
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	441a      	add	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	fbb2 f3f3 	udiv	r3, r2, r3
 8006614:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	2b0f      	cmp	r3, #15
 800661a:	d909      	bls.n	8006630 <UART_SetConfig+0x4a0>
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006622:	d205      	bcs.n	8006630 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	b29a      	uxth	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	60da      	str	r2, [r3, #12]
 800662e:	e001      	b.n	8006634 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006640:	7fbb      	ldrb	r3, [r7, #30]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3720      	adds	r7, #32
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	40007c00 	.word	0x40007c00
 8006650:	40023800 	.word	0x40023800
 8006654:	00f42400 	.word	0x00f42400

08006658 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00a      	beq.n	8006682 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00a      	beq.n	80066a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	430a      	orrs	r2, r1
 80066a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a8:	f003 0304 	and.w	r3, r3, #4
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00a      	beq.n	80066c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ca:	f003 0308 	and.w	r3, r3, #8
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00a      	beq.n	80066e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	430a      	orrs	r2, r1
 80066e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	f003 0310 	and.w	r3, r3, #16
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00a      	beq.n	800670a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	430a      	orrs	r2, r1
 8006708:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670e:	f003 0320 	and.w	r3, r3, #32
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00a      	beq.n	800672c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006734:	2b00      	cmp	r3, #0
 8006736:	d01a      	beq.n	800676e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	430a      	orrs	r2, r1
 800674c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006756:	d10a      	bne.n	800676e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00a      	beq.n	8006790 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	605a      	str	r2, [r3, #4]
  }
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af02      	add	r7, sp, #8
 80067a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067ac:	f7fb fbbe 	bl	8001f2c <HAL_GetTick>
 80067b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 0308 	and.w	r3, r3, #8
 80067bc:	2b08      	cmp	r3, #8
 80067be:	d10e      	bne.n	80067de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 f82d 	bl	800682e <UART_WaitOnFlagUntilTimeout>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d001      	beq.n	80067de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e023      	b.n	8006826 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0304 	and.w	r3, r3, #4
 80067e8:	2b04      	cmp	r3, #4
 80067ea:	d10e      	bne.n	800680a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f817 	bl	800682e <UART_WaitOnFlagUntilTimeout>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e00d      	b.n	8006826 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2220      	movs	r2, #32
 800680e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2220      	movs	r2, #32
 8006814:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b09c      	sub	sp, #112	; 0x70
 8006832:	af00      	add	r7, sp, #0
 8006834:	60f8      	str	r0, [r7, #12]
 8006836:	60b9      	str	r1, [r7, #8]
 8006838:	603b      	str	r3, [r7, #0]
 800683a:	4613      	mov	r3, r2
 800683c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800683e:	e0a5      	b.n	800698c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006840:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006846:	f000 80a1 	beq.w	800698c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800684a:	f7fb fb6f 	bl	8001f2c <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006856:	429a      	cmp	r2, r3
 8006858:	d302      	bcc.n	8006860 <UART_WaitOnFlagUntilTimeout+0x32>
 800685a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800685c:	2b00      	cmp	r3, #0
 800685e:	d13e      	bne.n	80068de <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006868:	e853 3f00 	ldrex	r3, [r3]
 800686c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800686e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006870:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006874:	667b      	str	r3, [r7, #100]	; 0x64
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	461a      	mov	r2, r3
 800687c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800687e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006880:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006882:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006884:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006886:	e841 2300 	strex	r3, r2, [r1]
 800688a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800688c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1e6      	bne.n	8006860 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	3308      	adds	r3, #8
 8006898:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800689c:	e853 3f00 	ldrex	r3, [r3]
 80068a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a4:	f023 0301 	bic.w	r3, r3, #1
 80068a8:	663b      	str	r3, [r7, #96]	; 0x60
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	3308      	adds	r3, #8
 80068b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80068b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80068b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068ba:	e841 2300 	strex	r3, r2, [r1]
 80068be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80068c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1e5      	bne.n	8006892 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2220      	movs	r2, #32
 80068ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2220      	movs	r2, #32
 80068d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e067      	b.n	80069ae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0304 	and.w	r3, r3, #4
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d04f      	beq.n	800698c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068fa:	d147      	bne.n	800698c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006904:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690e:	e853 3f00 	ldrex	r3, [r3]
 8006912:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800691a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	461a      	mov	r2, r3
 8006922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006924:	637b      	str	r3, [r7, #52]	; 0x34
 8006926:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006928:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800692a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800692c:	e841 2300 	strex	r3, r2, [r1]
 8006930:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1e6      	bne.n	8006906 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	3308      	adds	r3, #8
 800693e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	e853 3f00 	ldrex	r3, [r3]
 8006946:	613b      	str	r3, [r7, #16]
   return(result);
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	f023 0301 	bic.w	r3, r3, #1
 800694e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3308      	adds	r3, #8
 8006956:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006958:	623a      	str	r2, [r7, #32]
 800695a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695c:	69f9      	ldr	r1, [r7, #28]
 800695e:	6a3a      	ldr	r2, [r7, #32]
 8006960:	e841 2300 	strex	r3, r2, [r1]
 8006964:	61bb      	str	r3, [r7, #24]
   return(result);
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1e5      	bne.n	8006938 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2220      	movs	r2, #32
 8006970:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2220      	movs	r2, #32
 8006976:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2220      	movs	r2, #32
 800697c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e010      	b.n	80069ae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	69da      	ldr	r2, [r3, #28]
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	4013      	ands	r3, r2
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	429a      	cmp	r2, r3
 800699a:	bf0c      	ite	eq
 800699c:	2301      	moveq	r3, #1
 800699e:	2300      	movne	r3, #0
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	461a      	mov	r2, r3
 80069a4:	79fb      	ldrb	r3, [r7, #7]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	f43f af4a 	beq.w	8006840 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3770      	adds	r7, #112	; 0x70
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
	...

080069b8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
	  IP_ADDRESS[0] = 192;
 80069be:	4b91      	ldr	r3, [pc, #580]	; (8006c04 <MX_LWIP_Init+0x24c>)
 80069c0:	22c0      	movs	r2, #192	; 0xc0
 80069c2:	701a      	strb	r2, [r3, #0]
		  IP_ADDRESS[1] = 168;
 80069c4:	4b8f      	ldr	r3, [pc, #572]	; (8006c04 <MX_LWIP_Init+0x24c>)
 80069c6:	22a8      	movs	r2, #168	; 0xa8
 80069c8:	705a      	strb	r2, [r3, #1]
		  IP_ADDRESS[2] =  4;
 80069ca:	4b8e      	ldr	r3, [pc, #568]	; (8006c04 <MX_LWIP_Init+0x24c>)
 80069cc:	2204      	movs	r2, #4
 80069ce:	709a      	strb	r2, [r3, #2]
		  IP_ADDRESS[3] = 100;
 80069d0:	4b8c      	ldr	r3, [pc, #560]	; (8006c04 <MX_LWIP_Init+0x24c>)
 80069d2:	2264      	movs	r2, #100	; 0x64
 80069d4:	70da      	strb	r2, [r3, #3]
		  NETMASK_ADDRESS[0] = 255;
 80069d6:	4b8c      	ldr	r3, [pc, #560]	; (8006c08 <MX_LWIP_Init+0x250>)
 80069d8:	22ff      	movs	r2, #255	; 0xff
 80069da:	701a      	strb	r2, [r3, #0]
		  NETMASK_ADDRESS[1] = 255;
 80069dc:	4b8a      	ldr	r3, [pc, #552]	; (8006c08 <MX_LWIP_Init+0x250>)
 80069de:	22ff      	movs	r2, #255	; 0xff
 80069e0:	705a      	strb	r2, [r3, #1]
		  NETMASK_ADDRESS[2] = 255;
 80069e2:	4b89      	ldr	r3, [pc, #548]	; (8006c08 <MX_LWIP_Init+0x250>)
 80069e4:	22ff      	movs	r2, #255	; 0xff
 80069e6:	709a      	strb	r2, [r3, #2]
		  NETMASK_ADDRESS[3] = 0;
 80069e8:	4b87      	ldr	r3, [pc, #540]	; (8006c08 <MX_LWIP_Init+0x250>)
 80069ea:	2200      	movs	r2, #0
 80069ec:	70da      	strb	r2, [r3, #3]
		  GATEWAY_ADDRESS[0] = 192;
 80069ee:	4b87      	ldr	r3, [pc, #540]	; (8006c0c <MX_LWIP_Init+0x254>)
 80069f0:	22c0      	movs	r2, #192	; 0xc0
 80069f2:	701a      	strb	r2, [r3, #0]
		  GATEWAY_ADDRESS[1] = 168;
 80069f4:	4b85      	ldr	r3, [pc, #532]	; (8006c0c <MX_LWIP_Init+0x254>)
 80069f6:	22a8      	movs	r2, #168	; 0xa8
 80069f8:	705a      	strb	r2, [r3, #1]
		  GATEWAY_ADDRESS[2] = 4;
 80069fa:	4b84      	ldr	r3, [pc, #528]	; (8006c0c <MX_LWIP_Init+0x254>)
 80069fc:	2204      	movs	r2, #4
 80069fe:	709a      	strb	r2, [r3, #2]
		  GATEWAY_ADDRESS[3] = 1;
 8006a00:	4b82      	ldr	r3, [pc, #520]	; (8006c0c <MX_LWIP_Init+0x254>)
 8006a02:	2201      	movs	r2, #1
 8006a04:	70da      	strb	r2, [r3, #3]

  lwip_init();
 8006a06:	f008 f848 	bl	800ea9a <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006a0a:	4b7e      	ldr	r3, [pc, #504]	; (8006c04 <MX_LWIP_Init+0x24c>)
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	061a      	lsls	r2, r3, #24
 8006a10:	4b7c      	ldr	r3, [pc, #496]	; (8006c04 <MX_LWIP_Init+0x24c>)
 8006a12:	785b      	ldrb	r3, [r3, #1]
 8006a14:	041b      	lsls	r3, r3, #16
 8006a16:	431a      	orrs	r2, r3
 8006a18:	4b7a      	ldr	r3, [pc, #488]	; (8006c04 <MX_LWIP_Init+0x24c>)
 8006a1a:	789b      	ldrb	r3, [r3, #2]
 8006a1c:	021b      	lsls	r3, r3, #8
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	4a78      	ldr	r2, [pc, #480]	; (8006c04 <MX_LWIP_Init+0x24c>)
 8006a22:	78d2      	ldrb	r2, [r2, #3]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	061a      	lsls	r2, r3, #24
 8006a28:	4b76      	ldr	r3, [pc, #472]	; (8006c04 <MX_LWIP_Init+0x24c>)
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	0619      	lsls	r1, r3, #24
 8006a2e:	4b75      	ldr	r3, [pc, #468]	; (8006c04 <MX_LWIP_Init+0x24c>)
 8006a30:	785b      	ldrb	r3, [r3, #1]
 8006a32:	041b      	lsls	r3, r3, #16
 8006a34:	4319      	orrs	r1, r3
 8006a36:	4b73      	ldr	r3, [pc, #460]	; (8006c04 <MX_LWIP_Init+0x24c>)
 8006a38:	789b      	ldrb	r3, [r3, #2]
 8006a3a:	021b      	lsls	r3, r3, #8
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	4971      	ldr	r1, [pc, #452]	; (8006c04 <MX_LWIP_Init+0x24c>)
 8006a40:	78c9      	ldrb	r1, [r1, #3]
 8006a42:	430b      	orrs	r3, r1
 8006a44:	021b      	lsls	r3, r3, #8
 8006a46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	4b6d      	ldr	r3, [pc, #436]	; (8006c04 <MX_LWIP_Init+0x24c>)
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	0619      	lsls	r1, r3, #24
 8006a52:	4b6c      	ldr	r3, [pc, #432]	; (8006c04 <MX_LWIP_Init+0x24c>)
 8006a54:	785b      	ldrb	r3, [r3, #1]
 8006a56:	041b      	lsls	r3, r3, #16
 8006a58:	4319      	orrs	r1, r3
 8006a5a:	4b6a      	ldr	r3, [pc, #424]	; (8006c04 <MX_LWIP_Init+0x24c>)
 8006a5c:	789b      	ldrb	r3, [r3, #2]
 8006a5e:	021b      	lsls	r3, r3, #8
 8006a60:	430b      	orrs	r3, r1
 8006a62:	4968      	ldr	r1, [pc, #416]	; (8006c04 <MX_LWIP_Init+0x24c>)
 8006a64:	78c9      	ldrb	r1, [r1, #3]
 8006a66:	430b      	orrs	r3, r1
 8006a68:	0a1b      	lsrs	r3, r3, #8
 8006a6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	4b64      	ldr	r3, [pc, #400]	; (8006c04 <MX_LWIP_Init+0x24c>)
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	0619      	lsls	r1, r3, #24
 8006a76:	4b63      	ldr	r3, [pc, #396]	; (8006c04 <MX_LWIP_Init+0x24c>)
 8006a78:	785b      	ldrb	r3, [r3, #1]
 8006a7a:	041b      	lsls	r3, r3, #16
 8006a7c:	4319      	orrs	r1, r3
 8006a7e:	4b61      	ldr	r3, [pc, #388]	; (8006c04 <MX_LWIP_Init+0x24c>)
 8006a80:	789b      	ldrb	r3, [r3, #2]
 8006a82:	021b      	lsls	r3, r3, #8
 8006a84:	430b      	orrs	r3, r1
 8006a86:	495f      	ldr	r1, [pc, #380]	; (8006c04 <MX_LWIP_Init+0x24c>)
 8006a88:	78c9      	ldrb	r1, [r1, #3]
 8006a8a:	430b      	orrs	r3, r1
 8006a8c:	0e1b      	lsrs	r3, r3, #24
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	4a5f      	ldr	r2, [pc, #380]	; (8006c10 <MX_LWIP_Init+0x258>)
 8006a92:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006a94:	4b5c      	ldr	r3, [pc, #368]	; (8006c08 <MX_LWIP_Init+0x250>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	061a      	lsls	r2, r3, #24
 8006a9a:	4b5b      	ldr	r3, [pc, #364]	; (8006c08 <MX_LWIP_Init+0x250>)
 8006a9c:	785b      	ldrb	r3, [r3, #1]
 8006a9e:	041b      	lsls	r3, r3, #16
 8006aa0:	431a      	orrs	r2, r3
 8006aa2:	4b59      	ldr	r3, [pc, #356]	; (8006c08 <MX_LWIP_Init+0x250>)
 8006aa4:	789b      	ldrb	r3, [r3, #2]
 8006aa6:	021b      	lsls	r3, r3, #8
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	4a57      	ldr	r2, [pc, #348]	; (8006c08 <MX_LWIP_Init+0x250>)
 8006aac:	78d2      	ldrb	r2, [r2, #3]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	061a      	lsls	r2, r3, #24
 8006ab2:	4b55      	ldr	r3, [pc, #340]	; (8006c08 <MX_LWIP_Init+0x250>)
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	0619      	lsls	r1, r3, #24
 8006ab8:	4b53      	ldr	r3, [pc, #332]	; (8006c08 <MX_LWIP_Init+0x250>)
 8006aba:	785b      	ldrb	r3, [r3, #1]
 8006abc:	041b      	lsls	r3, r3, #16
 8006abe:	4319      	orrs	r1, r3
 8006ac0:	4b51      	ldr	r3, [pc, #324]	; (8006c08 <MX_LWIP_Init+0x250>)
 8006ac2:	789b      	ldrb	r3, [r3, #2]
 8006ac4:	021b      	lsls	r3, r3, #8
 8006ac6:	430b      	orrs	r3, r1
 8006ac8:	494f      	ldr	r1, [pc, #316]	; (8006c08 <MX_LWIP_Init+0x250>)
 8006aca:	78c9      	ldrb	r1, [r1, #3]
 8006acc:	430b      	orrs	r3, r1
 8006ace:	021b      	lsls	r3, r3, #8
 8006ad0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ad4:	431a      	orrs	r2, r3
 8006ad6:	4b4c      	ldr	r3, [pc, #304]	; (8006c08 <MX_LWIP_Init+0x250>)
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	0619      	lsls	r1, r3, #24
 8006adc:	4b4a      	ldr	r3, [pc, #296]	; (8006c08 <MX_LWIP_Init+0x250>)
 8006ade:	785b      	ldrb	r3, [r3, #1]
 8006ae0:	041b      	lsls	r3, r3, #16
 8006ae2:	4319      	orrs	r1, r3
 8006ae4:	4b48      	ldr	r3, [pc, #288]	; (8006c08 <MX_LWIP_Init+0x250>)
 8006ae6:	789b      	ldrb	r3, [r3, #2]
 8006ae8:	021b      	lsls	r3, r3, #8
 8006aea:	430b      	orrs	r3, r1
 8006aec:	4946      	ldr	r1, [pc, #280]	; (8006c08 <MX_LWIP_Init+0x250>)
 8006aee:	78c9      	ldrb	r1, [r1, #3]
 8006af0:	430b      	orrs	r3, r1
 8006af2:	0a1b      	lsrs	r3, r3, #8
 8006af4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006af8:	431a      	orrs	r2, r3
 8006afa:	4b43      	ldr	r3, [pc, #268]	; (8006c08 <MX_LWIP_Init+0x250>)
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	0619      	lsls	r1, r3, #24
 8006b00:	4b41      	ldr	r3, [pc, #260]	; (8006c08 <MX_LWIP_Init+0x250>)
 8006b02:	785b      	ldrb	r3, [r3, #1]
 8006b04:	041b      	lsls	r3, r3, #16
 8006b06:	4319      	orrs	r1, r3
 8006b08:	4b3f      	ldr	r3, [pc, #252]	; (8006c08 <MX_LWIP_Init+0x250>)
 8006b0a:	789b      	ldrb	r3, [r3, #2]
 8006b0c:	021b      	lsls	r3, r3, #8
 8006b0e:	430b      	orrs	r3, r1
 8006b10:	493d      	ldr	r1, [pc, #244]	; (8006c08 <MX_LWIP_Init+0x250>)
 8006b12:	78c9      	ldrb	r1, [r1, #3]
 8006b14:	430b      	orrs	r3, r1
 8006b16:	0e1b      	lsrs	r3, r3, #24
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	4a3e      	ldr	r2, [pc, #248]	; (8006c14 <MX_LWIP_Init+0x25c>)
 8006b1c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006b1e:	4b3b      	ldr	r3, [pc, #236]	; (8006c0c <MX_LWIP_Init+0x254>)
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	061a      	lsls	r2, r3, #24
 8006b24:	4b39      	ldr	r3, [pc, #228]	; (8006c0c <MX_LWIP_Init+0x254>)
 8006b26:	785b      	ldrb	r3, [r3, #1]
 8006b28:	041b      	lsls	r3, r3, #16
 8006b2a:	431a      	orrs	r2, r3
 8006b2c:	4b37      	ldr	r3, [pc, #220]	; (8006c0c <MX_LWIP_Init+0x254>)
 8006b2e:	789b      	ldrb	r3, [r3, #2]
 8006b30:	021b      	lsls	r3, r3, #8
 8006b32:	4313      	orrs	r3, r2
 8006b34:	4a35      	ldr	r2, [pc, #212]	; (8006c0c <MX_LWIP_Init+0x254>)
 8006b36:	78d2      	ldrb	r2, [r2, #3]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	061a      	lsls	r2, r3, #24
 8006b3c:	4b33      	ldr	r3, [pc, #204]	; (8006c0c <MX_LWIP_Init+0x254>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	0619      	lsls	r1, r3, #24
 8006b42:	4b32      	ldr	r3, [pc, #200]	; (8006c0c <MX_LWIP_Init+0x254>)
 8006b44:	785b      	ldrb	r3, [r3, #1]
 8006b46:	041b      	lsls	r3, r3, #16
 8006b48:	4319      	orrs	r1, r3
 8006b4a:	4b30      	ldr	r3, [pc, #192]	; (8006c0c <MX_LWIP_Init+0x254>)
 8006b4c:	789b      	ldrb	r3, [r3, #2]
 8006b4e:	021b      	lsls	r3, r3, #8
 8006b50:	430b      	orrs	r3, r1
 8006b52:	492e      	ldr	r1, [pc, #184]	; (8006c0c <MX_LWIP_Init+0x254>)
 8006b54:	78c9      	ldrb	r1, [r1, #3]
 8006b56:	430b      	orrs	r3, r1
 8006b58:	021b      	lsls	r3, r3, #8
 8006b5a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b5e:	431a      	orrs	r2, r3
 8006b60:	4b2a      	ldr	r3, [pc, #168]	; (8006c0c <MX_LWIP_Init+0x254>)
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	0619      	lsls	r1, r3, #24
 8006b66:	4b29      	ldr	r3, [pc, #164]	; (8006c0c <MX_LWIP_Init+0x254>)
 8006b68:	785b      	ldrb	r3, [r3, #1]
 8006b6a:	041b      	lsls	r3, r3, #16
 8006b6c:	4319      	orrs	r1, r3
 8006b6e:	4b27      	ldr	r3, [pc, #156]	; (8006c0c <MX_LWIP_Init+0x254>)
 8006b70:	789b      	ldrb	r3, [r3, #2]
 8006b72:	021b      	lsls	r3, r3, #8
 8006b74:	430b      	orrs	r3, r1
 8006b76:	4925      	ldr	r1, [pc, #148]	; (8006c0c <MX_LWIP_Init+0x254>)
 8006b78:	78c9      	ldrb	r1, [r1, #3]
 8006b7a:	430b      	orrs	r3, r1
 8006b7c:	0a1b      	lsrs	r3, r3, #8
 8006b7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006b82:	431a      	orrs	r2, r3
 8006b84:	4b21      	ldr	r3, [pc, #132]	; (8006c0c <MX_LWIP_Init+0x254>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	0619      	lsls	r1, r3, #24
 8006b8a:	4b20      	ldr	r3, [pc, #128]	; (8006c0c <MX_LWIP_Init+0x254>)
 8006b8c:	785b      	ldrb	r3, [r3, #1]
 8006b8e:	041b      	lsls	r3, r3, #16
 8006b90:	4319      	orrs	r1, r3
 8006b92:	4b1e      	ldr	r3, [pc, #120]	; (8006c0c <MX_LWIP_Init+0x254>)
 8006b94:	789b      	ldrb	r3, [r3, #2]
 8006b96:	021b      	lsls	r3, r3, #8
 8006b98:	430b      	orrs	r3, r1
 8006b9a:	491c      	ldr	r1, [pc, #112]	; (8006c0c <MX_LWIP_Init+0x254>)
 8006b9c:	78c9      	ldrb	r1, [r1, #3]
 8006b9e:	430b      	orrs	r3, r1
 8006ba0:	0e1b      	lsrs	r3, r3, #24
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	4a1c      	ldr	r2, [pc, #112]	; (8006c18 <MX_LWIP_Init+0x260>)
 8006ba6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&dnsserver,DNS_ADDR0,DNS_ADDR1,DNS_ADDR2,DNS_ADDR3);
 8006ba8:	4b1c      	ldr	r3, [pc, #112]	; (8006c1c <MX_LWIP_Init+0x264>)
 8006baa:	4a1d      	ldr	r2, [pc, #116]	; (8006c20 <MX_LWIP_Init+0x268>)
 8006bac:	601a      	str	r2, [r3, #0]
  dns_setserver (0, &dnsserver);
 8006bae:	491b      	ldr	r1, [pc, #108]	; (8006c1c <MX_LWIP_Init+0x264>)
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	f007 fc8d 	bl	800e4d0 <dns_setserver>

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8006bb6:	4b1b      	ldr	r3, [pc, #108]	; (8006c24 <MX_LWIP_Init+0x26c>)
 8006bb8:	9302      	str	r3, [sp, #8]
 8006bba:	4b1b      	ldr	r3, [pc, #108]	; (8006c28 <MX_LWIP_Init+0x270>)
 8006bbc:	9301      	str	r3, [sp, #4]
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	9300      	str	r3, [sp, #0]
 8006bc2:	4b15      	ldr	r3, [pc, #84]	; (8006c18 <MX_LWIP_Init+0x260>)
 8006bc4:	4a13      	ldr	r2, [pc, #76]	; (8006c14 <MX_LWIP_Init+0x25c>)
 8006bc6:	4912      	ldr	r1, [pc, #72]	; (8006c10 <MX_LWIP_Init+0x258>)
 8006bc8:	4818      	ldr	r0, [pc, #96]	; (8006c2c <MX_LWIP_Init+0x274>)
 8006bca:	f008 fce1 	bl	800f590 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006bce:	4817      	ldr	r0, [pc, #92]	; (8006c2c <MX_LWIP_Init+0x274>)
 8006bd0:	f008 fe98 	bl	800f904 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8006bd4:	4b15      	ldr	r3, [pc, #84]	; (8006c2c <MX_LWIP_Init+0x274>)
 8006bd6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006bda:	089b      	lsrs	r3, r3, #2
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d003      	beq.n	8006bee <MX_LWIP_Init+0x236>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8006be6:	4811      	ldr	r0, [pc, #68]	; (8006c2c <MX_LWIP_Init+0x274>)
 8006be8:	f008 fe9c 	bl	800f924 <netif_set_up>
 8006bec:	e002      	b.n	8006bf4 <MX_LWIP_Init+0x23c>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8006bee:	480f      	ldr	r0, [pc, #60]	; (8006c2c <MX_LWIP_Init+0x274>)
 8006bf0:	f008 ff10 	bl	800fa14 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8006bf4:	490e      	ldr	r1, [pc, #56]	; (8006c30 <MX_LWIP_Init+0x278>)
 8006bf6:	480d      	ldr	r0, [pc, #52]	; (8006c2c <MX_LWIP_Init+0x274>)
 8006bf8:	f008 ff4a 	bl	800fa90 <netif_set_link_callback>
//  dhcp_start(&gnetif);

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006bfc:	bf00      	nop
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	200005b0 	.word	0x200005b0
 8006c08:	200005b4 	.word	0x200005b4
 8006c0c:	200005b8 	.word	0x200005b8
 8006c10:	200005a4 	.word	0x200005a4
 8006c14:	200005a8 	.word	0x200005a8
 8006c18:	200005ac 	.word	0x200005ac
 8006c1c:	200005bc 	.word	0x200005bc
 8006c20:	0101a8c0 	.word	0x0101a8c0
 8006c24:	0801b5b5 	.word	0x0801b5b5
 8006c28:	080071f9 	.word	0x080071f9
 8006c2c:	20000538 	.word	0x20000538
 8006c30:	08007265 	.word	0x08007265

08006c34 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8006c38:	4803      	ldr	r0, [pc, #12]	; (8006c48 <MX_LWIP_Process+0x14>)
 8006c3a:	f000 fabd 	bl	80071b8 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8006c3e:	f00f fa2b 	bl	8016098 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8006c42:	bf00      	nop
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	20000538 	.word	0x20000538

08006c4c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b08e      	sub	sp, #56	; 0x38
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c58:	2200      	movs	r2, #0
 8006c5a:	601a      	str	r2, [r3, #0]
 8006c5c:	605a      	str	r2, [r3, #4]
 8006c5e:	609a      	str	r2, [r3, #8]
 8006c60:	60da      	str	r2, [r3, #12]
 8006c62:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a4e      	ldr	r2, [pc, #312]	; (8006da4 <HAL_ETH_MspInit+0x158>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	f040 8096 	bne.w	8006d9c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006c70:	4b4d      	ldr	r3, [pc, #308]	; (8006da8 <HAL_ETH_MspInit+0x15c>)
 8006c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c74:	4a4c      	ldr	r2, [pc, #304]	; (8006da8 <HAL_ETH_MspInit+0x15c>)
 8006c76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8006c7c:	4b4a      	ldr	r3, [pc, #296]	; (8006da8 <HAL_ETH_MspInit+0x15c>)
 8006c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c84:	623b      	str	r3, [r7, #32]
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	4b47      	ldr	r3, [pc, #284]	; (8006da8 <HAL_ETH_MspInit+0x15c>)
 8006c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8c:	4a46      	ldr	r2, [pc, #280]	; (8006da8 <HAL_ETH_MspInit+0x15c>)
 8006c8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c92:	6313      	str	r3, [r2, #48]	; 0x30
 8006c94:	4b44      	ldr	r3, [pc, #272]	; (8006da8 <HAL_ETH_MspInit+0x15c>)
 8006c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c9c:	61fb      	str	r3, [r7, #28]
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	4b41      	ldr	r3, [pc, #260]	; (8006da8 <HAL_ETH_MspInit+0x15c>)
 8006ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca4:	4a40      	ldr	r2, [pc, #256]	; (8006da8 <HAL_ETH_MspInit+0x15c>)
 8006ca6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006caa:	6313      	str	r3, [r2, #48]	; 0x30
 8006cac:	4b3e      	ldr	r3, [pc, #248]	; (8006da8 <HAL_ETH_MspInit+0x15c>)
 8006cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cb4:	61bb      	str	r3, [r7, #24]
 8006cb6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006cb8:	4b3b      	ldr	r3, [pc, #236]	; (8006da8 <HAL_ETH_MspInit+0x15c>)
 8006cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cbc:	4a3a      	ldr	r2, [pc, #232]	; (8006da8 <HAL_ETH_MspInit+0x15c>)
 8006cbe:	f043 0304 	orr.w	r3, r3, #4
 8006cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8006cc4:	4b38      	ldr	r3, [pc, #224]	; (8006da8 <HAL_ETH_MspInit+0x15c>)
 8006cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc8:	f003 0304 	and.w	r3, r3, #4
 8006ccc:	617b      	str	r3, [r7, #20]
 8006cce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cd0:	4b35      	ldr	r3, [pc, #212]	; (8006da8 <HAL_ETH_MspInit+0x15c>)
 8006cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd4:	4a34      	ldr	r2, [pc, #208]	; (8006da8 <HAL_ETH_MspInit+0x15c>)
 8006cd6:	f043 0301 	orr.w	r3, r3, #1
 8006cda:	6313      	str	r3, [r2, #48]	; 0x30
 8006cdc:	4b32      	ldr	r3, [pc, #200]	; (8006da8 <HAL_ETH_MspInit+0x15c>)
 8006cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	613b      	str	r3, [r7, #16]
 8006ce6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ce8:	4b2f      	ldr	r3, [pc, #188]	; (8006da8 <HAL_ETH_MspInit+0x15c>)
 8006cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cec:	4a2e      	ldr	r2, [pc, #184]	; (8006da8 <HAL_ETH_MspInit+0x15c>)
 8006cee:	f043 0302 	orr.w	r3, r3, #2
 8006cf2:	6313      	str	r3, [r2, #48]	; 0x30
 8006cf4:	4b2c      	ldr	r3, [pc, #176]	; (8006da8 <HAL_ETH_MspInit+0x15c>)
 8006cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	60fb      	str	r3, [r7, #12]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006d00:	4b29      	ldr	r3, [pc, #164]	; (8006da8 <HAL_ETH_MspInit+0x15c>)
 8006d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d04:	4a28      	ldr	r2, [pc, #160]	; (8006da8 <HAL_ETH_MspInit+0x15c>)
 8006d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8006d0c:	4b26      	ldr	r3, [pc, #152]	; (8006da8 <HAL_ETH_MspInit+0x15c>)
 8006d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d14:	60bb      	str	r3, [r7, #8]
 8006d16:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006d18:	2332      	movs	r3, #50	; 0x32
 8006d1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d20:	2300      	movs	r3, #0
 8006d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d24:	2303      	movs	r3, #3
 8006d26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006d28:	230b      	movs	r3, #11
 8006d2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d30:	4619      	mov	r1, r3
 8006d32:	481e      	ldr	r0, [pc, #120]	; (8006dac <HAL_ETH_MspInit+0x160>)
 8006d34:	f7fc fb2c 	bl	8003390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006d38:	2386      	movs	r3, #134	; 0x86
 8006d3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d40:	2300      	movs	r3, #0
 8006d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d44:	2303      	movs	r3, #3
 8006d46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006d48:	230b      	movs	r3, #11
 8006d4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d50:	4619      	mov	r1, r3
 8006d52:	4817      	ldr	r0, [pc, #92]	; (8006db0 <HAL_ETH_MspInit+0x164>)
 8006d54:	f7fc fb1c 	bl	8003390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006d58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d5e:	2302      	movs	r3, #2
 8006d60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d62:	2300      	movs	r3, #0
 8006d64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d66:	2303      	movs	r3, #3
 8006d68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006d6a:	230b      	movs	r3, #11
 8006d6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d72:	4619      	mov	r1, r3
 8006d74:	480f      	ldr	r0, [pc, #60]	; (8006db4 <HAL_ETH_MspInit+0x168>)
 8006d76:	f7fc fb0b 	bl	8003390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006d7a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006d7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d80:	2302      	movs	r3, #2
 8006d82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d84:	2300      	movs	r3, #0
 8006d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006d8c:	230b      	movs	r3, #11
 8006d8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d94:	4619      	mov	r1, r3
 8006d96:	4808      	ldr	r0, [pc, #32]	; (8006db8 <HAL_ETH_MspInit+0x16c>)
 8006d98:	f7fc fafa 	bl	8003390 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006d9c:	bf00      	nop
 8006d9e:	3738      	adds	r7, #56	; 0x38
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	40028000 	.word	0x40028000
 8006da8:	40023800 	.word	0x40023800
 8006dac:	40020800 	.word	0x40020800
 8006db0:	40020000 	.word	0x40020000
 8006db4:	40020400 	.word	0x40020400
 8006db8:	40021800 	.word	0x40021800

08006dbc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006dc8:	4b4d      	ldr	r3, [pc, #308]	; (8006f00 <low_level_init+0x144>)
 8006dca:	4a4e      	ldr	r2, [pc, #312]	; (8006f04 <low_level_init+0x148>)
 8006dcc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8006dce:	4b4c      	ldr	r3, [pc, #304]	; (8006f00 <low_level_init+0x144>)
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8006dd4:	4b4a      	ldr	r3, [pc, #296]	; (8006f00 <low_level_init+0x144>)
 8006dd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006dda:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006ddc:	4b48      	ldr	r3, [pc, #288]	; (8006f00 <low_level_init+0x144>)
 8006dde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006de2:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8006de4:	4b46      	ldr	r3, [pc, #280]	; (8006f00 <low_level_init+0x144>)
 8006de6:	2200      	movs	r2, #0
 8006de8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8006dea:	2300      	movs	r3, #0
 8006dec:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8006dee:	2380      	movs	r3, #128	; 0x80
 8006df0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8006df2:	23e1      	movs	r3, #225	; 0xe1
 8006df4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8006df6:	2300      	movs	r3, #0
 8006df8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8006e02:	4a3f      	ldr	r2, [pc, #252]	; (8006f00 <low_level_init+0x144>)
 8006e04:	f107 0308 	add.w	r3, r7, #8
 8006e08:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8006e0a:	4b3d      	ldr	r3, [pc, #244]	; (8006f00 <low_level_init+0x144>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8006e10:	4b3b      	ldr	r3, [pc, #236]	; (8006f00 <low_level_init+0x144>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006e16:	4b3a      	ldr	r3, [pc, #232]	; (8006f00 <low_level_init+0x144>)
 8006e18:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006e1c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006e1e:	4838      	ldr	r0, [pc, #224]	; (8006f00 <low_level_init+0x144>)
 8006e20:	f7fb f9c6 	bl	80021b0 <HAL_ETH_Init>
 8006e24:	4603      	mov	r3, r0
 8006e26:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8006e28:	7dfb      	ldrb	r3, [r7, #23]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d108      	bne.n	8006e40 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006e34:	f043 0304 	orr.w	r3, r3, #4
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8006e40:	2304      	movs	r3, #4
 8006e42:	4a31      	ldr	r2, [pc, #196]	; (8006f08 <low_level_init+0x14c>)
 8006e44:	4931      	ldr	r1, [pc, #196]	; (8006f0c <low_level_init+0x150>)
 8006e46:	482e      	ldr	r0, [pc, #184]	; (8006f00 <low_level_init+0x144>)
 8006e48:	f7fb fb4a 	bl	80024e0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8006e4c:	2304      	movs	r3, #4
 8006e4e:	4a30      	ldr	r2, [pc, #192]	; (8006f10 <low_level_init+0x154>)
 8006e50:	4930      	ldr	r1, [pc, #192]	; (8006f14 <low_level_init+0x158>)
 8006e52:	482b      	ldr	r0, [pc, #172]	; (8006f00 <low_level_init+0x144>)
 8006e54:	f7fb fbac 	bl	80025b0 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2206      	movs	r2, #6
 8006e5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006e60:	4b27      	ldr	r3, [pc, #156]	; (8006f00 <low_level_init+0x144>)
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	781a      	ldrb	r2, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006e6c:	4b24      	ldr	r3, [pc, #144]	; (8006f00 <low_level_init+0x144>)
 8006e6e:	695b      	ldr	r3, [r3, #20]
 8006e70:	785a      	ldrb	r2, [r3, #1]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006e78:	4b21      	ldr	r3, [pc, #132]	; (8006f00 <low_level_init+0x144>)
 8006e7a:	695b      	ldr	r3, [r3, #20]
 8006e7c:	789a      	ldrb	r2, [r3, #2]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006e84:	4b1e      	ldr	r3, [pc, #120]	; (8006f00 <low_level_init+0x144>)
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	78da      	ldrb	r2, [r3, #3]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006e90:	4b1b      	ldr	r3, [pc, #108]	; (8006f00 <low_level_init+0x144>)
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	791a      	ldrb	r2, [r3, #4]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006e9c:	4b18      	ldr	r3, [pc, #96]	; (8006f00 <low_level_init+0x144>)
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	795a      	ldrb	r2, [r3, #5]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006eae:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006eb6:	f043 030a 	orr.w	r3, r3, #10
 8006eba:	b2da      	uxtb	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8006ec2:	480f      	ldr	r0, [pc, #60]	; (8006f00 <low_level_init+0x144>)
 8006ec4:	f7fb fe1c 	bl	8002b00 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8006ec8:	f107 0310 	add.w	r3, r7, #16
 8006ecc:	461a      	mov	r2, r3
 8006ece:	211d      	movs	r1, #29
 8006ed0:	480b      	ldr	r0, [pc, #44]	; (8006f00 <low_level_init+0x144>)
 8006ed2:	f7fb fd47 	bl	8002964 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	f043 030b 	orr.w	r3, r3, #11
 8006edc:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	211d      	movs	r1, #29
 8006ee4:	4806      	ldr	r0, [pc, #24]	; (8006f00 <low_level_init+0x144>)
 8006ee6:	f7fb fda5 	bl	8002a34 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8006eea:	f107 0310 	add.w	r3, r7, #16
 8006eee:	461a      	mov	r2, r3
 8006ef0:	211d      	movs	r1, #29
 8006ef2:	4803      	ldr	r0, [pc, #12]	; (8006f00 <low_level_init+0x144>)
 8006ef4:	f7fb fd36 	bl	8002964 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006ef8:	bf00      	nop
 8006efa:	3718      	adds	r7, #24
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	20003660 	.word	0x20003660
 8006f04:	40028000 	.word	0x40028000
 8006f08:	20001e90 	.word	0x20001e90
 8006f0c:	20000640 	.word	0x20000640
 8006f10:	200006c0 	.word	0x200006c0
 8006f14:	200005c0 	.word	0x200005c0

08006f18 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b08a      	sub	sp, #40	; 0x28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8006f22:	4b4b      	ldr	r3, [pc, #300]	; (8007050 <low_level_output+0x138>)
 8006f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8006f32:	2300      	movs	r3, #0
 8006f34:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8006f36:	2300      	movs	r3, #0
 8006f38:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8006f3a:	4b45      	ldr	r3, [pc, #276]	; (8007050 <low_level_output+0x138>)
 8006f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8006f40:	2300      	movs	r3, #0
 8006f42:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	623b      	str	r3, [r7, #32]
 8006f48:	e05a      	b.n	8007000 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	da03      	bge.n	8006f5a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8006f52:	23f8      	movs	r3, #248	; 0xf8
 8006f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8006f58:	e05c      	b.n	8007014 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8006f5a:	6a3b      	ldr	r3, [r7, #32]
 8006f5c:	895b      	ldrh	r3, [r3, #10]
 8006f5e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8006f60:	2300      	movs	r3, #0
 8006f62:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006f64:	e02f      	b.n	8006fc6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8006f66:	69fa      	ldr	r2, [r7, #28]
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	18d0      	adds	r0, r2, r3
 8006f6c:	6a3b      	ldr	r3, [r7, #32]
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	18d1      	adds	r1, r2, r3
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8006f7a:	1a9b      	subs	r3, r3, r2
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	f014 fc69 	bl	801b854 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	da03      	bge.n	8006f98 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8006f90:	23f8      	movs	r3, #248	; 0xf8
 8006f92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8006f96:	e03d      	b.n	8007014 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006fa8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006fb4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006fc0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d8c8      	bhi.n	8006f66 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8006fd4:	69fa      	ldr	r2, [r7, #28]
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	18d0      	adds	r0, r2, r3
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	f014 fc35 	bl	801b854 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	4413      	add	r3, r2
 8006ff0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	623b      	str	r3, [r7, #32]
 8007000:	6a3b      	ldr	r3, [r7, #32]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1a1      	bne.n	8006f4a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8007006:	6979      	ldr	r1, [r7, #20]
 8007008:	4811      	ldr	r0, [pc, #68]	; (8007050 <low_level_output+0x138>)
 800700a:	f7fb fb3d 	bl	8002688 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8007014:	4b0e      	ldr	r3, [pc, #56]	; (8007050 <low_level_output+0x138>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	f003 0320 	and.w	r3, r3, #32
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00d      	beq.n	8007042 <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8007026:	4b0a      	ldr	r3, [pc, #40]	; (8007050 <low_level_output+0x138>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800702e:	461a      	mov	r2, r3
 8007030:	2320      	movs	r3, #32
 8007032:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8007034:	4b06      	ldr	r3, [pc, #24]	; (8007050 <low_level_output+0x138>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800703c:	461a      	mov	r2, r3
 800703e:	2300      	movs	r3, #0
 8007040:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8007042:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007046:	4618      	mov	r0, r3
 8007048:	3728      	adds	r7, #40	; 0x28
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	20003660 	.word	0x20003660

08007054 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b08c      	sub	sp, #48	; 0x30
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800705c:	2300      	movs	r3, #0
 800705e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8007060:	2300      	movs	r3, #0
 8007062:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8007064:	2300      	movs	r3, #0
 8007066:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8007068:	2300      	movs	r3, #0
 800706a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800706c:	2300      	movs	r3, #0
 800706e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8007070:	2300      	movs	r3, #0
 8007072:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8007074:	2300      	movs	r3, #0
 8007076:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8007078:	484e      	ldr	r0, [pc, #312]	; (80071b4 <low_level_input+0x160>)
 800707a:	f7fb fbef 	bl	800285c <HAL_ETH_GetReceivedFrame>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d001      	beq.n	8007088 <low_level_input+0x34>

    return NULL;
 8007084:	2300      	movs	r3, #0
 8007086:	e091      	b.n	80071ac <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8007088:	4b4a      	ldr	r3, [pc, #296]	; (80071b4 <low_level_input+0x160>)
 800708a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800708c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800708e:	4b49      	ldr	r3, [pc, #292]	; (80071b4 <low_level_input+0x160>)
 8007090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007092:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8007094:	89fb      	ldrh	r3, [r7, #14]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d007      	beq.n	80070aa <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800709a:	89fb      	ldrh	r3, [r7, #14]
 800709c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80070a0:	4619      	mov	r1, r3
 80070a2:	2000      	movs	r0, #0
 80070a4:	f008 fd90 	bl	800fbc8 <pbuf_alloc>
 80070a8:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80070aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d04b      	beq.n	8007148 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80070b0:	4b40      	ldr	r3, [pc, #256]	; (80071b4 <low_level_input+0x160>)
 80070b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b4:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80070b6:	2300      	movs	r3, #0
 80070b8:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80070ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80070be:	e040      	b.n	8007142 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80070c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c2:	895b      	ldrh	r3, [r3, #10]
 80070c4:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80070c6:	2300      	movs	r3, #0
 80070c8:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80070ca:	e021      	b.n	8007110 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80070cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	18d0      	adds	r0, r2, r3
 80070d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	18d1      	adds	r1, r2, r3
 80070da:	69fa      	ldr	r2, [r7, #28]
 80070dc:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80070e0:	1a9b      	subs	r3, r3, r2
 80070e2:	461a      	mov	r2, r3
 80070e4:	f014 fbb6 	bl	801b854 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80070e8:	6a3b      	ldr	r3, [r7, #32]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80070ee:	6a3b      	ldr	r3, [r7, #32]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80070f4:	69fa      	ldr	r2, [r7, #28]
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	4413      	add	r3, r2
 80070fa:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80070fe:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800710a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800710c:	2300      	movs	r3, #0
 800710e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007110:	697a      	ldr	r2, [r7, #20]
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	4413      	add	r3, r2
 8007116:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800711a:	4293      	cmp	r3, r2
 800711c:	d8d6      	bhi.n	80070cc <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800711e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	18d0      	adds	r0, r2, r3
 8007126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	4413      	add	r3, r2
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	4619      	mov	r1, r3
 8007130:	f014 fb90 	bl	801b854 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007134:	69fa      	ldr	r2, [r7, #28]
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	4413      	add	r3, r2
 800713a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800713c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	62bb      	str	r3, [r7, #40]	; 0x28
 8007142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1bb      	bne.n	80070c0 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007148:	4b1a      	ldr	r3, [pc, #104]	; (80071b4 <low_level_input+0x160>)
 800714a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800714e:	2300      	movs	r3, #0
 8007150:	613b      	str	r3, [r7, #16]
 8007152:	e00b      	b.n	800716c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800715c:	6a3b      	ldr	r3, [r7, #32]
 800715e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007160:	6a3b      	ldr	r3, [r7, #32]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	3301      	adds	r3, #1
 800716a:	613b      	str	r3, [r7, #16]
 800716c:	4b11      	ldr	r3, [pc, #68]	; (80071b4 <low_level_input+0x160>)
 800716e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	429a      	cmp	r2, r3
 8007174:	d3ee      	bcc.n	8007154 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8007176:	4b0f      	ldr	r3, [pc, #60]	; (80071b4 <low_level_input+0x160>)
 8007178:	2200      	movs	r2, #0
 800717a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800717c:	4b0d      	ldr	r3, [pc, #52]	; (80071b4 <low_level_input+0x160>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00d      	beq.n	80071aa <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800718e:	4b09      	ldr	r3, [pc, #36]	; (80071b4 <low_level_input+0x160>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007196:	461a      	mov	r2, r3
 8007198:	2380      	movs	r3, #128	; 0x80
 800719a:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800719c:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <low_level_input+0x160>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071a4:	461a      	mov	r2, r3
 80071a6:	2300      	movs	r3, #0
 80071a8:	6093      	str	r3, [r2, #8]
  }
  return p;
 80071aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3730      	adds	r7, #48	; 0x30
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	20003660 	.word	0x20003660

080071b8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7ff ff47 	bl	8007054 <low_level_input>
 80071c6:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d010      	beq.n	80071f0 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	6879      	ldr	r1, [r7, #4]
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	4798      	blx	r3
 80071d8:	4603      	mov	r3, r0
 80071da:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 80071dc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d006      	beq.n	80071f2 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f008 ffd3 	bl	8010190 <pbuf_free>
    p = NULL;
 80071ea:	2300      	movs	r3, #0
 80071ec:	60fb      	str	r3, [r7, #12]
 80071ee:	e000      	b.n	80071f2 <ethernetif_input+0x3a>
  if (p == NULL) return;
 80071f0:	bf00      	nop
  }
}
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d106      	bne.n	8007214 <ethernetif_init+0x1c>
 8007206:	4b0e      	ldr	r3, [pc, #56]	; (8007240 <ethernetif_init+0x48>)
 8007208:	f240 2212 	movw	r2, #530	; 0x212
 800720c:	490d      	ldr	r1, [pc, #52]	; (8007244 <ethernetif_init+0x4c>)
 800720e:	480e      	ldr	r0, [pc, #56]	; (8007248 <ethernetif_init+0x50>)
 8007210:	f015 fa8e 	bl	801c730 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2273      	movs	r2, #115	; 0x73
 8007218:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2274      	movs	r2, #116	; 0x74
 8007220:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a09      	ldr	r2, [pc, #36]	; (800724c <ethernetif_init+0x54>)
 8007228:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a08      	ldr	r2, [pc, #32]	; (8007250 <ethernetif_init+0x58>)
 800722e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f7ff fdc3 	bl	8006dbc <low_level_init>

  return ERR_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3708      	adds	r7, #8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	080200dc 	.word	0x080200dc
 8007244:	080200f8 	.word	0x080200f8
 8007248:	08020108 	.word	0x08020108
 800724c:	08019341 	.word	0x08019341
 8007250:	08006f19 	.word	0x08006f19

08007254 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007258:	f7fa fe68 	bl	8001f2c <HAL_GetTick>
 800725c:	4603      	mov	r3, r0
}
 800725e:	4618      	mov	r0, r3
 8007260:	bd80      	pop	{r7, pc}
	...

08007264 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800726c:	2300      	movs	r3, #0
 800726e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8007270:	2300      	movs	r3, #0
 8007272:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800727a:	089b      	lsrs	r3, r3, #2
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d05d      	beq.n	8007342 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8007286:	4b34      	ldr	r3, [pc, #208]	; (8007358 <ethernetif_update_config+0xf4>)
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d03f      	beq.n	800730e <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800728e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007292:	2100      	movs	r1, #0
 8007294:	4830      	ldr	r0, [pc, #192]	; (8007358 <ethernetif_update_config+0xf4>)
 8007296:	f7fb fbcd 	bl	8002a34 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800729a:	f7fa fe47 	bl	8001f2c <HAL_GetTick>
 800729e:	4603      	mov	r3, r0
 80072a0:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80072a2:	f107 0308 	add.w	r3, r7, #8
 80072a6:	461a      	mov	r2, r3
 80072a8:	2101      	movs	r1, #1
 80072aa:	482b      	ldr	r0, [pc, #172]	; (8007358 <ethernetif_update_config+0xf4>)
 80072ac:	f7fb fb5a 	bl	8002964 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80072b0:	f7fa fe3c 	bl	8001f2c <HAL_GetTick>
 80072b4:	4602      	mov	r2, r0
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072be:	d828      	bhi.n	8007312 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	f003 0320 	and.w	r3, r3, #32
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d0eb      	beq.n	80072a2 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80072ca:	f107 0308 	add.w	r3, r7, #8
 80072ce:	461a      	mov	r2, r3
 80072d0:	2110      	movs	r1, #16
 80072d2:	4821      	ldr	r0, [pc, #132]	; (8007358 <ethernetif_update_config+0xf4>)
 80072d4:	f7fb fb46 	bl	8002964 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	f003 0304 	and.w	r3, r3, #4
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d004      	beq.n	80072ec <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80072e2:	4b1d      	ldr	r3, [pc, #116]	; (8007358 <ethernetif_update_config+0xf4>)
 80072e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072e8:	60da      	str	r2, [r3, #12]
 80072ea:	e002      	b.n	80072f2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80072ec:	4b1a      	ldr	r3, [pc, #104]	; (8007358 <ethernetif_update_config+0xf4>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d003      	beq.n	8007304 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80072fc:	4b16      	ldr	r3, [pc, #88]	; (8007358 <ethernetif_update_config+0xf4>)
 80072fe:	2200      	movs	r2, #0
 8007300:	609a      	str	r2, [r3, #8]
 8007302:	e016      	b.n	8007332 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8007304:	4b14      	ldr	r3, [pc, #80]	; (8007358 <ethernetif_update_config+0xf4>)
 8007306:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800730a:	609a      	str	r2, [r3, #8]
 800730c:	e011      	b.n	8007332 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800730e:	bf00      	nop
 8007310:	e000      	b.n	8007314 <ethernetif_update_config+0xb0>
          goto error;
 8007312:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007314:	4b10      	ldr	r3, [pc, #64]	; (8007358 <ethernetif_update_config+0xf4>)
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	08db      	lsrs	r3, r3, #3
 800731a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800731c:	4b0e      	ldr	r3, [pc, #56]	; (8007358 <ethernetif_update_config+0xf4>)
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	085b      	lsrs	r3, r3, #1
 8007322:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007324:	4313      	orrs	r3, r2
 8007326:	b29b      	uxth	r3, r3
 8007328:	461a      	mov	r2, r3
 800732a:	2100      	movs	r1, #0
 800732c:	480a      	ldr	r0, [pc, #40]	; (8007358 <ethernetif_update_config+0xf4>)
 800732e:	f7fb fb81 	bl	8002a34 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8007332:	2100      	movs	r1, #0
 8007334:	4808      	ldr	r0, [pc, #32]	; (8007358 <ethernetif_update_config+0xf4>)
 8007336:	f7fb fc41 	bl	8002bbc <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800733a:	4807      	ldr	r0, [pc, #28]	; (8007358 <ethernetif_update_config+0xf4>)
 800733c:	f7fb fbe0 	bl	8002b00 <HAL_ETH_Start>
 8007340:	e002      	b.n	8007348 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8007342:	4805      	ldr	r0, [pc, #20]	; (8007358 <ethernetif_update_config+0xf4>)
 8007344:	f7fb fc0b 	bl	8002b5e <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f807 	bl	800735c <ethernetif_notify_conn_changed>
}
 800734e:	bf00      	nop
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	20003660 	.word	0x20003660

0800735c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <snmp_ans1_enc_tlv>:
 * @param tlv TLV to encode
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) encode
 */
err_t
snmp_ans1_enc_tlv(struct snmp_pbuf_stream *pbuf_stream, struct snmp_asn1_tlv *tlv)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  u8_t data;
  u8_t length_bytes_required;

  /* write type */
  if ((tlv->type & SNMP_ASN1_DATATYPE_MASK) == SNMP_ASN1_DATATYPE_EXTENDED) {
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	f003 031f 	and.w	r3, r3, #31
 8007382:	2b1f      	cmp	r3, #31
 8007384:	d102      	bne.n	800738c <snmp_ans1_enc_tlv+0x1c>
    /* extended format is not used by SNMP so we do not accept those values */
    return ERR_ARG;
 8007386:	f06f 030f 	mvn.w	r3, #15
 800738a:	e078      	b.n	800747e <snmp_ans1_enc_tlv+0x10e>
  }
  if (tlv->type_len != 0) {
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	785b      	ldrb	r3, [r3, #1]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <snmp_ans1_enc_tlv+0x2a>
    /* any other value as auto is not accepted for type (we always use one byte because extended syntax is prohibited) */
    return ERR_ARG;
 8007394:	f06f 030f 	mvn.w	r3, #15
 8007398:	e071      	b.n	800747e <snmp_ans1_enc_tlv+0x10e>
  }

  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, tlv->type));
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	4619      	mov	r1, r3
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f005 fe6d 	bl	800d080 <snmp_pbuf_stream_write>
 80073a6:	4603      	mov	r3, r0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <snmp_ans1_enc_tlv+0x42>
 80073ac:	f06f 0301 	mvn.w	r3, #1
 80073b0:	e065      	b.n	800747e <snmp_ans1_enc_tlv+0x10e>
  tlv->type_len = 1;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	2201      	movs	r2, #1
 80073b6:	705a      	strb	r2, [r3, #1]

  /* write length */
  if (tlv->value_len <= 127) {
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	889b      	ldrh	r3, [r3, #4]
 80073bc:	2b7f      	cmp	r3, #127	; 0x7f
 80073be:	d802      	bhi.n	80073c6 <snmp_ans1_enc_tlv+0x56>
    length_bytes_required = 1;
 80073c0:	2301      	movs	r3, #1
 80073c2:	73bb      	strb	r3, [r7, #14]
 80073c4:	e008      	b.n	80073d8 <snmp_ans1_enc_tlv+0x68>
  } else if (tlv->value_len <= 255) {
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	889b      	ldrh	r3, [r3, #4]
 80073ca:	2bff      	cmp	r3, #255	; 0xff
 80073cc:	d802      	bhi.n	80073d4 <snmp_ans1_enc_tlv+0x64>
    length_bytes_required = 2;
 80073ce:	2302      	movs	r3, #2
 80073d0:	73bb      	strb	r3, [r7, #14]
 80073d2:	e001      	b.n	80073d8 <snmp_ans1_enc_tlv+0x68>
  } else  {
    length_bytes_required = 3;
 80073d4:	2303      	movs	r3, #3
 80073d6:	73bb      	strb	r3, [r7, #14]
  }

  /* check for forced min length */
  if (tlv->length_len > 0) {
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	789b      	ldrb	r3, [r3, #2]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00b      	beq.n	80073f8 <snmp_ans1_enc_tlv+0x88>
    if (tlv->length_len < length_bytes_required) {
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	789b      	ldrb	r3, [r3, #2]
 80073e4:	7bba      	ldrb	r2, [r7, #14]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d902      	bls.n	80073f0 <snmp_ans1_enc_tlv+0x80>
      /* unable to code requested length in requested number of bytes */
      return ERR_ARG;
 80073ea:	f06f 030f 	mvn.w	r3, #15
 80073ee:	e046      	b.n	800747e <snmp_ans1_enc_tlv+0x10e>
    }

    length_bytes_required = tlv->length_len;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	789b      	ldrb	r3, [r3, #2]
 80073f4:	73bb      	strb	r3, [r7, #14]
 80073f6:	e002      	b.n	80073fe <snmp_ans1_enc_tlv+0x8e>
  } else {
    tlv->length_len = length_bytes_required;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	7bba      	ldrb	r2, [r7, #14]
 80073fc:	709a      	strb	r2, [r3, #2]
  }

  if (length_bytes_required > 1) {
 80073fe:	7bbb      	ldrb	r3, [r7, #14]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d92d      	bls.n	8007460 <snmp_ans1_enc_tlv+0xf0>
    /* multi byte representation required */
    length_bytes_required--;
 8007404:	7bbb      	ldrb	r3, [r7, #14]
 8007406:	3b01      	subs	r3, #1
 8007408:	73bb      	strb	r3, [r7, #14]
    data = 0x80 | length_bytes_required; /* extended length definition, 1 length byte follows */
 800740a:	7bbb      	ldrb	r3, [r7, #14]
 800740c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007410:	73fb      	strb	r3, [r7, #15]

    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, data));
 8007412:	7bfb      	ldrb	r3, [r7, #15]
 8007414:	4619      	mov	r1, r3
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f005 fe32 	bl	800d080 <snmp_pbuf_stream_write>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d01b      	beq.n	800745a <snmp_ans1_enc_tlv+0xea>
 8007422:	f06f 0301 	mvn.w	r3, #1
 8007426:	e02a      	b.n	800747e <snmp_ans1_enc_tlv+0x10e>

    while (length_bytes_required > 1) {
      if (length_bytes_required == 2) {
 8007428:	7bbb      	ldrb	r3, [r7, #14]
 800742a:	2b02      	cmp	r3, #2
 800742c:	d105      	bne.n	800743a <snmp_ans1_enc_tlv+0xca>
        /* append high byte */
        data = (u8_t)(tlv->value_len >> 8);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	889b      	ldrh	r3, [r3, #4]
 8007432:	0a1b      	lsrs	r3, r3, #8
 8007434:	b29b      	uxth	r3, r3
 8007436:	73fb      	strb	r3, [r7, #15]
 8007438:	e001      	b.n	800743e <snmp_ans1_enc_tlv+0xce>
      } else {
        /* append leading 0x00 */
        data = 0x00;
 800743a:	2300      	movs	r3, #0
 800743c:	73fb      	strb	r3, [r7, #15]
      }

      PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, data));
 800743e:	7bfb      	ldrb	r3, [r7, #15]
 8007440:	4619      	mov	r1, r3
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f005 fe1c 	bl	800d080 <snmp_pbuf_stream_write>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d002      	beq.n	8007454 <snmp_ans1_enc_tlv+0xe4>
 800744e:	f06f 0301 	mvn.w	r3, #1
 8007452:	e014      	b.n	800747e <snmp_ans1_enc_tlv+0x10e>
      length_bytes_required--;
 8007454:	7bbb      	ldrb	r3, [r7, #14]
 8007456:	3b01      	subs	r3, #1
 8007458:	73bb      	strb	r3, [r7, #14]
    while (length_bytes_required > 1) {
 800745a:	7bbb      	ldrb	r3, [r7, #14]
 800745c:	2b01      	cmp	r3, #1
 800745e:	d8e3      	bhi.n	8007428 <snmp_ans1_enc_tlv+0xb8>
    }
  }

  /* append low byte */
  data = (u8_t)(tlv->value_len & 0xFF);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	889b      	ldrh	r3, [r3, #4]
 8007464:	73fb      	strb	r3, [r7, #15]
  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, data));
 8007466:	7bfb      	ldrb	r3, [r7, #15]
 8007468:	4619      	mov	r1, r3
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f005 fe08 	bl	800d080 <snmp_pbuf_stream_write>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d002      	beq.n	800747c <snmp_ans1_enc_tlv+0x10c>
 8007476:	f06f 0301 	mvn.w	r3, #1
 800747a:	e000      	b.n	800747e <snmp_ans1_enc_tlv+0x10e>

  return ERR_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3710      	adds	r7, #16
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <snmp_asn1_enc_raw>:
 * @param raw points raw data
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) encode
 */
err_t
snmp_asn1_enc_raw(struct snmp_pbuf_stream *pbuf_stream, const u8_t *raw, u16_t raw_len)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b084      	sub	sp, #16
 800748a:	af00      	add	r7, sp, #0
 800748c:	60f8      	str	r0, [r7, #12]
 800748e:	60b9      	str	r1, [r7, #8]
 8007490:	4613      	mov	r3, r2
 8007492:	80fb      	strh	r3, [r7, #6]
  PBUF_OP_EXEC(snmp_pbuf_stream_writebuf(pbuf_stream, raw, raw_len));
 8007494:	88fb      	ldrh	r3, [r7, #6]
 8007496:	461a      	mov	r2, r3
 8007498:	68b9      	ldr	r1, [r7, #8]
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f005 fe01 	bl	800d0a2 <snmp_pbuf_stream_writebuf>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d002      	beq.n	80074ac <snmp_asn1_enc_raw+0x26>
 80074a6:	f06f 0301 	mvn.w	r3, #1
 80074aa:	e000      	b.n	80074ae <snmp_asn1_enc_raw+0x28>

  return ERR_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <snmp_asn1_enc_u32t>:
 *
 * @see snmp_asn1_enc_u32t_cnt()
 */
err_t
snmp_asn1_enc_u32t(struct snmp_pbuf_stream *pbuf_stream, u16_t octets_needed, u32_t value)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b084      	sub	sp, #16
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	60f8      	str	r0, [r7, #12]
 80074be:	460b      	mov	r3, r1
 80074c0:	607a      	str	r2, [r7, #4]
 80074c2:	817b      	strh	r3, [r7, #10]
  if (octets_needed > 5) {
 80074c4:	897b      	ldrh	r3, [r7, #10]
 80074c6:	2b05      	cmp	r3, #5
 80074c8:	d902      	bls.n	80074d0 <snmp_asn1_enc_u32t+0x1a>
    return ERR_ARG;
 80074ca:	f06f 030f 	mvn.w	r3, #15
 80074ce:	e033      	b.n	8007538 <snmp_asn1_enc_u32t+0x82>
  }
  if (octets_needed == 5) {
 80074d0:	897b      	ldrh	r3, [r7, #10]
 80074d2:	2b05      	cmp	r3, #5
 80074d4:	d120      	bne.n	8007518 <snmp_asn1_enc_u32t+0x62>
    /* not enough bits in 'value' add leading 0x00 */
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, 0x00));
 80074d6:	2100      	movs	r1, #0
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f005 fdd1 	bl	800d080 <snmp_pbuf_stream_write>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d002      	beq.n	80074ea <snmp_asn1_enc_u32t+0x34>
 80074e4:	f06f 0301 	mvn.w	r3, #1
 80074e8:	e026      	b.n	8007538 <snmp_asn1_enc_u32t+0x82>
    octets_needed--;
 80074ea:	897b      	ldrh	r3, [r7, #10]
 80074ec:	3b01      	subs	r3, #1
 80074ee:	817b      	strh	r3, [r7, #10]
  }

  while (octets_needed > 1) {
 80074f0:	e012      	b.n	8007518 <snmp_asn1_enc_u32t+0x62>
    octets_needed--;
 80074f2:	897b      	ldrh	r3, [r7, #10]
 80074f4:	3b01      	subs	r3, #1
 80074f6:	817b      	strh	r3, [r7, #10]
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(value >> (octets_needed << 3))));
 80074f8:	897b      	ldrh	r3, [r7, #10]
 80074fa:	00db      	lsls	r3, r3, #3
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007502:	b2db      	uxtb	r3, r3
 8007504:	4619      	mov	r1, r3
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f005 fdba 	bl	800d080 <snmp_pbuf_stream_write>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d002      	beq.n	8007518 <snmp_asn1_enc_u32t+0x62>
 8007512:	f06f 0301 	mvn.w	r3, #1
 8007516:	e00f      	b.n	8007538 <snmp_asn1_enc_u32t+0x82>
  while (octets_needed > 1) {
 8007518:	897b      	ldrh	r3, [r7, #10]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d8e9      	bhi.n	80074f2 <snmp_asn1_enc_u32t+0x3c>
  }

  /* (only) one least significant octet */
  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)value));
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	b2db      	uxtb	r3, r3
 8007522:	4619      	mov	r1, r3
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f005 fdab 	bl	800d080 <snmp_pbuf_stream_write>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <snmp_asn1_enc_u32t+0x80>
 8007530:	f06f 0301 	mvn.w	r3, #1
 8007534:	e000      	b.n	8007538 <snmp_asn1_enc_u32t+0x82>

  return ERR_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <snmp_asn1_enc_s32t>:
 *
 * @see snmp_asn1_enc_s32t_cnt()
 */
err_t
snmp_asn1_enc_s32t(struct snmp_pbuf_stream *pbuf_stream, u16_t octets_needed, s32_t value)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	460b      	mov	r3, r1
 800754a:	607a      	str	r2, [r7, #4]
 800754c:	817b      	strh	r3, [r7, #10]
  while (octets_needed > 1) {
 800754e:	e012      	b.n	8007576 <snmp_asn1_enc_s32t+0x36>
    octets_needed--;
 8007550:	897b      	ldrh	r3, [r7, #10]
 8007552:	3b01      	subs	r3, #1
 8007554:	817b      	strh	r3, [r7, #10]

    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(value >> (octets_needed << 3))));
 8007556:	897b      	ldrh	r3, [r7, #10]
 8007558:	00db      	lsls	r3, r3, #3
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	fa42 f303 	asr.w	r3, r2, r3
 8007560:	b2db      	uxtb	r3, r3
 8007562:	4619      	mov	r1, r3
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f005 fd8b 	bl	800d080 <snmp_pbuf_stream_write>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <snmp_asn1_enc_s32t+0x36>
 8007570:	f06f 0301 	mvn.w	r3, #1
 8007574:	e00f      	b.n	8007596 <snmp_asn1_enc_s32t+0x56>
  while (octets_needed > 1) {
 8007576:	897b      	ldrh	r3, [r7, #10]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d8e9      	bhi.n	8007550 <snmp_asn1_enc_s32t+0x10>
  }

  /* (only) one least significant octet */
  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)value));
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	b2db      	uxtb	r3, r3
 8007580:	4619      	mov	r1, r3
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f005 fd7c 	bl	800d080 <snmp_pbuf_stream_write>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d002      	beq.n	8007594 <snmp_asn1_enc_s32t+0x54>
 800758e:	f06f 0301 	mvn.w	r3, #1
 8007592:	e000      	b.n	8007596 <snmp_asn1_enc_s32t+0x56>

  return ERR_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <snmp_asn1_enc_oid>:
 * @param oid_len object identifier array length
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) encode
 */
err_t
snmp_asn1_enc_oid(struct snmp_pbuf_stream *pbuf_stream, const u32_t *oid, u16_t oid_len)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b088      	sub	sp, #32
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	60f8      	str	r0, [r7, #12]
 80075a6:	60b9      	str	r1, [r7, #8]
 80075a8:	4613      	mov	r3, r2
 80075aa:	80fb      	strh	r3, [r7, #6]
  if (oid_len > 1) {
 80075ac:	88fb      	ldrh	r3, [r7, #6]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d91e      	bls.n	80075f0 <snmp_asn1_enc_oid+0x52>
    /* write compressed first two sub id's */
    u32_t compressed_byte = ((oid[0] * 40) + oid[1]);
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	4613      	mov	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	00db      	lsls	r3, r3, #3
 80075be:	461a      	mov	r2, r3
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	3304      	adds	r3, #4
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4413      	add	r3, r2
 80075c8:	61bb      	str	r3, [r7, #24]
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)compressed_byte));
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	4619      	mov	r1, r3
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f005 fd55 	bl	800d080 <snmp_pbuf_stream_write>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d002      	beq.n	80075e2 <snmp_asn1_enc_oid+0x44>
 80075dc:	f06f 0301 	mvn.w	r3, #1
 80075e0:	e04b      	b.n	800767a <snmp_asn1_enc_oid+0xdc>
    oid_len -= 2;
 80075e2:	88fb      	ldrh	r3, [r7, #6]
 80075e4:	3b02      	subs	r3, #2
 80075e6:	80fb      	strh	r3, [r7, #6]
    oid += 2;
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	3308      	adds	r3, #8
 80075ec:	60bb      	str	r3, [r7, #8]
    /* @bug:  allow empty varbinds for symmetry (we must decode them for getnext), allow partial compression?? */
    /* ident_len <= 1, at least we need zeroDotZero (0.0) (ident_len == 2) */
    return ERR_ARG;
  }

  while (oid_len > 0) {
 80075ee:	e040      	b.n	8007672 <snmp_asn1_enc_oid+0xd4>
    return ERR_ARG;
 80075f0:	f06f 030f 	mvn.w	r3, #15
 80075f4:	e041      	b.n	800767a <snmp_asn1_enc_oid+0xdc>
    u32_t sub_id;
    u8_t shift, tail;

    oid_len--;
 80075f6:	88fb      	ldrh	r3, [r7, #6]
 80075f8:	3b01      	subs	r3, #1
 80075fa:	80fb      	strh	r3, [r7, #6]
    sub_id = *oid;
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	617b      	str	r3, [r7, #20]
    tail = 0;
 8007602:	2300      	movs	r3, #0
 8007604:	77bb      	strb	r3, [r7, #30]
    shift = 28;
 8007606:	231c      	movs	r3, #28
 8007608:	77fb      	strb	r3, [r7, #31]
    while (shift > 0) {
 800760a:	e01d      	b.n	8007648 <snmp_asn1_enc_oid+0xaa>
      u8_t code;

      code = (u8_t)(sub_id >> shift);
 800760c:	7ffb      	ldrb	r3, [r7, #31]
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	fa22 f303 	lsr.w	r3, r2, r3
 8007614:	74fb      	strb	r3, [r7, #19]
      if ((code != 0) || (tail != 0)) {
 8007616:	7cfb      	ldrb	r3, [r7, #19]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d102      	bne.n	8007622 <snmp_asn1_enc_oid+0x84>
 800761c:	7fbb      	ldrb	r3, [r7, #30]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00f      	beq.n	8007642 <snmp_asn1_enc_oid+0xa4>
        tail = 1;
 8007622:	2301      	movs	r3, #1
 8007624:	77bb      	strb	r3, [r7, #30]
        PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, code | 0x80));
 8007626:	7cfb      	ldrb	r3, [r7, #19]
 8007628:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800762c:	b2db      	uxtb	r3, r3
 800762e:	4619      	mov	r1, r3
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f005 fd25 	bl	800d080 <snmp_pbuf_stream_write>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <snmp_asn1_enc_oid+0xa4>
 800763c:	f06f 0301 	mvn.w	r3, #1
 8007640:	e01b      	b.n	800767a <snmp_asn1_enc_oid+0xdc>
      }
      shift -= 7;
 8007642:	7ffb      	ldrb	r3, [r7, #31]
 8007644:	3b07      	subs	r3, #7
 8007646:	77fb      	strb	r3, [r7, #31]
    while (shift > 0) {
 8007648:	7ffb      	ldrb	r3, [r7, #31]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d1de      	bne.n	800760c <snmp_asn1_enc_oid+0x6e>
    }
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)sub_id & 0x7F));
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	b2db      	uxtb	r3, r3
 8007652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007656:	b2db      	uxtb	r3, r3
 8007658:	4619      	mov	r1, r3
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f005 fd10 	bl	800d080 <snmp_pbuf_stream_write>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d002      	beq.n	800766c <snmp_asn1_enc_oid+0xce>
 8007666:	f06f 0301 	mvn.w	r3, #1
 800766a:	e006      	b.n	800767a <snmp_asn1_enc_oid+0xdc>

    /* proceed to next sub-identifier */
    oid++;
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	3304      	adds	r3, #4
 8007670:	60bb      	str	r3, [r7, #8]
  while (oid_len > 0) {
 8007672:	88fb      	ldrh	r3, [r7, #6]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1be      	bne.n	80075f6 <snmp_asn1_enc_oid+0x58>
  }
  return ERR_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3720      	adds	r7, #32
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <snmp_asn1_enc_length_cnt>:
 * @param length parameter length
 * @param octets_needed points to the return value
 */
void
snmp_asn1_enc_length_cnt(u16_t length, u8_t *octets_needed)
{
 8007682:	b480      	push	{r7}
 8007684:	b083      	sub	sp, #12
 8007686:	af00      	add	r7, sp, #0
 8007688:	4603      	mov	r3, r0
 800768a:	6039      	str	r1, [r7, #0]
 800768c:	80fb      	strh	r3, [r7, #6]
  if (length < 0x80U) {
 800768e:	88fb      	ldrh	r3, [r7, #6]
 8007690:	2b7f      	cmp	r3, #127	; 0x7f
 8007692:	d803      	bhi.n	800769c <snmp_asn1_enc_length_cnt+0x1a>
    *octets_needed = 1;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	2201      	movs	r2, #1
 8007698:	701a      	strb	r2, [r3, #0]
  } else if (length < 0x100U) {
    *octets_needed = 2;
  } else {
    *octets_needed = 3;
  }
}
 800769a:	e009      	b.n	80076b0 <snmp_asn1_enc_length_cnt+0x2e>
  } else if (length < 0x100U) {
 800769c:	88fb      	ldrh	r3, [r7, #6]
 800769e:	2bff      	cmp	r3, #255	; 0xff
 80076a0:	d803      	bhi.n	80076aa <snmp_asn1_enc_length_cnt+0x28>
    *octets_needed = 2;
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	2202      	movs	r2, #2
 80076a6:	701a      	strb	r2, [r3, #0]
}
 80076a8:	e002      	b.n	80076b0 <snmp_asn1_enc_length_cnt+0x2e>
    *octets_needed = 3;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	2203      	movs	r2, #3
 80076ae:	701a      	strb	r2, [r3, #0]
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <snmp_asn1_enc_u32t_cnt>:
 * as 0x00,0xFF,0xFF. Note the leading sign octet. A positive value
 * of 0xFFFFFFFF is preceded with 0x00 and the length is 5 octets!!
 */
void
snmp_asn1_enc_u32t_cnt(u32_t value, u16_t *octets_needed)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  if (value < 0x80UL) {
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2b7f      	cmp	r3, #127	; 0x7f
 80076ca:	d803      	bhi.n	80076d4 <snmp_asn1_enc_u32t_cnt+0x18>
    *octets_needed = 1;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	2201      	movs	r2, #1
 80076d0:	801a      	strh	r2, [r3, #0]
  } else if (value < 0x80000000UL) {
    *octets_needed = 4;
  } else {
    *octets_needed = 5;
  }
}
 80076d2:	e019      	b.n	8007708 <snmp_asn1_enc_u32t_cnt+0x4c>
  } else if (value < 0x8000UL) {
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076da:	d203      	bcs.n	80076e4 <snmp_asn1_enc_u32t_cnt+0x28>
    *octets_needed = 2;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	2202      	movs	r2, #2
 80076e0:	801a      	strh	r2, [r3, #0]
}
 80076e2:	e011      	b.n	8007708 <snmp_asn1_enc_u32t_cnt+0x4c>
  } else if (value < 0x800000UL) {
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076ea:	d203      	bcs.n	80076f4 <snmp_asn1_enc_u32t_cnt+0x38>
    *octets_needed = 3;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	2203      	movs	r2, #3
 80076f0:	801a      	strh	r2, [r3, #0]
}
 80076f2:	e009      	b.n	8007708 <snmp_asn1_enc_u32t_cnt+0x4c>
  } else if (value < 0x80000000UL) {
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	db03      	blt.n	8007702 <snmp_asn1_enc_u32t_cnt+0x46>
    *octets_needed = 4;
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2204      	movs	r2, #4
 80076fe:	801a      	strh	r2, [r3, #0]
}
 8007700:	e002      	b.n	8007708 <snmp_asn1_enc_u32t_cnt+0x4c>
    *octets_needed = 5;
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	2205      	movs	r2, #5
 8007706:	801a      	strh	r2, [r3, #0]
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <snmp_asn1_enc_s32t_cnt>:
 *
 * @note ASN coded integers are _always_ signed.
 */
void
snmp_asn1_enc_s32t_cnt(s32_t value, u16_t *octets_needed)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  if (value < 0) {
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2b00      	cmp	r3, #0
 8007722:	da02      	bge.n	800772a <snmp_asn1_enc_s32t_cnt+0x16>
    value = ~value;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	43db      	mvns	r3, r3
 8007728:	607b      	str	r3, [r7, #4]
  }
  if (value < 0x80L) {
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2b7f      	cmp	r3, #127	; 0x7f
 800772e:	dc03      	bgt.n	8007738 <snmp_asn1_enc_s32t_cnt+0x24>
    *octets_needed = 1;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	2201      	movs	r2, #1
 8007734:	801a      	strh	r2, [r3, #0]
  } else if (value < 0x800000L) {
    *octets_needed = 3;
  } else {
    *octets_needed = 4;
  }
}
 8007736:	e012      	b.n	800775e <snmp_asn1_enc_s32t_cnt+0x4a>
  } else if (value < 0x8000L) {
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800773e:	da03      	bge.n	8007748 <snmp_asn1_enc_s32t_cnt+0x34>
    *octets_needed = 2;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2202      	movs	r2, #2
 8007744:	801a      	strh	r2, [r3, #0]
}
 8007746:	e00a      	b.n	800775e <snmp_asn1_enc_s32t_cnt+0x4a>
  } else if (value < 0x800000L) {
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800774e:	da03      	bge.n	8007758 <snmp_asn1_enc_s32t_cnt+0x44>
    *octets_needed = 3;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	2203      	movs	r2, #3
 8007754:	801a      	strh	r2, [r3, #0]
}
 8007756:	e002      	b.n	800775e <snmp_asn1_enc_s32t_cnt+0x4a>
    *octets_needed = 4;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2204      	movs	r2, #4
 800775c:	801a      	strh	r2, [r3, #0]
}
 800775e:	bf00      	nop
 8007760:	370c      	adds	r7, #12
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <snmp_asn1_enc_oid_cnt>:
 * @param oid_len object identifier array length
 * @param octets_needed points to the return value
 */
void
snmp_asn1_enc_oid_cnt(const u32_t *oid, u16_t oid_len, u16_t *octets_needed)
{
 800776a:	b480      	push	{r7}
 800776c:	b087      	sub	sp, #28
 800776e:	af00      	add	r7, sp, #0
 8007770:	60f8      	str	r0, [r7, #12]
 8007772:	460b      	mov	r3, r1
 8007774:	607a      	str	r2, [r7, #4]
 8007776:	817b      	strh	r3, [r7, #10]
  u32_t sub_id;

  *octets_needed = 0;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	801a      	strh	r2, [r3, #0]
  if (oid_len > 1) {
 800777e:	897b      	ldrh	r3, [r7, #10]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d92b      	bls.n	80077dc <snmp_asn1_enc_oid_cnt+0x72>
    /* compressed prefix in one octet */
    (*octets_needed)++;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	881b      	ldrh	r3, [r3, #0]
 8007788:	3301      	adds	r3, #1
 800778a:	b29a      	uxth	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	801a      	strh	r2, [r3, #0]
    oid_len -= 2;
 8007790:	897b      	ldrh	r3, [r7, #10]
 8007792:	3b02      	subs	r3, #2
 8007794:	817b      	strh	r3, [r7, #10]
    oid += 2;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	3308      	adds	r3, #8
 800779a:	60fb      	str	r3, [r7, #12]
  }
  while (oid_len > 0) {
 800779c:	e01e      	b.n	80077dc <snmp_asn1_enc_oid_cnt+0x72>
    oid_len--;
 800779e:	897b      	ldrh	r3, [r7, #10]
 80077a0:	3b01      	subs	r3, #1
 80077a2:	817b      	strh	r3, [r7, #10]
    sub_id = *oid;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	617b      	str	r3, [r7, #20]

    sub_id >>= 7;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	09db      	lsrs	r3, r3, #7
 80077ae:	617b      	str	r3, [r7, #20]
    (*octets_needed)++;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	881b      	ldrh	r3, [r3, #0]
 80077b4:	3301      	adds	r3, #1
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	801a      	strh	r2, [r3, #0]
    while (sub_id > 0) {
 80077bc:	e008      	b.n	80077d0 <snmp_asn1_enc_oid_cnt+0x66>
      sub_id >>= 7;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	09db      	lsrs	r3, r3, #7
 80077c2:	617b      	str	r3, [r7, #20]
      (*octets_needed)++;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	881b      	ldrh	r3, [r3, #0]
 80077c8:	3301      	adds	r3, #1
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	801a      	strh	r2, [r3, #0]
    while (sub_id > 0) {
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1f3      	bne.n	80077be <snmp_asn1_enc_oid_cnt+0x54>
    }
    oid++;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	3304      	adds	r3, #4
 80077da:	60fb      	str	r3, [r7, #12]
  while (oid_len > 0) {
 80077dc:	897b      	ldrh	r3, [r7, #10]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1dd      	bne.n	800779e <snmp_asn1_enc_oid_cnt+0x34>
  }
}
 80077e2:	bf00      	nop
 80077e4:	bf00      	nop
 80077e6:	371c      	adds	r7, #28
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <snmp_asn1_dec_tlv>:
 * @param tlv returns decoded TLV
 * @return ERR_OK if successful, ERR_VAL if we can't decode
 */
err_t
snmp_asn1_dec_tlv(struct snmp_pbuf_stream *pbuf_stream, struct snmp_asn1_tlv *tlv)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  u8_t data;

  /* decode type first */
  PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 80077fa:	f107 030e 	add.w	r3, r7, #14
 80077fe:	4619      	mov	r1, r3
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f005 fc12 	bl	800d02a <snmp_pbuf_stream_read>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d002      	beq.n	8007812 <snmp_asn1_dec_tlv+0x22>
 800780c:	f06f 0301 	mvn.w	r3, #1
 8007810:	e073      	b.n	80078fa <snmp_asn1_dec_tlv+0x10a>
  tlv->type = data;
 8007812:	7bba      	ldrb	r2, [r7, #14]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	701a      	strb	r2, [r3, #0]

  if ((tlv->type & SNMP_ASN1_DATATYPE_MASK) == SNMP_ASN1_DATATYPE_EXTENDED) {
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	f003 031f 	and.w	r3, r3, #31
 8007820:	2b1f      	cmp	r3, #31
 8007822:	d102      	bne.n	800782a <snmp_asn1_dec_tlv+0x3a>
    /* extended format is not used by SNMP so we do not accept those values */
    return ERR_VAL;
 8007824:	f06f 0305 	mvn.w	r3, #5
 8007828:	e067      	b.n	80078fa <snmp_asn1_dec_tlv+0x10a>
  }
  tlv->type_len = 1;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2201      	movs	r2, #1
 800782e:	705a      	strb	r2, [r3, #1]

  /* now, decode length */
  PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 8007830:	f107 030e 	add.w	r3, r7, #14
 8007834:	4619      	mov	r1, r3
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f005 fbf7 	bl	800d02a <snmp_pbuf_stream_read>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d002      	beq.n	8007848 <snmp_asn1_dec_tlv+0x58>
 8007842:	f06f 0301 	mvn.w	r3, #1
 8007846:	e058      	b.n	80078fa <snmp_asn1_dec_tlv+0x10a>

  if (data < 0x80) { /* short form */
 8007848:	7bbb      	ldrb	r3, [r7, #14]
 800784a:	b25b      	sxtb	r3, r3
 800784c:	2b00      	cmp	r3, #0
 800784e:	db07      	blt.n	8007860 <snmp_asn1_dec_tlv+0x70>
    tlv->length_len = 1;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	2201      	movs	r2, #1
 8007854:	709a      	strb	r2, [r3, #2]
    tlv->value_len  = data;
 8007856:	7bbb      	ldrb	r3, [r7, #14]
 8007858:	b29a      	uxth	r2, r3
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	809a      	strh	r2, [r3, #4]
 800785e:	e04b      	b.n	80078f8 <snmp_asn1_dec_tlv+0x108>
  } else if (data > 0x80) { /* long form */
 8007860:	7bbb      	ldrb	r3, [r7, #14]
 8007862:	2b80      	cmp	r3, #128	; 0x80
 8007864:	d945      	bls.n	80078f2 <snmp_asn1_dec_tlv+0x102>
    u8_t length_bytes = data - 0x80;
 8007866:	7bbb      	ldrb	r3, [r7, #14]
 8007868:	3b80      	subs	r3, #128	; 0x80
 800786a:	73fb      	strb	r3, [r7, #15]
    if (length_bytes > pbuf_stream->length) {
 800786c:	7bfb      	ldrb	r3, [r7, #15]
 800786e:	b29a      	uxth	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	88db      	ldrh	r3, [r3, #6]
 8007874:	429a      	cmp	r2, r3
 8007876:	d902      	bls.n	800787e <snmp_asn1_dec_tlv+0x8e>
      return ERR_VAL;
 8007878:	f06f 0305 	mvn.w	r3, #5
 800787c:	e03d      	b.n	80078fa <snmp_asn1_dec_tlv+0x10a>
    }
    tlv->length_len = length_bytes + 1; /* this byte + defined number of length bytes following */
 800787e:	7bfb      	ldrb	r3, [r7, #15]
 8007880:	3301      	adds	r3, #1
 8007882:	b2da      	uxtb	r2, r3
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	709a      	strb	r2, [r3, #2]
    tlv->value_len = 0;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	2200      	movs	r2, #0
 800788c:	809a      	strh	r2, [r3, #4]

    while (length_bytes > 0) {
 800788e:	e02c      	b.n	80078ea <snmp_asn1_dec_tlv+0xfa>
      /* we only support up to u16.maxvalue-1 (2 bytes) but have to accept leading zero bytes */
      if (tlv->value_len > 0xFF) {
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	889b      	ldrh	r3, [r3, #4]
 8007894:	2bff      	cmp	r3, #255	; 0xff
 8007896:	d902      	bls.n	800789e <snmp_asn1_dec_tlv+0xae>
        return ERR_VAL;
 8007898:	f06f 0305 	mvn.w	r3, #5
 800789c:	e02d      	b.n	80078fa <snmp_asn1_dec_tlv+0x10a>
      }
      PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800789e:	f107 030e 	add.w	r3, r7, #14
 80078a2:	4619      	mov	r1, r3
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f005 fbc0 	bl	800d02a <snmp_pbuf_stream_read>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d002      	beq.n	80078b6 <snmp_asn1_dec_tlv+0xc6>
 80078b0:	f06f 0301 	mvn.w	r3, #1
 80078b4:	e021      	b.n	80078fa <snmp_asn1_dec_tlv+0x10a>
      tlv->value_len <<= 8;
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	889b      	ldrh	r3, [r3, #4]
 80078ba:	021b      	lsls	r3, r3, #8
 80078bc:	b29a      	uxth	r2, r3
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	809a      	strh	r2, [r3, #4]
      tlv->value_len |= data;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	889a      	ldrh	r2, [r3, #4]
 80078c6:	7bbb      	ldrb	r3, [r7, #14]
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	4313      	orrs	r3, r2
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	809a      	strh	r2, [r3, #4]

      /* take care for special value used for indefinite length */
      if (tlv->value_len == 0xFFFF) {
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	889b      	ldrh	r3, [r3, #4]
 80078d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078da:	4293      	cmp	r3, r2
 80078dc:	d102      	bne.n	80078e4 <snmp_asn1_dec_tlv+0xf4>
        return ERR_VAL;
 80078de:	f06f 0305 	mvn.w	r3, #5
 80078e2:	e00a      	b.n	80078fa <snmp_asn1_dec_tlv+0x10a>
      }

      length_bytes--;
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
 80078e6:	3b01      	subs	r3, #1
 80078e8:	73fb      	strb	r3, [r7, #15]
    while (length_bytes > 0) {
 80078ea:	7bfb      	ldrb	r3, [r7, #15]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1cf      	bne.n	8007890 <snmp_asn1_dec_tlv+0xa0>
 80078f0:	e002      	b.n	80078f8 <snmp_asn1_dec_tlv+0x108>
    }
  } else { /* data == 0x80 indefinite length form */
    /* (not allowed for SNMP; RFC 1157, 3.2.2) */
    return ERR_VAL;
 80078f2:	f06f 0305 	mvn.w	r3, #5
 80078f6:	e000      	b.n	80078fa <snmp_asn1_dec_tlv+0x10a>
  }

  return ERR_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <snmp_asn1_dec_u32t>:
 * as 0x00,0xFF,0xFF. Note the leading sign octet. A positive value
 * of 0xFFFFFFFF is preceded with 0x00 and the length is 5 octets!!
 */
err_t
snmp_asn1_dec_u32t(struct snmp_pbuf_stream *pbuf_stream, u16_t len, u32_t *value)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b086      	sub	sp, #24
 8007906:	af00      	add	r7, sp, #0
 8007908:	60f8      	str	r0, [r7, #12]
 800790a:	460b      	mov	r3, r1
 800790c:	607a      	str	r2, [r7, #4]
 800790e:	817b      	strh	r3, [r7, #10]
  u8_t data;

  if ((len > 0) && (len <= 5)) {
 8007910:	897b      	ldrh	r3, [r7, #10]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d042      	beq.n	800799c <snmp_asn1_dec_u32t+0x9a>
 8007916:	897b      	ldrh	r3, [r7, #10]
 8007918:	2b05      	cmp	r3, #5
 800791a:	d83f      	bhi.n	800799c <snmp_asn1_dec_u32t+0x9a>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800791c:	f107 0317 	add.w	r3, r7, #23
 8007920:	4619      	mov	r1, r3
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f005 fb81 	bl	800d02a <snmp_pbuf_stream_read>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d002      	beq.n	8007934 <snmp_asn1_dec_u32t+0x32>
 800792e:	f06f 0301 	mvn.w	r3, #1
 8007932:	e035      	b.n	80079a0 <snmp_asn1_dec_u32t+0x9e>

    /* expecting sign bit to be zero, only unsigned please! */
    if (((len == 5) && (data == 0x00)) || ((len < 5) && ((data & 0x80) == 0))) {
 8007934:	897b      	ldrh	r3, [r7, #10]
 8007936:	2b05      	cmp	r3, #5
 8007938:	d102      	bne.n	8007940 <snmp_asn1_dec_u32t+0x3e>
 800793a:	7dfb      	ldrb	r3, [r7, #23]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d006      	beq.n	800794e <snmp_asn1_dec_u32t+0x4c>
 8007940:	897b      	ldrh	r3, [r7, #10]
 8007942:	2b04      	cmp	r3, #4
 8007944:	d82a      	bhi.n	800799c <snmp_asn1_dec_u32t+0x9a>
 8007946:	7dfb      	ldrb	r3, [r7, #23]
 8007948:	b25b      	sxtb	r3, r3
 800794a:	2b00      	cmp	r3, #0
 800794c:	db26      	blt.n	800799c <snmp_asn1_dec_u32t+0x9a>
      *value = data;
 800794e:	7dfb      	ldrb	r3, [r7, #23]
 8007950:	461a      	mov	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	601a      	str	r2, [r3, #0]
      len--;
 8007956:	897b      	ldrh	r3, [r7, #10]
 8007958:	3b01      	subs	r3, #1
 800795a:	817b      	strh	r3, [r7, #10]

      while (len > 0) {
 800795c:	e019      	b.n	8007992 <snmp_asn1_dec_u32t+0x90>
        PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 800795e:	f107 0317 	add.w	r3, r7, #23
 8007962:	4619      	mov	r1, r3
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f005 fb60 	bl	800d02a <snmp_pbuf_stream_read>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d002      	beq.n	8007976 <snmp_asn1_dec_u32t+0x74>
 8007970:	f06f 0301 	mvn.w	r3, #1
 8007974:	e014      	b.n	80079a0 <snmp_asn1_dec_u32t+0x9e>
        len--;
 8007976:	897b      	ldrh	r3, [r7, #10]
 8007978:	3b01      	subs	r3, #1
 800797a:	817b      	strh	r3, [r7, #10]

        *value <<= 8;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	021a      	lsls	r2, r3, #8
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	601a      	str	r2, [r3, #0]
        *value |= data;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	7dfa      	ldrb	r2, [r7, #23]
 800798c:	431a      	orrs	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	601a      	str	r2, [r3, #0]
      while (len > 0) {
 8007992:	897b      	ldrh	r3, [r7, #10]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1e2      	bne.n	800795e <snmp_asn1_dec_u32t+0x5c>
      }

      return ERR_OK;
 8007998:	2300      	movs	r3, #0
 800799a:	e001      	b.n	80079a0 <snmp_asn1_dec_u32t+0x9e>
    }
  }

  return ERR_VAL;
 800799c:	f06f 0305 	mvn.w	r3, #5
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3718      	adds	r7, #24
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <snmp_asn1_dec_s32t>:
 *
 * @note ASN coded integers are _always_ signed!
 */
err_t
snmp_asn1_dec_s32t(struct snmp_pbuf_stream *pbuf_stream, u16_t len, s32_t *value)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	460b      	mov	r3, r1
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	817b      	strh	r3, [r7, #10]
  u8_t data;

  if ((len > 0) && (len < 5)) {
 80079b6:	897b      	ldrh	r3, [r7, #10]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d041      	beq.n	8007a40 <snmp_asn1_dec_s32t+0x98>
 80079bc:	897b      	ldrh	r3, [r7, #10]
 80079be:	2b04      	cmp	r3, #4
 80079c0:	d83e      	bhi.n	8007a40 <snmp_asn1_dec_s32t+0x98>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 80079c2:	f107 0317 	add.w	r3, r7, #23
 80079c6:	4619      	mov	r1, r3
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f005 fb2e 	bl	800d02a <snmp_pbuf_stream_read>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d002      	beq.n	80079da <snmp_asn1_dec_s32t+0x32>
 80079d4:	f06f 0301 	mvn.w	r3, #1
 80079d8:	e034      	b.n	8007a44 <snmp_asn1_dec_s32t+0x9c>

    if (data & 0x80) {
 80079da:	7dfb      	ldrb	r3, [r7, #23]
 80079dc:	b25b      	sxtb	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	da0b      	bge.n	80079fa <snmp_asn1_dec_s32t+0x52>
      /* negative, start from -1 */
      *value = -1;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f04f 32ff 	mov.w	r2, #4294967295
 80079e8:	601a      	str	r2, [r3, #0]
      *value = (*value << 8) | data;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	021b      	lsls	r3, r3, #8
 80079f0:	7dfa      	ldrb	r2, [r7, #23]
 80079f2:	431a      	orrs	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	601a      	str	r2, [r3, #0]
 80079f8:	e003      	b.n	8007a02 <snmp_asn1_dec_s32t+0x5a>
    } else {
      /* positive, start from 0 */
      *value = data;
 80079fa:	7dfb      	ldrb	r3, [r7, #23]
 80079fc:	461a      	mov	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	601a      	str	r2, [r3, #0]
    }
    len--;
 8007a02:	897b      	ldrh	r3, [r7, #10]
 8007a04:	3b01      	subs	r3, #1
 8007a06:	817b      	strh	r3, [r7, #10]
    /* shift in the remaining value */
    while (len > 0) {
 8007a08:	e015      	b.n	8007a36 <snmp_asn1_dec_s32t+0x8e>
      PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 8007a0a:	f107 0317 	add.w	r3, r7, #23
 8007a0e:	4619      	mov	r1, r3
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f005 fb0a 	bl	800d02a <snmp_pbuf_stream_read>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d002      	beq.n	8007a22 <snmp_asn1_dec_s32t+0x7a>
 8007a1c:	f06f 0301 	mvn.w	r3, #1
 8007a20:	e010      	b.n	8007a44 <snmp_asn1_dec_s32t+0x9c>
      *value = (*value << 8) | data;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	021b      	lsls	r3, r3, #8
 8007a28:	7dfa      	ldrb	r2, [r7, #23]
 8007a2a:	431a      	orrs	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	601a      	str	r2, [r3, #0]
      len--;
 8007a30:	897b      	ldrh	r3, [r7, #10]
 8007a32:	3b01      	subs	r3, #1
 8007a34:	817b      	strh	r3, [r7, #10]
    while (len > 0) {
 8007a36:	897b      	ldrh	r3, [r7, #10]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1e6      	bne.n	8007a0a <snmp_asn1_dec_s32t+0x62>
    }
    return ERR_OK;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	e001      	b.n	8007a44 <snmp_asn1_dec_s32t+0x9c>
  }

  return ERR_VAL;
 8007a40:	f06f 0305 	mvn.w	r3, #5
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3718      	adds	r7, #24
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <snmp_asn1_dec_oid>:
 * @param oid_max_len size of oid buffer
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) decode
 */
err_t
snmp_asn1_dec_oid(struct snmp_pbuf_stream *pbuf_stream, u16_t len, u32_t *oid, u8_t *oid_len, u8_t oid_max_len)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b088      	sub	sp, #32
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	607a      	str	r2, [r7, #4]
 8007a56:	603b      	str	r3, [r7, #0]
 8007a58:	460b      	mov	r3, r1
 8007a5a:	817b      	strh	r3, [r7, #10]
  u32_t *oid_ptr;
  u8_t data;

  *oid_len = 0;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	701a      	strb	r2, [r3, #0]
  oid_ptr = oid;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	61fb      	str	r3, [r7, #28]
  if (len > 0) {
 8007a66:	897b      	ldrh	r3, [r7, #10]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d05a      	beq.n	8007b22 <snmp_asn1_dec_oid+0xd6>
    if (oid_max_len < 2) {
 8007a6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d802      	bhi.n	8007a7a <snmp_asn1_dec_oid+0x2e>
      return ERR_MEM;
 8007a74:	f04f 33ff 	mov.w	r3, #4294967295
 8007a78:	e0b2      	b.n	8007be0 <snmp_asn1_dec_oid+0x194>
    }

    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 8007a7a:	f107 0317 	add.w	r3, r7, #23
 8007a7e:	4619      	mov	r1, r3
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f005 fad2 	bl	800d02a <snmp_pbuf_stream_read>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d002      	beq.n	8007a92 <snmp_asn1_dec_oid+0x46>
 8007a8c:	f06f 0301 	mvn.w	r3, #1
 8007a90:	e0a6      	b.n	8007be0 <snmp_asn1_dec_oid+0x194>
    len--;
 8007a92:	897b      	ldrh	r3, [r7, #10]
 8007a94:	3b01      	subs	r3, #1
 8007a96:	817b      	strh	r3, [r7, #10]

    /* first compressed octet */
    if (data == 0x2B) {
 8007a98:	7dfb      	ldrb	r3, [r7, #23]
 8007a9a:	2b2b      	cmp	r3, #43	; 0x2b
 8007a9c:	d10c      	bne.n	8007ab8 <snmp_asn1_dec_oid+0x6c>
      /* (most) common case 1.3 (iso.org) */
      *oid_ptr = 1;
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	3304      	adds	r3, #4
 8007aa8:	61fb      	str	r3, [r7, #28]
      *oid_ptr = 3;
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	2203      	movs	r2, #3
 8007aae:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	3304      	adds	r3, #4
 8007ab4:	61fb      	str	r3, [r7, #28]
 8007ab6:	e030      	b.n	8007b1a <snmp_asn1_dec_oid+0xce>
    } else if (data < 40) {
 8007ab8:	7dfb      	ldrb	r3, [r7, #23]
 8007aba:	2b27      	cmp	r3, #39	; 0x27
 8007abc:	d80d      	bhi.n	8007ada <snmp_asn1_dec_oid+0x8e>
      *oid_ptr = 0;
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	3304      	adds	r3, #4
 8007ac8:	61fb      	str	r3, [r7, #28]
      *oid_ptr = data;
 8007aca:	7dfb      	ldrb	r3, [r7, #23]
 8007acc:	461a      	mov	r2, r3
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	3304      	adds	r3, #4
 8007ad6:	61fb      	str	r3, [r7, #28]
 8007ad8:	e01f      	b.n	8007b1a <snmp_asn1_dec_oid+0xce>
    } else if (data < 80) {
 8007ada:	7dfb      	ldrb	r3, [r7, #23]
 8007adc:	2b4f      	cmp	r3, #79	; 0x4f
 8007ade:	d80e      	bhi.n	8007afe <snmp_asn1_dec_oid+0xb2>
      *oid_ptr = 1;
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	3304      	adds	r3, #4
 8007aea:	61fb      	str	r3, [r7, #28]
      *oid_ptr = data - 40;
 8007aec:	7dfb      	ldrb	r3, [r7, #23]
 8007aee:	3b28      	subs	r3, #40	; 0x28
 8007af0:	461a      	mov	r2, r3
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	3304      	adds	r3, #4
 8007afa:	61fb      	str	r3, [r7, #28]
 8007afc:	e00d      	b.n	8007b1a <snmp_asn1_dec_oid+0xce>
    } else {
      *oid_ptr = 2;
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	2202      	movs	r2, #2
 8007b02:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	3304      	adds	r3, #4
 8007b08:	61fb      	str	r3, [r7, #28]
      *oid_ptr = data - 80;
 8007b0a:	7dfb      	ldrb	r3, [r7, #23]
 8007b0c:	3b50      	subs	r3, #80	; 0x50
 8007b0e:	461a      	mov	r2, r3
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	601a      	str	r2, [r3, #0]
      oid_ptr++;
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	3304      	adds	r3, #4
 8007b18:	61fb      	str	r3, [r7, #28]
    }
    *oid_len = 2;
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	2202      	movs	r2, #2
 8007b1e:	701a      	strb	r2, [r3, #0]
  } else {
    /* accepting zero length identifiers e.g. for getnext operation. uncommon but valid */
    return ERR_OK;
  }

  while ((len > 0) && (*oid_len < oid_max_len)) {
 8007b20:	e04e      	b.n	8007bc0 <snmp_asn1_dec_oid+0x174>
    return ERR_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	e05c      	b.n	8007be0 <snmp_asn1_dec_oid+0x194>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 8007b26:	f107 0317 	add.w	r3, r7, #23
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f005 fa7c 	bl	800d02a <snmp_pbuf_stream_read>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d002      	beq.n	8007b3e <snmp_asn1_dec_oid+0xf2>
 8007b38:	f06f 0301 	mvn.w	r3, #1
 8007b3c:	e050      	b.n	8007be0 <snmp_asn1_dec_oid+0x194>
    len--;
 8007b3e:	897b      	ldrh	r3, [r7, #10]
 8007b40:	3b01      	subs	r3, #1
 8007b42:	817b      	strh	r3, [r7, #10]

    if ((data & 0x80) == 0x00) {
 8007b44:	7dfb      	ldrb	r3, [r7, #23]
 8007b46:	b25b      	sxtb	r3, r3
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	db04      	blt.n	8007b56 <snmp_asn1_dec_oid+0x10a>
      /* sub-identifier uses single octet */
      *oid_ptr = data;
 8007b4c:	7dfb      	ldrb	r3, [r7, #23]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	601a      	str	r2, [r3, #0]
 8007b54:	e02b      	b.n	8007bae <snmp_asn1_dec_oid+0x162>
    } else {
      /* sub-identifier uses multiple octets */
      u32_t sub_id = (data & ~0x80);
 8007b56:	7dfb      	ldrb	r3, [r7, #23]
 8007b58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b5c:	61bb      	str	r3, [r7, #24]
      while ((len > 0) && ((data & 0x80) != 0)) {
 8007b5e:	e015      	b.n	8007b8c <snmp_asn1_dec_oid+0x140>
        PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 8007b60:	f107 0317 	add.w	r3, r7, #23
 8007b64:	4619      	mov	r1, r3
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f005 fa5f 	bl	800d02a <snmp_pbuf_stream_read>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d002      	beq.n	8007b78 <snmp_asn1_dec_oid+0x12c>
 8007b72:	f06f 0301 	mvn.w	r3, #1
 8007b76:	e033      	b.n	8007be0 <snmp_asn1_dec_oid+0x194>
        len--;
 8007b78:	897b      	ldrh	r3, [r7, #10]
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	817b      	strh	r3, [r7, #10]

        sub_id = (sub_id << 7) + (data & ~0x80);
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	01da      	lsls	r2, r3, #7
 8007b82:	7dfb      	ldrb	r3, [r7, #23]
 8007b84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b88:	4413      	add	r3, r2
 8007b8a:	61bb      	str	r3, [r7, #24]
      while ((len > 0) && ((data & 0x80) != 0)) {
 8007b8c:	897b      	ldrh	r3, [r7, #10]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <snmp_asn1_dec_oid+0x14e>
 8007b92:	7dfb      	ldrb	r3, [r7, #23]
 8007b94:	b25b      	sxtb	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	dbe2      	blt.n	8007b60 <snmp_asn1_dec_oid+0x114>
      }

      if ((data & 0x80) != 0) {
 8007b9a:	7dfb      	ldrb	r3, [r7, #23]
 8007b9c:	b25b      	sxtb	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	da02      	bge.n	8007ba8 <snmp_asn1_dec_oid+0x15c>
        /* "more bytes following" bit still set at end of len */
        return ERR_VAL;
 8007ba2:	f06f 0305 	mvn.w	r3, #5
 8007ba6:	e01b      	b.n	8007be0 <snmp_asn1_dec_oid+0x194>
      }
      *oid_ptr = sub_id;
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	69ba      	ldr	r2, [r7, #24]
 8007bac:	601a      	str	r2, [r3, #0]
    }
    oid_ptr++;
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	61fb      	str	r3, [r7, #28]
    (*oid_len)++;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	b2da      	uxtb	r2, r3
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	701a      	strb	r2, [r3, #0]
  while ((len > 0) && (*oid_len < oid_max_len)) {
 8007bc0:	897b      	ldrh	r3, [r7, #10]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d005      	beq.n	8007bd2 <snmp_asn1_dec_oid+0x186>
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d8a9      	bhi.n	8007b26 <snmp_asn1_dec_oid+0xda>
  }

  if (len > 0) {
 8007bd2:	897b      	ldrh	r3, [r7, #10]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d002      	beq.n	8007bde <snmp_asn1_dec_oid+0x192>
    /* OID to long to fit in our buffer */
    return ERR_MEM;
 8007bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bdc:	e000      	b.n	8007be0 <snmp_asn1_dec_oid+0x194>
  }

  return ERR_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3720      	adds	r7, #32
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <snmp_asn1_dec_raw>:
 * @param buf_max_len buffer size
 * @return ERR_OK if successful, ERR_ARG if we can't (or won't) decode
 */
err_t
snmp_asn1_dec_raw(struct snmp_pbuf_stream *pbuf_stream, u16_t len, u8_t *buf, u16_t *buf_len, u16_t buf_max_len)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	607a      	str	r2, [r7, #4]
 8007bf2:	603b      	str	r3, [r7, #0]
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	817b      	strh	r3, [r7, #10]
  if (len > buf_max_len) {
 8007bf8:	897a      	ldrh	r2, [r7, #10]
 8007bfa:	8b3b      	ldrh	r3, [r7, #24]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d902      	bls.n	8007c06 <snmp_asn1_dec_raw+0x1e>
    /* not enough dst space */
    return ERR_MEM;
 8007c00:	f04f 33ff 	mov.w	r3, #4294967295
 8007c04:	e017      	b.n	8007c36 <snmp_asn1_dec_raw+0x4e>
  }
  *buf_len = len;
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	897a      	ldrh	r2, [r7, #10]
 8007c0a:	801a      	strh	r2, [r3, #0]

  while (len > 0) {
 8007c0c:	e00f      	b.n	8007c2e <snmp_asn1_dec_raw+0x46>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, buf));
 8007c0e:	6879      	ldr	r1, [r7, #4]
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f005 fa0a 	bl	800d02a <snmp_pbuf_stream_read>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d002      	beq.n	8007c22 <snmp_asn1_dec_raw+0x3a>
 8007c1c:	f06f 0301 	mvn.w	r3, #1
 8007c20:	e009      	b.n	8007c36 <snmp_asn1_dec_raw+0x4e>
    buf++;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	3301      	adds	r3, #1
 8007c26:	607b      	str	r3, [r7, #4]
    len--;
 8007c28:	897b      	ldrh	r3, [r7, #10]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	817b      	strh	r3, [r7, #10]
  while (len > 0) {
 8007c2e:	897b      	ldrh	r3, [r7, #10]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1ec      	bne.n	8007c0e <snmp_asn1_dec_raw+0x26>
  }

  return ERR_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3710      	adds	r7, #16
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <snmp_asn1_enc_u64t_cnt>:
 * as 0x00,0xFF,0xFF. Note the leading sign octet. A positive value
 * of 0xFFFFFFFFFFFFFFFF is preceded with 0x00 and the length is 9 octets!!
 */
void
snmp_asn1_enc_u64t_cnt(u64_t value, u16_t *octets_needed)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b084      	sub	sp, #16
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8007c48:	607a      	str	r2, [r7, #4]
  /* check if high u32 is 0 */
  if ((value >> 32) == 0) {
 8007c4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c4e:	f04f 0200 	mov.w	r2, #0
 8007c52:	f04f 0300 	mov.w	r3, #0
 8007c56:	000a      	movs	r2, r1
 8007c58:	2300      	movs	r3, #0
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	d105      	bne.n	8007c6a <snmp_asn1_enc_u64t_cnt+0x2c>
    /* only low u32 is important */
    snmp_asn1_enc_u32t_cnt((u32_t)value, octets_needed);
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	6879      	ldr	r1, [r7, #4]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7ff fd2a 	bl	80076bc <snmp_asn1_enc_u32t_cnt>
  } else {
    /* low u32 does not matter for length determination */
    snmp_asn1_enc_u32t_cnt((u32_t)(value >> 32), octets_needed);
    *octets_needed = *octets_needed + 4; /* add the 4 bytes of low u32 */
  }
}
 8007c68:	e012      	b.n	8007c90 <snmp_asn1_enc_u64t_cnt+0x52>
    snmp_asn1_enc_u32t_cnt((u32_t)(value >> 32), octets_needed);
 8007c6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c6e:	f04f 0200 	mov.w	r2, #0
 8007c72:	f04f 0300 	mov.w	r3, #0
 8007c76:	000a      	movs	r2, r1
 8007c78:	2300      	movs	r3, #0
 8007c7a:	4613      	mov	r3, r2
 8007c7c:	6879      	ldr	r1, [r7, #4]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7ff fd1c 	bl	80076bc <snmp_asn1_enc_u32t_cnt>
    *octets_needed = *octets_needed + 4; /* add the 4 bytes of low u32 */
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	881b      	ldrh	r3, [r3, #0]
 8007c88:	3304      	adds	r3, #4
 8007c8a:	b29a      	uxth	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	801a      	strh	r2, [r3, #0]
}
 8007c90:	bf00      	nop
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <snmp_asn1_dec_u64t>:
 * as 0x00,0xFF,0xFF. Note the leading sign octet. A positive value
 * of 0xFFFFFFFFFFFFFFFF is preceded with 0x00 and the length is 9 octets!!
 */
err_t
snmp_asn1_dec_u64t(struct snmp_pbuf_stream *pbuf_stream, u16_t len, u64_t *value)
{
 8007c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c9c:	b086      	sub	sp, #24
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	60f8      	str	r0, [r7, #12]
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	607a      	str	r2, [r7, #4]
 8007ca6:	817b      	strh	r3, [r7, #10]
  u8_t data;

  if ((len > 0) && (len <= 9)) {
 8007ca8:	897b      	ldrh	r3, [r7, #10]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d058      	beq.n	8007d60 <snmp_asn1_dec_u64t+0xc8>
 8007cae:	897b      	ldrh	r3, [r7, #10]
 8007cb0:	2b09      	cmp	r3, #9
 8007cb2:	d855      	bhi.n	8007d60 <snmp_asn1_dec_u64t+0xc8>
    PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 8007cb4:	f107 0317 	add.w	r3, r7, #23
 8007cb8:	4619      	mov	r1, r3
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f005 f9b5 	bl	800d02a <snmp_pbuf_stream_read>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d002      	beq.n	8007ccc <snmp_asn1_dec_u64t+0x34>
 8007cc6:	f06f 0301 	mvn.w	r3, #1
 8007cca:	e04b      	b.n	8007d64 <snmp_asn1_dec_u64t+0xcc>

    /* expecting sign bit to be zero, only unsigned please! */
    if (((len == 9) && (data == 0x00)) || ((len < 9) && ((data & 0x80) == 0))) {
 8007ccc:	897b      	ldrh	r3, [r7, #10]
 8007cce:	2b09      	cmp	r3, #9
 8007cd0:	d102      	bne.n	8007cd8 <snmp_asn1_dec_u64t+0x40>
 8007cd2:	7dfb      	ldrb	r3, [r7, #23]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d006      	beq.n	8007ce6 <snmp_asn1_dec_u64t+0x4e>
 8007cd8:	897b      	ldrh	r3, [r7, #10]
 8007cda:	2b08      	cmp	r3, #8
 8007cdc:	d840      	bhi.n	8007d60 <snmp_asn1_dec_u64t+0xc8>
 8007cde:	7dfb      	ldrb	r3, [r7, #23]
 8007ce0:	b25b      	sxtb	r3, r3
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	db3c      	blt.n	8007d60 <snmp_asn1_dec_u64t+0xc8>
      *value = data;
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	2200      	movs	r2, #0
 8007cec:	469a      	mov	sl, r3
 8007cee:	4693      	mov	fp, r2
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	e9c3 ab00 	strd	sl, fp, [r3]
      len--;
 8007cf6:	897b      	ldrh	r3, [r7, #10]
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	817b      	strh	r3, [r7, #10]

      while (len > 0) {
 8007cfc:	e02b      	b.n	8007d56 <snmp_asn1_dec_u64t+0xbe>
        PBUF_OP_EXEC(snmp_pbuf_stream_read(pbuf_stream, &data));
 8007cfe:	f107 0317 	add.w	r3, r7, #23
 8007d02:	4619      	mov	r1, r3
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f005 f990 	bl	800d02a <snmp_pbuf_stream_read>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d002      	beq.n	8007d16 <snmp_asn1_dec_u64t+0x7e>
 8007d10:	f06f 0301 	mvn.w	r3, #1
 8007d14:	e026      	b.n	8007d64 <snmp_asn1_dec_u64t+0xcc>
        *value <<= 8;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d1c:	f04f 0200 	mov.w	r2, #0
 8007d20:	f04f 0300 	mov.w	r3, #0
 8007d24:	020b      	lsls	r3, r1, #8
 8007d26:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d2a:	0202      	lsls	r2, r0, #8
 8007d2c:	6879      	ldr	r1, [r7, #4]
 8007d2e:	e9c1 2300 	strd	r2, r3, [r1]
        *value |= data;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d38:	7df9      	ldrb	r1, [r7, #23]
 8007d3a:	b2c9      	uxtb	r1, r1
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	460c      	mov	r4, r1
 8007d40:	4605      	mov	r5, r0
 8007d42:	ea42 0804 	orr.w	r8, r2, r4
 8007d46:	ea43 0905 	orr.w	r9, r3, r5
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	e9c3 8900 	strd	r8, r9, [r3]
        len--;
 8007d50:	897b      	ldrh	r3, [r7, #10]
 8007d52:	3b01      	subs	r3, #1
 8007d54:	817b      	strh	r3, [r7, #10]
      while (len > 0) {
 8007d56:	897b      	ldrh	r3, [r7, #10]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1d0      	bne.n	8007cfe <snmp_asn1_dec_u64t+0x66>
      }

      return ERR_OK;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	e001      	b.n	8007d64 <snmp_asn1_dec_u64t+0xcc>
    }
  }

  return ERR_VAL;
 8007d60:	f06f 0305 	mvn.w	r3, #5
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3718      	adds	r7, #24
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007d6e <snmp_asn1_enc_u64t>:
 *
 * @see snmp_asn1_enc_u64t_cnt()
 */
err_t
snmp_asn1_enc_u64t(struct snmp_pbuf_stream *pbuf_stream, u16_t octets_needed, u64_t value)
{
 8007d6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d70:	b085      	sub	sp, #20
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	60f8      	str	r0, [r7, #12]
 8007d76:	e9c7 2300 	strd	r2, r3, [r7]
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	817b      	strh	r3, [r7, #10]
  if (octets_needed > 9) {
 8007d7e:	897b      	ldrh	r3, [r7, #10]
 8007d80:	2b09      	cmp	r3, #9
 8007d82:	d902      	bls.n	8007d8a <snmp_asn1_enc_u64t+0x1c>
    return ERR_ARG;
 8007d84:	f06f 030f 	mvn.w	r3, #15
 8007d88:	e03f      	b.n	8007e0a <snmp_asn1_enc_u64t+0x9c>
  }
  if (octets_needed == 9) {
 8007d8a:	897b      	ldrh	r3, [r7, #10]
 8007d8c:	2b09      	cmp	r3, #9
 8007d8e:	d12d      	bne.n	8007dec <snmp_asn1_enc_u64t+0x7e>
    /* not enough bits in 'value' add leading 0x00 */
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, 0x00));
 8007d90:	2100      	movs	r1, #0
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f005 f974 	bl	800d080 <snmp_pbuf_stream_write>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d002      	beq.n	8007da4 <snmp_asn1_enc_u64t+0x36>
 8007d9e:	f06f 0301 	mvn.w	r3, #1
 8007da2:	e032      	b.n	8007e0a <snmp_asn1_enc_u64t+0x9c>
    octets_needed--;
 8007da4:	897b      	ldrh	r3, [r7, #10]
 8007da6:	3b01      	subs	r3, #1
 8007da8:	817b      	strh	r3, [r7, #10]
  }

  while (octets_needed > 1) {
 8007daa:	e01f      	b.n	8007dec <snmp_asn1_enc_u64t+0x7e>
    octets_needed--;
 8007dac:	897b      	ldrh	r3, [r7, #10]
 8007dae:	3b01      	subs	r3, #1
 8007db0:	817b      	strh	r3, [r7, #10]
    PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(value >> (octets_needed << 3))));
 8007db2:	897b      	ldrh	r3, [r7, #10]
 8007db4:	00d9      	lsls	r1, r3, #3
 8007db6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dba:	f1c1 0620 	rsb	r6, r1, #32
 8007dbe:	f1a1 0020 	sub.w	r0, r1, #32
 8007dc2:	fa22 f401 	lsr.w	r4, r2, r1
 8007dc6:	fa03 f606 	lsl.w	r6, r3, r6
 8007dca:	4334      	orrs	r4, r6
 8007dcc:	fa23 f000 	lsr.w	r0, r3, r0
 8007dd0:	4304      	orrs	r4, r0
 8007dd2:	fa23 f501 	lsr.w	r5, r3, r1
 8007dd6:	b2e3      	uxtb	r3, r4
 8007dd8:	4619      	mov	r1, r3
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f005 f950 	bl	800d080 <snmp_pbuf_stream_write>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d002      	beq.n	8007dec <snmp_asn1_enc_u64t+0x7e>
 8007de6:	f06f 0301 	mvn.w	r3, #1
 8007dea:	e00e      	b.n	8007e0a <snmp_asn1_enc_u64t+0x9c>
  while (octets_needed > 1) {
 8007dec:	897b      	ldrh	r3, [r7, #10]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d8dc      	bhi.n	8007dac <snmp_asn1_enc_u64t+0x3e>
  }

  /* always write at least one octet (also in case of value == 0) */
  PBUF_OP_EXEC(snmp_pbuf_stream_write(pbuf_stream, (u8_t)(value)));
 8007df2:	783b      	ldrb	r3, [r7, #0]
 8007df4:	4619      	mov	r1, r3
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	f005 f942 	bl	800d080 <snmp_pbuf_stream_write>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d002      	beq.n	8007e08 <snmp_asn1_enc_u64t+0x9a>
 8007e02:	f06f 0301 	mvn.w	r3, #1
 8007e06:	e000      	b.n	8007e0a <snmp_asn1_enc_u64t+0x9c>

  return ERR_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3714      	adds	r7, #20
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007e14 <snmp_set_mibs>:
 * };
 * snmp_set_mibs(my_snmp_mibs, LWIP_ARRAYSIZE(my_snmp_mibs));
 */
void
snmp_set_mibs(const struct snmp_mib **mibs, u8_t num_mibs)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mibs pointer must be != NULL", (mibs != NULL));
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d105      	bne.n	8007e32 <snmp_set_mibs+0x1e>
 8007e26:	4b0c      	ldr	r3, [pc, #48]	; (8007e58 <snmp_set_mibs+0x44>)
 8007e28:	22ef      	movs	r2, #239	; 0xef
 8007e2a:	490c      	ldr	r1, [pc, #48]	; (8007e5c <snmp_set_mibs+0x48>)
 8007e2c:	480c      	ldr	r0, [pc, #48]	; (8007e60 <snmp_set_mibs+0x4c>)
 8007e2e:	f014 fc7f 	bl	801c730 <iprintf>
  LWIP_ASSERT("num_mibs pointer must be != 0", (num_mibs != 0));
 8007e32:	78fb      	ldrb	r3, [r7, #3]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d105      	bne.n	8007e44 <snmp_set_mibs+0x30>
 8007e38:	4b07      	ldr	r3, [pc, #28]	; (8007e58 <snmp_set_mibs+0x44>)
 8007e3a:	22f0      	movs	r2, #240	; 0xf0
 8007e3c:	4909      	ldr	r1, [pc, #36]	; (8007e64 <snmp_set_mibs+0x50>)
 8007e3e:	4808      	ldr	r0, [pc, #32]	; (8007e60 <snmp_set_mibs+0x4c>)
 8007e40:	f014 fc76 	bl	801c730 <iprintf>
  snmp_mibs     = mibs;
 8007e44:	4a08      	ldr	r2, [pc, #32]	; (8007e68 <snmp_set_mibs+0x54>)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6013      	str	r3, [r2, #0]
  snmp_num_mibs = num_mibs;
 8007e4a:	4a08      	ldr	r2, [pc, #32]	; (8007e6c <snmp_set_mibs+0x58>)
 8007e4c:	78fb      	ldrb	r3, [r7, #3]
 8007e4e:	7013      	strb	r3, [r2, #0]
}
 8007e50:	bf00      	nop
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	08020130 	.word	0x08020130
 8007e5c:	0802016c 	.word	0x0802016c
 8007e60:	0802018c 	.word	0x0802018c
 8007e64:	080201b4 	.word	0x080201b4
 8007e68:	20000038 	.word	0x20000038
 8007e6c:	20000034 	.word	0x20000034

08007e70 <snmp_get_device_enterprise_oid>:
/**
 * @ingroup snmp_core
 * Get 'device enterprise oid'
 */
const struct snmp_obj_id *snmp_get_device_enterprise_oid(void)
{
 8007e70:	b480      	push	{r7}
 8007e72:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return snmp_device_enterprise_oid;
 8007e74:	4b03      	ldr	r3, [pc, #12]	; (8007e84 <snmp_get_device_enterprise_oid+0x14>)
 8007e76:	681b      	ldr	r3, [r3, #0]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	20000030 	.word	0x20000030

08007e88 <snmp_oid_to_ip4>:
 * @param oid points to u32_t ident[4] input
 * @param ip points to output struct
 */
u8_t
snmp_oid_to_ip4(const u32_t *oid, ip4_addr_t *ip)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  if ((oid[0] > 0xFF) ||
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2bff      	cmp	r3, #255	; 0xff
 8007e98:	d80e      	bhi.n	8007eb8 <snmp_oid_to_ip4+0x30>
      (oid[1] > 0xFF) ||
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	3304      	adds	r3, #4
 8007e9e:	681b      	ldr	r3, [r3, #0]
  if ((oid[0] > 0xFF) ||
 8007ea0:	2bff      	cmp	r3, #255	; 0xff
 8007ea2:	d809      	bhi.n	8007eb8 <snmp_oid_to_ip4+0x30>
      (oid[2] > 0xFF) ||
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	3308      	adds	r3, #8
 8007ea8:	681b      	ldr	r3, [r3, #0]
      (oid[1] > 0xFF) ||
 8007eaa:	2bff      	cmp	r3, #255	; 0xff
 8007eac:	d804      	bhi.n	8007eb8 <snmp_oid_to_ip4+0x30>
      (oid[3] > 0xFF)) {
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	330c      	adds	r3, #12
 8007eb2:	681b      	ldr	r3, [r3, #0]
      (oid[2] > 0xFF) ||
 8007eb4:	2bff      	cmp	r3, #255	; 0xff
 8007eb6:	d905      	bls.n	8007ec4 <snmp_oid_to_ip4+0x3c>
    ip4_addr_copy(*ip, *IP4_ADDR_ANY4);
 8007eb8:	4b36      	ldr	r3, [pc, #216]	; (8007f94 <snmp_oid_to_ip4+0x10c>)
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	601a      	str	r2, [r3, #0]
    return 0;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	e061      	b.n	8007f88 <snmp_oid_to_ip4+0x100>
  }

  IP4_ADDR(ip, oid[0], oid[1], oid[2], oid[3]);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	061a      	lsls	r2, r3, #24
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	3304      	adds	r3, #4
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	041b      	lsls	r3, r3, #16
 8007ed2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007ed6:	431a      	orrs	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	3308      	adds	r3, #8
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	021b      	lsls	r3, r3, #8
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	431a      	orrs	r2, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	330c      	adds	r3, #12
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	4313      	orrs	r3, r2
 8007eee:	061a      	lsls	r2, r3, #24
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	0619      	lsls	r1, r3, #24
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	3304      	adds	r3, #4
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	041b      	lsls	r3, r3, #16
 8007efe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f02:	4319      	orrs	r1, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	3308      	adds	r3, #8
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	021b      	lsls	r3, r3, #8
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	4319      	orrs	r1, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	330c      	adds	r3, #12
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	430b      	orrs	r3, r1
 8007f1a:	021b      	lsls	r3, r3, #8
 8007f1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f20:	431a      	orrs	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	0619      	lsls	r1, r3, #24
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	3304      	adds	r3, #4
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	041b      	lsls	r3, r3, #16
 8007f30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f34:	4319      	orrs	r1, r3
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	3308      	adds	r3, #8
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	021b      	lsls	r3, r3, #8
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	4319      	orrs	r1, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	330c      	adds	r3, #12
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	430b      	orrs	r3, r1
 8007f4c:	0a1b      	lsrs	r3, r3, #8
 8007f4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007f52:	431a      	orrs	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	0619      	lsls	r1, r3, #24
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	3304      	adds	r3, #4
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	041b      	lsls	r3, r3, #16
 8007f62:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f66:	4319      	orrs	r1, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	3308      	adds	r3, #8
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	021b      	lsls	r3, r3, #8
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	4319      	orrs	r1, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	330c      	adds	r3, #12
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	430b      	orrs	r3, r1
 8007f7e:	0e1b      	lsrs	r3, r3, #24
 8007f80:	431a      	orrs	r2, r3
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	601a      	str	r2, [r3, #0]
  return 1;
 8007f86:	2301      	movs	r3, #1
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr
 8007f94:	08024538 	.word	0x08024538

08007f98 <snmp_ip4_to_oid>:
 * @param ip points to input struct
 * @param oid points to u32_t ident[4] output
 */
void
snmp_ip4_to_oid(const ip4_addr_t *ip, u32_t *oid)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  oid[0] = ip4_addr1(ip);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	601a      	str	r2, [r3, #0]
  oid[1] = ip4_addr2(ip);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	781a      	ldrb	r2, [r3, #0]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	3304      	adds	r3, #4
 8007fb6:	601a      	str	r2, [r3, #0]
  oid[2] = ip4_addr3(ip);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	3302      	adds	r3, #2
 8007fbc:	781a      	ldrb	r2, [r3, #0]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	601a      	str	r2, [r3, #0]
  oid[3] = ip4_addr4(ip);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	3303      	adds	r3, #3
 8007fc8:	781a      	ldrb	r2, [r3, #0]
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	330c      	adds	r3, #12
 8007fce:	601a      	str	r2, [r3, #0]
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <snmp_ip_port_to_oid>:
 * @param oid OID
 * @return OID length
 */
u8_t
snmp_ip_port_to_oid(const ip_addr_t *ip, u16_t port, u32_t *oid)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b086      	sub	sp, #24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	607a      	str	r2, [r7, #4]
 8007fe8:	817b      	strh	r3, [r7, #10]
  u8_t idx;

  idx = snmp_ip_to_oid(ip, oid);
 8007fea:	6879      	ldr	r1, [r7, #4]
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f000 f810 	bl	8008012 <snmp_ip_to_oid>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	75fb      	strb	r3, [r7, #23]
  oid[idx] = port;
 8007ff6:	7dfb      	ldrb	r3, [r7, #23]
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	897a      	ldrh	r2, [r7, #10]
 8008000:	601a      	str	r2, [r3, #0]
  idx++;
 8008002:	7dfb      	ldrb	r3, [r7, #23]
 8008004:	3301      	adds	r3, #1
 8008006:	75fb      	strb	r3, [r7, #23]

  return idx;
 8008008:	7dfb      	ldrb	r3, [r7, #23]
}
 800800a:	4618      	mov	r0, r3
 800800c:	3718      	adds	r7, #24
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <snmp_ip_to_oid>:
 * @param oid OID
 * @return OID length
 */
u8_t
snmp_ip_to_oid(const ip_addr_t *ip, u32_t *oid)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b082      	sub	sp, #8
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	6039      	str	r1, [r7, #0]
#else /* LWIP_IPV6 */
    return 0;
#endif /* LWIP_IPV6 */
  } else {
#if LWIP_IPV4
    oid[0] = 1; /* ipv4 */
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	2201      	movs	r2, #1
 8008020:	601a      	str	r2, [r3, #0]
    oid[1] = 4; /* 4 InetAddressIPv4 OIDs follow */
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	3304      	adds	r3, #4
 8008026:	2204      	movs	r2, #4
 8008028:	601a      	str	r2, [r3, #0]
    snmp_ip4_to_oid(ip_2_ip4(ip), &oid[2]);
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	3308      	adds	r3, #8
 800802e:	4619      	mov	r1, r3
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f7ff ffb1 	bl	8007f98 <snmp_ip4_to_oid>
    return 6;
 8008036:	2306      	movs	r3, #6
#else /* LWIP_IPV4 */
    return 0;
#endif /* LWIP_IPV4 */
  }
}
 8008038:	4618      	mov	r0, r3
 800803a:	3708      	adds	r7, #8
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <snmp_oid_to_ip>:
 * @param ip IP address
 * @return Parsed OID length
 */
u8_t
snmp_oid_to_ip(const u32_t *oid, u8_t oid_len, ip_addr_t *ip)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	460b      	mov	r3, r1
 800804a:	607a      	str	r2, [r7, #4]
 800804c:	72fb      	strb	r3, [r7, #11]
  /* InetAddressType */
  if (oid_len < 1) {
 800804e:	7afb      	ldrb	r3, [r7, #11]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d101      	bne.n	8008058 <snmp_oid_to_ip+0x18>
    return 0;
 8008054:	2300      	movs	r3, #0
 8008056:	e03a      	b.n	80080ce <snmp_oid_to_ip+0x8e>
  }

  if (oid[0] == 0) { /* any */
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d112      	bne.n	8008086 <snmp_oid_to_ip+0x46>
    /* 1x InetAddressType, 1x OID len */
    if (oid_len < 2) {
 8008060:	7afb      	ldrb	r3, [r7, #11]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d801      	bhi.n	800806a <snmp_oid_to_ip+0x2a>
      return 0;
 8008066:	2300      	movs	r3, #0
 8008068:	e031      	b.n	80080ce <snmp_oid_to_ip+0x8e>
    }
    if (oid[1] != 0) {
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	3304      	adds	r3, #4
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d001      	beq.n	8008078 <snmp_oid_to_ip+0x38>
      return 0;
 8008074:	2300      	movs	r3, #0
 8008076:	e02a      	b.n	80080ce <snmp_oid_to_ip+0x8e>
    }

    memset(ip, 0, sizeof(*ip));
 8008078:	2204      	movs	r2, #4
 800807a:	2100      	movs	r1, #0
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f013 fc11 	bl	801b8a4 <memset>
    IP_SET_TYPE(ip, IPADDR_TYPE_ANY);

    return 2;
 8008082:	2302      	movs	r3, #2
 8008084:	e023      	b.n	80080ce <snmp_oid_to_ip+0x8e>
  } else if (oid[0] == 1) { /* ipv4 */
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2b01      	cmp	r3, #1
 800808c:	d118      	bne.n	80080c0 <snmp_oid_to_ip+0x80>
#if LWIP_IPV4
    /* 1x InetAddressType, 1x OID len, 4x InetAddressIPv4 */
    if (oid_len < 6) {
 800808e:	7afb      	ldrb	r3, [r7, #11]
 8008090:	2b05      	cmp	r3, #5
 8008092:	d801      	bhi.n	8008098 <snmp_oid_to_ip+0x58>
      return 0;
 8008094:	2300      	movs	r3, #0
 8008096:	e01a      	b.n	80080ce <snmp_oid_to_ip+0x8e>
    }

    /* 4x ipv4 OID */
    if (oid[1] != 4) {
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	3304      	adds	r3, #4
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b04      	cmp	r3, #4
 80080a0:	d001      	beq.n	80080a6 <snmp_oid_to_ip+0x66>
      return 0;
 80080a2:	2300      	movs	r3, #0
 80080a4:	e013      	b.n	80080ce <snmp_oid_to_ip+0x8e>
    }

    IP_SET_TYPE(ip, IPADDR_TYPE_V4);
    if (!snmp_oid_to_ip4(&oid[2], ip_2_ip4(ip))) {
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	3308      	adds	r3, #8
 80080aa:	6879      	ldr	r1, [r7, #4]
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7ff feeb 	bl	8007e88 <snmp_oid_to_ip4>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d101      	bne.n	80080bc <snmp_oid_to_ip+0x7c>
      return 0;
 80080b8:	2300      	movs	r3, #0
 80080ba:	e008      	b.n	80080ce <snmp_oid_to_ip+0x8e>
    }

    return 6;
 80080bc:	2306      	movs	r3, #6
 80080be:	e006      	b.n	80080ce <snmp_oid_to_ip+0x8e>
#else /* LWIP_IPV4 */
    return 0;
#endif /* LWIP_IPV4 */
  } else if (oid[0] == 2) { /* ipv6 */
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d101      	bne.n	80080cc <snmp_oid_to_ip+0x8c>
      return 0;
    }

    return 18;
#else /* LWIP_IPV6 */
    return 0;
 80080c8:	2300      	movs	r3, #0
 80080ca:	e000      	b.n	80080ce <snmp_oid_to_ip+0x8e>
#endif /* LWIP_IPV6 */
  } else { /* unsupported InetAddressType */
    return 0;
 80080cc:	2300      	movs	r3, #0
  }
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <snmp_oid_to_ip_port>:
 * @param port Port
 * @return Parsed OID length
 */
u8_t
snmp_oid_to_ip_port(const u32_t *oid, u8_t oid_len, ip_addr_t *ip, u16_t *port)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b086      	sub	sp, #24
 80080da:	af00      	add	r7, sp, #0
 80080dc:	60f8      	str	r0, [r7, #12]
 80080de:	607a      	str	r2, [r7, #4]
 80080e0:	603b      	str	r3, [r7, #0]
 80080e2:	460b      	mov	r3, r1
 80080e4:	72fb      	strb	r3, [r7, #11]
  u8_t idx;

  /* InetAddressType + InetAddress */
  idx = snmp_oid_to_ip(&oid[0], oid_len, ip);
 80080e6:	7afb      	ldrb	r3, [r7, #11]
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	4619      	mov	r1, r3
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f7ff ffa7 	bl	8008040 <snmp_oid_to_ip>
 80080f2:	4603      	mov	r3, r0
 80080f4:	75fb      	strb	r3, [r7, #23]
  if (idx == 0) {
 80080f6:	7dfb      	ldrb	r3, [r7, #23]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <snmp_oid_to_ip_port+0x2a>
    return 0;
 80080fc:	2300      	movs	r3, #0
 80080fe:	e01b      	b.n	8008138 <snmp_oid_to_ip_port+0x62>
  }

  /* InetPortNumber */
  if (oid_len < (idx + 1)) {
 8008100:	7dfa      	ldrb	r2, [r7, #23]
 8008102:	7afb      	ldrb	r3, [r7, #11]
 8008104:	429a      	cmp	r2, r3
 8008106:	d301      	bcc.n	800810c <snmp_oid_to_ip_port+0x36>
    return 0;
 8008108:	2300      	movs	r3, #0
 800810a:	e015      	b.n	8008138 <snmp_oid_to_ip_port+0x62>
  }
  if (oid[idx] > 0xffff) {
 800810c:	7dfb      	ldrb	r3, [r7, #23]
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	4413      	add	r3, r2
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800811a:	d301      	bcc.n	8008120 <snmp_oid_to_ip_port+0x4a>
    return 0;
 800811c:	2300      	movs	r3, #0
 800811e:	e00b      	b.n	8008138 <snmp_oid_to_ip_port+0x62>
  }
  *port = (u16_t)oid[idx];
 8008120:	7dfb      	ldrb	r3, [r7, #23]
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	4413      	add	r3, r2
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	b29a      	uxth	r2, r3
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	801a      	strh	r2, [r3, #0]
  idx++;
 8008130:	7dfb      	ldrb	r3, [r7, #23]
 8008132:	3301      	adds	r3, #1
 8008134:	75fb      	strb	r3, [r7, #23]

  return idx;
 8008136:	7dfb      	ldrb	r3, [r7, #23]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3718      	adds	r7, #24
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <snmp_oid_assign>:
 * @param oid OID
 * @param oid_len OID length
 */
void
snmp_oid_assign(struct snmp_obj_id *target, const u32_t *oid, u8_t oid_len)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	4613      	mov	r3, r2
 800814c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("oid_len <= SNMP_MAX_OBJ_ID_LEN", oid_len <= SNMP_MAX_OBJ_ID_LEN);
 800814e:	79fb      	ldrb	r3, [r7, #7]
 8008150:	2b32      	cmp	r3, #50	; 0x32
 8008152:	d906      	bls.n	8008162 <snmp_oid_assign+0x22>
 8008154:	4b0c      	ldr	r3, [pc, #48]	; (8008188 <snmp_oid_assign+0x48>)
 8008156:	f240 2226 	movw	r2, #550	; 0x226
 800815a:	490c      	ldr	r1, [pc, #48]	; (800818c <snmp_oid_assign+0x4c>)
 800815c:	480c      	ldr	r0, [pc, #48]	; (8008190 <snmp_oid_assign+0x50>)
 800815e:	f014 fae7 	bl	801c730 <iprintf>

  target->len = oid_len;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	79fa      	ldrb	r2, [r7, #7]
 8008166:	701a      	strb	r2, [r3, #0]

  if (oid_len > 0) {
 8008168:	79fb      	ldrb	r3, [r7, #7]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d007      	beq.n	800817e <snmp_oid_assign+0x3e>
    MEMCPY(target->id, oid, oid_len * sizeof(u32_t));
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	1d18      	adds	r0, r3, #4
 8008172:	79fb      	ldrb	r3, [r7, #7]
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	461a      	mov	r2, r3
 8008178:	68b9      	ldr	r1, [r7, #8]
 800817a:	f013 fb6b 	bl	801b854 <memcpy>
  }
}
 800817e:	bf00      	nop
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	08020130 	.word	0x08020130
 800818c:	080201d4 	.word	0x080201d4
 8008190:	0802018c 	.word	0x0802018c

08008194 <snmp_oid_append>:
 * @param oid OID
 * @param oid_len OID length
 */
void
snmp_oid_append(struct snmp_obj_id *target, const u32_t *oid, u8_t oid_len)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	4613      	mov	r3, r2
 80081a0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("offset + oid_len <= SNMP_MAX_OBJ_ID_LEN", (target->len + oid_len) <= SNMP_MAX_OBJ_ID_LEN);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	461a      	mov	r2, r3
 80081a8:	79fb      	ldrb	r3, [r7, #7]
 80081aa:	4413      	add	r3, r2
 80081ac:	2b32      	cmp	r3, #50	; 0x32
 80081ae:	dd06      	ble.n	80081be <snmp_oid_append+0x2a>
 80081b0:	4b10      	ldr	r3, [pc, #64]	; (80081f4 <snmp_oid_append+0x60>)
 80081b2:	f240 225e 	movw	r2, #606	; 0x25e
 80081b6:	4910      	ldr	r1, [pc, #64]	; (80081f8 <snmp_oid_append+0x64>)
 80081b8:	4810      	ldr	r0, [pc, #64]	; (80081fc <snmp_oid_append+0x68>)
 80081ba:	f014 fab9 	bl	801c730 <iprintf>

  if (oid_len > 0) {
 80081be:	79fb      	ldrb	r3, [r7, #7]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d012      	beq.n	80081ea <snmp_oid_append+0x56>
    MEMCPY(&target->id[target->len], oid, oid_len * sizeof(u32_t));
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	4413      	add	r3, r2
 80081ce:	1d18      	adds	r0, r3, #4
 80081d0:	79fb      	ldrb	r3, [r7, #7]
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	461a      	mov	r2, r3
 80081d6:	68b9      	ldr	r1, [r7, #8]
 80081d8:	f013 fb3c 	bl	801b854 <memcpy>
    target->len = (u8_t)(target->len + oid_len);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	781a      	ldrb	r2, [r3, #0]
 80081e0:	79fb      	ldrb	r3, [r7, #7]
 80081e2:	4413      	add	r3, r2
 80081e4:	b2da      	uxtb	r2, r3
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	701a      	strb	r2, [r3, #0]
  }
}
 80081ea:	bf00      	nop
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	08020130 	.word	0x08020130
 80081f8:	08020224 	.word	0x08020224
 80081fc:	0802018c 	.word	0x0802018c

08008200 <snmp_oid_compare>:
 * @param oid2_len OID 2 length
 * @return -1: OID1&lt;OID2  1: OID1 &gt;OID2 0: equal
 */
s8_t
snmp_oid_compare(const u32_t *oid1, u8_t oid1_len, const u32_t *oid2, u8_t oid2_len)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	607a      	str	r2, [r7, #4]
 800820a:	461a      	mov	r2, r3
 800820c:	460b      	mov	r3, r1
 800820e:	72fb      	strb	r3, [r7, #11]
 8008210:	4613      	mov	r3, r2
 8008212:	72bb      	strb	r3, [r7, #10]
  u8_t level = 0;
 8008214:	2300      	movs	r3, #0
 8008216:	75fb      	strb	r3, [r7, #23]
  LWIP_ASSERT("'oid1' param must not be NULL or 'oid1_len' param be 0!", (oid1 != NULL) || (oid1_len == 0));
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d109      	bne.n	8008232 <snmp_oid_compare+0x32>
 800821e:	7afb      	ldrb	r3, [r7, #11]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d006      	beq.n	8008232 <snmp_oid_compare+0x32>
 8008224:	4b24      	ldr	r3, [pc, #144]	; (80082b8 <snmp_oid_compare+0xb8>)
 8008226:	f240 2272 	movw	r2, #626	; 0x272
 800822a:	4924      	ldr	r1, [pc, #144]	; (80082bc <snmp_oid_compare+0xbc>)
 800822c:	4824      	ldr	r0, [pc, #144]	; (80082c0 <snmp_oid_compare+0xc0>)
 800822e:	f014 fa7f 	bl	801c730 <iprintf>
  LWIP_ASSERT("'oid2' param must not be NULL or 'oid2_len' param be 0!", (oid2 != NULL) || (oid2_len == 0));
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d124      	bne.n	8008282 <snmp_oid_compare+0x82>
 8008238:	7abb      	ldrb	r3, [r7, #10]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d021      	beq.n	8008282 <snmp_oid_compare+0x82>
 800823e:	4b1e      	ldr	r3, [pc, #120]	; (80082b8 <snmp_oid_compare+0xb8>)
 8008240:	f240 2273 	movw	r2, #627	; 0x273
 8008244:	491f      	ldr	r1, [pc, #124]	; (80082c4 <snmp_oid_compare+0xc4>)
 8008246:	481e      	ldr	r0, [pc, #120]	; (80082c0 <snmp_oid_compare+0xc0>)
 8008248:	f014 fa72 	bl	801c730 <iprintf>

  while ((level < oid1_len) && (level < oid2_len)) {
 800824c:	e019      	b.n	8008282 <snmp_oid_compare+0x82>
    if (*oid1 < *oid2) {
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	429a      	cmp	r2, r3
 8008258:	d202      	bcs.n	8008260 <snmp_oid_compare+0x60>
      return -1;
 800825a:	f04f 33ff 	mov.w	r3, #4294967295
 800825e:	e026      	b.n	80082ae <snmp_oid_compare+0xae>
    }
    if (*oid1 > *oid2) {
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	429a      	cmp	r2, r3
 800826a:	d901      	bls.n	8008270 <snmp_oid_compare+0x70>
      return 1;
 800826c:	2301      	movs	r3, #1
 800826e:	e01e      	b.n	80082ae <snmp_oid_compare+0xae>
    }

    level++;
 8008270:	7dfb      	ldrb	r3, [r7, #23]
 8008272:	3301      	adds	r3, #1
 8008274:	75fb      	strb	r3, [r7, #23]
    oid1++;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	3304      	adds	r3, #4
 800827a:	60fb      	str	r3, [r7, #12]
    oid2++;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	3304      	adds	r3, #4
 8008280:	607b      	str	r3, [r7, #4]
  while ((level < oid1_len) && (level < oid2_len)) {
 8008282:	7dfa      	ldrb	r2, [r7, #23]
 8008284:	7afb      	ldrb	r3, [r7, #11]
 8008286:	429a      	cmp	r2, r3
 8008288:	d203      	bcs.n	8008292 <snmp_oid_compare+0x92>
 800828a:	7dfa      	ldrb	r2, [r7, #23]
 800828c:	7abb      	ldrb	r3, [r7, #10]
 800828e:	429a      	cmp	r2, r3
 8008290:	d3dd      	bcc.n	800824e <snmp_oid_compare+0x4e>
  }

  /* common part of both OID's is equal, compare length */
  if (oid1_len < oid2_len) {
 8008292:	7afa      	ldrb	r2, [r7, #11]
 8008294:	7abb      	ldrb	r3, [r7, #10]
 8008296:	429a      	cmp	r2, r3
 8008298:	d202      	bcs.n	80082a0 <snmp_oid_compare+0xa0>
    return -1;
 800829a:	f04f 33ff 	mov.w	r3, #4294967295
 800829e:	e006      	b.n	80082ae <snmp_oid_compare+0xae>
  }
  if (oid1_len > oid2_len) {
 80082a0:	7afa      	ldrb	r2, [r7, #11]
 80082a2:	7abb      	ldrb	r3, [r7, #10]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d901      	bls.n	80082ac <snmp_oid_compare+0xac>
    return 1;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e000      	b.n	80082ae <snmp_oid_compare+0xae>
  }

  /* they are equal */
  return 0;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3718      	adds	r7, #24
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	08020130 	.word	0x08020130
 80082bc:	0802024c 	.word	0x0802024c
 80082c0:	0802018c 	.word	0x0802018c
 80082c4:	08020284 	.word	0x08020284

080082c8 <netif_to_num>:
 * @param netif netif
 * @return index
 */
u8_t
netif_to_num(const struct netif *netif)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  return netif_get_index(netif);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80082d6:	3301      	adds	r3, #1
 80082d8:	b2db      	uxtb	r3, r3
}
 80082da:	4618      	mov	r0, r3
 80082dc:	370c      	adds	r7, #12
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
	...

080082e8 <snmp_get_mib_from_oid>:

static const struct snmp_mib *
snmp_get_mib_from_oid(const u32_t *oid, u8_t oid_len)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b086      	sub	sp, #24
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
  const u32_t *list_oid;
  const u32_t *searched_oid;
  u8_t i, l;

  u8_t max_match_len = 0;
 80082f4:	2300      	movs	r3, #0
 80082f6:	737b      	strb	r3, [r7, #13]
  const struct snmp_mib *matched_mib = NULL;
 80082f8:	2300      	movs	r3, #0
 80082fa:	60bb      	str	r3, [r7, #8]

  LWIP_ASSERT("'oid' param must not be NULL!", (oid != NULL));
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d106      	bne.n	8008310 <snmp_get_mib_from_oid+0x28>
 8008302:	4b44      	ldr	r3, [pc, #272]	; (8008414 <snmp_get_mib_from_oid+0x12c>)
 8008304:	f240 22b2 	movw	r2, #690	; 0x2b2
 8008308:	4943      	ldr	r1, [pc, #268]	; (8008418 <snmp_get_mib_from_oid+0x130>)
 800830a:	4844      	ldr	r0, [pc, #272]	; (800841c <snmp_get_mib_from_oid+0x134>)
 800830c:	f014 fa10 	bl	801c730 <iprintf>

  if (oid_len == 0) {
 8008310:	78fb      	ldrb	r3, [r7, #3]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d101      	bne.n	800831a <snmp_get_mib_from_oid+0x32>
    return NULL;
 8008316:	2300      	movs	r3, #0
 8008318:	e077      	b.n	800840a <snmp_get_mib_from_oid+0x122>
  }

  for (i = 0; i < snmp_num_mibs; i++) {
 800831a:	2300      	movs	r3, #0
 800831c:	73fb      	strb	r3, [r7, #15]
 800831e:	e06e      	b.n	80083fe <snmp_get_mib_from_oid+0x116>
    LWIP_ASSERT("MIB array not initialized correctly", (snmp_mibs[i] != NULL));
 8008320:	4b3f      	ldr	r3, [pc, #252]	; (8008420 <snmp_get_mib_from_oid+0x138>)
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	7bfb      	ldrb	r3, [r7, #15]
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4413      	add	r3, r2
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d106      	bne.n	800833e <snmp_get_mib_from_oid+0x56>
 8008330:	4b38      	ldr	r3, [pc, #224]	; (8008414 <snmp_get_mib_from_oid+0x12c>)
 8008332:	f240 22b9 	movw	r2, #697	; 0x2b9
 8008336:	493b      	ldr	r1, [pc, #236]	; (8008424 <snmp_get_mib_from_oid+0x13c>)
 8008338:	4838      	ldr	r0, [pc, #224]	; (800841c <snmp_get_mib_from_oid+0x134>)
 800833a:	f014 f9f9 	bl	801c730 <iprintf>
    LWIP_ASSERT("MIB array not initialized correctly - base OID is NULL", (snmp_mibs[i]->base_oid != NULL));
 800833e:	4b38      	ldr	r3, [pc, #224]	; (8008420 <snmp_get_mib_from_oid+0x138>)
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	7bfb      	ldrb	r3, [r7, #15]
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	4413      	add	r3, r2
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d106      	bne.n	800835e <snmp_get_mib_from_oid+0x76>
 8008350:	4b30      	ldr	r3, [pc, #192]	; (8008414 <snmp_get_mib_from_oid+0x12c>)
 8008352:	f240 22ba 	movw	r2, #698	; 0x2ba
 8008356:	4934      	ldr	r1, [pc, #208]	; (8008428 <snmp_get_mib_from_oid+0x140>)
 8008358:	4830      	ldr	r0, [pc, #192]	; (800841c <snmp_get_mib_from_oid+0x134>)
 800835a:	f014 f9e9 	bl	801c730 <iprintf>

    if (oid_len >= snmp_mibs[i]->base_oid_len) {
 800835e:	4b30      	ldr	r3, [pc, #192]	; (8008420 <snmp_get_mib_from_oid+0x138>)
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	7bfb      	ldrb	r3, [r7, #15]
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	4413      	add	r3, r2
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	791b      	ldrb	r3, [r3, #4]
 800836c:	78fa      	ldrb	r2, [r7, #3]
 800836e:	429a      	cmp	r2, r3
 8008370:	d342      	bcc.n	80083f8 <snmp_get_mib_from_oid+0x110>
      l            = snmp_mibs[i]->base_oid_len;
 8008372:	4b2b      	ldr	r3, [pc, #172]	; (8008420 <snmp_get_mib_from_oid+0x138>)
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	7bfb      	ldrb	r3, [r7, #15]
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	4413      	add	r3, r2
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	791b      	ldrb	r3, [r3, #4]
 8008380:	73bb      	strb	r3, [r7, #14]
      list_oid     = snmp_mibs[i]->base_oid;
 8008382:	4b27      	ldr	r3, [pc, #156]	; (8008420 <snmp_get_mib_from_oid+0x138>)
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	7bfb      	ldrb	r3, [r7, #15]
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	4413      	add	r3, r2
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	617b      	str	r3, [r7, #20]
      searched_oid = oid;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	613b      	str	r3, [r7, #16]

      while (l > 0) {
 8008396:	e00e      	b.n	80083b6 <snmp_get_mib_from_oid+0xce>
        if (*list_oid != *searched_oid) {
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d10c      	bne.n	80083be <snmp_get_mib_from_oid+0xd6>
          break;
        }

        l--;
 80083a4:	7bbb      	ldrb	r3, [r7, #14]
 80083a6:	3b01      	subs	r3, #1
 80083a8:	73bb      	strb	r3, [r7, #14]
        list_oid++;
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	3304      	adds	r3, #4
 80083ae:	617b      	str	r3, [r7, #20]
        searched_oid++;
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	3304      	adds	r3, #4
 80083b4:	613b      	str	r3, [r7, #16]
      while (l > 0) {
 80083b6:	7bbb      	ldrb	r3, [r7, #14]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d1ed      	bne.n	8008398 <snmp_get_mib_from_oid+0xb0>
 80083bc:	e000      	b.n	80083c0 <snmp_get_mib_from_oid+0xd8>
          break;
 80083be:	bf00      	nop
      }

      if ((l == 0) && (snmp_mibs[i]->base_oid_len > max_match_len)) {
 80083c0:	7bbb      	ldrb	r3, [r7, #14]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d118      	bne.n	80083f8 <snmp_get_mib_from_oid+0x110>
 80083c6:	4b16      	ldr	r3, [pc, #88]	; (8008420 <snmp_get_mib_from_oid+0x138>)
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	7bfb      	ldrb	r3, [r7, #15]
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	4413      	add	r3, r2
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	791b      	ldrb	r3, [r3, #4]
 80083d4:	7b7a      	ldrb	r2, [r7, #13]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d20e      	bcs.n	80083f8 <snmp_get_mib_from_oid+0x110>
        max_match_len = snmp_mibs[i]->base_oid_len;
 80083da:	4b11      	ldr	r3, [pc, #68]	; (8008420 <snmp_get_mib_from_oid+0x138>)
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	7bfb      	ldrb	r3, [r7, #15]
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	791b      	ldrb	r3, [r3, #4]
 80083e8:	737b      	strb	r3, [r7, #13]
        matched_mib = snmp_mibs[i];
 80083ea:	4b0d      	ldr	r3, [pc, #52]	; (8008420 <snmp_get_mib_from_oid+0x138>)
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	7bfb      	ldrb	r3, [r7, #15]
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	4413      	add	r3, r2
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < snmp_num_mibs; i++) {
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
 80083fa:	3301      	adds	r3, #1
 80083fc:	73fb      	strb	r3, [r7, #15]
 80083fe:	4b0b      	ldr	r3, [pc, #44]	; (800842c <snmp_get_mib_from_oid+0x144>)
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	7bfa      	ldrb	r2, [r7, #15]
 8008404:	429a      	cmp	r2, r3
 8008406:	d38b      	bcc.n	8008320 <snmp_get_mib_from_oid+0x38>
      }
    }
  }

  return matched_mib;
 8008408:	68bb      	ldr	r3, [r7, #8]
}
 800840a:	4618      	mov	r0, r3
 800840c:	3718      	adds	r7, #24
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	08020130 	.word	0x08020130
 8008418:	080202bc 	.word	0x080202bc
 800841c:	0802018c 	.word	0x0802018c
 8008420:	20000038 	.word	0x20000038
 8008424:	080202dc 	.word	0x080202dc
 8008428:	08020300 	.word	0x08020300
 800842c:	20000034 	.word	0x20000034

08008430 <snmp_get_next_mib>:

static const struct snmp_mib *
snmp_get_next_mib(const u32_t *oid, u8_t oid_len)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	460b      	mov	r3, r1
 800843a:	70fb      	strb	r3, [r7, #3]
  u8_t i;
  const struct snmp_mib *next_mib = NULL;
 800843c:	2300      	movs	r3, #0
 800843e:	60bb      	str	r3, [r7, #8]

  LWIP_ASSERT("'oid' param must not be NULL!", (oid != NULL));
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d106      	bne.n	8008454 <snmp_get_next_mib+0x24>
 8008446:	4b2d      	ldr	r3, [pc, #180]	; (80084fc <snmp_get_next_mib+0xcc>)
 8008448:	f240 22db 	movw	r2, #731	; 0x2db
 800844c:	492c      	ldr	r1, [pc, #176]	; (8008500 <snmp_get_next_mib+0xd0>)
 800844e:	482d      	ldr	r0, [pc, #180]	; (8008504 <snmp_get_next_mib+0xd4>)
 8008450:	f014 f96e 	bl	801c730 <iprintf>

  if (oid_len == 0) {
 8008454:	78fb      	ldrb	r3, [r7, #3]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d101      	bne.n	800845e <snmp_get_next_mib+0x2e>
    return NULL;
 800845a:	2300      	movs	r3, #0
 800845c:	e04a      	b.n	80084f4 <snmp_get_next_mib+0xc4>
  }

  for (i = 0; i < snmp_num_mibs; i++) {
 800845e:	2300      	movs	r3, #0
 8008460:	73fb      	strb	r3, [r7, #15]
 8008462:	e041      	b.n	80084e8 <snmp_get_next_mib+0xb8>
    if (snmp_mibs[i]->base_oid != NULL) {
 8008464:	4b28      	ldr	r3, [pc, #160]	; (8008508 <snmp_get_next_mib+0xd8>)
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	7bfb      	ldrb	r3, [r7, #15]
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d035      	beq.n	80084e2 <snmp_get_next_mib+0xb2>
      /* check if mib is located behind starting point */
      if (snmp_oid_compare(snmp_mibs[i]->base_oid, snmp_mibs[i]->base_oid_len, oid, oid_len) > 0) {
 8008476:	4b24      	ldr	r3, [pc, #144]	; (8008508 <snmp_get_next_mib+0xd8>)
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	7bfb      	ldrb	r3, [r7, #15]
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	4413      	add	r3, r2
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	6818      	ldr	r0, [r3, #0]
 8008484:	4b20      	ldr	r3, [pc, #128]	; (8008508 <snmp_get_next_mib+0xd8>)
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	7bfb      	ldrb	r3, [r7, #15]
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	4413      	add	r3, r2
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	7919      	ldrb	r1, [r3, #4]
 8008492:	78fb      	ldrb	r3, [r7, #3]
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	f7ff feb3 	bl	8008200 <snmp_oid_compare>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	dd20      	ble.n	80084e2 <snmp_get_next_mib+0xb2>
        if ((next_mib == NULL) ||
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d016      	beq.n	80084d4 <snmp_get_next_mib+0xa4>
            (snmp_oid_compare(snmp_mibs[i]->base_oid, snmp_mibs[i]->base_oid_len,
 80084a6:	4b18      	ldr	r3, [pc, #96]	; (8008508 <snmp_get_next_mib+0xd8>)
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	7bfb      	ldrb	r3, [r7, #15]
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	4413      	add	r3, r2
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	6818      	ldr	r0, [r3, #0]
 80084b4:	4b14      	ldr	r3, [pc, #80]	; (8008508 <snmp_get_next_mib+0xd8>)
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	7bfb      	ldrb	r3, [r7, #15]
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4413      	add	r3, r2
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	7919      	ldrb	r1, [r3, #4]
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	791b      	ldrb	r3, [r3, #4]
 80084ca:	f7ff fe99 	bl	8008200 <snmp_oid_compare>
 80084ce:	4603      	mov	r3, r0
        if ((next_mib == NULL) ||
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	da06      	bge.n	80084e2 <snmp_get_next_mib+0xb2>
                              next_mib->base_oid, next_mib->base_oid_len) < 0)) {
          next_mib = snmp_mibs[i];
 80084d4:	4b0c      	ldr	r3, [pc, #48]	; (8008508 <snmp_get_next_mib+0xd8>)
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	4413      	add	r3, r2
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < snmp_num_mibs; i++) {
 80084e2:	7bfb      	ldrb	r3, [r7, #15]
 80084e4:	3301      	adds	r3, #1
 80084e6:	73fb      	strb	r3, [r7, #15]
 80084e8:	4b08      	ldr	r3, [pc, #32]	; (800850c <snmp_get_next_mib+0xdc>)
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	7bfa      	ldrb	r2, [r7, #15]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d3b8      	bcc.n	8008464 <snmp_get_next_mib+0x34>
        }
      }
    }
  }

  return next_mib;
 80084f2:	68bb      	ldr	r3, [r7, #8]
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	08020130 	.word	0x08020130
 8008500:	080202bc 	.word	0x080202bc
 8008504:	0802018c 	.word	0x0802018c
 8008508:	20000038 	.word	0x20000038
 800850c:	20000034 	.word	0x20000034

08008510 <snmp_get_mib_between>:

static const struct snmp_mib *
snmp_get_mib_between(const u32_t *oid1, u8_t oid1_len, const u32_t *oid2, u8_t oid2_len)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b086      	sub	sp, #24
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	607a      	str	r2, [r7, #4]
 800851a:	461a      	mov	r2, r3
 800851c:	460b      	mov	r3, r1
 800851e:	72fb      	strb	r3, [r7, #11]
 8008520:	4613      	mov	r3, r2
 8008522:	72bb      	strb	r3, [r7, #10]
  const struct snmp_mib *next_mib = snmp_get_next_mib(oid1, oid1_len);
 8008524:	7afb      	ldrb	r3, [r7, #11]
 8008526:	4619      	mov	r1, r3
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f7ff ff81 	bl	8008430 <snmp_get_next_mib>
 800852e:	6178      	str	r0, [r7, #20]

  LWIP_ASSERT("'oid2' param must not be NULL!", (oid2 != NULL));
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d106      	bne.n	8008544 <snmp_get_mib_between+0x34>
 8008536:	4b13      	ldr	r3, [pc, #76]	; (8008584 <snmp_get_mib_between+0x74>)
 8008538:	f240 22f6 	movw	r2, #758	; 0x2f6
 800853c:	4912      	ldr	r1, [pc, #72]	; (8008588 <snmp_get_mib_between+0x78>)
 800853e:	4813      	ldr	r0, [pc, #76]	; (800858c <snmp_get_mib_between+0x7c>)
 8008540:	f014 f8f6 	bl	801c730 <iprintf>
  LWIP_ASSERT("'oid2_len' param must be greater than 0!", (oid2_len > 0));
 8008544:	7abb      	ldrb	r3, [r7, #10]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d106      	bne.n	8008558 <snmp_get_mib_between+0x48>
 800854a:	4b0e      	ldr	r3, [pc, #56]	; (8008584 <snmp_get_mib_between+0x74>)
 800854c:	f240 22f7 	movw	r2, #759	; 0x2f7
 8008550:	490f      	ldr	r1, [pc, #60]	; (8008590 <snmp_get_mib_between+0x80>)
 8008552:	480e      	ldr	r0, [pc, #56]	; (800858c <snmp_get_mib_between+0x7c>)
 8008554:	f014 f8ec 	bl	801c730 <iprintf>

  if (next_mib != NULL) {
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00c      	beq.n	8008578 <snmp_get_mib_between+0x68>
    if (snmp_oid_compare(next_mib->base_oid, next_mib->base_oid_len, oid2, oid2_len) < 0) {
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	6818      	ldr	r0, [r3, #0]
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	7919      	ldrb	r1, [r3, #4]
 8008566:	7abb      	ldrb	r3, [r7, #10]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	f7ff fe49 	bl	8008200 <snmp_oid_compare>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	da01      	bge.n	8008578 <snmp_get_mib_between+0x68>
      return next_mib;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	e000      	b.n	800857a <snmp_get_mib_between+0x6a>
    }
  }

  return NULL;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3718      	adds	r7, #24
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	08020130 	.word	0x08020130
 8008588:	08020338 	.word	0x08020338
 800858c:	0802018c 	.word	0x0802018c
 8008590:	08020358 	.word	0x08020358

08008594 <snmp_get_node_instance_from_oid>:

u8_t
snmp_get_node_instance_from_oid(const u32_t *oid, u8_t oid_len, struct snmp_node_instance *node_instance)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b08a      	sub	sp, #40	; 0x28
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	460b      	mov	r3, r1
 800859e:	607a      	str	r2, [r7, #4]
 80085a0:	72fb      	strb	r3, [r7, #11]
  u8_t result = SNMP_ERR_NOSUCHOBJECT;
 80085a2:	23f0      	movs	r3, #240	; 0xf0
 80085a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  const struct snmp_mib *mib;
  const struct snmp_node *mn = NULL;
 80085a8:	2300      	movs	r3, #0
 80085aa:	623b      	str	r3, [r7, #32]

  mib = snmp_get_mib_from_oid(oid, oid_len);
 80085ac:	7afb      	ldrb	r3, [r7, #11]
 80085ae:	4619      	mov	r1, r3
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f7ff fe99 	bl	80082e8 <snmp_get_mib_from_oid>
 80085b6:	61f8      	str	r0, [r7, #28]
  if (mib != NULL) {
 80085b8:	69fb      	ldr	r3, [r7, #28]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d02b      	beq.n	8008616 <snmp_get_node_instance_from_oid+0x82>
    u8_t oid_instance_len;

    mn = snmp_mib_tree_resolve_exact(mib, oid, oid_len, &oid_instance_len);
 80085be:	f107 0317 	add.w	r3, r7, #23
 80085c2:	7afa      	ldrb	r2, [r7, #11]
 80085c4:	68f9      	ldr	r1, [r7, #12]
 80085c6:	69f8      	ldr	r0, [r7, #28]
 80085c8:	f000 f981 	bl	80088ce <snmp_mib_tree_resolve_exact>
 80085cc:	6238      	str	r0, [r7, #32]
    if ((mn != NULL) && (mn->node_type != SNMP_NODE_TREE)) {
 80085ce:	6a3b      	ldr	r3, [r7, #32]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d020      	beq.n	8008616 <snmp_get_node_instance_from_oid+0x82>
 80085d4:	6a3b      	ldr	r3, [r7, #32]
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d01c      	beq.n	8008616 <snmp_get_node_instance_from_oid+0x82>
      /* get instance */
      const struct snmp_leaf_node *leaf_node = (const struct snmp_leaf_node *)(const void *)mn;
 80085dc:	6a3b      	ldr	r3, [r7, #32]
 80085de:	61bb      	str	r3, [r7, #24]

      node_instance->node = mn;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6a3a      	ldr	r2, [r7, #32]
 80085e4:	601a      	str	r2, [r3, #0]
      snmp_oid_assign(&node_instance->instance_oid, oid + (oid_len - oid_instance_len), oid_instance_len);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	1d18      	adds	r0, r3, #4
 80085ea:	7afb      	ldrb	r3, [r7, #11]
 80085ec:	7dfa      	ldrb	r2, [r7, #23]
 80085ee:	1a9b      	subs	r3, r3, r2
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	68fa      	ldr	r2, [r7, #12]
 80085f4:	4413      	add	r3, r2
 80085f6:	7dfa      	ldrb	r2, [r7, #23]
 80085f8:	4619      	mov	r1, r3
 80085fa:	f7ff fda1 	bl	8008140 <snmp_oid_assign>

      result = leaf_node->get_instance(
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	7dfa      	ldrb	r2, [r7, #23]
 8008604:	7af9      	ldrb	r1, [r7, #11]
 8008606:	1a8a      	subs	r2, r1, r2
 8008608:	b2d1      	uxtb	r1, r2
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	4798      	blx	r3
 8008610:	4603      	mov	r3, r0
 8008612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
#endif
    }
  }

  return result;
 8008616:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800861a:	4618      	mov	r0, r3
 800861c:	3728      	adds	r7, #40	; 0x28
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <snmp_get_next_node_instance_from_oid>:

u8_t
snmp_get_next_node_instance_from_oid(const u32_t *oid, u8_t oid_len, snmp_validate_node_instance_method validate_node_instance_method, void *validate_node_instance_arg, struct snmp_obj_id *node_oid, struct snmp_node_instance *node_instance)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b08c      	sub	sp, #48	; 0x30
 8008626:	af00      	add	r7, sp, #0
 8008628:	60f8      	str	r0, [r7, #12]
 800862a:	607a      	str	r2, [r7, #4]
 800862c:	603b      	str	r3, [r7, #0]
 800862e:	460b      	mov	r3, r1
 8008630:	72fb      	strb	r3, [r7, #11]
  const struct snmp_mib      *mib;
  const struct snmp_node *mn = NULL;
 8008632:	2300      	movs	r3, #0
 8008634:	62bb      	str	r3, [r7, #40]	; 0x28
  const u32_t *start_oid     = NULL;
 8008636:	2300      	movs	r3, #0
 8008638:	627b      	str	r3, [r7, #36]	; 0x24
  u8_t         start_oid_len = 0;
 800863a:	2300      	movs	r3, #0
 800863c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* resolve target MIB from passed OID */
  mib = snmp_get_mib_from_oid(oid, oid_len);
 8008640:	7afb      	ldrb	r3, [r7, #11]
 8008642:	4619      	mov	r1, r3
 8008644:	68f8      	ldr	r0, [r7, #12]
 8008646:	f7ff fe4f 	bl	80082e8 <snmp_get_mib_from_oid>
 800864a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (mib == NULL) {
 800864c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800864e:	2b00      	cmp	r3, #0
 8008650:	d111      	bne.n	8008676 <snmp_get_next_node_instance_from_oid+0x54>
    /* passed OID does not reference any known MIB, start at the next closest MIB */
    mib = snmp_get_next_mib(oid, oid_len);
 8008652:	7afb      	ldrb	r3, [r7, #11]
 8008654:	4619      	mov	r1, r3
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f7ff feea 	bl	8008430 <snmp_get_next_mib>
 800865c:	62f8      	str	r0, [r7, #44]	; 0x2c

    if (mib != NULL) {
 800865e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 8123 	beq.w	80088ac <snmp_get_next_node_instance_from_oid+0x28a>
      start_oid     = mib->base_oid;
 8008666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	627b      	str	r3, [r7, #36]	; 0x24
      start_oid_len = mib->base_oid_len;
 800866c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800866e:	791b      	ldrb	r3, [r3, #4]
 8008670:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008674:	e11a      	b.n	80088ac <snmp_get_next_node_instance_from_oid+0x28a>
    }
  } else {
    start_oid     = oid;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	627b      	str	r3, [r7, #36]	; 0x24
    start_oid_len = oid_len;
 800867a:	7afb      	ldrb	r3, [r7, #11]
 800867c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }

  /* resolve target node from MIB, skip to next MIB if no suitable node is found in current MIB */
  while ((mib != NULL) && (mn == NULL)) {
 8008680:	e114      	b.n	80088ac <snmp_get_next_node_instance_from_oid+0x28a>
    u8_t oid_instance_len;

    /* check if OID directly references a node inside current MIB, in this case we have to ask this node for the next instance */
    mn = snmp_mib_tree_resolve_exact(mib, start_oid, start_oid_len, &oid_instance_len);
 8008682:	f107 0317 	add.w	r3, r7, #23
 8008686:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800868a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800868c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800868e:	f000 f91e 	bl	80088ce <snmp_mib_tree_resolve_exact>
 8008692:	62b8      	str	r0, [r7, #40]	; 0x28
    if (mn != NULL) {
 8008694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008696:	2b00      	cmp	r3, #0
 8008698:	d017      	beq.n	80086ca <snmp_get_next_node_instance_from_oid+0xa8>
      snmp_oid_assign(node_oid, start_oid, start_oid_len - oid_instance_len); /* set oid to node */
 800869a:	7dfb      	ldrb	r3, [r7, #23]
 800869c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	461a      	mov	r2, r3
 80086a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80086aa:	f7ff fd49 	bl	8008140 <snmp_oid_assign>
      snmp_oid_assign(&node_instance->instance_oid, start_oid + (start_oid_len - oid_instance_len), oid_instance_len); /* set (relative) instance oid */
 80086ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086b0:	1d18      	adds	r0, r3, #4
 80086b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086b6:	7dfa      	ldrb	r2, [r7, #23]
 80086b8:	1a9b      	subs	r3, r3, r2
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086be:	4413      	add	r3, r2
 80086c0:	7dfa      	ldrb	r2, [r7, #23]
 80086c2:	4619      	mov	r1, r3
 80086c4:	f7ff fd3c 	bl	8008140 <snmp_oid_assign>
 80086c8:	e00a      	b.n	80086e0 <snmp_get_next_node_instance_from_oid+0xbe>
    } else {
      /* OID does not reference a node, search for the next closest node inside MIB; set instance_oid.len to zero because we want the first instance of this node */
      mn = snmp_mib_tree_resolve_next(mib, start_oid, start_oid_len, node_oid);
 80086ca:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80086ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086d4:	f000 f94e 	bl	8008974 <snmp_mib_tree_resolve_next>
 80086d8:	62b8      	str	r0, [r7, #40]	; 0x28
      node_instance->instance_oid.len = 0;
 80086da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086dc:	2200      	movs	r2, #0
 80086de:	711a      	strb	r2, [r3, #4]
    }

    /* validate the node; if the node has no further instance or the returned instance is invalid, search for the next in MIB and validate again */
    node_instance->node = mn;
 80086e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086e4:	601a      	str	r2, [r3, #0]
    while (mn != NULL) {
 80086e6:	e073      	b.n	80087d0 <snmp_get_next_node_instance_from_oid+0x1ae>
      u8_t result;

      /* clear fields which may have values from previous loops */
      node_instance->asn1_type        = 0;
 80086e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ea:	2200      	movs	r2, #0
 80086ec:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
      node_instance->access           = SNMP_NODE_INSTANCE_NOT_ACCESSIBLE;
 80086f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f2:	2200      	movs	r2, #0
 80086f4:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
      node_instance->get_value        = NULL;
 80086f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086fa:	2200      	movs	r2, #0
 80086fc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
      node_instance->set_test         = NULL;
 8008700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008702:	2200      	movs	r2, #0
 8008704:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
      node_instance->set_value        = NULL;
 8008708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800870a:	2200      	movs	r2, #0
 800870c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
      node_instance->release_instance = NULL;
 8008710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008712:	2200      	movs	r2, #0
 8008714:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
      node_instance->reference.ptr    = NULL;
 8008718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800871a:	2200      	movs	r2, #0
 800871c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
      node_instance->reference_len    = 0;
 8008720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008722:	2200      	movs	r2, #0
 8008724:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

      result = ((const struct snmp_leaf_node *)(const void *)mn)->get_next_instance(
 8008728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872a:	68db      	ldr	r3, [r3, #12]
                 node_oid->id,
 800872c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800872e:	1d10      	adds	r0, r2, #4
      result = ((const struct snmp_leaf_node *)(const void *)mn)->get_next_instance(
 8008730:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008732:	7811      	ldrb	r1, [r2, #0]
 8008734:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008736:	4798      	blx	r3
 8008738:	4603      	mov	r3, r0
 800873a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                 node_oid->len,
                 node_instance);

      if (result == SNMP_ERR_NOERROR) {
 800873e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008742:	2b00      	cmp	r3, #0
 8008744:	d11e      	bne.n	8008784 <snmp_get_next_node_instance_from_oid+0x162>
          LWIP_DEBUGF(SNMP_DEBUG, ("SNMP inconsistent access: node is writable but no set_value function is specified\n"));
        }
#endif

        /* validate node because the node may be not accessible for example (but let the caller decide what is valid */
        if ((validate_node_instance_method == NULL) ||
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d006      	beq.n	800875a <snmp_get_next_node_instance_from_oid+0x138>
            (validate_node_instance_method(node_instance, validate_node_instance_arg) == SNMP_ERR_NOERROR)) {
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008752:	4798      	blx	r3
 8008754:	4603      	mov	r3, r0
        if ((validate_node_instance_method == NULL) ||
 8008756:	2b00      	cmp	r3, #0
 8008758:	d109      	bne.n	800876e <snmp_get_next_node_instance_from_oid+0x14c>
          /* node_oid "returns" the full result OID (including the instance part) */
          snmp_oid_append(node_oid, node_instance->instance_oid.id, node_instance->instance_oid.len);
 800875a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800875c:	f103 0108 	add.w	r1, r3, #8
 8008760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008762:	791b      	ldrb	r3, [r3, #4]
 8008764:	461a      	mov	r2, r3
 8008766:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008768:	f7ff fd14 	bl	8008194 <snmp_oid_append>
          break;
 800876c:	e033      	b.n	80087d6 <snmp_get_next_node_instance_from_oid+0x1b4>
        }

        if (node_instance->release_instance != NULL) {
 800876e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d02b      	beq.n	80087d0 <snmp_get_next_node_instance_from_oid+0x1ae>
          node_instance->release_instance(node_instance);
 8008778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800877a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800877e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008780:	4798      	blx	r3
 8008782:	e025      	b.n	80087d0 <snmp_get_next_node_instance_from_oid+0x1ae>
        the instance itself is not valid, ask for next instance from same node.
        we don't have to change any variables because node_instance->instance_oid is used as input (starting point)
        as well as output (resulting next OID), so we have to simply call get_next_instance method again
        */
      } else {
        if (node_instance->release_instance != NULL) {
 8008784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d004      	beq.n	8008798 <snmp_get_next_node_instance_from_oid+0x176>
          node_instance->release_instance(node_instance);
 800878e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008794:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008796:	4798      	blx	r3
        }

        /* the node has no further instance, skip to next node */
        mn = snmp_mib_tree_resolve_next(mib, node_oid->id, node_oid->len, &node_instance->instance_oid); /* misuse node_instance->instance_oid as tmp buffer */
 8008798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879a:	1d19      	adds	r1, r3, #4
 800879c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879e:	781a      	ldrb	r2, [r3, #0]
 80087a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087a2:	3304      	adds	r3, #4
 80087a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087a6:	f000 f8e5 	bl	8008974 <snmp_mib_tree_resolve_next>
 80087aa:	62b8      	str	r0, [r7, #40]	; 0x28
        if (mn != NULL) {
 80087ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00e      	beq.n	80087d0 <snmp_get_next_node_instance_from_oid+0x1ae>
          /* prepare for next loop */
          snmp_oid_assign(node_oid, node_instance->instance_oid.id, node_instance->instance_oid.len);
 80087b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087b4:	f103 0108 	add.w	r1, r3, #8
 80087b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ba:	791b      	ldrb	r3, [r3, #4]
 80087bc:	461a      	mov	r2, r3
 80087be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80087c0:	f7ff fcbe 	bl	8008140 <snmp_oid_assign>
          node_instance->instance_oid.len = 0;
 80087c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087c6:	2200      	movs	r2, #0
 80087c8:	711a      	strb	r2, [r3, #4]
          node_instance->node = mn;
 80087ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087ce:	601a      	str	r2, [r3, #0]
    while (mn != NULL) {
 80087d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d188      	bne.n	80086e8 <snmp_get_next_node_instance_from_oid+0xc6>
        }
      }
    }

    if (mn != NULL) {
 80087d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d022      	beq.n	8008822 <snmp_get_next_node_instance_from_oid+0x200>
      this is possible because MIB's may be located anywhere in the global tree, that means also in
      the subtree of another MIB (e.g. if searched OID is .2 and resulting OID is .4, then another
      MIB having .3 as root node may exist)
      */
      const struct snmp_mib *intermediate_mib;
      intermediate_mib = snmp_get_mib_between(start_oid, start_oid_len, node_oid->id, node_oid->len);
 80087dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087de:	1d1a      	adds	r2, r3, #4
 80087e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80087e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087ea:	f7ff fe91 	bl	8008510 <snmp_get_mib_between>
 80087ee:	61b8      	str	r0, [r7, #24]

      if (intermediate_mib != NULL) {
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d05a      	beq.n	80088ac <snmp_get_next_node_instance_from_oid+0x28a>
        /* search for first node inside intermediate mib in next loop */
        if (node_instance->release_instance != NULL) {
 80087f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d004      	beq.n	800880a <snmp_get_next_node_instance_from_oid+0x1e8>
          node_instance->release_instance(node_instance);
 8008800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008806:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008808:	4798      	blx	r3
        }

        mn            = NULL;
 800880a:	2300      	movs	r3, #0
 800880c:	62bb      	str	r3, [r7, #40]	; 0x28
        mib           = intermediate_mib;
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	62fb      	str	r3, [r7, #44]	; 0x2c
        start_oid     = mib->base_oid;
 8008812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	627b      	str	r3, [r7, #36]	; 0x24
        start_oid_len = mib->base_oid_len;
 8008818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881a:	791b      	ldrb	r3, [r3, #4]
 800881c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008820:	e044      	b.n	80088ac <snmp_get_next_node_instance_from_oid+0x28a>
      1. search for inner MIB's (whose root is located inside tree of current MIB)
      2. search for surrouding MIB's (where the current MIB is the inner MIB) and continue there if any
      3. take the next closest MIB (not being related to the current MIB)
      */
      const struct snmp_mib *next_mib;
      next_mib = snmp_get_next_mib(start_oid, start_oid_len); /* returns MIB's related to point 1 and 3 */
 8008822:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008826:	4619      	mov	r1, r3
 8008828:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800882a:	f7ff fe01 	bl	8008430 <snmp_get_next_mib>
 800882e:	61f8      	str	r0, [r7, #28]

      /* is the found MIB an inner MIB? (point 1) */
      if ((next_mib != NULL) && (next_mib->base_oid_len > mib->base_oid_len) &&
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d01c      	beq.n	8008870 <snmp_get_next_node_instance_from_oid+0x24e>
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	791a      	ldrb	r2, [r3, #4]
 800883a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883c:	791b      	ldrb	r3, [r3, #4]
 800883e:	429a      	cmp	r2, r3
 8008840:	d916      	bls.n	8008870 <snmp_get_next_node_instance_from_oid+0x24e>
          (snmp_oid_compare(next_mib->base_oid, mib->base_oid_len, mib->base_oid, mib->base_oid_len) == 0)) {
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	6818      	ldr	r0, [r3, #0]
 8008846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008848:	7919      	ldrb	r1, [r3, #4]
 800884a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008850:	791b      	ldrb	r3, [r3, #4]
 8008852:	f7ff fcd5 	bl	8008200 <snmp_oid_compare>
 8008856:	4603      	mov	r3, r0
      if ((next_mib != NULL) && (next_mib->base_oid_len > mib->base_oid_len) &&
 8008858:	2b00      	cmp	r3, #0
 800885a:	d109      	bne.n	8008870 <snmp_get_next_node_instance_from_oid+0x24e>
        /* yes it is -> continue at inner MIB */
        mib = next_mib;
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	62fb      	str	r3, [r7, #44]	; 0x2c
        start_oid     = mib->base_oid;
 8008860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	627b      	str	r3, [r7, #36]	; 0x24
        start_oid_len = mib->base_oid_len;
 8008866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008868:	791b      	ldrb	r3, [r3, #4]
 800886a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800886e:	e01d      	b.n	80088ac <snmp_get_next_node_instance_from_oid+0x28a>
      } else {
        /* check if there is a surrounding mib where to continue (point 2) (only possible if OID length > 1) */
        if (mib->base_oid_len > 1) {
 8008870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008872:	791b      	ldrb	r3, [r3, #4]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d919      	bls.n	80088ac <snmp_get_next_node_instance_from_oid+0x28a>
          mib = snmp_get_mib_from_oid(mib->base_oid, mib->base_oid_len - 1);
 8008878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887e:	791b      	ldrb	r3, [r3, #4]
 8008880:	3b01      	subs	r3, #1
 8008882:	b2db      	uxtb	r3, r3
 8008884:	4619      	mov	r1, r3
 8008886:	4610      	mov	r0, r2
 8008888:	f7ff fd2e 	bl	80082e8 <snmp_get_mib_from_oid>
 800888c:	62f8      	str	r0, [r7, #44]	; 0x2c

          if (mib == NULL) {
 800888e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10b      	bne.n	80088ac <snmp_get_next_node_instance_from_oid+0x28a>
            /* no surrounding mib, use next mib encountered above (point 3) */
            mib = next_mib;
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (mib != NULL) {
 8008898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889a:	2b00      	cmp	r3, #0
 800889c:	d006      	beq.n	80088ac <snmp_get_next_node_instance_from_oid+0x28a>
              start_oid     = mib->base_oid;
 800889e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	627b      	str	r3, [r7, #36]	; 0x24
              start_oid_len = mib->base_oid_len;
 80088a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a6:	791b      	ldrb	r3, [r3, #4]
 80088a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  while ((mib != NULL) && (mn == NULL)) {
 80088ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d003      	beq.n	80088ba <snmp_get_next_node_instance_from_oid+0x298>
 80088b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f43f aee4 	beq.w	8008682 <snmp_get_next_node_instance_from_oid+0x60>
        }
      }
    }
  }

  if (mib == NULL) {
 80088ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d101      	bne.n	80088c4 <snmp_get_next_node_instance_from_oid+0x2a2>
    /* loop is only left when mib == null (error) or mib_node != NULL (success) */
    return SNMP_ERR_ENDOFMIBVIEW;
 80088c0:	23f2      	movs	r3, #242	; 0xf2
 80088c2:	e000      	b.n	80088c6 <snmp_get_next_node_instance_from_oid+0x2a4>
  }

  return SNMP_ERR_NOERROR;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3730      	adds	r7, #48	; 0x30
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <snmp_mib_tree_resolve_exact>:
 * Searches tree for the supplied object identifier.
 *
 */
const struct snmp_node *
snmp_mib_tree_resolve_exact(const struct snmp_mib *mib, const u32_t *oid, u8_t oid_len, u8_t *oid_instance_len)
{
 80088ce:	b480      	push	{r7}
 80088d0:	b089      	sub	sp, #36	; 0x24
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	60f8      	str	r0, [r7, #12]
 80088d6:	60b9      	str	r1, [r7, #8]
 80088d8:	603b      	str	r3, [r7, #0]
 80088da:	4613      	mov	r3, r2
 80088dc:	71fb      	strb	r3, [r7, #7]
  const struct snmp_node *const *node = &mib->root_node;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	3308      	adds	r3, #8
 80088e2:	61fb      	str	r3, [r7, #28]
  u8_t oid_offset = mib->base_oid_len;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	791b      	ldrb	r3, [r3, #4]
 80088e8:	76fb      	strb	r3, [r7, #27]

  while ((oid_offset < oid_len) && ((*node)->node_type == SNMP_NODE_TREE)) {
 80088ea:	e025      	b.n	8008938 <snmp_mib_tree_resolve_exact+0x6a>
    /* search for matching sub node */
    u32_t subnode_oid = *(oid + oid_offset);
 80088ec:	7efb      	ldrb	r3, [r7, #27]
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	68ba      	ldr	r2, [r7, #8]
 80088f2:	4413      	add	r3, r2
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	613b      	str	r3, [r7, #16]

    u32_t i = (*(const struct snmp_tree_node * const *)node)->subnode_count;
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	891b      	ldrh	r3, [r3, #8]
 80088fe:	617b      	str	r3, [r7, #20]
    node    = (*(const struct snmp_tree_node * const *)node)->subnodes;
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	61fb      	str	r3, [r7, #28]
    while ((i > 0) && ((*node)->oid != subnode_oid)) {
 8008908:	e005      	b.n	8008916 <snmp_mib_tree_resolve_exact+0x48>
      node++;
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	3304      	adds	r3, #4
 800890e:	61fb      	str	r3, [r7, #28]
      i--;
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	3b01      	subs	r3, #1
 8008914:	617b      	str	r3, [r7, #20]
    while ((i > 0) && ((*node)->oid != subnode_oid)) {
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d005      	beq.n	8008928 <snmp_mib_tree_resolve_exact+0x5a>
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	693a      	ldr	r2, [r7, #16]
 8008924:	429a      	cmp	r2, r3
 8008926:	d1f0      	bne.n	800890a <snmp_mib_tree_resolve_exact+0x3c>
    }

    if (i == 0) {
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d101      	bne.n	8008932 <snmp_mib_tree_resolve_exact+0x64>
      /* no matching subnode found */
      return NULL;
 800892e:	2300      	movs	r3, #0
 8008930:	e01a      	b.n	8008968 <snmp_mib_tree_resolve_exact+0x9a>
    }

    oid_offset++;
 8008932:	7efb      	ldrb	r3, [r7, #27]
 8008934:	3301      	adds	r3, #1
 8008936:	76fb      	strb	r3, [r7, #27]
  while ((oid_offset < oid_len) && ((*node)->node_type == SNMP_NODE_TREE)) {
 8008938:	7efa      	ldrb	r2, [r7, #27]
 800893a:	79fb      	ldrb	r3, [r7, #7]
 800893c:	429a      	cmp	r2, r3
 800893e:	d204      	bcs.n	800894a <snmp_mib_tree_resolve_exact+0x7c>
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d0d0      	beq.n	80088ec <snmp_mib_tree_resolve_exact+0x1e>
  }

  if ((*node)->node_type != SNMP_NODE_TREE) {
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d008      	beq.n	8008966 <snmp_mib_tree_resolve_exact+0x98>
    /* we found a leaf node */
    *oid_instance_len = oid_len - oid_offset;
 8008954:	79fa      	ldrb	r2, [r7, #7]
 8008956:	7efb      	ldrb	r3, [r7, #27]
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	b2da      	uxtb	r2, r3
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	701a      	strb	r2, [r3, #0]
    return (*node);
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	e000      	b.n	8008968 <snmp_mib_tree_resolve_exact+0x9a>
  }

  return NULL;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3724      	adds	r7, #36	; 0x24
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <snmp_mib_tree_resolve_next>:

const struct snmp_node *
snmp_mib_tree_resolve_next(const struct snmp_mib *mib, const u32_t *oid, u8_t oid_len, struct snmp_obj_id *oidret)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b0be      	sub	sp, #248	; 0xf8
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	603b      	str	r3, [r7, #0]
 8008980:	4613      	mov	r3, r2
 8008982:	71fb      	strb	r3, [r7, #7]
  u8_t  oid_offset = mib->base_oid_len;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	791b      	ldrb	r3, [r3, #4]
 8008988:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
  const struct snmp_node *const *node;
  const struct snmp_tree_node *node_stack[SNMP_MAX_OBJ_ID_LEN];
  s32_t nsi = 0; /* NodeStackIndex */
 800898c:	2300      	movs	r3, #0
 800898e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  u32_t subnode_oid;

  if (mib->root_node->node_type != SNMP_NODE_TREE) {
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d001      	beq.n	80089a0 <snmp_mib_tree_resolve_next+0x2c>
    /* a next operation on a mib with only a leaf node will always return NULL because there is no other node */
    return NULL;
 800899c:	2300      	movs	r3, #0
 800899e:	e131      	b.n	8008c04 <snmp_mib_tree_resolve_next+0x290>
  }

  /* first build node stack related to passed oid (as far as possible), then go backwards to determine the next node */
  node_stack[nsi] = (const struct snmp_tree_node *)(const void *)mib->root_node;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	689a      	ldr	r2, [r3, #8]
 80089a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	33f8      	adds	r3, #248	; 0xf8
 80089ac:	443b      	add	r3, r7
 80089ae:	f843 2ce4 	str.w	r2, [r3, #-228]
  while (oid_offset < oid_len) {
 80089b2:	e050      	b.n	8008a56 <snmp_mib_tree_resolve_next+0xe2>
    /* search for matching sub node */
    u32_t i = node_stack[nsi]->subnode_count;
 80089b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	33f8      	adds	r3, #248	; 0xf8
 80089bc:	443b      	add	r3, r7
 80089be:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 80089c2:	891b      	ldrh	r3, [r3, #8]
 80089c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    node    = node_stack[nsi]->subnodes;
 80089c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	33f8      	adds	r3, #248	; 0xf8
 80089d0:	443b      	add	r3, r7
 80089d2:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    subnode_oid = *(oid + oid_offset);
 80089dc:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	4413      	add	r3, r2
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

    while ((i > 0) && ((*node)->oid != subnode_oid)) {
 80089ec:	e009      	b.n	8008a02 <snmp_mib_tree_resolve_next+0x8e>
      node++;
 80089ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80089f2:	3304      	adds	r3, #4
 80089f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      i--;
 80089f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089fc:	3b01      	subs	r3, #1
 80089fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    while ((i > 0) && ((*node)->oid != subnode_oid)) {
 8008a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d007      	beq.n	8008a1a <snmp_mib_tree_resolve_next+0xa6>
 8008a0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d1e9      	bne.n	80089ee <snmp_mib_tree_resolve_next+0x7a>
    }

    if ((i == 0) || ((*node)->node_type != SNMP_NODE_TREE)) {
 8008a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d01e      	beq.n	8008a60 <snmp_mib_tree_resolve_next+0xec>
 8008a22:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d118      	bne.n	8008a60 <snmp_mib_tree_resolve_next+0xec>
      /* no (matching) tree-subnode found */
      break;
    }
    nsi++;
 8008a2e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008a32:	3301      	adds	r3, #1
 8008a34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    node_stack[nsi] = (const struct snmp_tree_node *)(const void *)(*node);
 8008a38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	33f8      	adds	r3, #248	; 0xf8
 8008a46:	443b      	add	r3, r7
 8008a48:	f843 2ce4 	str.w	r2, [r3, #-228]

    oid_offset++;
 8008a4c:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8008a50:	3301      	adds	r3, #1
 8008a52:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
  while (oid_offset < oid_len) {
 8008a56:	f897 20f7 	ldrb.w	r2, [r7, #247]	; 0xf7
 8008a5a:	79fb      	ldrb	r3, [r7, #7]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d3a9      	bcc.n	80089b4 <snmp_mib_tree_resolve_next+0x40>
  }


  if (oid_offset >= oid_len) {
 8008a60:	f897 20f7 	ldrb.w	r2, [r7, #247]	; 0xf7
 8008a64:	79fb      	ldrb	r3, [r7, #7]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d303      	bcc.n	8008a72 <snmp_mib_tree_resolve_next+0xfe>
    /* passed oid references a tree node -> return first useable sub node of it */
    subnode_oid = 0;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008a70:	e0c2      	b.n	8008bf8 <snmp_mib_tree_resolve_next+0x284>
  } else {
    subnode_oid = *(oid + oid_offset) + 1;
 8008a72:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	68ba      	ldr	r2, [r7, #8]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  }

  while (nsi >= 0) {
 8008a84:	e0b8      	b.n	8008bf8 <snmp_mib_tree_resolve_next+0x284>
    const struct snmp_node *subnode = NULL;
 8008a86:	2300      	movs	r3, #0
 8008a88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    /* find next node on current level */
    s32_t i        = node_stack[nsi]->subnode_count;
 8008a8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	33f8      	adds	r3, #248	; 0xf8
 8008a94:	443b      	add	r3, r7
 8008a96:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 8008a9a:	891b      	ldrh	r3, [r3, #8]
 8008a9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    node           = node_stack[nsi]->subnodes;
 8008aa0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	33f8      	adds	r3, #248	; 0xf8
 8008aa8:	443b      	add	r3, r7
 8008aaa:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    while (i > 0) {
 8008ab4:	e031      	b.n	8008b1a <snmp_mib_tree_resolve_next+0x1a6>
      if ((*node)->oid == subnode_oid) {
 8008ab6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d105      	bne.n	8008ad2 <snmp_mib_tree_resolve_next+0x15e>
        subnode = *node;
 8008ac6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
        break;
 8008ad0:	e027      	b.n	8008b22 <snmp_mib_tree_resolve_next+0x1ae>
      } else if (((*node)->oid > subnode_oid) && ((subnode == NULL) || ((*node)->oid < subnode->oid))) {
 8008ad2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d211      	bcs.n	8008b06 <snmp_mib_tree_resolve_next+0x192>
 8008ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d008      	beq.n	8008afc <snmp_mib_tree_resolve_next+0x188>
 8008aea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	685a      	ldr	r2, [r3, #4]
 8008af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d204      	bcs.n	8008b06 <snmp_mib_tree_resolve_next+0x192>
        subnode = *node;
 8008afc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      }

      node++;
 8008b06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008b0a:	3304      	adds	r3, #4
 8008b0c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      i--;
 8008b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b14:	3b01      	subs	r3, #1
 8008b16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    while (i > 0) {
 8008b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	dcc9      	bgt.n	8008ab6 <snmp_mib_tree_resolve_next+0x142>
    }

    if (subnode == NULL) {
 8008b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d110      	bne.n	8008b4c <snmp_mib_tree_resolve_next+0x1d8>
      /* no further node found on this level, go one level up and start searching with index of current node*/
      subnode_oid = node_stack[nsi]->node.oid + 1;
 8008b2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	33f8      	adds	r3, #248	; 0xf8
 8008b32:	443b      	add	r3, r7
 8008b34:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      nsi--;
 8008b40:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008b44:	3b01      	subs	r3, #1
 8008b46:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008b4a:	e055      	b.n	8008bf8 <snmp_mib_tree_resolve_next+0x284>
    } else {
      if (subnode->node_type == SNMP_NODE_TREE) {
 8008b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d111      	bne.n	8008b7a <snmp_mib_tree_resolve_next+0x206>
        /* next is a tree node, go into it and start searching */
        nsi++;
 8008b56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        node_stack[nsi] = (const struct snmp_tree_node *)(const void *)subnode;
 8008b60:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	33f8      	adds	r3, #248	; 0xf8
 8008b68:	443b      	add	r3, r7
 8008b6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008b6e:	f843 2ce4 	str.w	r2, [r3, #-228]
        subnode_oid = 0;
 8008b72:	2300      	movs	r3, #0
 8008b74:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b78:	e03e      	b.n	8008bf8 <snmp_mib_tree_resolve_next+0x284>
      } else {
        /* we found a leaf node -> fill oidret and return it */
        snmp_oid_assign(oidret, mib->base_oid, mib->base_oid_len);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6819      	ldr	r1, [r3, #0]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	791b      	ldrb	r3, [r3, #4]
 8008b82:	461a      	mov	r2, r3
 8008b84:	6838      	ldr	r0, [r7, #0]
 8008b86:	f7ff fadb 	bl	8008140 <snmp_oid_assign>
        i = 1;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        while (i <= nsi) {
 8008b90:	e019      	b.n	8008bc6 <snmp_mib_tree_resolve_next+0x252>
          oidret->id[oidret->len] = node_stack[i]->node.oid;
 8008b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	33f8      	adds	r3, #248	; 0xf8
 8008b9a:	443b      	add	r3, r7
 8008b9c:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 8008ba0:	683a      	ldr	r2, [r7, #0]
 8008ba2:	7812      	ldrb	r2, [r2, #0]
 8008ba4:	4610      	mov	r0, r2
 8008ba6:	685a      	ldr	r2, [r3, #4]
 8008ba8:	6839      	ldr	r1, [r7, #0]
 8008baa:	0083      	lsls	r3, r0, #2
 8008bac:	440b      	add	r3, r1
 8008bae:	605a      	str	r2, [r3, #4]
          oidret->len++;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	b2da      	uxtb	r2, r3
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	701a      	strb	r2, [r3, #0]
          i++;
 8008bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bc0:	3301      	adds	r3, #1
 8008bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        while (i <= nsi) {
 8008bc6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008bca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	dddf      	ble.n	8008b92 <snmp_mib_tree_resolve_next+0x21e>
        }

        oidret->id[oidret->len] = subnode->oid;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bdc:	685a      	ldr	r2, [r3, #4]
 8008bde:	6839      	ldr	r1, [r7, #0]
 8008be0:	0083      	lsls	r3, r0, #2
 8008be2:	440b      	add	r3, r1
 8008be4:	605a      	str	r2, [r3, #4]
        oidret->len++;
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	3301      	adds	r3, #1
 8008bec:	b2da      	uxtb	r2, r3
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	701a      	strb	r2, [r3, #0]

        return subnode;
 8008bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bf6:	e005      	b.n	8008c04 <snmp_mib_tree_resolve_next+0x290>
  while (nsi >= 0) {
 8008bf8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f6bf af42 	bge.w	8008a86 <snmp_mib_tree_resolve_next+0x112>
      }
    }
  }

  return NULL;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	37f8      	adds	r7, #248	; 0xf8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <snmp_next_oid_init>:
/** initialize struct next_oid_state using this function before passing it to next_oid_check */
void
snmp_next_oid_init(struct snmp_next_oid_state *state,
                   const u32_t *start_oid, u8_t start_oid_len,
                   u32_t *next_oid_buf, u8_t next_oid_max_len)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	603b      	str	r3, [r7, #0]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	71fb      	strb	r3, [r7, #7]
  state->start_oid        = start_oid;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	601a      	str	r2, [r3, #0]
  state->start_oid_len    = start_oid_len;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	79fa      	ldrb	r2, [r7, #7]
 8008c26:	711a      	strb	r2, [r3, #4]
  state->next_oid         = next_oid_buf;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	683a      	ldr	r2, [r7, #0]
 8008c2c:	609a      	str	r2, [r3, #8]
  state->next_oid_len     = 0;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2200      	movs	r2, #0
 8008c32:	731a      	strb	r2, [r3, #12]
  state->next_oid_max_len = next_oid_max_len;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	7e3a      	ldrb	r2, [r7, #24]
 8008c38:	735a      	strb	r2, [r3, #13]
  state->status           = SNMP_NEXT_OID_STATUS_NO_MATCH;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	739a      	strb	r2, [r3, #14]
}
 8008c40:	bf00      	nop
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <snmp_next_oid_check>:
}

/** checks the passed OID if it is a candidate to be the next one (get_next); returns !=0 if passed oid is currently closest, otherwise 0 */
u8_t
snmp_next_oid_check(struct snmp_next_oid_state *state, const u32_t *oid, u8_t oid_len, void *reference)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	603b      	str	r3, [r7, #0]
 8008c58:	4613      	mov	r3, r2
 8008c5a:	71fb      	strb	r3, [r7, #7]
  /* do not overwrite a fail result */
  if (state->status != SNMP_NEXT_OID_STATUS_BUF_TO_SMALL) {
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	7b9b      	ldrb	r3, [r3, #14]
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d034      	beq.n	8008cce <snmp_next_oid_check+0x82>
    /* check passed OID is located behind start offset */
    if (snmp_oid_compare(oid, oid_len, state->start_oid, state->start_oid_len) > 0) {
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	791b      	ldrb	r3, [r3, #4]
 8008c6c:	79f9      	ldrb	r1, [r7, #7]
 8008c6e:	68b8      	ldr	r0, [r7, #8]
 8008c70:	f7ff fac6 	bl	8008200 <snmp_oid_compare>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	dd29      	ble.n	8008cce <snmp_next_oid_check+0x82>
      /* check if new oid is located closer to start oid than current closest oid */
      if ((state->status == SNMP_NEXT_OID_STATUS_NO_MATCH) ||
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	7b9b      	ldrb	r3, [r3, #14]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d00a      	beq.n	8008c98 <snmp_next_oid_check+0x4c>
          (snmp_oid_compare(oid, oid_len, state->next_oid, state->next_oid_len) < 0)) {
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	689a      	ldr	r2, [r3, #8]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	7b1b      	ldrb	r3, [r3, #12]
 8008c8a:	79f9      	ldrb	r1, [r7, #7]
 8008c8c:	68b8      	ldr	r0, [r7, #8]
 8008c8e:	f7ff fab7 	bl	8008200 <snmp_oid_compare>
 8008c92:	4603      	mov	r3, r0
      if ((state->status == SNMP_NEXT_OID_STATUS_NO_MATCH) ||
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	da1a      	bge.n	8008cce <snmp_next_oid_check+0x82>
        if (oid_len <= state->next_oid_max_len) {
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	7b5b      	ldrb	r3, [r3, #13]
 8008c9c:	79fa      	ldrb	r2, [r7, #7]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d812      	bhi.n	8008cc8 <snmp_next_oid_check+0x7c>
          MEMCPY(state->next_oid, oid, oid_len * sizeof(u32_t));
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6898      	ldr	r0, [r3, #8]
 8008ca6:	79fb      	ldrb	r3, [r7, #7]
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	461a      	mov	r2, r3
 8008cac:	68b9      	ldr	r1, [r7, #8]
 8008cae:	f012 fdd1 	bl	801b854 <memcpy>
          state->next_oid_len = oid_len;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	79fa      	ldrb	r2, [r7, #7]
 8008cb6:	731a      	strb	r2, [r3, #12]
          state->status       = SNMP_NEXT_OID_STATUS_SUCCESS;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	739a      	strb	r2, [r3, #14]
          state->reference    = reference;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	683a      	ldr	r2, [r7, #0]
 8008cc2:	611a      	str	r2, [r3, #16]
          return 1;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e003      	b.n	8008cd0 <snmp_next_oid_check+0x84>
        } else {
          state->status = SNMP_NEXT_OID_STATUS_BUF_TO_SMALL;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2202      	movs	r2, #2
 8008ccc:	739a      	strb	r2, [r3, #14]
        }
      }
    }
  }

  return 0;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3710      	adds	r7, #16
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <snmp_oid_in_range>:

u8_t
snmp_oid_in_range(const u32_t *oid_in, u8_t oid_len, const struct snmp_oid_range *oid_ranges, u8_t oid_ranges_len)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b087      	sub	sp, #28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	607a      	str	r2, [r7, #4]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	72fb      	strb	r3, [r7, #11]
 8008ce8:	4613      	mov	r3, r2
 8008cea:	72bb      	strb	r3, [r7, #10]
  u8_t i;

  if (oid_len != oid_ranges_len) {
 8008cec:	7afa      	ldrb	r2, [r7, #11]
 8008cee:	7abb      	ldrb	r3, [r7, #10]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d001      	beq.n	8008cf8 <snmp_oid_in_range+0x20>
    return 0;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	e024      	b.n	8008d42 <snmp_oid_in_range+0x6a>
  }

  for (i = 0; i < oid_ranges_len; i++) {
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	75fb      	strb	r3, [r7, #23]
 8008cfc:	e01c      	b.n	8008d38 <snmp_oid_in_range+0x60>
    if ((oid_in[i] < oid_ranges[i].min) || (oid_in[i] > oid_ranges[i].max)) {
 8008cfe:	7dfb      	ldrb	r3, [r7, #23]
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	4413      	add	r3, r2
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	7dfb      	ldrb	r3, [r7, #23]
 8008d0a:	00db      	lsls	r3, r3, #3
 8008d0c:	6879      	ldr	r1, [r7, #4]
 8008d0e:	440b      	add	r3, r1
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d30b      	bcc.n	8008d2e <snmp_oid_in_range+0x56>
 8008d16:	7dfb      	ldrb	r3, [r7, #23]
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	4413      	add	r3, r2
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	7dfb      	ldrb	r3, [r7, #23]
 8008d22:	00db      	lsls	r3, r3, #3
 8008d24:	6879      	ldr	r1, [r7, #4]
 8008d26:	440b      	add	r3, r1
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d901      	bls.n	8008d32 <snmp_oid_in_range+0x5a>
      return 0;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	e007      	b.n	8008d42 <snmp_oid_in_range+0x6a>
  for (i = 0; i < oid_ranges_len; i++) {
 8008d32:	7dfb      	ldrb	r3, [r7, #23]
 8008d34:	3301      	adds	r3, #1
 8008d36:	75fb      	strb	r3, [r7, #23]
 8008d38:	7dfa      	ldrb	r2, [r7, #23]
 8008d3a:	7abb      	ldrb	r3, [r7, #10]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d3de      	bcc.n	8008cfe <snmp_oid_in_range+0x26>
    }
  }

  return 1;
 8008d40:	2301      	movs	r3, #1
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	371c      	adds	r7, #28
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
	...

08008d50 <icmp_get_value>:

/* --- icmp .1.3.6.1.2.1.5 ----------------------------------------------------- */

static s16_t
icmp_get_value(const struct snmp_scalar_array_node_def *node, void *value)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  u32_t *uint_ptr = (u32_t *)value;
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	60fb      	str	r3, [r7, #12]

  switch (node->oid) {
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	3b01      	subs	r3, #1
 8008d64:	2b19      	cmp	r3, #25
 8008d66:	f200 80df 	bhi.w	8008f28 <icmp_get_value+0x1d8>
 8008d6a:	a201      	add	r2, pc, #4	; (adr r2, 8008d70 <icmp_get_value+0x20>)
 8008d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d70:	08008dd9 	.word	0x08008dd9
 8008d74:	08008de7 	.word	0x08008de7
 8008d78:	08008df5 	.word	0x08008df5
 8008d7c:	08008e03 	.word	0x08008e03
 8008d80:	08008e11 	.word	0x08008e11
 8008d84:	08008e1f 	.word	0x08008e1f
 8008d88:	08008e2d 	.word	0x08008e2d
 8008d8c:	08008e3b 	.word	0x08008e3b
 8008d90:	08008e49 	.word	0x08008e49
 8008d94:	08008e57 	.word	0x08008e57
 8008d98:	08008e65 	.word	0x08008e65
 8008d9c:	08008e73 	.word	0x08008e73
 8008da0:	08008e81 	.word	0x08008e81
 8008da4:	08008e8f 	.word	0x08008e8f
 8008da8:	08008e9d 	.word	0x08008e9d
 8008dac:	08008eab 	.word	0x08008eab
 8008db0:	08008eb9 	.word	0x08008eb9
 8008db4:	08008ec7 	.word	0x08008ec7
 8008db8:	08008ed1 	.word	0x08008ed1
 8008dbc:	08008edb 	.word	0x08008edb
 8008dc0:	08008ee5 	.word	0x08008ee5
 8008dc4:	08008ef3 	.word	0x08008ef3
 8008dc8:	08008f01 	.word	0x08008f01
 8008dcc:	08008f0b 	.word	0x08008f0b
 8008dd0:	08008f15 	.word	0x08008f15
 8008dd4:	08008f1f 	.word	0x08008f1f
    case 1: /* icmpInMsgs */
      *uint_ptr = STATS_GET(mib2.icmpinmsgs);
 8008dd8:	4b57      	ldr	r3, [pc, #348]	; (8008f38 <icmp_get_value+0x1e8>)
 8008dda:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8008de2:	2304      	movs	r3, #4
 8008de4:	e0a2      	b.n	8008f2c <icmp_get_value+0x1dc>
    case 2: /* icmpInErrors */
      *uint_ptr = STATS_GET(mib2.icmpinerrors);
 8008de6:	4b54      	ldr	r3, [pc, #336]	; (8008f38 <icmp_get_value+0x1e8>)
 8008de8:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8008df0:	2304      	movs	r3, #4
 8008df2:	e09b      	b.n	8008f2c <icmp_get_value+0x1dc>
    case 3: /* icmpInDestUnreachs */
      *uint_ptr = STATS_GET(mib2.icmpindestunreachs);
 8008df4:	4b50      	ldr	r3, [pc, #320]	; (8008f38 <icmp_get_value+0x1e8>)
 8008df6:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8008dfe:	2304      	movs	r3, #4
 8008e00:	e094      	b.n	8008f2c <icmp_get_value+0x1dc>
    case 4: /* icmpInTimeExcds */
      *uint_ptr = STATS_GET(mib2.icmpintimeexcds);
 8008e02:	4b4d      	ldr	r3, [pc, #308]	; (8008f38 <icmp_get_value+0x1e8>)
 8008e04:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8008e0c:	2304      	movs	r3, #4
 8008e0e:	e08d      	b.n	8008f2c <icmp_get_value+0x1dc>
    case 5: /* icmpInParmProbs */
      *uint_ptr = STATS_GET(mib2.icmpinparmprobs);
 8008e10:	4b49      	ldr	r3, [pc, #292]	; (8008f38 <icmp_get_value+0x1e8>)
 8008e12:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8008e1a:	2304      	movs	r3, #4
 8008e1c:	e086      	b.n	8008f2c <icmp_get_value+0x1dc>
    case 6: /* icmpInSrcQuenchs */
      *uint_ptr = STATS_GET(mib2.icmpinsrcquenchs);
 8008e1e:	4b46      	ldr	r3, [pc, #280]	; (8008f38 <icmp_get_value+0x1e8>)
 8008e20:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8008e28:	2304      	movs	r3, #4
 8008e2a:	e07f      	b.n	8008f2c <icmp_get_value+0x1dc>
    case 7: /* icmpInRedirects */
      *uint_ptr = STATS_GET(mib2.icmpinredirects);
 8008e2c:	4b42      	ldr	r3, [pc, #264]	; (8008f38 <icmp_get_value+0x1e8>)
 8008e2e:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8008e36:	2304      	movs	r3, #4
 8008e38:	e078      	b.n	8008f2c <icmp_get_value+0x1dc>
    case 8: /* icmpInEchos */
      *uint_ptr = STATS_GET(mib2.icmpinechos);
 8008e3a:	4b3f      	ldr	r3, [pc, #252]	; (8008f38 <icmp_get_value+0x1e8>)
 8008e3c:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8008e44:	2304      	movs	r3, #4
 8008e46:	e071      	b.n	8008f2c <icmp_get_value+0x1dc>
    case 9: /* icmpInEchoReps */
      *uint_ptr = STATS_GET(mib2.icmpinechoreps);
 8008e48:	4b3b      	ldr	r3, [pc, #236]	; (8008f38 <icmp_get_value+0x1e8>)
 8008e4a:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8008e52:	2304      	movs	r3, #4
 8008e54:	e06a      	b.n	8008f2c <icmp_get_value+0x1dc>
    case 10: /* icmpInTimestamps */
      *uint_ptr = STATS_GET(mib2.icmpintimestamps);
 8008e56:	4b38      	ldr	r3, [pc, #224]	; (8008f38 <icmp_get_value+0x1e8>)
 8008e58:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8008e60:	2304      	movs	r3, #4
 8008e62:	e063      	b.n	8008f2c <icmp_get_value+0x1dc>
    case 11: /* icmpInTimestampReps */
      *uint_ptr = STATS_GET(mib2.icmpintimestampreps);
 8008e64:	4b34      	ldr	r3, [pc, #208]	; (8008f38 <icmp_get_value+0x1e8>)
 8008e66:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8008e6e:	2304      	movs	r3, #4
 8008e70:	e05c      	b.n	8008f2c <icmp_get_value+0x1dc>
    case 12: /* icmpInAddrMasks */
      *uint_ptr = STATS_GET(mib2.icmpinaddrmasks);
 8008e72:	4b31      	ldr	r3, [pc, #196]	; (8008f38 <icmp_get_value+0x1e8>)
 8008e74:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8008e7c:	2304      	movs	r3, #4
 8008e7e:	e055      	b.n	8008f2c <icmp_get_value+0x1dc>
    case 13: /* icmpInAddrMaskReps */
      *uint_ptr = STATS_GET(mib2.icmpinaddrmaskreps);
 8008e80:	4b2d      	ldr	r3, [pc, #180]	; (8008f38 <icmp_get_value+0x1e8>)
 8008e82:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8008e8a:	2304      	movs	r3, #4
 8008e8c:	e04e      	b.n	8008f2c <icmp_get_value+0x1dc>
    case 14: /* icmpOutMsgs */
      *uint_ptr = STATS_GET(mib2.icmpoutmsgs);
 8008e8e:	4b2a      	ldr	r3, [pc, #168]	; (8008f38 <icmp_get_value+0x1e8>)
 8008e90:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8008e98:	2304      	movs	r3, #4
 8008e9a:	e047      	b.n	8008f2c <icmp_get_value+0x1dc>
    case 15: /* icmpOutErrors */
      *uint_ptr = STATS_GET(mib2.icmpouterrors);
 8008e9c:	4b26      	ldr	r3, [pc, #152]	; (8008f38 <icmp_get_value+0x1e8>)
 8008e9e:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8008ea6:	2304      	movs	r3, #4
 8008ea8:	e040      	b.n	8008f2c <icmp_get_value+0x1dc>
    case 16: /* icmpOutDestUnreachs */
      *uint_ptr = STATS_GET(mib2.icmpoutdestunreachs);
 8008eaa:	4b23      	ldr	r3, [pc, #140]	; (8008f38 <icmp_get_value+0x1e8>)
 8008eac:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8008eb4:	2304      	movs	r3, #4
 8008eb6:	e039      	b.n	8008f2c <icmp_get_value+0x1dc>
    case 17: /* icmpOutTimeExcds */
      *uint_ptr = STATS_GET(mib2.icmpouttimeexcds);
 8008eb8:	4b1f      	ldr	r3, [pc, #124]	; (8008f38 <icmp_get_value+0x1e8>)
 8008eba:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8008ec2:	2304      	movs	r3, #4
 8008ec4:	e032      	b.n	8008f2c <icmp_get_value+0x1dc>
    case 18: /* icmpOutParmProbs: not supported -> always 0 */
      *uint_ptr = 0;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8008ecc:	2304      	movs	r3, #4
 8008ece:	e02d      	b.n	8008f2c <icmp_get_value+0x1dc>
    case 19: /* icmpOutSrcQuenchs: not supported -> always 0 */
      *uint_ptr = 0;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8008ed6:	2304      	movs	r3, #4
 8008ed8:	e028      	b.n	8008f2c <icmp_get_value+0x1dc>
    case 20: /* icmpOutRedirects: not supported -> always 0 */
      *uint_ptr = 0;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8008ee0:	2304      	movs	r3, #4
 8008ee2:	e023      	b.n	8008f2c <icmp_get_value+0x1dc>
    case 21: /* icmpOutEchos */
      *uint_ptr = STATS_GET(mib2.icmpoutechos);
 8008ee4:	4b14      	ldr	r3, [pc, #80]	; (8008f38 <icmp_get_value+0x1e8>)
 8008ee6:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8008eee:	2304      	movs	r3, #4
 8008ef0:	e01c      	b.n	8008f2c <icmp_get_value+0x1dc>
    case 22: /* icmpOutEchoReps */
      *uint_ptr = STATS_GET(mib2.icmpoutechoreps);
 8008ef2:	4b11      	ldr	r3, [pc, #68]	; (8008f38 <icmp_get_value+0x1e8>)
 8008ef4:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8008efc:	2304      	movs	r3, #4
 8008efe:	e015      	b.n	8008f2c <icmp_get_value+0x1dc>
    case 23: /* icmpOutTimestamps: not supported -> always 0 */
      *uint_ptr = 0;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2200      	movs	r2, #0
 8008f04:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8008f06:	2304      	movs	r3, #4
 8008f08:	e010      	b.n	8008f2c <icmp_get_value+0x1dc>
    case 24: /* icmpOutTimestampReps: not supported -> always 0 */
      *uint_ptr = 0;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8008f10:	2304      	movs	r3, #4
 8008f12:	e00b      	b.n	8008f2c <icmp_get_value+0x1dc>
    case 25: /* icmpOutAddrMasks: not supported -> always 0 */
      *uint_ptr = 0;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2200      	movs	r2, #0
 8008f18:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8008f1a:	2304      	movs	r3, #4
 8008f1c:	e006      	b.n	8008f2c <icmp_get_value+0x1dc>
    case 26: /* icmpOutAddrMaskReps: not supported -> always 0 */
      *uint_ptr = 0;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2200      	movs	r2, #0
 8008f22:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8008f24:	2304      	movs	r3, #4
 8008f26:	e001      	b.n	8008f2c <icmp_get_value+0x1dc>
    default:
      LWIP_DEBUGF(SNMP_MIB_DEBUG, ("icmp_get_value(): unknown id: %"S32_F"\n", node->oid));
      break;
 8008f28:	bf00      	nop
  }

  return 0;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3714      	adds	r7, #20
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr
 8008f38:	20007204 	.word	0x20007204

08008f3c <interfaces_get_value>:

/* --- interfaces .1.3.6.1.2.1.2 ----------------------------------------------------- */

static s16_t
interfaces_get_value(struct snmp_node_instance *instance, void *value)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b087      	sub	sp, #28
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  if (instance->node->oid == 1) {
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d115      	bne.n	8008f7c <interfaces_get_value+0x40>
    s32_t *sint_ptr = (s32_t *)value;
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	60fb      	str	r3, [r7, #12]
    s32_t num_netifs = 0;
 8008f54:	2300      	movs	r3, #0
 8008f56:	617b      	str	r3, [r7, #20]

    struct netif *netif;
    NETIF_FOREACH(netif) {
 8008f58:	4b0c      	ldr	r3, [pc, #48]	; (8008f8c <interfaces_get_value+0x50>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	613b      	str	r3, [r7, #16]
 8008f5e:	e005      	b.n	8008f6c <interfaces_get_value+0x30>
      num_netifs++;
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	3301      	adds	r3, #1
 8008f64:	617b      	str	r3, [r7, #20]
    NETIF_FOREACH(netif) {
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	613b      	str	r3, [r7, #16]
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1f6      	bne.n	8008f60 <interfaces_get_value+0x24>
    }

    *sint_ptr = num_netifs;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	697a      	ldr	r2, [r7, #20]
 8008f76:	601a      	str	r2, [r3, #0]
    return sizeof(*sint_ptr);
 8008f78:	2304      	movs	r3, #4
 8008f7a:	e000      	b.n	8008f7e <interfaces_get_value+0x42>
  }

  return 0;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	371c      	adds	r7, #28
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop
 8008f8c:	200071f8 	.word	0x200071f8

08008f90 <interfaces_Table_get_cell_instance>:
static const u8_t iftable_ifAdminStatus_lowerLayerDown = 7;
static const u8_t iftable_ifAdminStatus_down           = 2;

static snmp_err_t
interfaces_Table_get_cell_instance(const u32_t *column, const u32_t *row_oid, u8_t row_oid_len, struct snmp_node_instance *cell_instance)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b086      	sub	sp, #24
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	603b      	str	r3, [r7, #0]
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_UNUSED_ARG(column);

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, interfaces_Table_oid_ranges, LWIP_ARRAYSIZE(interfaces_Table_oid_ranges))) {
 8008fa0:	79f9      	ldrb	r1, [r7, #7]
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	4a14      	ldr	r2, [pc, #80]	; (8008ff8 <interfaces_Table_get_cell_instance+0x68>)
 8008fa6:	68b8      	ldr	r0, [r7, #8]
 8008fa8:	f7ff fe96 	bl	8008cd8 <snmp_oid_in_range>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d101      	bne.n	8008fb6 <interfaces_Table_get_cell_instance+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 8008fb2:	23f1      	movs	r3, #241	; 0xf1
 8008fb4:	e01b      	b.n	8008fee <interfaces_Table_get_cell_instance+0x5e>
  }

  /* get netif index from incoming OID */
  ifIndex = row_oid[0];
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	613b      	str	r3, [r7, #16]

  /* find netif with index */
  NETIF_FOREACH(netif) {
 8008fbc:	4b0f      	ldr	r3, [pc, #60]	; (8008ffc <interfaces_Table_get_cell_instance+0x6c>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	617b      	str	r3, [r7, #20]
 8008fc2:	e010      	b.n	8008fe6 <interfaces_Table_get_cell_instance+0x56>
    if (netif_to_num(netif) == ifIndex) {
 8008fc4:	6978      	ldr	r0, [r7, #20]
 8008fc6:	f7ff f97f 	bl	80082c8 <netif_to_num>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	461a      	mov	r2, r3
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d105      	bne.n	8008fe0 <interfaces_Table_get_cell_instance+0x50>
      /* store netif pointer for subsequent operations (get/test/set) */
      cell_instance->reference.ptr = netif;
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
      return SNMP_ERR_NOERROR;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	e006      	b.n	8008fee <interfaces_Table_get_cell_instance+0x5e>
  NETIF_FOREACH(netif) {
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	617b      	str	r3, [r7, #20]
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d1eb      	bne.n	8008fc4 <interfaces_Table_get_cell_instance+0x34>
    }
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 8008fec:	23f1      	movs	r3, #241	; 0xf1
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3718      	adds	r7, #24
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	0802374c 	.word	0x0802374c
 8008ffc:	200071f8 	.word	0x200071f8

08009000 <interfaces_Table_get_next_cell_instance>:

static snmp_err_t
interfaces_Table_get_next_cell_instance(const u32_t *column, struct snmp_obj_id *row_oid, struct snmp_node_instance *cell_instance)
{
 8009000:	b590      	push	{r4, r7, lr}
 8009002:	b08f      	sub	sp, #60	; 0x3c
 8009004:	af02      	add	r7, sp, #8
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	607a      	str	r2, [r7, #4]
  u32_t result_temp[LWIP_ARRAYSIZE(interfaces_Table_oid_ranges)];

  LWIP_UNUSED_ARG(column);

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(interfaces_Table_oid_ranges));
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	1d19      	adds	r1, r3, #4
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	781a      	ldrb	r2, [r3, #0]
 8009014:	f107 0314 	add.w	r3, r7, #20
 8009018:	f107 0018 	add.w	r0, r7, #24
 800901c:	2401      	movs	r4, #1
 800901e:	9400      	str	r4, [sp, #0]
 8009020:	f7ff fdf4 	bl	8008c0c <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  NETIF_FOREACH(netif) {
 8009024:	4b16      	ldr	r3, [pc, #88]	; (8009080 <interfaces_Table_get_next_cell_instance+0x80>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800902a:	e00f      	b.n	800904c <interfaces_Table_get_next_cell_instance+0x4c>
    u32_t test_oid[LWIP_ARRAYSIZE(interfaces_Table_oid_ranges)];
    test_oid[0] = netif_to_num(netif);
 800902c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800902e:	f7ff f94b 	bl	80082c8 <netif_to_num>
 8009032:	4603      	mov	r3, r0
 8009034:	613b      	str	r3, [r7, #16]

    /* check generated OID: is it a candidate for the next one? */
    snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(interfaces_Table_oid_ranges), netif);
 8009036:	f107 0110 	add.w	r1, r7, #16
 800903a:	f107 0018 	add.w	r0, r7, #24
 800903e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009040:	2201      	movs	r2, #1
 8009042:	f7ff fe03 	bl	8008c4c <snmp_next_oid_check>
  NETIF_FOREACH(netif) {
 8009046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800904c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1ec      	bne.n	800902c <interfaces_Table_get_next_cell_instance+0x2c>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 8009052:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009056:	2b00      	cmp	r3, #0
 8009058:	d10c      	bne.n	8009074 <interfaces_Table_get_next_cell_instance+0x74>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 800905a:	6a3b      	ldr	r3, [r7, #32]
 800905c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8009060:	4619      	mov	r1, r3
 8009062:	68b8      	ldr	r0, [r7, #8]
 8009064:	f7ff f86c 	bl	8008140 <snmp_oid_assign>
    /* store netif pointer for subsequent operations (get/test/set) */
    cell_instance->reference.ptr = /* (struct netif*) */state.reference;
 8009068:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    return SNMP_ERR_NOERROR;
 8009070:	2300      	movs	r3, #0
 8009072:	e000      	b.n	8009076 <interfaces_Table_get_next_cell_instance+0x76>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 8009074:	23f1      	movs	r3, #241	; 0xf1
}
 8009076:	4618      	mov	r0, r3
 8009078:	3734      	adds	r7, #52	; 0x34
 800907a:	46bd      	mov	sp, r7
 800907c:	bd90      	pop	{r4, r7, pc}
 800907e:	bf00      	nop
 8009080:	200071f8 	.word	0x200071f8

08009084 <interfaces_Table_get_value>:

static s16_t
interfaces_Table_get_value(struct snmp_node_instance *instance, void *value)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b086      	sub	sp, #24
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
  struct netif *netif = (struct netif *)instance->reference.ptr;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009094:	613b      	str	r3, [r7, #16]
  u32_t *value_u32 = (u32_t *)value;
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	60fb      	str	r3, [r7, #12]
  s32_t *value_s32 = (s32_t *)value;
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	60bb      	str	r3, [r7, #8]
  u16_t value_len;

  switch (SNMP_TABLE_GET_COLUMN_FROM_OID(instance->instance_oid.id)) {
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	3b01      	subs	r3, #1
 80090a4:	2b15      	cmp	r3, #21
 80090a6:	f200 8103 	bhi.w	80092b0 <interfaces_Table_get_value+0x22c>
 80090aa:	a201      	add	r2, pc, #4	; (adr r2, 80090b0 <interfaces_Table_get_value+0x2c>)
 80090ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b0:	08009109 	.word	0x08009109
 80090b4:	0800911d 	.word	0x0800911d
 80090b8:	08009131 	.word	0x08009131
 80090bc:	08009143 	.word	0x08009143
 80090c0:	08009153 	.word	0x08009153
 80090c4:	08009161 	.word	0x08009161
 80090c8:	08009175 	.word	0x08009175
 80090cc:	0800919d 	.word	0x0800919d
 80090d0:	080091e1 	.word	0x080091e1
 80090d4:	080091ef 	.word	0x080091ef
 80090d8:	080091fd 	.word	0x080091fd
 80090dc:	0800920b 	.word	0x0800920b
 80090e0:	08009219 	.word	0x08009219
 80090e4:	08009227 	.word	0x08009227
 80090e8:	08009235 	.word	0x08009235
 80090ec:	08009243 	.word	0x08009243
 80090f0:	08009251 	.word	0x08009251
 80090f4:	0800925f 	.word	0x0800925f
 80090f8:	0800926d 	.word	0x0800926d
 80090fc:	0800927b 	.word	0x0800927b
 8009100:	08009289 	.word	0x08009289
 8009104:	08009297 	.word	0x08009297
    case 1: /* ifIndex */
      *value_s32 = netif_to_num(netif);
 8009108:	6938      	ldr	r0, [r7, #16]
 800910a:	f7ff f8dd 	bl	80082c8 <netif_to_num>
 800910e:	4603      	mov	r3, r0
 8009110:	461a      	mov	r2, r3
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	601a      	str	r2, [r3, #0]
      value_len = sizeof(*value_s32);
 8009116:	2304      	movs	r3, #4
 8009118:	82fb      	strh	r3, [r7, #22]
      break;
 800911a:	e0cb      	b.n	80092b4 <interfaces_Table_get_value+0x230>
    case 2: /* ifDescr */
      value_len = sizeof(netif->name);
 800911c:	2302      	movs	r3, #2
 800911e:	82fb      	strh	r3, [r7, #22]
      MEMCPY(value, netif->name, value_len);
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	3332      	adds	r3, #50	; 0x32
 8009124:	8afa      	ldrh	r2, [r7, #22]
 8009126:	4619      	mov	r1, r3
 8009128:	6838      	ldr	r0, [r7, #0]
 800912a:	f012 fb93 	bl	801b854 <memcpy>
      break;
 800912e:	e0c1      	b.n	80092b4 <interfaces_Table_get_value+0x230>
    case 3: /* ifType */
      *value_s32 = netif->link_type;
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009136:	461a      	mov	r2, r3
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	601a      	str	r2, [r3, #0]
      value_len = sizeof(*value_s32);
 800913c:	2304      	movs	r3, #4
 800913e:	82fb      	strh	r3, [r7, #22]
      break;
 8009140:	e0b8      	b.n	80092b4 <interfaces_Table_get_value+0x230>
    case 4: /* ifMtu */
      *value_s32 = netif->mtu;
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009146:	461a      	mov	r2, r3
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	601a      	str	r2, [r3, #0]
      value_len = sizeof(*value_s32);
 800914c:	2304      	movs	r3, #4
 800914e:	82fb      	strh	r3, [r7, #22]
      break;
 8009150:	e0b0      	b.n	80092b4 <interfaces_Table_get_value+0x230>
    case 5: /* ifSpeed */
      *value_u32 = netif->link_speed;
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	601a      	str	r2, [r3, #0]
      value_len = sizeof(*value_u32);
 800915a:	2304      	movs	r3, #4
 800915c:	82fb      	strh	r3, [r7, #22]
      break;
 800915e:	e0a9      	b.n	80092b4 <interfaces_Table_get_value+0x230>
    case 6: /* ifPhysAddress */
      value_len = sizeof(netif->hwaddr);
 8009160:	2306      	movs	r3, #6
 8009162:	82fb      	strh	r3, [r7, #22]
      MEMCPY(value, &netif->hwaddr, value_len);
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	332a      	adds	r3, #42	; 0x2a
 8009168:	8afa      	ldrh	r2, [r7, #22]
 800916a:	4619      	mov	r1, r3
 800916c:	6838      	ldr	r0, [r7, #0]
 800916e:	f012 fb71 	bl	801b854 <memcpy>
      break;
 8009172:	e09f      	b.n	80092b4 <interfaces_Table_get_value+0x230>
    case 7: /* ifAdminStatus */
      if (netif_is_up(netif)) {
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800917a:	f003 0301 	and.w	r3, r3, #1
 800917e:	b2db      	uxtb	r3, r3
 8009180:	2b00      	cmp	r3, #0
 8009182:	d004      	beq.n	800918e <interfaces_Table_get_value+0x10a>
        *value_s32 = iftable_ifOperStatus_up;
 8009184:	2301      	movs	r3, #1
 8009186:	461a      	mov	r2, r3
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	601a      	str	r2, [r3, #0]
 800918c:	e003      	b.n	8009196 <interfaces_Table_get_value+0x112>
      } else {
        *value_s32 = iftable_ifOperStatus_down;
 800918e:	2302      	movs	r3, #2
 8009190:	461a      	mov	r2, r3
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	601a      	str	r2, [r3, #0]
      }
      value_len = sizeof(*value_s32);
 8009196:	2304      	movs	r3, #4
 8009198:	82fb      	strh	r3, [r7, #22]
      break;
 800919a:	e08b      	b.n	80092b4 <interfaces_Table_get_value+0x230>
    case 8: /* ifOperStatus */
      if (netif_is_up(netif)) {
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80091a2:	f003 0301 	and.w	r3, r3, #1
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d012      	beq.n	80091d2 <interfaces_Table_get_value+0x14e>
        if (netif_is_link_up(netif)) {
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80091b2:	089b      	lsrs	r3, r3, #2
 80091b4:	f003 0301 	and.w	r3, r3, #1
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d004      	beq.n	80091c8 <interfaces_Table_get_value+0x144>
          *value_s32 = iftable_ifAdminStatus_up;
 80091be:	2301      	movs	r3, #1
 80091c0:	461a      	mov	r2, r3
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	601a      	str	r2, [r3, #0]
 80091c6:	e008      	b.n	80091da <interfaces_Table_get_value+0x156>
        } else {
          *value_s32 = iftable_ifAdminStatus_lowerLayerDown;
 80091c8:	2307      	movs	r3, #7
 80091ca:	461a      	mov	r2, r3
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	601a      	str	r2, [r3, #0]
 80091d0:	e003      	b.n	80091da <interfaces_Table_get_value+0x156>
        }
      } else {
        *value_s32 = iftable_ifAdminStatus_down;
 80091d2:	2302      	movs	r3, #2
 80091d4:	461a      	mov	r2, r3
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	601a      	str	r2, [r3, #0]
      }
      value_len = sizeof(*value_s32);
 80091da:	2304      	movs	r3, #4
 80091dc:	82fb      	strh	r3, [r7, #22]
      break;
 80091de:	e069      	b.n	80092b4 <interfaces_Table_get_value+0x230>
    case 9: /* ifLastChange */
      *value_u32 = netif->ts;
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	601a      	str	r2, [r3, #0]
      value_len = sizeof(*value_u32);
 80091e8:	2304      	movs	r3, #4
 80091ea:	82fb      	strh	r3, [r7, #22]
      break;
 80091ec:	e062      	b.n	80092b4 <interfaces_Table_get_value+0x230>
    case 10: /* ifInOctets */
      *value_u32 = netif->mib2_counters.ifinoctets;
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	601a      	str	r2, [r3, #0]
      value_len = sizeof(*value_u32);
 80091f6:	2304      	movs	r3, #4
 80091f8:	82fb      	strh	r3, [r7, #22]
      break;
 80091fa:	e05b      	b.n	80092b4 <interfaces_Table_get_value+0x230>
    case 11: /* ifInUcastPkts */
      *value_u32 = netif->mib2_counters.ifinucastpkts;
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	601a      	str	r2, [r3, #0]
      value_len = sizeof(*value_u32);
 8009204:	2304      	movs	r3, #4
 8009206:	82fb      	strh	r3, [r7, #22]
      break;
 8009208:	e054      	b.n	80092b4 <interfaces_Table_get_value+0x230>
    case 12: /* ifInNUcastPkts */
      *value_u32 = netif->mib2_counters.ifinnucastpkts;
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	601a      	str	r2, [r3, #0]
      value_len = sizeof(*value_u32);
 8009212:	2304      	movs	r3, #4
 8009214:	82fb      	strh	r3, [r7, #22]
      break;
 8009216:	e04d      	b.n	80092b4 <interfaces_Table_get_value+0x230>
    case 13: /* ifInDiscards */
      *value_u32 = netif->mib2_counters.ifindiscards;
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	601a      	str	r2, [r3, #0]
      value_len = sizeof(*value_u32);
 8009220:	2304      	movs	r3, #4
 8009222:	82fb      	strh	r3, [r7, #22]
      break;
 8009224:	e046      	b.n	80092b4 <interfaces_Table_get_value+0x230>
    case 14: /* ifInErrors */
      *value_u32 = netif->mib2_counters.ifinerrors;
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	601a      	str	r2, [r3, #0]
      value_len = sizeof(*value_u32);
 800922e:	2304      	movs	r3, #4
 8009230:	82fb      	strh	r3, [r7, #22]
      break;
 8009232:	e03f      	b.n	80092b4 <interfaces_Table_get_value+0x230>
    case 15: /* ifInUnkownProtos */
      *value_u32 = netif->mib2_counters.ifinunknownprotos;
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	601a      	str	r2, [r3, #0]
      value_len = sizeof(*value_u32);
 800923c:	2304      	movs	r3, #4
 800923e:	82fb      	strh	r3, [r7, #22]
      break;
 8009240:	e038      	b.n	80092b4 <interfaces_Table_get_value+0x230>
    case 16: /* ifOutOctets */
      *value_u32 = netif->mib2_counters.ifoutoctets;
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	601a      	str	r2, [r3, #0]
      value_len = sizeof(*value_u32);
 800924a:	2304      	movs	r3, #4
 800924c:	82fb      	strh	r3, [r7, #22]
      break;
 800924e:	e031      	b.n	80092b4 <interfaces_Table_get_value+0x230>
    case 17: /* ifOutUcastPkts */
      *value_u32 = netif->mib2_counters.ifoutucastpkts;
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	601a      	str	r2, [r3, #0]
      value_len = sizeof(*value_u32);
 8009258:	2304      	movs	r3, #4
 800925a:	82fb      	strh	r3, [r7, #22]
      break;
 800925c:	e02a      	b.n	80092b4 <interfaces_Table_get_value+0x230>
    case 18: /* ifOutNUcastPkts */
      *value_u32 = netif->mib2_counters.ifoutnucastpkts;
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	601a      	str	r2, [r3, #0]
      value_len = sizeof(*value_u32);
 8009266:	2304      	movs	r3, #4
 8009268:	82fb      	strh	r3, [r7, #22]
      break;
 800926a:	e023      	b.n	80092b4 <interfaces_Table_get_value+0x230>
    case 19: /* ifOutDiscarts */
      *value_u32 = netif->mib2_counters.ifoutdiscards;
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	601a      	str	r2, [r3, #0]
      value_len = sizeof(*value_u32);
 8009274:	2304      	movs	r3, #4
 8009276:	82fb      	strh	r3, [r7, #22]
      break;
 8009278:	e01c      	b.n	80092b4 <interfaces_Table_get_value+0x230>
    case 20: /* ifOutErrors */
      *value_u32 = netif->mib2_counters.ifouterrors;
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	601a      	str	r2, [r3, #0]
      value_len = sizeof(*value_u32);
 8009282:	2304      	movs	r3, #4
 8009284:	82fb      	strh	r3, [r7, #22]
      break;
 8009286:	e015      	b.n	80092b4 <interfaces_Table_get_value+0x230>
    case 21: /* ifOutQLen */
      *value_u32 = iftable_ifOutQLen;
 8009288:	2300      	movs	r3, #0
 800928a:	461a      	mov	r2, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	601a      	str	r2, [r3, #0]
      value_len = sizeof(*value_u32);
 8009290:	2304      	movs	r3, #4
 8009292:	82fb      	strh	r3, [r7, #22]
      break;
 8009294:	e00e      	b.n	80092b4 <interfaces_Table_get_value+0x230>
    /** @note returning zeroDotZero (0.0) no media specific MIB support */
    case 22: /* ifSpecific */
      value_len = snmp_zero_dot_zero.len * sizeof(u32_t);
 8009296:	4b0a      	ldr	r3, [pc, #40]	; (80092c0 <interfaces_Table_get_value+0x23c>)
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	b29b      	uxth	r3, r3
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	82fb      	strh	r3, [r7, #22]
      MEMCPY(value, snmp_zero_dot_zero.id, value_len);
 80092a0:	4b07      	ldr	r3, [pc, #28]	; (80092c0 <interfaces_Table_get_value+0x23c>)
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	8afa      	ldrh	r2, [r7, #22]
 80092a6:	4619      	mov	r1, r3
 80092a8:	6838      	ldr	r0, [r7, #0]
 80092aa:	f012 fad3 	bl	801b854 <memcpy>
      break;
 80092ae:	e001      	b.n	80092b4 <interfaces_Table_get_value+0x230>
    default:
      return 0;
 80092b0:	2300      	movs	r3, #0
 80092b2:	e001      	b.n	80092b8 <interfaces_Table_get_value+0x234>
  }

  return value_len;
 80092b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3718      	adds	r7, #24
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	080235f8 	.word	0x080235f8

080092c4 <ip_get_value>:
#if LWIP_IPV4
/* --- ip .1.3.6.1.2.1.4 ----------------------------------------------------- */

static s16_t
ip_get_value(struct snmp_node_instance *instance, void *value)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  s32_t *sint_ptr = (s32_t *)value;
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	60fb      	str	r3, [r7, #12]
  u32_t *uint_ptr = (u32_t *)value;
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	60bb      	str	r3, [r7, #8]

  switch (instance->node->oid) {
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	3b01      	subs	r3, #1
 80092de:	2b16      	cmp	r3, #22
 80092e0:	f200 80b6 	bhi.w	8009450 <ip_get_value+0x18c>
 80092e4:	a201      	add	r2, pc, #4	; (adr r2, 80092ec <ip_get_value+0x28>)
 80092e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ea:	bf00      	nop
 80092ec:	08009349 	.word	0x08009349
 80092f0:	08009353 	.word	0x08009353
 80092f4:	0800935d 	.word	0x0800935d
 80092f8:	0800936b 	.word	0x0800936b
 80092fc:	08009379 	.word	0x08009379
 8009300:	08009387 	.word	0x08009387
 8009304:	08009395 	.word	0x08009395
 8009308:	080093a3 	.word	0x080093a3
 800930c:	080093b1 	.word	0x080093b1
 8009310:	080093bf 	.word	0x080093bf
 8009314:	080093cd 	.word	0x080093cd
 8009318:	080093db 	.word	0x080093db
 800931c:	080093e9 	.word	0x080093e9
 8009320:	080093f3 	.word	0x080093f3
 8009324:	08009401 	.word	0x08009401
 8009328:	0800940f 	.word	0x0800940f
 800932c:	0800941d 	.word	0x0800941d
 8009330:	0800942b 	.word	0x0800942b
 8009334:	08009439 	.word	0x08009439
 8009338:	08009451 	.word	0x08009451
 800933c:	08009451 	.word	0x08009451
 8009340:	08009451 	.word	0x08009451
 8009344:	08009447 	.word	0x08009447
#if IP_FORWARD
      /* forwarding */
      *sint_ptr = 1;
#else
      /* not-forwarding */
      *sint_ptr = 2;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2202      	movs	r2, #2
 800934c:	601a      	str	r2, [r3, #0]
#endif
      return sizeof(*sint_ptr);
 800934e:	2304      	movs	r3, #4
 8009350:	e080      	b.n	8009454 <ip_get_value+0x190>
    case 2: /* ipDefaultTTL */
      *sint_ptr = IP_DEFAULT_TTL;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	22ff      	movs	r2, #255	; 0xff
 8009356:	601a      	str	r2, [r3, #0]
      return sizeof(*sint_ptr);
 8009358:	2304      	movs	r3, #4
 800935a:	e07b      	b.n	8009454 <ip_get_value+0x190>
    case 3: /* ipInReceives */
      *uint_ptr = STATS_GET(mib2.ipinreceives);
 800935c:	4b40      	ldr	r3, [pc, #256]	; (8009460 <ip_get_value+0x19c>)
 800935e:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8009366:	2304      	movs	r3, #4
 8009368:	e074      	b.n	8009454 <ip_get_value+0x190>
    case 4: /* ipInHdrErrors */
      *uint_ptr = STATS_GET(mib2.ipinhdrerrors);
 800936a:	4b3d      	ldr	r3, [pc, #244]	; (8009460 <ip_get_value+0x19c>)
 800936c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8009374:	2304      	movs	r3, #4
 8009376:	e06d      	b.n	8009454 <ip_get_value+0x190>
    case 5: /* ipInAddrErrors */
      *uint_ptr = STATS_GET(mib2.ipinaddrerrors);
 8009378:	4b39      	ldr	r3, [pc, #228]	; (8009460 <ip_get_value+0x19c>)
 800937a:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8009382:	2304      	movs	r3, #4
 8009384:	e066      	b.n	8009454 <ip_get_value+0x190>
    case 6: /* ipForwDatagrams */
      *uint_ptr = STATS_GET(mib2.ipforwdatagrams);
 8009386:	4b36      	ldr	r3, [pc, #216]	; (8009460 <ip_get_value+0x19c>)
 8009388:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8009390:	2304      	movs	r3, #4
 8009392:	e05f      	b.n	8009454 <ip_get_value+0x190>
    case 7: /* ipInUnknownProtos */
      *uint_ptr = STATS_GET(mib2.ipinunknownprotos);
 8009394:	4b32      	ldr	r3, [pc, #200]	; (8009460 <ip_get_value+0x19c>)
 8009396:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 800939e:	2304      	movs	r3, #4
 80093a0:	e058      	b.n	8009454 <ip_get_value+0x190>
    case 8: /* ipInDiscards */
      *uint_ptr = STATS_GET(mib2.ipindiscards);
 80093a2:	4b2f      	ldr	r3, [pc, #188]	; (8009460 <ip_get_value+0x19c>)
 80093a4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 80093ac:	2304      	movs	r3, #4
 80093ae:	e051      	b.n	8009454 <ip_get_value+0x190>
    case 9: /* ipInDelivers */
      *uint_ptr = STATS_GET(mib2.ipindelivers);
 80093b0:	4b2b      	ldr	r3, [pc, #172]	; (8009460 <ip_get_value+0x19c>)
 80093b2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 80093ba:	2304      	movs	r3, #4
 80093bc:	e04a      	b.n	8009454 <ip_get_value+0x190>
    case 10: /* ipOutRequests */
      *uint_ptr = STATS_GET(mib2.ipoutrequests);
 80093be:	4b28      	ldr	r3, [pc, #160]	; (8009460 <ip_get_value+0x19c>)
 80093c0:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 80093c8:	2304      	movs	r3, #4
 80093ca:	e043      	b.n	8009454 <ip_get_value+0x190>
    case 11: /* ipOutDiscards */
      *uint_ptr = STATS_GET(mib2.ipoutdiscards);
 80093cc:	4b24      	ldr	r3, [pc, #144]	; (8009460 <ip_get_value+0x19c>)
 80093ce:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 80093d6:	2304      	movs	r3, #4
 80093d8:	e03c      	b.n	8009454 <ip_get_value+0x190>
    case 12: /* ipOutNoRoutes */
      *uint_ptr = STATS_GET(mib2.ipoutnoroutes);
 80093da:	4b21      	ldr	r3, [pc, #132]	; (8009460 <ip_get_value+0x19c>)
 80093dc:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 80093e4:	2304      	movs	r3, #4
 80093e6:	e035      	b.n	8009454 <ip_get_value+0x190>
    case 13: /* ipReasmTimeout */
#if IP_REASSEMBLY
      *sint_ptr = IP_REASS_MAXAGE;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	220f      	movs	r2, #15
 80093ec:	601a      	str	r2, [r3, #0]
#else
      *sint_ptr = 0;
#endif
      return sizeof(*sint_ptr);
 80093ee:	2304      	movs	r3, #4
 80093f0:	e030      	b.n	8009454 <ip_get_value+0x190>
    case 14: /* ipReasmReqds */
      *uint_ptr = STATS_GET(mib2.ipreasmreqds);
 80093f2:	4b1b      	ldr	r3, [pc, #108]	; (8009460 <ip_get_value+0x19c>)
 80093f4:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 80093fc:	2304      	movs	r3, #4
 80093fe:	e029      	b.n	8009454 <ip_get_value+0x190>
    case 15: /* ipReasmOKs */
      *uint_ptr = STATS_GET(mib2.ipreasmoks);
 8009400:	4b17      	ldr	r3, [pc, #92]	; (8009460 <ip_get_value+0x19c>)
 8009402:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 800940a:	2304      	movs	r3, #4
 800940c:	e022      	b.n	8009454 <ip_get_value+0x190>
    case 16: /* ipReasmFails */
      *uint_ptr = STATS_GET(mib2.ipreasmfails);
 800940e:	4b14      	ldr	r3, [pc, #80]	; (8009460 <ip_get_value+0x19c>)
 8009410:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8009418:	2304      	movs	r3, #4
 800941a:	e01b      	b.n	8009454 <ip_get_value+0x190>
    case 17: /* ipFragOKs */
      *uint_ptr = STATS_GET(mib2.ipfragoks);
 800941c:	4b10      	ldr	r3, [pc, #64]	; (8009460 <ip_get_value+0x19c>)
 800941e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8009426:	2304      	movs	r3, #4
 8009428:	e014      	b.n	8009454 <ip_get_value+0x190>
    case 18: /* ipFragFails */
      *uint_ptr = STATS_GET(mib2.ipfragfails);
 800942a:	4b0d      	ldr	r3, [pc, #52]	; (8009460 <ip_get_value+0x19c>)
 800942c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8009434:	2304      	movs	r3, #4
 8009436:	e00d      	b.n	8009454 <ip_get_value+0x190>
    case 19: /* ipFragCreates */
      *uint_ptr = STATS_GET(mib2.ipfragcreates);
 8009438:	4b09      	ldr	r3, [pc, #36]	; (8009460 <ip_get_value+0x19c>)
 800943a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 8009442:	2304      	movs	r3, #4
 8009444:	e006      	b.n	8009454 <ip_get_value+0x190>
    case 23: /* ipRoutingDiscards: not supported -> always 0 */
      *uint_ptr = 0;
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	2200      	movs	r2, #0
 800944a:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 800944c:	2304      	movs	r3, #4
 800944e:	e001      	b.n	8009454 <ip_get_value+0x190>
    default:
      LWIP_DEBUGF(SNMP_MIB_DEBUG, ("ip_get_value(): unknown id: %"S32_F"\n", instance->node->oid));
      break;
 8009450:	bf00      	nop
  }

  return 0;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3714      	adds	r7, #20
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr
 8009460:	20007204 	.word	0x20007204

08009464 <ip_set_test>:
 * @note we allow set if the value matches the hardwired value,
 *   otherwise return badvalue.
 */
static snmp_err_t
ip_set_test(struct snmp_node_instance *instance, u16_t len, void *value)
{
 8009464:	b480      	push	{r7}
 8009466:	b087      	sub	sp, #28
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	460b      	mov	r3, r1
 800946e:	607a      	str	r2, [r7, #4]
 8009470:	817b      	strh	r3, [r7, #10]
  snmp_err_t ret = SNMP_ERR_WRONGVALUE;
 8009472:	230a      	movs	r3, #10
 8009474:	75fb      	strb	r3, [r7, #23]
  s32_t *sint_ptr = (s32_t *)value;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	613b      	str	r3, [r7, #16]

  LWIP_UNUSED_ARG(len);
  switch (instance->node->oid) {
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	2b01      	cmp	r3, #1
 8009482:	d002      	beq.n	800948a <ip_set_test+0x26>
 8009484:	2b02      	cmp	r3, #2
 8009486:	d007      	beq.n	8009498 <ip_set_test+0x34>
        ret = SNMP_ERR_NOERROR;
      }
      break;
    default:
      LWIP_DEBUGF(SNMP_MIB_DEBUG, ("ip_set_test(): unknown id: %"S32_F"\n", instance->node->oid));
      break;
 8009488:	e010      	b.n	80094ac <ip_set_test+0x48>
      if (*sint_ptr == 2)
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2b02      	cmp	r3, #2
 8009490:	d109      	bne.n	80094a6 <ip_set_test+0x42>
        ret = SNMP_ERR_NOERROR;
 8009492:	2300      	movs	r3, #0
 8009494:	75fb      	strb	r3, [r7, #23]
      break;
 8009496:	e006      	b.n	80094a6 <ip_set_test+0x42>
      if (*sint_ptr == IP_DEFAULT_TTL) {
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2bff      	cmp	r3, #255	; 0xff
 800949e:	d104      	bne.n	80094aa <ip_set_test+0x46>
        ret = SNMP_ERR_NOERROR;
 80094a0:	2300      	movs	r3, #0
 80094a2:	75fb      	strb	r3, [r7, #23]
      break;
 80094a4:	e001      	b.n	80094aa <ip_set_test+0x46>
      break;
 80094a6:	bf00      	nop
 80094a8:	e000      	b.n	80094ac <ip_set_test+0x48>
      break;
 80094aa:	bf00      	nop
  }

  return ret;
 80094ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	371c      	adds	r7, #28
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr

080094ba <ip_set_value>:

static snmp_err_t
ip_set_value(struct snmp_node_instance *instance, u16_t len, void *value)
{
 80094ba:	b480      	push	{r7}
 80094bc:	b085      	sub	sp, #20
 80094be:	af00      	add	r7, sp, #0
 80094c0:	60f8      	str	r0, [r7, #12]
 80094c2:	460b      	mov	r3, r1
 80094c4:	607a      	str	r2, [r7, #4]
 80094c6:	817b      	strh	r3, [r7, #10]
  LWIP_UNUSED_ARG(instance);
  LWIP_UNUSED_ARG(len);
  LWIP_UNUSED_ARG(value);
  /* nothing to do here because in set_test we only accept values being the same as our own stored value -> no need to store anything */
  return SNMP_ERR_NOERROR;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3714      	adds	r7, #20
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr
	...

080094d8 <ip_AddrTable_get_cell_value_core>:
  { 0, 0xff }  /* IP D */
};

static snmp_err_t
ip_AddrTable_get_cell_value_core(struct netif *netif, const u32_t *column, union snmp_variant_value *value, u32_t *value_len)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
 80094e4:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(value_len);

  switch (*column) {
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	3b01      	subs	r3, #1
 80094ec:	2b04      	cmp	r3, #4
 80094ee:	d82a      	bhi.n	8009546 <ip_AddrTable_get_cell_value_core+0x6e>
 80094f0:	a201      	add	r2, pc, #4	; (adr r2, 80094f8 <ip_AddrTable_get_cell_value_core+0x20>)
 80094f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f6:	bf00      	nop
 80094f8:	0800950d 	.word	0x0800950d
 80094fc:	08009519 	.word	0x08009519
 8009500:	08009529 	.word	0x08009529
 8009504:	08009535 	.word	0x08009535
 8009508:	0800953d 	.word	0x0800953d
    case 1: /* ipAdEntAddr */
      value->u32 = netif_ip4_addr(netif)->addr;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	3304      	adds	r3, #4
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	601a      	str	r2, [r3, #0]
      break;
 8009516:	e018      	b.n	800954a <ip_AddrTable_get_cell_value_core+0x72>
    case 2: /* ipAdEntIfIndex */
      value->u32 = netif_to_num(netif);
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f7fe fed5 	bl	80082c8 <netif_to_num>
 800951e:	4603      	mov	r3, r0
 8009520:	461a      	mov	r2, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	601a      	str	r2, [r3, #0]
      break;
 8009526:	e010      	b.n	800954a <ip_AddrTable_get_cell_value_core+0x72>
    case 3: /* ipAdEntNetMask */
      value->u32 = netif_ip4_netmask(netif)->addr;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	3308      	adds	r3, #8
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	601a      	str	r2, [r3, #0]
      break;
 8009532:	e00a      	b.n	800954a <ip_AddrTable_get_cell_value_core+0x72>
    case 4: /* ipAdEntBcastAddr */
      /* lwIP oddity, there's no broadcast
         address in the netif we can rely on */
      value->u32 = IPADDR_BROADCAST & 1;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	601a      	str	r2, [r3, #0]
      break;
 800953a:	e006      	b.n	800954a <ip_AddrTable_get_cell_value_core+0x72>
#if IP_REASSEMBLY
      /* @todo The theoretical maximum is IP_REASS_MAX_PBUFS * size of the pbufs,
       * but only if receiving one fragmented packet at a time.
       * The current solution is to calculate for 2 simultaneous packets...
       */
      value->u32 = (IP_HLEN + ((IP_REASS_MAX_PBUFS / 2) *
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f640 22fa 	movw	r2, #2810	; 0xafa
 8009542:	601a      	str	r2, [r3, #0]
#else
      /** @todo returning MTU would be a bad thing and
          returning a wild guess like '576' isn't good either */
      value->u32 = 0;
#endif
      break;
 8009544:	e001      	b.n	800954a <ip_AddrTable_get_cell_value_core+0x72>
    default:
      return SNMP_ERR_NOSUCHINSTANCE;
 8009546:	23f1      	movs	r3, #241	; 0xf1
 8009548:	e000      	b.n	800954c <ip_AddrTable_get_cell_value_core+0x74>
  }

  return SNMP_ERR_NOERROR;
 800954a:	2300      	movs	r3, #0
}
 800954c:	4618      	mov	r0, r3
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <ip_AddrTable_get_cell_value>:

static snmp_err_t
ip_AddrTable_get_cell_value(const u32_t *column, const u32_t *row_oid, u8_t row_oid_len, union snmp_variant_value *value, u32_t *value_len)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b086      	sub	sp, #24
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	603b      	str	r3, [r7, #0]
 8009560:	4613      	mov	r3, r2
 8009562:	71fb      	strb	r3, [r7, #7]
  ip4_addr_t ip;
  struct netif *netif;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, ip_AddrTable_oid_ranges, LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges))) {
 8009564:	79f9      	ldrb	r1, [r7, #7]
 8009566:	2304      	movs	r3, #4
 8009568:	4a15      	ldr	r2, [pc, #84]	; (80095c0 <ip_AddrTable_get_cell_value+0x6c>)
 800956a:	68b8      	ldr	r0, [r7, #8]
 800956c:	f7ff fbb4 	bl	8008cd8 <snmp_oid_in_range>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d101      	bne.n	800957a <ip_AddrTable_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 8009576:	23f1      	movs	r3, #241	; 0xf1
 8009578:	e01e      	b.n	80095b8 <ip_AddrTable_get_cell_value+0x64>
  }

  /* get IP from incoming OID */
  snmp_oid_to_ip4(&row_oid[0], &ip); /* we know it succeeds because of oid_in_range check above */
 800957a:	f107 0310 	add.w	r3, r7, #16
 800957e:	4619      	mov	r1, r3
 8009580:	68b8      	ldr	r0, [r7, #8]
 8009582:	f7fe fc81 	bl	8007e88 <snmp_oid_to_ip4>

  /* find netif with requested ip */
  NETIF_FOREACH(netif) {
 8009586:	4b0f      	ldr	r3, [pc, #60]	; (80095c4 <ip_AddrTable_get_cell_value+0x70>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	617b      	str	r3, [r7, #20]
 800958c:	e010      	b.n	80095b0 <ip_AddrTable_get_cell_value+0x5c>
    if (ip4_addr_cmp(&ip, netif_ip4_addr(netif))) {
 800958e:	693a      	ldr	r2, [r7, #16]
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	3304      	adds	r3, #4
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	429a      	cmp	r2, r3
 8009598:	d107      	bne.n	80095aa <ip_AddrTable_get_cell_value+0x56>
      /* fill in object properties */
      return ip_AddrTable_get_cell_value_core(netif, column, value, value_len);
 800959a:	6a3b      	ldr	r3, [r7, #32]
 800959c:	683a      	ldr	r2, [r7, #0]
 800959e:	68f9      	ldr	r1, [r7, #12]
 80095a0:	6978      	ldr	r0, [r7, #20]
 80095a2:	f7ff ff99 	bl	80094d8 <ip_AddrTable_get_cell_value_core>
 80095a6:	4603      	mov	r3, r0
 80095a8:	e006      	b.n	80095b8 <ip_AddrTable_get_cell_value+0x64>
  NETIF_FOREACH(netif) {
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	617b      	str	r3, [r7, #20]
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d1eb      	bne.n	800958e <ip_AddrTable_get_cell_value+0x3a>
    }
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 80095b6:	23f1      	movs	r3, #241	; 0xf1
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3718      	adds	r7, #24
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	08023868 	.word	0x08023868
 80095c4:	200071f8 	.word	0x200071f8

080095c8 <ip_AddrTable_get_next_cell_instance_and_value>:

static snmp_err_t
ip_AddrTable_get_next_cell_instance_and_value(const u32_t *column, struct snmp_obj_id *row_oid, union snmp_variant_value *value, u32_t *value_len)
{
 80095c8:	b590      	push	{r4, r7, lr}
 80095ca:	b095      	sub	sp, #84	; 0x54
 80095cc:	af02      	add	r7, sp, #8
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
 80095d4:	603b      	str	r3, [r7, #0]
  struct netif *netif;
  struct snmp_next_oid_state state;
  u32_t result_temp[LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges));
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	1d19      	adds	r1, r3, #4
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	781a      	ldrb	r2, [r3, #0]
 80095de:	f107 0320 	add.w	r3, r7, #32
 80095e2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80095e6:	2404      	movs	r4, #4
 80095e8:	9400      	str	r4, [sp, #0]
 80095ea:	f7ff fb0f 	bl	8008c0c <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  NETIF_FOREACH(netif) {
 80095ee:	4b19      	ldr	r3, [pc, #100]	; (8009654 <ip_AddrTable_get_next_cell_instance_and_value+0x8c>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	647b      	str	r3, [r7, #68]	; 0x44
 80095f4:	e012      	b.n	800961c <ip_AddrTable_get_next_cell_instance_and_value+0x54>
    u32_t test_oid[LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges)];
    snmp_ip4_to_oid(netif_ip4_addr(netif), &test_oid[0]);
 80095f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095f8:	3304      	adds	r3, #4
 80095fa:	f107 0210 	add.w	r2, r7, #16
 80095fe:	4611      	mov	r1, r2
 8009600:	4618      	mov	r0, r3
 8009602:	f7fe fcc9 	bl	8007f98 <snmp_ip4_to_oid>

    /* check generated OID: is it a candidate for the next one? */
    snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(ip_AddrTable_oid_ranges), netif);
 8009606:	f107 0110 	add.w	r1, r7, #16
 800960a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800960e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009610:	2204      	movs	r2, #4
 8009612:	f7ff fb1b 	bl	8008c4c <snmp_next_oid_check>
  NETIF_FOREACH(netif) {
 8009616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	647b      	str	r3, [r7, #68]	; 0x44
 800961c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800961e:	2b00      	cmp	r3, #0
 8009620:	d1e9      	bne.n	80095f6 <ip_AddrTable_get_next_cell_instance_and_value+0x2e>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 8009622:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009626:	2b00      	cmp	r3, #0
 8009628:	d10e      	bne.n	8009648 <ip_AddrTable_get_next_cell_instance_and_value+0x80>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 800962a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962c:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8009630:	4619      	mov	r1, r3
 8009632:	68b8      	ldr	r0, [r7, #8]
 8009634:	f7fe fd84 	bl	8008140 <snmp_oid_assign>
    /* fill in object properties */
    return ip_AddrTable_get_cell_value_core((struct netif *)state.reference, column, value, value_len);
 8009638:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	68f9      	ldr	r1, [r7, #12]
 8009640:	f7ff ff4a 	bl	80094d8 <ip_AddrTable_get_cell_value_core>
 8009644:	4603      	mov	r3, r0
 8009646:	e000      	b.n	800964a <ip_AddrTable_get_next_cell_instance_and_value+0x82>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 8009648:	23f1      	movs	r3, #241	; 0xf1
}
 800964a:	4618      	mov	r0, r3
 800964c:	374c      	adds	r7, #76	; 0x4c
 800964e:	46bd      	mov	sp, r7
 8009650:	bd90      	pop	{r4, r7, pc}
 8009652:	bf00      	nop
 8009654:	200071f8 	.word	0x200071f8

08009658 <ip_RouteTable_get_cell_value_core>:
  { 0, 0xff }, /* IP D */
};

static snmp_err_t
ip_RouteTable_get_cell_value_core(struct netif *netif, u8_t default_route, const u32_t *column, union snmp_variant_value *value, u32_t *value_len)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b086      	sub	sp, #24
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	607a      	str	r2, [r7, #4]
 8009662:	603b      	str	r3, [r7, #0]
 8009664:	460b      	mov	r3, r1
 8009666:	72fb      	strb	r3, [r7, #11]
  switch (*column) {
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	3b01      	subs	r3, #1
 800966e:	2b0c      	cmp	r3, #12
 8009670:	f200 8089 	bhi.w	8009786 <ip_RouteTable_get_cell_value_core+0x12e>
 8009674:	a201      	add	r2, pc, #4	; (adr r2, 800967c <ip_RouteTable_get_cell_value_core+0x24>)
 8009676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967a:	bf00      	nop
 800967c:	080096b1 	.word	0x080096b1
 8009680:	080096d9 	.word	0x080096d9
 8009684:	080096e9 	.word	0x080096e9
 8009688:	080096ff 	.word	0x080096ff
 800968c:	080096ff 	.word	0x080096ff
 8009690:	080096ff 	.word	0x080096ff
 8009694:	08009709 	.word	0x08009709
 8009698:	08009727 	.word	0x08009727
 800969c:	0800973d 	.word	0x0800973d
 80096a0:	08009745 	.word	0x08009745
 80096a4:	0800974d 	.word	0x0800974d
 80096a8:	08009769 	.word	0x08009769
 80096ac:	08009773 	.word	0x08009773
    case 1: /* ipRouteDest */
      if (default_route) {
 80096b0:	7afb      	ldrb	r3, [r7, #11]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d004      	beq.n	80096c0 <ip_RouteTable_get_cell_value_core+0x68>
        /* default rte has 0.0.0.0 dest */
        value->u32 = IP4_ADDR_ANY4->addr;
 80096b6:	4b37      	ldr	r3, [pc, #220]	; (8009794 <ip_RouteTable_get_cell_value_core+0x13c>)
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	601a      	str	r2, [r3, #0]
        /* netifs have netaddress dest */
        ip4_addr_t tmp;
        ip4_addr_get_network(&tmp, netif_ip4_addr(netif), netif_ip4_netmask(netif));
        value->u32 = tmp.addr;
      }
      break;
 80096be:	e064      	b.n	800978a <ip_RouteTable_get_cell_value_core+0x132>
        ip4_addr_get_network(&tmp, netif_ip4_addr(netif), netif_ip4_netmask(netif));
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	3304      	adds	r3, #4
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	3308      	adds	r3, #8
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4013      	ands	r3, r2
 80096ce:	617b      	str	r3, [r7, #20]
        value->u32 = tmp.addr;
 80096d0:	697a      	ldr	r2, [r7, #20]
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	601a      	str	r2, [r3, #0]
      break;
 80096d6:	e058      	b.n	800978a <ip_RouteTable_get_cell_value_core+0x132>
    case 2: /* ipRouteIfIndex */
      value->u32 = netif_to_num(netif);
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f7fe fdf5 	bl	80082c8 <netif_to_num>
 80096de:	4603      	mov	r3, r0
 80096e0:	461a      	mov	r2, r3
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	601a      	str	r2, [r3, #0]
      break;
 80096e6:	e050      	b.n	800978a <ip_RouteTable_get_cell_value_core+0x132>
    case 3: /* ipRouteMetric1 */
      if (default_route) {
 80096e8:	7afb      	ldrb	r3, [r7, #11]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d003      	beq.n	80096f6 <ip_RouteTable_get_cell_value_core+0x9e>
        value->s32 = 1; /* default */
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	2201      	movs	r2, #1
 80096f2:	601a      	str	r2, [r3, #0]
      } else {
        value->s32 = 0; /* normal */
      }
      break;
 80096f4:	e049      	b.n	800978a <ip_RouteTable_get_cell_value_core+0x132>
        value->s32 = 0; /* normal */
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	2200      	movs	r2, #0
 80096fa:	601a      	str	r2, [r3, #0]
      break;
 80096fc:	e045      	b.n	800978a <ip_RouteTable_get_cell_value_core+0x132>
    case 4: /* ipRouteMetric2 */
    case 5: /* ipRouteMetric3 */
    case 6: /* ipRouteMetric4 */
      value->s32 = -1; /* none */
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	f04f 32ff 	mov.w	r2, #4294967295
 8009704:	601a      	str	r2, [r3, #0]
      break;
 8009706:	e040      	b.n	800978a <ip_RouteTable_get_cell_value_core+0x132>
    case 7: /* ipRouteNextHop */
      if (default_route) {
 8009708:	7afb      	ldrb	r3, [r7, #11]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d005      	beq.n	800971a <ip_RouteTable_get_cell_value_core+0xc2>
        /* default rte: gateway */
        value->u32 = netif_ip4_gw(netif)->addr;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	330c      	adds	r3, #12
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	601a      	str	r2, [r3, #0]
      } else {
        /* other rtes: netif ip_addr  */
        value->u32 = netif_ip4_addr(netif)->addr;
      }
      break;
 8009718:	e037      	b.n	800978a <ip_RouteTable_get_cell_value_core+0x132>
        value->u32 = netif_ip4_addr(netif)->addr;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	3304      	adds	r3, #4
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	601a      	str	r2, [r3, #0]
      break;
 8009724:	e031      	b.n	800978a <ip_RouteTable_get_cell_value_core+0x132>
    case 8: /* ipRouteType */
      if (default_route) {
 8009726:	7afb      	ldrb	r3, [r7, #11]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d003      	beq.n	8009734 <ip_RouteTable_get_cell_value_core+0xdc>
        /* default rte is indirect */
        value->u32 = 4; /* indirect */
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	2204      	movs	r2, #4
 8009730:	601a      	str	r2, [r3, #0]
      } else {
        /* other rtes are direct */
        value->u32 = 3; /* direct */
      }
      break;
 8009732:	e02a      	b.n	800978a <ip_RouteTable_get_cell_value_core+0x132>
        value->u32 = 3; /* direct */
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	2203      	movs	r2, #3
 8009738:	601a      	str	r2, [r3, #0]
      break;
 800973a:	e026      	b.n	800978a <ip_RouteTable_get_cell_value_core+0x132>
    case 9: /* ipRouteProto */
      /* locally defined routes */
      value->u32 = 2; /* local */
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	2202      	movs	r2, #2
 8009740:	601a      	str	r2, [r3, #0]
      break;
 8009742:	e022      	b.n	800978a <ip_RouteTable_get_cell_value_core+0x132>
    case 10: /* ipRouteAge */
      /* @todo (sysuptime - timestamp last change) / 100 */
      value->u32 = 0;
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	2200      	movs	r2, #0
 8009748:	601a      	str	r2, [r3, #0]
      break;
 800974a:	e01e      	b.n	800978a <ip_RouteTable_get_cell_value_core+0x132>
    case 11: /* ipRouteMask */
      if (default_route) {
 800974c:	7afb      	ldrb	r3, [r7, #11]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d004      	beq.n	800975c <ip_RouteTable_get_cell_value_core+0x104>
        /* default rte use 0.0.0.0 mask */
        value->u32 = IP4_ADDR_ANY4->addr;
 8009752:	4b10      	ldr	r3, [pc, #64]	; (8009794 <ip_RouteTable_get_cell_value_core+0x13c>)
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	601a      	str	r2, [r3, #0]
      } else {
        /* other rtes use netmask */
        value->u32 = netif_ip4_netmask(netif)->addr;
      }
      break;
 800975a:	e016      	b.n	800978a <ip_RouteTable_get_cell_value_core+0x132>
        value->u32 = netif_ip4_netmask(netif)->addr;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	3308      	adds	r3, #8
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	601a      	str	r2, [r3, #0]
      break;
 8009766:	e010      	b.n	800978a <ip_RouteTable_get_cell_value_core+0x132>
    case 12: /* ipRouteMetric5 */
      value->s32 = -1; /* none */
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	f04f 32ff 	mov.w	r2, #4294967295
 800976e:	601a      	str	r2, [r3, #0]
      break;
 8009770:	e00b      	b.n	800978a <ip_RouteTable_get_cell_value_core+0x132>
    case 13: /* ipRouteInfo */
      value->const_ptr = snmp_zero_dot_zero.id;
 8009772:	4b09      	ldr	r3, [pc, #36]	; (8009798 <ip_RouteTable_get_cell_value_core+0x140>)
 8009774:	685a      	ldr	r2, [r3, #4]
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	601a      	str	r2, [r3, #0]
      *value_len = snmp_zero_dot_zero.len * sizeof(u32_t);
 800977a:	4b07      	ldr	r3, [pc, #28]	; (8009798 <ip_RouteTable_get_cell_value_core+0x140>)
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	009a      	lsls	r2, r3, #2
 8009780:	6a3b      	ldr	r3, [r7, #32]
 8009782:	601a      	str	r2, [r3, #0]
      break;
 8009784:	e001      	b.n	800978a <ip_RouteTable_get_cell_value_core+0x132>
    default:
      return SNMP_ERR_NOSUCHINSTANCE;
 8009786:	23f1      	movs	r3, #241	; 0xf1
 8009788:	e000      	b.n	800978c <ip_RouteTable_get_cell_value_core+0x134>
  }

  return SNMP_ERR_NOERROR;
 800978a:	2300      	movs	r3, #0
}
 800978c:	4618      	mov	r0, r3
 800978e:	3718      	adds	r7, #24
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	08024538 	.word	0x08024538
 8009798:	080235f8 	.word	0x080235f8

0800979c <ip_RouteTable_get_cell_value>:

static snmp_err_t
ip_RouteTable_get_cell_value(const u32_t *column, const u32_t *row_oid, u8_t row_oid_len, union snmp_variant_value *value, u32_t *value_len)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b08a      	sub	sp, #40	; 0x28
 80097a0:	af02      	add	r7, sp, #8
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	603b      	str	r3, [r7, #0]
 80097a8:	4613      	mov	r3, r2
 80097aa:	71fb      	strb	r3, [r7, #7]
  ip4_addr_t test_ip;
  struct netif *netif;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, ip_RouteTable_oid_ranges, LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges))) {
 80097ac:	79f9      	ldrb	r1, [r7, #7]
 80097ae:	2304      	movs	r3, #4
 80097b0:	4a22      	ldr	r2, [pc, #136]	; (800983c <ip_RouteTable_get_cell_value+0xa0>)
 80097b2:	68b8      	ldr	r0, [r7, #8]
 80097b4:	f7ff fa90 	bl	8008cd8 <snmp_oid_in_range>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d101      	bne.n	80097c2 <ip_RouteTable_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 80097be:	23f1      	movs	r3, #241	; 0xf1
 80097c0:	e038      	b.n	8009834 <ip_RouteTable_get_cell_value+0x98>
  }

  /* get IP and port from incoming OID */
  snmp_oid_to_ip4(&row_oid[0], &test_ip); /* we know it succeeds because of oid_in_range check above */
 80097c2:	f107 0318 	add.w	r3, r7, #24
 80097c6:	4619      	mov	r1, r3
 80097c8:	68b8      	ldr	r0, [r7, #8]
 80097ca:	f7fe fb5d 	bl	8007e88 <snmp_oid_to_ip4>

  /* default route is on default netif */
  if (ip4_addr_isany_val(test_ip) && (netif_default != NULL)) {
 80097ce:	69bb      	ldr	r3, [r7, #24]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10e      	bne.n	80097f2 <ip_RouteTable_get_cell_value+0x56>
 80097d4:	4b1a      	ldr	r3, [pc, #104]	; (8009840 <ip_RouteTable_get_cell_value+0xa4>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00a      	beq.n	80097f2 <ip_RouteTable_get_cell_value+0x56>
    /* fill in object properties */
    return ip_RouteTable_get_cell_value_core(netif_default, 1, column, value, value_len);
 80097dc:	4b18      	ldr	r3, [pc, #96]	; (8009840 <ip_RouteTable_get_cell_value+0xa4>)
 80097de:	6818      	ldr	r0, [r3, #0]
 80097e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e2:	9300      	str	r3, [sp, #0]
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	2101      	movs	r1, #1
 80097ea:	f7ff ff35 	bl	8009658 <ip_RouteTable_get_cell_value_core>
 80097ee:	4603      	mov	r3, r0
 80097f0:	e020      	b.n	8009834 <ip_RouteTable_get_cell_value+0x98>
  }

  /* find netif with requested route */
  NETIF_FOREACH(netif) {
 80097f2:	4b14      	ldr	r3, [pc, #80]	; (8009844 <ip_RouteTable_get_cell_value+0xa8>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	61fb      	str	r3, [r7, #28]
 80097f8:	e018      	b.n	800982c <ip_RouteTable_get_cell_value+0x90>
    ip4_addr_t dst;
    ip4_addr_get_network(&dst, netif_ip4_addr(netif), netif_ip4_netmask(netif));
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	3304      	adds	r3, #4
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	3308      	adds	r3, #8
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4013      	ands	r3, r2
 8009808:	617b      	str	r3, [r7, #20]

    if (ip4_addr_cmp(&dst, &test_ip)) {
 800980a:	697a      	ldr	r2, [r7, #20]
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	429a      	cmp	r2, r3
 8009810:	d109      	bne.n	8009826 <ip_RouteTable_get_cell_value+0x8a>
      /* fill in object properties */
      return ip_RouteTable_get_cell_value_core(netif, 0, column, value, value_len);
 8009812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009814:	9300      	str	r3, [sp, #0]
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	2100      	movs	r1, #0
 800981c:	69f8      	ldr	r0, [r7, #28]
 800981e:	f7ff ff1b 	bl	8009658 <ip_RouteTable_get_cell_value_core>
 8009822:	4603      	mov	r3, r0
 8009824:	e006      	b.n	8009834 <ip_RouteTable_get_cell_value+0x98>
  NETIF_FOREACH(netif) {
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	61fb      	str	r3, [r7, #28]
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1e3      	bne.n	80097fa <ip_RouteTable_get_cell_value+0x5e>
    }
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 8009832:	23f1      	movs	r3, #241	; 0xf1
}
 8009834:	4618      	mov	r0, r3
 8009836:	3720      	adds	r7, #32
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}
 800983c:	08023888 	.word	0x08023888
 8009840:	200071fc 	.word	0x200071fc
 8009844:	200071f8 	.word	0x200071f8

08009848 <ip_RouteTable_get_next_cell_instance_and_value>:

static snmp_err_t
ip_RouteTable_get_next_cell_instance_and_value(const u32_t *column, struct snmp_obj_id *row_oid, union snmp_variant_value *value, u32_t *value_len)
{
 8009848:	b590      	push	{r4, r7, lr}
 800984a:	b097      	sub	sp, #92	; 0x5c
 800984c:	af02      	add	r7, sp, #8
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	607a      	str	r2, [r7, #4]
 8009854:	603b      	str	r3, [r7, #0]
  struct snmp_next_oid_state state;
  u32_t result_temp[LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges)];
  u32_t test_oid[LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges));
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	1d19      	adds	r1, r3, #4
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	781a      	ldrb	r2, [r3, #0]
 800985e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009862:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8009866:	2404      	movs	r4, #4
 8009868:	9400      	str	r4, [sp, #0]
 800986a:	f7ff f9cf 	bl	8008c0c <snmp_next_oid_init>

  /* check default route */
  if (netif_default != NULL) {
 800986e:	4b30      	ldr	r3, [pc, #192]	; (8009930 <ip_RouteTable_get_next_cell_instance_and_value+0xe8>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00e      	beq.n	8009894 <ip_RouteTable_get_next_cell_instance_and_value+0x4c>
    snmp_ip4_to_oid(IP4_ADDR_ANY4, &test_oid[0]);
 8009876:	f107 0318 	add.w	r3, r7, #24
 800987a:	4619      	mov	r1, r3
 800987c:	482d      	ldr	r0, [pc, #180]	; (8009934 <ip_RouteTable_get_next_cell_instance_and_value+0xec>)
 800987e:	f7fe fb8b 	bl	8007f98 <snmp_ip4_to_oid>
    snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges), netif_default);
 8009882:	4b2b      	ldr	r3, [pc, #172]	; (8009930 <ip_RouteTable_get_next_cell_instance_and_value+0xe8>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f107 0118 	add.w	r1, r7, #24
 800988a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800988e:	2204      	movs	r2, #4
 8009890:	f7ff f9dc 	bl	8008c4c <snmp_next_oid_check>
  }

  /* iterate over all possible OIDs to find the next one */
  NETIF_FOREACH(netif) {
 8009894:	4b28      	ldr	r3, [pc, #160]	; (8009938 <ip_RouteTable_get_next_cell_instance_and_value+0xf0>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	64fb      	str	r3, [r7, #76]	; 0x4c
 800989a:	e01d      	b.n	80098d8 <ip_RouteTable_get_next_cell_instance_and_value+0x90>
    ip4_addr_t dst;
    ip4_addr_get_network(&dst, netif_ip4_addr(netif), netif_ip4_netmask(netif));
 800989c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800989e:	3304      	adds	r3, #4
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098a4:	3308      	adds	r3, #8
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4013      	ands	r3, r2
 80098aa:	617b      	str	r3, [r7, #20]

    /* check generated OID: is it a candidate for the next one? */
    if (!ip4_addr_isany_val(dst)) {
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00f      	beq.n	80098d2 <ip_RouteTable_get_next_cell_instance_and_value+0x8a>
      snmp_ip4_to_oid(&dst, &test_oid[0]);
 80098b2:	f107 0218 	add.w	r2, r7, #24
 80098b6:	f107 0314 	add.w	r3, r7, #20
 80098ba:	4611      	mov	r1, r2
 80098bc:	4618      	mov	r0, r3
 80098be:	f7fe fb6b 	bl	8007f98 <snmp_ip4_to_oid>
      snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(ip_RouteTable_oid_ranges), netif);
 80098c2:	f107 0118 	add.w	r1, r7, #24
 80098c6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80098ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098cc:	2204      	movs	r2, #4
 80098ce:	f7ff f9bd 	bl	8008c4c <snmp_next_oid_check>
  NETIF_FOREACH(netif) {
 80098d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1de      	bne.n	800989c <ip_RouteTable_get_next_cell_instance_and_value+0x54>
    }
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 80098de:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d11e      	bne.n	8009924 <ip_RouteTable_get_next_cell_instance_and_value+0xdc>
    ip4_addr_t dst;
    snmp_oid_to_ip4(&result_temp[0], &dst);
 80098e6:	f107 0210 	add.w	r2, r7, #16
 80098ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80098ee:	4611      	mov	r1, r2
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7fe fac9 	bl	8007e88 <snmp_oid_to_ip4>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 80098f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098f8:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80098fc:	4619      	mov	r1, r3
 80098fe:	68b8      	ldr	r0, [r7, #8]
 8009900:	f7fe fc1e 	bl	8008140 <snmp_oid_assign>
    /* fill in object properties */
    return ip_RouteTable_get_cell_value_core((struct netif *)state.reference, ip4_addr_isany_val(dst), column, value, value_len);
 8009904:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	2b00      	cmp	r3, #0
 800990a:	bf0c      	ite	eq
 800990c:	2301      	moveq	r3, #1
 800990e:	2300      	movne	r3, #0
 8009910:	b2db      	uxtb	r3, r3
 8009912:	4619      	mov	r1, r3
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	9300      	str	r3, [sp, #0]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	f7ff fe9c 	bl	8009658 <ip_RouteTable_get_cell_value_core>
 8009920:	4603      	mov	r3, r0
 8009922:	e000      	b.n	8009926 <ip_RouteTable_get_next_cell_instance_and_value+0xde>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 8009924:	23f1      	movs	r3, #241	; 0xf1
  }
}
 8009926:	4618      	mov	r0, r3
 8009928:	3754      	adds	r7, #84	; 0x54
 800992a:	46bd      	mov	sp, r7
 800992c:	bd90      	pop	{r4, r7, pc}
 800992e:	bf00      	nop
 8009930:	200071fc 	.word	0x200071fc
 8009934:	08024538 	.word	0x08024538
 8009938:	200071f8 	.word	0x200071f8

0800993c <ip_NetToMediaTable_get_cell_value_core>:
  { 0, 0xff }  /* IP D    */
};

static snmp_err_t
ip_NetToMediaTable_get_cell_value_core(size_t arp_table_index, const u32_t *column, union snmp_variant_value *value, u32_t *value_len)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b088      	sub	sp, #32
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	607a      	str	r2, [r7, #4]
 8009948:	603b      	str	r3, [r7, #0]
  ip4_addr_t *ip;
  struct netif *netif;
  struct eth_addr *ethaddr;

  etharp_get_entry(arp_table_index, &ip, &netif, &ethaddr);
 800994a:	f107 0314 	add.w	r3, r7, #20
 800994e:	f107 0218 	add.w	r2, r7, #24
 8009952:	f107 011c 	add.w	r1, r7, #28
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	f00f fb48 	bl	8018fec <etharp_get_entry>

  /* value */
  switch (*column) {
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	3b01      	subs	r3, #1
 8009962:	2b03      	cmp	r3, #3
 8009964:	d823      	bhi.n	80099ae <ip_NetToMediaTable_get_cell_value_core+0x72>
 8009966:	a201      	add	r2, pc, #4	; (adr r2, 800996c <ip_NetToMediaTable_get_cell_value_core+0x30>)
 8009968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800996c:	0800997d 	.word	0x0800997d
 8009970:	0800998f 	.word	0x0800998f
 8009974:	0800999d 	.word	0x0800999d
 8009978:	080099a7 	.word	0x080099a7
    case 1: /* atIfIndex / ipNetToMediaIfIndex */
      value->u32 = netif_to_num(netif);
 800997c:	69bb      	ldr	r3, [r7, #24]
 800997e:	4618      	mov	r0, r3
 8009980:	f7fe fca2 	bl	80082c8 <netif_to_num>
 8009984:	4603      	mov	r3, r0
 8009986:	461a      	mov	r2, r3
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	601a      	str	r2, [r3, #0]
      break;
 800998c:	e011      	b.n	80099b2 <ip_NetToMediaTable_get_cell_value_core+0x76>
    case 2: /* atPhysAddress / ipNetToMediaPhysAddress */
      value->ptr = ethaddr;
 800998e:	697a      	ldr	r2, [r7, #20]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	601a      	str	r2, [r3, #0]
      *value_len = sizeof(*ethaddr);
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	2206      	movs	r2, #6
 8009998:	601a      	str	r2, [r3, #0]
      break;
 800999a:	e00a      	b.n	80099b2 <ip_NetToMediaTable_get_cell_value_core+0x76>
    case 3: /* atNetAddress / ipNetToMediaNetAddress */
      value->u32 = ip->addr;
 800999c:	69fb      	ldr	r3, [r7, #28]
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	601a      	str	r2, [r3, #0]
      break;
 80099a4:	e005      	b.n	80099b2 <ip_NetToMediaTable_get_cell_value_core+0x76>
    case 4: /* ipNetToMediaType */
      value->u32 = 3; /* dynamic*/
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2203      	movs	r2, #3
 80099aa:	601a      	str	r2, [r3, #0]
      break;
 80099ac:	e001      	b.n	80099b2 <ip_NetToMediaTable_get_cell_value_core+0x76>
    default:
      return SNMP_ERR_NOSUCHINSTANCE;
 80099ae:	23f1      	movs	r3, #241	; 0xf1
 80099b0:	e000      	b.n	80099b4 <ip_NetToMediaTable_get_cell_value_core+0x78>
  }

  return SNMP_ERR_NOERROR;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3720      	adds	r7, #32
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <ip_NetToMediaTable_get_cell_value>:

static snmp_err_t
ip_NetToMediaTable_get_cell_value(const u32_t *column, const u32_t *row_oid, u8_t row_oid_len, union snmp_variant_value *value, u32_t *value_len)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b08a      	sub	sp, #40	; 0x28
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	603b      	str	r3, [r7, #0]
 80099c8:	4613      	mov	r3, r2
 80099ca:	71fb      	strb	r3, [r7, #7]
  ip4_addr_t ip_in;
  u8_t netif_index;
  size_t i;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, ip_NetToMediaTable_oid_ranges, LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges))) {
 80099cc:	79f9      	ldrb	r1, [r7, #7]
 80099ce:	2305      	movs	r3, #5
 80099d0:	4a22      	ldr	r2, [pc, #136]	; (8009a5c <ip_NetToMediaTable_get_cell_value+0xa0>)
 80099d2:	68b8      	ldr	r0, [r7, #8]
 80099d4:	f7ff f980 	bl	8008cd8 <snmp_oid_in_range>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d101      	bne.n	80099e2 <ip_NetToMediaTable_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 80099de:	23f1      	movs	r3, #241	; 0xf1
 80099e0:	e038      	b.n	8009a54 <ip_NetToMediaTable_get_cell_value+0x98>
  }

  /* get IP from incoming OID */
  netif_index = (u8_t)row_oid[0];
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  snmp_oid_to_ip4(&row_oid[1], &ip_in); /* we know it succeeds because of oid_in_range check above */
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	3304      	adds	r3, #4
 80099ee:	f107 021c 	add.w	r2, r7, #28
 80099f2:	4611      	mov	r1, r2
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7fe fa47 	bl	8007e88 <snmp_oid_to_ip4>

  /* find requested entry */
  for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80099fa:	2300      	movs	r3, #0
 80099fc:	627b      	str	r3, [r7, #36]	; 0x24
 80099fe:	e025      	b.n	8009a4c <ip_NetToMediaTable_get_cell_value+0x90>
    ip4_addr_t *ip;
    struct netif *netif;
    struct eth_addr *ethaddr;

    if (etharp_get_entry(i, &ip, &netif, &ethaddr)) {
 8009a00:	f107 0310 	add.w	r3, r7, #16
 8009a04:	f107 0214 	add.w	r2, r7, #20
 8009a08:	f107 0118 	add.w	r1, r7, #24
 8009a0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a0e:	f00f faed 	bl	8018fec <etharp_get_entry>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d016      	beq.n	8009a46 <ip_NetToMediaTable_get_cell_value+0x8a>
      if ((netif_index == netif_to_num(netif)) && ip4_addr_cmp(&ip_in, ip)) {
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7fe fc54 	bl	80082c8 <netif_to_num>
 8009a20:	4603      	mov	r3, r0
 8009a22:	461a      	mov	r2, r3
 8009a24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d10c      	bne.n	8009a46 <ip_NetToMediaTable_get_cell_value+0x8a>
 8009a2c:	69fa      	ldr	r2, [r7, #28]
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d107      	bne.n	8009a46 <ip_NetToMediaTable_get_cell_value+0x8a>
        /* fill in object properties */
        return ip_NetToMediaTable_get_cell_value_core(i, column, value, value_len);
 8009a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a38:	683a      	ldr	r2, [r7, #0]
 8009a3a:	68f9      	ldr	r1, [r7, #12]
 8009a3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a3e:	f7ff ff7d 	bl	800993c <ip_NetToMediaTable_get_cell_value_core>
 8009a42:	4603      	mov	r3, r0
 8009a44:	e006      	b.n	8009a54 <ip_NetToMediaTable_get_cell_value+0x98>
  for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8009a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a48:	3301      	adds	r3, #1
 8009a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8009a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4e:	2b09      	cmp	r3, #9
 8009a50:	d9d6      	bls.n	8009a00 <ip_NetToMediaTable_get_cell_value+0x44>
      }
    }
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 8009a52:	23f1      	movs	r3, #241	; 0xf1
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3728      	adds	r7, #40	; 0x28
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	080238a8 	.word	0x080238a8

08009a60 <ip_NetToMediaTable_get_next_cell_instance_and_value>:

static snmp_err_t
ip_NetToMediaTable_get_next_cell_instance_and_value(const u32_t *column, struct snmp_obj_id *row_oid, union snmp_variant_value *value, u32_t *value_len)
{
 8009a60:	b590      	push	{r4, r7, lr}
 8009a62:	b09b      	sub	sp, #108	; 0x6c
 8009a64:	af02      	add	r7, sp, #8
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	607a      	str	r2, [r7, #4]
 8009a6c:	603b      	str	r3, [r7, #0]
  size_t i;
  struct snmp_next_oid_state state;
  u32_t result_temp[LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges));
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	1d19      	adds	r1, r3, #4
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	781a      	ldrb	r2, [r3, #0]
 8009a76:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009a7a:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8009a7e:	2405      	movs	r4, #5
 8009a80:	9400      	str	r4, [sp, #0]
 8009a82:	f7ff f8c3 	bl	8008c0c <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8009a86:	2300      	movs	r3, #0
 8009a88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a8a:	e024      	b.n	8009ad6 <ip_NetToMediaTable_get_next_cell_instance_and_value+0x76>
    ip4_addr_t *ip;
    struct netif *netif;
    struct eth_addr *ethaddr;

    if (etharp_get_entry(i, &ip, &netif, &ethaddr)) {
 8009a8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a90:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8009a94:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8009a98:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009a9a:	f00f faa7 	bl	8018fec <etharp_get_entry>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d015      	beq.n	8009ad0 <ip_NetToMediaTable_get_next_cell_instance_and_value+0x70>
      u32_t test_oid[LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges)];

      test_oid[0] = netif_to_num(netif);
 8009aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7fe fc0e 	bl	80082c8 <netif_to_num>
 8009aac:	4603      	mov	r3, r0
 8009aae:	617b      	str	r3, [r7, #20]
      snmp_ip4_to_oid(ip, &test_oid[1]);
 8009ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ab2:	f107 0314 	add.w	r3, r7, #20
 8009ab6:	3304      	adds	r3, #4
 8009ab8:	4619      	mov	r1, r3
 8009aba:	4610      	mov	r0, r2
 8009abc:	f7fe fa6c 	bl	8007f98 <snmp_ip4_to_oid>

      /* check generated OID: is it a candidate for the next one? */
      snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(ip_NetToMediaTable_oid_ranges), LWIP_PTR_NUMERIC_CAST(void *, i));
 8009ac0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ac2:	f107 0114 	add.w	r1, r7, #20
 8009ac6:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8009aca:	2205      	movs	r2, #5
 8009acc:	f7ff f8be 	bl	8008c4c <snmp_next_oid_check>
  for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8009ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ad8:	2b09      	cmp	r3, #9
 8009ada:	d9d7      	bls.n	8009a8c <ip_NetToMediaTable_get_next_cell_instance_and_value+0x2c>
    }
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 8009adc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d10f      	bne.n	8009b04 <ip_NetToMediaTable_get_next_cell_instance_and_value+0xa4>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 8009ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ae6:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8009aea:	4619      	mov	r1, r3
 8009aec:	68b8      	ldr	r0, [r7, #8]
 8009aee:	f7fe fb27 	bl	8008140 <snmp_oid_assign>
    /* fill in object properties */
    return ip_NetToMediaTable_get_cell_value_core(LWIP_PTR_NUMERIC_CAST(size_t, state.reference), column, value, value_len);
 8009af2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009af4:	4618      	mov	r0, r3
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	68f9      	ldr	r1, [r7, #12]
 8009afc:	f7ff ff1e 	bl	800993c <ip_NetToMediaTable_get_cell_value_core>
 8009b00:	4603      	mov	r3, r0
 8009b02:	e000      	b.n	8009b06 <ip_NetToMediaTable_get_next_cell_instance_and_value+0xa6>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 8009b04:	23f1      	movs	r3, #241	; 0xf1
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3764      	adds	r7, #100	; 0x64
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd90      	pop	{r4, r7, pc}
	...

08009b10 <snmp_get_value>:
#define MIB2_AUTH_TRAPS_DISABLED 2

/* --- snmp .1.3.6.1.2.1.11 ----------------------------------------------------- */
static s16_t
snmp_get_value(const struct snmp_scalar_array_node_def *node, void *value)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
  u32_t *uint_ptr = (u32_t *)value;
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	60fb      	str	r3, [r7, #12]
  switch (node->oid) {
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	3b01      	subs	r3, #1
 8009b24:	2b1f      	cmp	r3, #31
 8009b26:	f200 80df 	bhi.w	8009ce8 <snmp_get_value+0x1d8>
 8009b2a:	a201      	add	r2, pc, #4	; (adr r2, 8009b30 <snmp_get_value+0x20>)
 8009b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b30:	08009bb1 	.word	0x08009bb1
 8009b34:	08009bbb 	.word	0x08009bbb
 8009b38:	08009bc5 	.word	0x08009bc5
 8009b3c:	08009bcf 	.word	0x08009bcf
 8009b40:	08009bd9 	.word	0x08009bd9
 8009b44:	08009be3 	.word	0x08009be3
 8009b48:	08009ce9 	.word	0x08009ce9
 8009b4c:	08009bed 	.word	0x08009bed
 8009b50:	08009bf7 	.word	0x08009bf7
 8009b54:	08009c01 	.word	0x08009c01
 8009b58:	08009c0b 	.word	0x08009c0b
 8009b5c:	08009c15 	.word	0x08009c15
 8009b60:	08009c1f 	.word	0x08009c1f
 8009b64:	08009c29 	.word	0x08009c29
 8009b68:	08009c33 	.word	0x08009c33
 8009b6c:	08009c3d 	.word	0x08009c3d
 8009b70:	08009c47 	.word	0x08009c47
 8009b74:	08009c51 	.word	0x08009c51
 8009b78:	08009c5b 	.word	0x08009c5b
 8009b7c:	08009c65 	.word	0x08009c65
 8009b80:	08009c6f 	.word	0x08009c6f
 8009b84:	08009c79 	.word	0x08009c79
 8009b88:	08009ce9 	.word	0x08009ce9
 8009b8c:	08009c83 	.word	0x08009c83
 8009b90:	08009c8d 	.word	0x08009c8d
 8009b94:	08009c97 	.word	0x08009c97
 8009b98:	08009ca1 	.word	0x08009ca1
 8009b9c:	08009cab 	.word	0x08009cab
 8009ba0:	08009cb5 	.word	0x08009cb5
 8009ba4:	08009cbf 	.word	0x08009cbf
 8009ba8:	08009cd9 	.word	0x08009cd9
 8009bac:	08009ce1 	.word	0x08009ce1
    case 1: /* snmpInPkts */
      *uint_ptr = snmp_stats.inpkts;
 8009bb0:	4b51      	ldr	r3, [pc, #324]	; (8009cf8 <snmp_get_value+0x1e8>)
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	601a      	str	r2, [r3, #0]
      break;
 8009bb8:	e098      	b.n	8009cec <snmp_get_value+0x1dc>
    case 2: /* snmpOutPkts */
      *uint_ptr = snmp_stats.outpkts;
 8009bba:	4b4f      	ldr	r3, [pc, #316]	; (8009cf8 <snmp_get_value+0x1e8>)
 8009bbc:	685a      	ldr	r2, [r3, #4]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	601a      	str	r2, [r3, #0]
      break;
 8009bc2:	e093      	b.n	8009cec <snmp_get_value+0x1dc>
    case 3: /* snmpInBadVersions */
      *uint_ptr = snmp_stats.inbadversions;
 8009bc4:	4b4c      	ldr	r3, [pc, #304]	; (8009cf8 <snmp_get_value+0x1e8>)
 8009bc6:	689a      	ldr	r2, [r3, #8]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	601a      	str	r2, [r3, #0]
      break;
 8009bcc:	e08e      	b.n	8009cec <snmp_get_value+0x1dc>
    case 4: /* snmpInBadCommunityNames */
      *uint_ptr = snmp_stats.inbadcommunitynames;
 8009bce:	4b4a      	ldr	r3, [pc, #296]	; (8009cf8 <snmp_get_value+0x1e8>)
 8009bd0:	68da      	ldr	r2, [r3, #12]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	601a      	str	r2, [r3, #0]
      break;
 8009bd6:	e089      	b.n	8009cec <snmp_get_value+0x1dc>
    case 5: /* snmpInBadCommunityUses */
      *uint_ptr = snmp_stats.inbadcommunityuses;
 8009bd8:	4b47      	ldr	r3, [pc, #284]	; (8009cf8 <snmp_get_value+0x1e8>)
 8009bda:	691a      	ldr	r2, [r3, #16]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	601a      	str	r2, [r3, #0]
      break;
 8009be0:	e084      	b.n	8009cec <snmp_get_value+0x1dc>
    case 6: /* snmpInASNParseErrs */
      *uint_ptr = snmp_stats.inasnparseerrs;
 8009be2:	4b45      	ldr	r3, [pc, #276]	; (8009cf8 <snmp_get_value+0x1e8>)
 8009be4:	695a      	ldr	r2, [r3, #20]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	601a      	str	r2, [r3, #0]
      break;
 8009bea:	e07f      	b.n	8009cec <snmp_get_value+0x1dc>
    case 8: /* snmpInTooBigs */
      *uint_ptr = snmp_stats.intoobigs;
 8009bec:	4b42      	ldr	r3, [pc, #264]	; (8009cf8 <snmp_get_value+0x1e8>)
 8009bee:	699a      	ldr	r2, [r3, #24]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	601a      	str	r2, [r3, #0]
      break;
 8009bf4:	e07a      	b.n	8009cec <snmp_get_value+0x1dc>
    case 9: /* snmpInNoSuchNames */
      *uint_ptr = snmp_stats.innosuchnames;
 8009bf6:	4b40      	ldr	r3, [pc, #256]	; (8009cf8 <snmp_get_value+0x1e8>)
 8009bf8:	69da      	ldr	r2, [r3, #28]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	601a      	str	r2, [r3, #0]
      break;
 8009bfe:	e075      	b.n	8009cec <snmp_get_value+0x1dc>
    case 10: /* snmpInBadValues */
      *uint_ptr = snmp_stats.inbadvalues;
 8009c00:	4b3d      	ldr	r3, [pc, #244]	; (8009cf8 <snmp_get_value+0x1e8>)
 8009c02:	6a1a      	ldr	r2, [r3, #32]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	601a      	str	r2, [r3, #0]
      break;
 8009c08:	e070      	b.n	8009cec <snmp_get_value+0x1dc>
    case 11: /* snmpInReadOnlys */
      *uint_ptr = snmp_stats.inreadonlys;
 8009c0a:	4b3b      	ldr	r3, [pc, #236]	; (8009cf8 <snmp_get_value+0x1e8>)
 8009c0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	601a      	str	r2, [r3, #0]
      break;
 8009c12:	e06b      	b.n	8009cec <snmp_get_value+0x1dc>
    case 12: /* snmpInGenErrs */
      *uint_ptr = snmp_stats.ingenerrs;
 8009c14:	4b38      	ldr	r3, [pc, #224]	; (8009cf8 <snmp_get_value+0x1e8>)
 8009c16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	601a      	str	r2, [r3, #0]
      break;
 8009c1c:	e066      	b.n	8009cec <snmp_get_value+0x1dc>
    case 13: /* snmpInTotalReqVars */
      *uint_ptr = snmp_stats.intotalreqvars;
 8009c1e:	4b36      	ldr	r3, [pc, #216]	; (8009cf8 <snmp_get_value+0x1e8>)
 8009c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	601a      	str	r2, [r3, #0]
      break;
 8009c26:	e061      	b.n	8009cec <snmp_get_value+0x1dc>
    case 14: /* snmpInTotalSetVars */
      *uint_ptr = snmp_stats.intotalsetvars;
 8009c28:	4b33      	ldr	r3, [pc, #204]	; (8009cf8 <snmp_get_value+0x1e8>)
 8009c2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	601a      	str	r2, [r3, #0]
      break;
 8009c30:	e05c      	b.n	8009cec <snmp_get_value+0x1dc>
    case 15: /* snmpInGetRequests */
      *uint_ptr = snmp_stats.ingetrequests;
 8009c32:	4b31      	ldr	r3, [pc, #196]	; (8009cf8 <snmp_get_value+0x1e8>)
 8009c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	601a      	str	r2, [r3, #0]
      break;
 8009c3a:	e057      	b.n	8009cec <snmp_get_value+0x1dc>
    case 16: /* snmpInGetNexts */
      *uint_ptr = snmp_stats.ingetnexts;
 8009c3c:	4b2e      	ldr	r3, [pc, #184]	; (8009cf8 <snmp_get_value+0x1e8>)
 8009c3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	601a      	str	r2, [r3, #0]
      break;
 8009c44:	e052      	b.n	8009cec <snmp_get_value+0x1dc>
    case 17: /* snmpInSetRequests */
      *uint_ptr = snmp_stats.insetrequests;
 8009c46:	4b2c      	ldr	r3, [pc, #176]	; (8009cf8 <snmp_get_value+0x1e8>)
 8009c48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	601a      	str	r2, [r3, #0]
      break;
 8009c4e:	e04d      	b.n	8009cec <snmp_get_value+0x1dc>
    case 18: /* snmpInGetResponses */
      *uint_ptr = snmp_stats.ingetresponses;
 8009c50:	4b29      	ldr	r3, [pc, #164]	; (8009cf8 <snmp_get_value+0x1e8>)
 8009c52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	601a      	str	r2, [r3, #0]
      break;
 8009c58:	e048      	b.n	8009cec <snmp_get_value+0x1dc>
    case 19: /* snmpInTraps */
      *uint_ptr = snmp_stats.intraps;
 8009c5a:	4b27      	ldr	r3, [pc, #156]	; (8009cf8 <snmp_get_value+0x1e8>)
 8009c5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	601a      	str	r2, [r3, #0]
      break;
 8009c62:	e043      	b.n	8009cec <snmp_get_value+0x1dc>
    case 20: /* snmpOutTooBigs */
      *uint_ptr = snmp_stats.outtoobigs;
 8009c64:	4b24      	ldr	r3, [pc, #144]	; (8009cf8 <snmp_get_value+0x1e8>)
 8009c66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	601a      	str	r2, [r3, #0]
      break;
 8009c6c:	e03e      	b.n	8009cec <snmp_get_value+0x1dc>
    case 21: /* snmpOutNoSuchNames */
      *uint_ptr = snmp_stats.outnosuchnames;
 8009c6e:	4b22      	ldr	r3, [pc, #136]	; (8009cf8 <snmp_get_value+0x1e8>)
 8009c70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	601a      	str	r2, [r3, #0]
      break;
 8009c76:	e039      	b.n	8009cec <snmp_get_value+0x1dc>
    case 22: /* snmpOutBadValues */
      *uint_ptr = snmp_stats.outbadvalues;
 8009c78:	4b1f      	ldr	r3, [pc, #124]	; (8009cf8 <snmp_get_value+0x1e8>)
 8009c7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	601a      	str	r2, [r3, #0]
      break;
 8009c80:	e034      	b.n	8009cec <snmp_get_value+0x1dc>
    case 24: /* snmpOutGenErrs */
      *uint_ptr = snmp_stats.outgenerrs;
 8009c82:	4b1d      	ldr	r3, [pc, #116]	; (8009cf8 <snmp_get_value+0x1e8>)
 8009c84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	601a      	str	r2, [r3, #0]
      break;
 8009c8a:	e02f      	b.n	8009cec <snmp_get_value+0x1dc>
    case 25: /* snmpOutGetRequests */
      *uint_ptr = snmp_stats.outgetrequests;
 8009c8c:	4b1a      	ldr	r3, [pc, #104]	; (8009cf8 <snmp_get_value+0x1e8>)
 8009c8e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	601a      	str	r2, [r3, #0]
      break;
 8009c94:	e02a      	b.n	8009cec <snmp_get_value+0x1dc>
    case 26: /* snmpOutGetNexts */
      *uint_ptr = snmp_stats.outgetnexts;
 8009c96:	4b18      	ldr	r3, [pc, #96]	; (8009cf8 <snmp_get_value+0x1e8>)
 8009c98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	601a      	str	r2, [r3, #0]
      break;
 8009c9e:	e025      	b.n	8009cec <snmp_get_value+0x1dc>
    case 27: /* snmpOutSetRequests */
      *uint_ptr = snmp_stats.outsetrequests;
 8009ca0:	4b15      	ldr	r3, [pc, #84]	; (8009cf8 <snmp_get_value+0x1e8>)
 8009ca2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	601a      	str	r2, [r3, #0]
      break;
 8009ca8:	e020      	b.n	8009cec <snmp_get_value+0x1dc>
    case 28: /* snmpOutGetResponses */
      *uint_ptr = snmp_stats.outgetresponses;
 8009caa:	4b13      	ldr	r3, [pc, #76]	; (8009cf8 <snmp_get_value+0x1e8>)
 8009cac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	601a      	str	r2, [r3, #0]
      break;
 8009cb2:	e01b      	b.n	8009cec <snmp_get_value+0x1dc>
    case 29: /* snmpOutTraps */
      *uint_ptr = snmp_stats.outtraps;
 8009cb4:	4b10      	ldr	r3, [pc, #64]	; (8009cf8 <snmp_get_value+0x1e8>)
 8009cb6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	601a      	str	r2, [r3, #0]
      break;
 8009cbc:	e016      	b.n	8009cec <snmp_get_value+0x1dc>
    case 30: /* snmpEnableAuthenTraps */
      if (snmp_get_auth_traps_enabled() == SNMP_AUTH_TRAPS_DISABLED) {
 8009cbe:	f004 f83d 	bl	800dd3c <snmp_get_auth_traps_enabled>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d103      	bne.n	8009cd0 <snmp_get_value+0x1c0>
        *uint_ptr = MIB2_AUTH_TRAPS_DISABLED;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2202      	movs	r2, #2
 8009ccc:	601a      	str	r2, [r3, #0]
      } else {
        *uint_ptr = MIB2_AUTH_TRAPS_ENABLED;
      }
      break;
 8009cce:	e00d      	b.n	8009cec <snmp_get_value+0x1dc>
        *uint_ptr = MIB2_AUTH_TRAPS_ENABLED;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	601a      	str	r2, [r3, #0]
      break;
 8009cd6:	e009      	b.n	8009cec <snmp_get_value+0x1dc>
    case 31: /* snmpSilentDrops */
      *uint_ptr = 0; /* not supported */
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	601a      	str	r2, [r3, #0]
      break;
 8009cde:	e005      	b.n	8009cec <snmp_get_value+0x1dc>
    case 32: /* snmpProxyDrops */
      *uint_ptr = 0; /* not supported */
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	601a      	str	r2, [r3, #0]
      break;
 8009ce6:	e001      	b.n	8009cec <snmp_get_value+0x1dc>
    default:
      LWIP_DEBUGF(SNMP_MIB_DEBUG, ("snmp_get_value(): unknown id: %"S32_F"\n", node->oid));
      return 0;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	e000      	b.n	8009cee <snmp_get_value+0x1de>
  }

  return sizeof(*uint_ptr);
 8009cec:	2304      	movs	r3, #4
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	200036a8 	.word	0x200036a8

08009cfc <snmp_set_test>:

static snmp_err_t
snmp_set_test(const struct snmp_scalar_array_node_def *node, u16_t len, void *value)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b087      	sub	sp, #28
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	460b      	mov	r3, r1
 8009d06:	607a      	str	r2, [r7, #4]
 8009d08:	817b      	strh	r3, [r7, #10]
  snmp_err_t ret = SNMP_ERR_WRONGVALUE;
 8009d0a:	230a      	movs	r3, #10
 8009d0c:	75fb      	strb	r3, [r7, #23]
  LWIP_UNUSED_ARG(len);

  if (node->oid == 30) {
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2b1e      	cmp	r3, #30
 8009d14:	d10b      	bne.n	8009d2e <snmp_set_test+0x32>
    /* snmpEnableAuthenTraps */
    s32_t *sint_ptr = (s32_t *)value;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	613b      	str	r3, [r7, #16]

    /* we should have writable non-volatile mem here */
    if ((*sint_ptr == MIB2_AUTH_TRAPS_DISABLED) || (*sint_ptr == MIB2_AUTH_TRAPS_ENABLED)) {
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	d003      	beq.n	8009d2a <snmp_set_test+0x2e>
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d101      	bne.n	8009d2e <snmp_set_test+0x32>
      ret = SNMP_ERR_NOERROR;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8009d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	371c      	adds	r7, #28
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <snmp_set_value>:

static snmp_err_t
snmp_set_value(const struct snmp_scalar_array_node_def *node, u16_t len, void *value)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b086      	sub	sp, #24
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	460b      	mov	r3, r1
 8009d46:	607a      	str	r2, [r7, #4]
 8009d48:	817b      	strh	r3, [r7, #10]
  LWIP_UNUSED_ARG(len);

  if (node->oid == 30) {
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2b1e      	cmp	r3, #30
 8009d50:	d10c      	bne.n	8009d6c <snmp_set_value+0x30>
    /* snmpEnableAuthenTraps */
    s32_t *sint_ptr = (s32_t *)value;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	617b      	str	r3, [r7, #20]
    if (*sint_ptr == MIB2_AUTH_TRAPS_DISABLED) {
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d103      	bne.n	8009d66 <snmp_set_value+0x2a>
      snmp_set_auth_traps_enabled(SNMP_AUTH_TRAPS_DISABLED);
 8009d5e:	2000      	movs	r0, #0
 8009d60:	f003 ffdc 	bl	800dd1c <snmp_set_auth_traps_enabled>
 8009d64:	e002      	b.n	8009d6c <snmp_set_value+0x30>
    } else {
      snmp_set_auth_traps_enabled(SNMP_AUTH_TRAPS_ENABLED);
 8009d66:	2001      	movs	r0, #1
 8009d68:	f003 ffd8 	bl	800dd1c <snmp_set_auth_traps_enabled>
    }
  }

  return SNMP_ERR_NOERROR;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3718      	adds	r7, #24
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
	...

08009d78 <snmp_mib2_set_sysdescr>:
 * @param str if non-NULL then copy str pointer
 * @param len points to string length, excluding zero terminator
 */
void
snmp_mib2_set_sysdescr(const u8_t *str, const u16_t *len)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]
  if (str != NULL) {
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d005      	beq.n	8009d94 <snmp_mib2_set_sysdescr+0x1c>
    sysdescr     = str;
 8009d88:	4a05      	ldr	r2, [pc, #20]	; (8009da0 <snmp_mib2_set_sysdescr+0x28>)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6013      	str	r3, [r2, #0]
    sysdescr_len = len;
 8009d8e:	4a05      	ldr	r2, [pc, #20]	; (8009da4 <snmp_mib2_set_sysdescr+0x2c>)
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	6013      	str	r3, [r2, #0]
  }
}
 8009d94:	bf00      	nop
 8009d96:	370c      	adds	r7, #12
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr
 8009da0:	2000003c 	.word	0x2000003c
 8009da4:	20003714 	.word	0x20003714

08009da8 <snmp_mib2_set_syscontact>:
 *        otherwise complete buffer is used for string.
 *        if bufsize is set to 0, the value is regarded as read-only.
 */
void
snmp_mib2_set_syscontact(u8_t *ocstr, u16_t *ocstrlen, u16_t bufsize)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	60b9      	str	r1, [r7, #8]
 8009db2:	4613      	mov	r3, r2
 8009db4:	80fb      	strh	r3, [r7, #6]
  if (ocstr != NULL) {
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d00e      	beq.n	8009dda <snmp_mib2_set_syscontact+0x32>
    syscontact         = ocstr;
 8009dbc:	4a0a      	ldr	r2, [pc, #40]	; (8009de8 <snmp_mib2_set_syscontact+0x40>)
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6013      	str	r3, [r2, #0]
    syscontact_wr      = ocstr;
 8009dc2:	4a0a      	ldr	r2, [pc, #40]	; (8009dec <snmp_mib2_set_syscontact+0x44>)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6013      	str	r3, [r2, #0]
    syscontact_len     = ocstrlen;
 8009dc8:	4a09      	ldr	r2, [pc, #36]	; (8009df0 <snmp_mib2_set_syscontact+0x48>)
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	6013      	str	r3, [r2, #0]
    syscontact_wr_len  = ocstrlen;
 8009dce:	4a09      	ldr	r2, [pc, #36]	; (8009df4 <snmp_mib2_set_syscontact+0x4c>)
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	6013      	str	r3, [r2, #0]
    syscontact_bufsize = bufsize;
 8009dd4:	4a08      	ldr	r2, [pc, #32]	; (8009df8 <snmp_mib2_set_syscontact+0x50>)
 8009dd6:	88fb      	ldrh	r3, [r7, #6]
 8009dd8:	8013      	strh	r3, [r2, #0]
  }
}
 8009dda:	bf00      	nop
 8009ddc:	3714      	adds	r7, #20
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	20000040 	.word	0x20000040
 8009dec:	2000371c 	.word	0x2000371c
 8009df0:	20003718 	.word	0x20003718
 8009df4:	20003720 	.word	0x20003720
 8009df8:	20003724 	.word	0x20003724

08009dfc <snmp_mib2_set_sysname>:
 *        otherwise complete buffer is used for string.
 *        if bufsize is set to 0, the value is regarded as read-only.
 */
void
snmp_mib2_set_sysname(u8_t *ocstr, u16_t *ocstrlen, u16_t bufsize)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b085      	sub	sp, #20
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	4613      	mov	r3, r2
 8009e08:	80fb      	strh	r3, [r7, #6]
  if (ocstr != NULL) {
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00e      	beq.n	8009e2e <snmp_mib2_set_sysname+0x32>
    sysname         = ocstr;
 8009e10:	4a0a      	ldr	r2, [pc, #40]	; (8009e3c <snmp_mib2_set_sysname+0x40>)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6013      	str	r3, [r2, #0]
    sysname_wr      = ocstr;
 8009e16:	4a0a      	ldr	r2, [pc, #40]	; (8009e40 <snmp_mib2_set_sysname+0x44>)
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6013      	str	r3, [r2, #0]
    sysname_len     = ocstrlen;
 8009e1c:	4a09      	ldr	r2, [pc, #36]	; (8009e44 <snmp_mib2_set_sysname+0x48>)
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	6013      	str	r3, [r2, #0]
    sysname_wr_len  = ocstrlen;
 8009e22:	4a09      	ldr	r2, [pc, #36]	; (8009e48 <snmp_mib2_set_sysname+0x4c>)
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	6013      	str	r3, [r2, #0]
    sysname_bufsize = bufsize;
 8009e28:	4a08      	ldr	r2, [pc, #32]	; (8009e4c <snmp_mib2_set_sysname+0x50>)
 8009e2a:	88fb      	ldrh	r3, [r7, #6]
 8009e2c:	8013      	strh	r3, [r2, #0]
  }
}
 8009e2e:	bf00      	nop
 8009e30:	3714      	adds	r7, #20
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	20000044 	.word	0x20000044
 8009e40:	2000372c 	.word	0x2000372c
 8009e44:	20003728 	.word	0x20003728
 8009e48:	20003730 	.word	0x20003730
 8009e4c:	20003734 	.word	0x20003734

08009e50 <snmp_mib2_set_syslocation>:
 *        otherwise complete buffer is used for string.
 *        if bufsize is set to 0, the value is regarded as read-only.
 */
void
snmp_mib2_set_syslocation(u8_t *ocstr, u16_t *ocstrlen, u16_t bufsize)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	80fb      	strh	r3, [r7, #6]
  if (ocstr != NULL) {
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00e      	beq.n	8009e82 <snmp_mib2_set_syslocation+0x32>
    syslocation         = ocstr;
 8009e64:	4a0a      	ldr	r2, [pc, #40]	; (8009e90 <snmp_mib2_set_syslocation+0x40>)
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	6013      	str	r3, [r2, #0]
    syslocation_wr      = ocstr;
 8009e6a:	4a0a      	ldr	r2, [pc, #40]	; (8009e94 <snmp_mib2_set_syslocation+0x44>)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6013      	str	r3, [r2, #0]
    syslocation_len     = ocstrlen;
 8009e70:	4a09      	ldr	r2, [pc, #36]	; (8009e98 <snmp_mib2_set_syslocation+0x48>)
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	6013      	str	r3, [r2, #0]
    syslocation_wr_len  = ocstrlen;
 8009e76:	4a09      	ldr	r2, [pc, #36]	; (8009e9c <snmp_mib2_set_syslocation+0x4c>)
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	6013      	str	r3, [r2, #0]
    syslocation_bufsize = bufsize;
 8009e7c:	4a08      	ldr	r2, [pc, #32]	; (8009ea0 <snmp_mib2_set_syslocation+0x50>)
 8009e7e:	88fb      	ldrh	r3, [r7, #6]
 8009e80:	8013      	strh	r3, [r2, #0]
  }
}
 8009e82:	bf00      	nop
 8009e84:	3714      	adds	r7, #20
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	20000048 	.word	0x20000048
 8009e94:	2000373c 	.word	0x2000373c
 8009e98:	20003738 	.word	0x20003738
 8009e9c:	20003740 	.word	0x20003740
 8009ea0:	20003744 	.word	0x20003744

08009ea4 <system_get_value>:
}


static s16_t
system_get_value(const struct snmp_scalar_array_node_def *node, void *value)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b086      	sub	sp, #24
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
  const u8_t  *var = NULL;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	617b      	str	r3, [r7, #20]
  const s16_t *var_len;
  u16_t result;

  switch (node->oid) {
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	3b01      	subs	r3, #1
 8009eb8:	2b06      	cmp	r3, #6
 8009eba:	d850      	bhi.n	8009f5e <system_get_value+0xba>
 8009ebc:	a201      	add	r2, pc, #4	; (adr r2, 8009ec4 <system_get_value+0x20>)
 8009ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec2:	bf00      	nop
 8009ec4:	08009ee1 	.word	0x08009ee1
 8009ec8:	08009eef 	.word	0x08009eef
 8009ecc:	08009f15 	.word	0x08009f15
 8009ed0:	08009f2b 	.word	0x08009f2b
 8009ed4:	08009f39 	.word	0x08009f39
 8009ed8:	08009f47 	.word	0x08009f47
 8009edc:	08009f55 	.word	0x08009f55
    case 1: /* sysDescr */
      var     = sysdescr;
 8009ee0:	4b31      	ldr	r3, [pc, #196]	; (8009fa8 <system_get_value+0x104>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	617b      	str	r3, [r7, #20]
      var_len = (const s16_t *)sysdescr_len;
 8009ee6:	4b31      	ldr	r3, [pc, #196]	; (8009fac <system_get_value+0x108>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	613b      	str	r3, [r7, #16]
      break;
 8009eec:	e039      	b.n	8009f62 <system_get_value+0xbe>
    case 2: { /* sysObjectID */
      const struct snmp_obj_id *dev_enterprise_oid = snmp_get_device_enterprise_oid();
 8009eee:	f7fd ffbf 	bl	8007e70 <snmp_get_device_enterprise_oid>
 8009ef2:	60b8      	str	r0, [r7, #8]
      MEMCPY(value, dev_enterprise_oid->id, dev_enterprise_oid->len * sizeof(u32_t));
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	1d19      	adds	r1, r3, #4
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	461a      	mov	r2, r3
 8009f00:	6838      	ldr	r0, [r7, #0]
 8009f02:	f011 fca7 	bl	801b854 <memcpy>
      return dev_enterprise_oid->len * sizeof(u32_t);
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	b21b      	sxth	r3, r3
 8009f12:	e045      	b.n	8009fa0 <system_get_value+0xfc>
    }
    case 3: /* sysUpTime */
      MIB2_COPY_SYSUPTIME_TO((u32_t *)value);
 8009f14:	f7fd f99e 	bl	8007254 <sys_now>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	4a25      	ldr	r2, [pc, #148]	; (8009fb0 <system_get_value+0x10c>)
 8009f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f20:	08da      	lsrs	r2, r3, #3
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	601a      	str	r2, [r3, #0]
      return sizeof(u32_t);
 8009f26:	2304      	movs	r3, #4
 8009f28:	e03a      	b.n	8009fa0 <system_get_value+0xfc>
    case 4: /* sysContact */
      var     = syscontact;
 8009f2a:	4b22      	ldr	r3, [pc, #136]	; (8009fb4 <system_get_value+0x110>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	617b      	str	r3, [r7, #20]
      var_len = (const s16_t *)syscontact_len;
 8009f30:	4b21      	ldr	r3, [pc, #132]	; (8009fb8 <system_get_value+0x114>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	613b      	str	r3, [r7, #16]
      break;
 8009f36:	e014      	b.n	8009f62 <system_get_value+0xbe>
    case 5: /* sysName */
      var     = sysname;
 8009f38:	4b20      	ldr	r3, [pc, #128]	; (8009fbc <system_get_value+0x118>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	617b      	str	r3, [r7, #20]
      var_len = (const s16_t *)sysname_len;
 8009f3e:	4b20      	ldr	r3, [pc, #128]	; (8009fc0 <system_get_value+0x11c>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	613b      	str	r3, [r7, #16]
      break;
 8009f44:	e00d      	b.n	8009f62 <system_get_value+0xbe>
    case 6: /* sysLocation */
      var     = syslocation;
 8009f46:	4b1f      	ldr	r3, [pc, #124]	; (8009fc4 <system_get_value+0x120>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	617b      	str	r3, [r7, #20]
      var_len = (const s16_t *)syslocation_len;
 8009f4c:	4b1e      	ldr	r3, [pc, #120]	; (8009fc8 <system_get_value+0x124>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	613b      	str	r3, [r7, #16]
      break;
 8009f52:	e006      	b.n	8009f62 <system_get_value+0xbe>
    case 7: /* sysServices */
      *(s32_t *)value = SNMP_SYSSERVICES;
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	2248      	movs	r2, #72	; 0x48
 8009f58:	601a      	str	r2, [r3, #0]
      return sizeof(s32_t);
 8009f5a:	2304      	movs	r3, #4
 8009f5c:	e020      	b.n	8009fa0 <system_get_value+0xfc>
    default:
      LWIP_DEBUGF(SNMP_MIB_DEBUG, ("system_get_value(): unknown id: %"S32_F"\n", node->oid));
      return 0;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	e01e      	b.n	8009fa0 <system_get_value+0xfc>
  }

  /* handle string values (OID 1,4,5 and 6) */
  LWIP_ASSERT("", (value != NULL));
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d106      	bne.n	8009f76 <system_get_value+0xd2>
 8009f68:	4b18      	ldr	r3, [pc, #96]	; (8009fcc <system_get_value+0x128>)
 8009f6a:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8009f6e:	4918      	ldr	r1, [pc, #96]	; (8009fd0 <system_get_value+0x12c>)
 8009f70:	4818      	ldr	r0, [pc, #96]	; (8009fd4 <system_get_value+0x130>)
 8009f72:	f012 fbdd 	bl	801c730 <iprintf>
  if (var_len == NULL) {
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d105      	bne.n	8009f88 <system_get_value+0xe4>
    result = (s16_t)strlen((const char *)var);
 8009f7c:	6978      	ldr	r0, [r7, #20]
 8009f7e:	f7f6 f95f 	bl	8000240 <strlen>
 8009f82:	4603      	mov	r3, r0
 8009f84:	81fb      	strh	r3, [r7, #14]
 8009f86:	e003      	b.n	8009f90 <system_get_value+0xec>
  } else {
    result = *var_len;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009f8e:	81fb      	strh	r3, [r7, #14]
  }
  MEMCPY(value, var, result);
 8009f90:	89fb      	ldrh	r3, [r7, #14]
 8009f92:	461a      	mov	r2, r3
 8009f94:	6979      	ldr	r1, [r7, #20]
 8009f96:	6838      	ldr	r0, [r7, #0]
 8009f98:	f011 fc5c 	bl	801b854 <memcpy>
  return result;
 8009f9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3718      	adds	r7, #24
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	2000003c 	.word	0x2000003c
 8009fac:	20003714 	.word	0x20003714
 8009fb0:	cccccccd 	.word	0xcccccccd
 8009fb4:	20000040 	.word	0x20000040
 8009fb8:	20003718 	.word	0x20003718
 8009fbc:	20000044 	.word	0x20000044
 8009fc0:	20003728 	.word	0x20003728
 8009fc4:	20000048 	.word	0x20000048
 8009fc8:	20003738 	.word	0x20003738
 8009fcc:	08020384 	.word	0x08020384
 8009fd0:	080203c8 	.word	0x080203c8
 8009fd4:	080203cc 	.word	0x080203cc

08009fd8 <system_set_test>:

static snmp_err_t
system_set_test(const struct snmp_scalar_array_node_def *node, u16_t len, void *value)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b089      	sub	sp, #36	; 0x24
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	607a      	str	r2, [r7, #4]
 8009fe4:	817b      	strh	r3, [r7, #10]
  snmp_err_t ret = SNMP_ERR_WRONGVALUE;
 8009fe6:	230a      	movs	r3, #10
 8009fe8:	77fb      	strb	r3, [r7, #31]
  const u16_t *var_bufsize  = NULL;
 8009fea:	2300      	movs	r3, #0
 8009fec:	61bb      	str	r3, [r7, #24]
  const u16_t *var_wr_len;

  LWIP_UNUSED_ARG(value);

  switch (node->oid) {
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2b06      	cmp	r3, #6
 8009ff4:	d012      	beq.n	800a01c <system_set_test+0x44>
 8009ff6:	2b06      	cmp	r3, #6
 8009ff8:	d816      	bhi.n	800a028 <system_set_test+0x50>
 8009ffa:	2b04      	cmp	r3, #4
 8009ffc:	d002      	beq.n	800a004 <system_set_test+0x2c>
 8009ffe:	2b05      	cmp	r3, #5
 800a000:	d006      	beq.n	800a010 <system_set_test+0x38>
 800a002:	e011      	b.n	800a028 <system_set_test+0x50>
    case 4: /* sysContact */
      var_bufsize  = &syscontact_bufsize;
 800a004:	4b19      	ldr	r3, [pc, #100]	; (800a06c <system_set_test+0x94>)
 800a006:	61bb      	str	r3, [r7, #24]
      var_wr_len   = syscontact_wr_len;
 800a008:	4b19      	ldr	r3, [pc, #100]	; (800a070 <system_set_test+0x98>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	617b      	str	r3, [r7, #20]
      break;
 800a00e:	e00d      	b.n	800a02c <system_set_test+0x54>
    case 5: /* sysName */
      var_bufsize  = &sysname_bufsize;
 800a010:	4b18      	ldr	r3, [pc, #96]	; (800a074 <system_set_test+0x9c>)
 800a012:	61bb      	str	r3, [r7, #24]
      var_wr_len   = sysname_wr_len;
 800a014:	4b18      	ldr	r3, [pc, #96]	; (800a078 <system_set_test+0xa0>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	617b      	str	r3, [r7, #20]
      break;
 800a01a:	e007      	b.n	800a02c <system_set_test+0x54>
    case 6: /* sysLocation */
      var_bufsize  = &syslocation_bufsize;
 800a01c:	4b17      	ldr	r3, [pc, #92]	; (800a07c <system_set_test+0xa4>)
 800a01e:	61bb      	str	r3, [r7, #24]
      var_wr_len   = syslocation_wr_len;
 800a020:	4b17      	ldr	r3, [pc, #92]	; (800a080 <system_set_test+0xa8>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	617b      	str	r3, [r7, #20]
      break;
 800a026:	e001      	b.n	800a02c <system_set_test+0x54>
    default:
      LWIP_DEBUGF(SNMP_MIB_DEBUG, ("system_set_test(): unknown id: %"S32_F"\n", node->oid));
      return ret;
 800a028:	7ffb      	ldrb	r3, [r7, #31]
 800a02a:	e019      	b.n	800a060 <system_set_test+0x88>
  }

  /* check if value is writable at all */
  if (*var_bufsize > 0) {
 800a02c:	69bb      	ldr	r3, [r7, #24]
 800a02e:	881b      	ldrh	r3, [r3, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d012      	beq.n	800a05a <system_set_test+0x82>
    if (var_wr_len == NULL) {
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d107      	bne.n	800a04a <system_set_test+0x72>
      /* we have to take the terminating 0 into account */
      if (len < *var_bufsize) {
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	881b      	ldrh	r3, [r3, #0]
 800a03e:	897a      	ldrh	r2, [r7, #10]
 800a040:	429a      	cmp	r2, r3
 800a042:	d20c      	bcs.n	800a05e <system_set_test+0x86>
        ret = SNMP_ERR_NOERROR;
 800a044:	2300      	movs	r3, #0
 800a046:	77fb      	strb	r3, [r7, #31]
 800a048:	e009      	b.n	800a05e <system_set_test+0x86>
      }
    } else {
      if (len <= *var_bufsize) {
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	881b      	ldrh	r3, [r3, #0]
 800a04e:	897a      	ldrh	r2, [r7, #10]
 800a050:	429a      	cmp	r2, r3
 800a052:	d804      	bhi.n	800a05e <system_set_test+0x86>
        ret = SNMP_ERR_NOERROR;
 800a054:	2300      	movs	r3, #0
 800a056:	77fb      	strb	r3, [r7, #31]
 800a058:	e001      	b.n	800a05e <system_set_test+0x86>
      }
    }
  } else {
    ret = SNMP_ERR_NOTWRITABLE;
 800a05a:	2311      	movs	r3, #17
 800a05c:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 800a05e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a060:	4618      	mov	r0, r3
 800a062:	3724      	adds	r7, #36	; 0x24
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr
 800a06c:	20003724 	.word	0x20003724
 800a070:	20003720 	.word	0x20003720
 800a074:	20003734 	.word	0x20003734
 800a078:	20003730 	.word	0x20003730
 800a07c:	20003744 	.word	0x20003744
 800a080:	20003740 	.word	0x20003740

0800a084 <system_set_value>:

static snmp_err_t
system_set_value(const struct snmp_scalar_array_node_def *node, u16_t len, void *value)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b086      	sub	sp, #24
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	460b      	mov	r3, r1
 800a08e:	607a      	str	r2, [r7, #4]
 800a090:	817b      	strh	r3, [r7, #10]
  u8_t  *var_wr = NULL;
 800a092:	2300      	movs	r3, #0
 800a094:	617b      	str	r3, [r7, #20]
  u16_t *var_wr_len;

  switch (node->oid) {
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	2b06      	cmp	r3, #6
 800a09c:	d014      	beq.n	800a0c8 <system_set_value+0x44>
 800a09e:	2b06      	cmp	r3, #6
 800a0a0:	d819      	bhi.n	800a0d6 <system_set_value+0x52>
 800a0a2:	2b04      	cmp	r3, #4
 800a0a4:	d002      	beq.n	800a0ac <system_set_value+0x28>
 800a0a6:	2b05      	cmp	r3, #5
 800a0a8:	d007      	beq.n	800a0ba <system_set_value+0x36>
 800a0aa:	e014      	b.n	800a0d6 <system_set_value+0x52>
    case 4: /* sysContact */
      var_wr     = syscontact_wr;
 800a0ac:	4b1b      	ldr	r3, [pc, #108]	; (800a11c <system_set_value+0x98>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	617b      	str	r3, [r7, #20]
      var_wr_len = syscontact_wr_len;
 800a0b2:	4b1b      	ldr	r3, [pc, #108]	; (800a120 <system_set_value+0x9c>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	613b      	str	r3, [r7, #16]
      break;
 800a0b8:	e00f      	b.n	800a0da <system_set_value+0x56>
    case 5: /* sysName */
      var_wr     = sysname_wr;
 800a0ba:	4b1a      	ldr	r3, [pc, #104]	; (800a124 <system_set_value+0xa0>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	617b      	str	r3, [r7, #20]
      var_wr_len = sysname_wr_len;
 800a0c0:	4b19      	ldr	r3, [pc, #100]	; (800a128 <system_set_value+0xa4>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	613b      	str	r3, [r7, #16]
      break;
 800a0c6:	e008      	b.n	800a0da <system_set_value+0x56>
    case 6: /* sysLocation */
      var_wr     = syslocation_wr;
 800a0c8:	4b18      	ldr	r3, [pc, #96]	; (800a12c <system_set_value+0xa8>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	617b      	str	r3, [r7, #20]
      var_wr_len = syslocation_wr_len;
 800a0ce:	4b18      	ldr	r3, [pc, #96]	; (800a130 <system_set_value+0xac>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	613b      	str	r3, [r7, #16]
      break;
 800a0d4:	e001      	b.n	800a0da <system_set_value+0x56>
    default:
      LWIP_DEBUGF(SNMP_MIB_DEBUG, ("system_set_value(): unknown id: %"S32_F"\n", node->oid));
      return SNMP_ERR_GENERROR;
 800a0d6:	2305      	movs	r3, #5
 800a0d8:	e01c      	b.n	800a114 <system_set_value+0x90>
  }

  /* no need to check size of target buffer, this was already done in set_test method */
  LWIP_ASSERT("", var_wr != NULL);
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d106      	bne.n	800a0ee <system_set_value+0x6a>
 800a0e0:	4b14      	ldr	r3, [pc, #80]	; (800a134 <system_set_value+0xb0>)
 800a0e2:	f240 125f 	movw	r2, #351	; 0x15f
 800a0e6:	4914      	ldr	r1, [pc, #80]	; (800a138 <system_set_value+0xb4>)
 800a0e8:	4814      	ldr	r0, [pc, #80]	; (800a13c <system_set_value+0xb8>)
 800a0ea:	f012 fb21 	bl	801c730 <iprintf>
  MEMCPY(var_wr, value, len);
 800a0ee:	897b      	ldrh	r3, [r7, #10]
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	6879      	ldr	r1, [r7, #4]
 800a0f4:	6978      	ldr	r0, [r7, #20]
 800a0f6:	f011 fbad 	bl	801b854 <memcpy>

  if (var_wr_len == NULL) {
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d105      	bne.n	800a10c <system_set_value+0x88>
    /* add terminating 0 */
    var_wr[len] = 0;
 800a100:	897b      	ldrh	r3, [r7, #10]
 800a102:	697a      	ldr	r2, [r7, #20]
 800a104:	4413      	add	r3, r2
 800a106:	2200      	movs	r2, #0
 800a108:	701a      	strb	r2, [r3, #0]
 800a10a:	e002      	b.n	800a112 <system_set_value+0x8e>
  } else {
    *var_wr_len = len;
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	897a      	ldrh	r2, [r7, #10]
 800a110:	801a      	strh	r2, [r3, #0]
  }

  return SNMP_ERR_NOERROR;
 800a112:	2300      	movs	r3, #0
}
 800a114:	4618      	mov	r0, r3
 800a116:	3718      	adds	r7, #24
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	2000371c 	.word	0x2000371c
 800a120:	20003720 	.word	0x20003720
 800a124:	2000372c 	.word	0x2000372c
 800a128:	20003730 	.word	0x20003730
 800a12c:	2000373c 	.word	0x2000373c
 800a130:	20003740 	.word	0x20003740
 800a134:	08020384 	.word	0x08020384
 800a138:	080203c8 	.word	0x080203c8
 800a13c:	080203cc 	.word	0x080203cc

0800a140 <tcp_get_value>:

/* --- tcp .1.3.6.1.2.1.6 ----------------------------------------------------- */

static s16_t
tcp_get_value(struct snmp_node_instance *instance, void *value)
{
 800a140:	b4b0      	push	{r4, r5, r7}
 800a142:	b08b      	sub	sp, #44	; 0x2c
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  u32_t *uint_ptr = (u32_t *)value;
 800a14a:	6839      	ldr	r1, [r7, #0]
 800a14c:	61f9      	str	r1, [r7, #28]
  s32_t *sint_ptr = (s32_t *)value;
 800a14e:	6839      	ldr	r1, [r7, #0]
 800a150:	61b9      	str	r1, [r7, #24]

  switch (instance->node->oid) {
 800a152:	6879      	ldr	r1, [r7, #4]
 800a154:	6809      	ldr	r1, [r1, #0]
 800a156:	6849      	ldr	r1, [r1, #4]
 800a158:	3901      	subs	r1, #1
 800a15a:	2911      	cmp	r1, #17
 800a15c:	f200 80b7 	bhi.w	800a2ce <tcp_get_value+0x18e>
 800a160:	a001      	add	r0, pc, #4	; (adr r0, 800a168 <tcp_get_value+0x28>)
 800a162:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a166:	bf00      	nop
 800a168:	0800a1b1 	.word	0x0800a1b1
 800a16c:	0800a1bb 	.word	0x0800a1bb
 800a170:	0800a1c7 	.word	0x0800a1c7
 800a174:	0800a1d3 	.word	0x0800a1d3
 800a178:	0800a1dd 	.word	0x0800a1dd
 800a17c:	0800a1eb 	.word	0x0800a1eb
 800a180:	0800a1f9 	.word	0x0800a1f9
 800a184:	0800a207 	.word	0x0800a207
 800a188:	0800a215 	.word	0x0800a215
 800a18c:	0800a24d 	.word	0x0800a24d
 800a190:	0800a25b 	.word	0x0800a25b
 800a194:	0800a269 	.word	0x0800a269
 800a198:	0800a2cf 	.word	0x0800a2cf
 800a19c:	0800a277 	.word	0x0800a277
 800a1a0:	0800a285 	.word	0x0800a285
 800a1a4:	0800a2cf 	.word	0x0800a2cf
 800a1a8:	0800a293 	.word	0x0800a293
 800a1ac:	0800a2b1 	.word	0x0800a2b1
    case 1: /* tcpRtoAlgorithm, vanj(4) */
      *sint_ptr = 4;
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	2204      	movs	r2, #4
 800a1b4:	601a      	str	r2, [r3, #0]
      return sizeof(*sint_ptr);
 800a1b6:	2304      	movs	r3, #4
 800a1b8:	e08b      	b.n	800a2d2 <tcp_get_value+0x192>
    case 2: /* tcpRtoMin */
      /* @todo not the actual value, a guess,
          needs to be calculated */
      *sint_ptr = 1000;
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a1c0:	601a      	str	r2, [r3, #0]
      return sizeof(*sint_ptr);
 800a1c2:	2304      	movs	r3, #4
 800a1c4:	e085      	b.n	800a2d2 <tcp_get_value+0x192>
    case 3: /* tcpRtoMax */
      /* @todo not the actual value, a guess,
          needs to be calculated */
      *sint_ptr = 60000;
 800a1c6:	69bb      	ldr	r3, [r7, #24]
 800a1c8:	f64e 2260 	movw	r2, #60000	; 0xea60
 800a1cc:	601a      	str	r2, [r3, #0]
      return sizeof(*sint_ptr);
 800a1ce:	2304      	movs	r3, #4
 800a1d0:	e07f      	b.n	800a2d2 <tcp_get_value+0x192>
    case 4: /* tcpMaxConn */
      *sint_ptr = MEMP_NUM_TCP_PCB;
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	2205      	movs	r2, #5
 800a1d6:	601a      	str	r2, [r3, #0]
      return sizeof(*sint_ptr);
 800a1d8:	2304      	movs	r3, #4
 800a1da:	e07a      	b.n	800a2d2 <tcp_get_value+0x192>
    case 5: /* tcpActiveOpens */
      *uint_ptr = STATS_GET(mib2.tcpactiveopens);
 800a1dc:	4b3f      	ldr	r3, [pc, #252]	; (800a2dc <tcp_get_value+0x19c>)
 800a1de:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800a1e2:	69fb      	ldr	r3, [r7, #28]
 800a1e4:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 800a1e6:	2304      	movs	r3, #4
 800a1e8:	e073      	b.n	800a2d2 <tcp_get_value+0x192>
    case 6: /* tcpPassiveOpens */
      *uint_ptr = STATS_GET(mib2.tcppassiveopens);
 800a1ea:	4b3c      	ldr	r3, [pc, #240]	; (800a2dc <tcp_get_value+0x19c>)
 800a1ec:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 800a1f4:	2304      	movs	r3, #4
 800a1f6:	e06c      	b.n	800a2d2 <tcp_get_value+0x192>
    case 7: /* tcpAttemptFails */
      *uint_ptr = STATS_GET(mib2.tcpattemptfails);
 800a1f8:	4b38      	ldr	r3, [pc, #224]	; (800a2dc <tcp_get_value+0x19c>)
 800a1fa:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 800a202:	2304      	movs	r3, #4
 800a204:	e065      	b.n	800a2d2 <tcp_get_value+0x192>
    case 8: /* tcpEstabResets */
      *uint_ptr = STATS_GET(mib2.tcpestabresets);
 800a206:	4b35      	ldr	r3, [pc, #212]	; (800a2dc <tcp_get_value+0x19c>)
 800a208:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 800a210:	2304      	movs	r3, #4
 800a212:	e05e      	b.n	800a2d2 <tcp_get_value+0x192>
    case 9: { /* tcpCurrEstab */
      u16_t tcpcurrestab = 0;
 800a214:	2300      	movs	r3, #0
 800a216:	84fb      	strh	r3, [r7, #38]	; 0x26
      struct tcp_pcb *pcb = tcp_active_pcbs;
 800a218:	4b31      	ldr	r3, [pc, #196]	; (800a2e0 <tcp_get_value+0x1a0>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	623b      	str	r3, [r7, #32]
      while (pcb != NULL) {
 800a21e:	e00d      	b.n	800a23c <tcp_get_value+0xfc>
        if ((pcb->state == ESTABLISHED) ||
 800a220:	6a3b      	ldr	r3, [r7, #32]
 800a222:	7d1b      	ldrb	r3, [r3, #20]
 800a224:	2b04      	cmp	r3, #4
 800a226:	d003      	beq.n	800a230 <tcp_get_value+0xf0>
            (pcb->state == CLOSE_WAIT)) {
 800a228:	6a3b      	ldr	r3, [r7, #32]
 800a22a:	7d1b      	ldrb	r3, [r3, #20]
        if ((pcb->state == ESTABLISHED) ||
 800a22c:	2b07      	cmp	r3, #7
 800a22e:	d102      	bne.n	800a236 <tcp_get_value+0xf6>
          tcpcurrestab++;
 800a230:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a232:	3301      	adds	r3, #1
 800a234:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        pcb = pcb->next;
 800a236:	6a3b      	ldr	r3, [r7, #32]
 800a238:	68db      	ldr	r3, [r3, #12]
 800a23a:	623b      	str	r3, [r7, #32]
      while (pcb != NULL) {
 800a23c:	6a3b      	ldr	r3, [r7, #32]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1ee      	bne.n	800a220 <tcp_get_value+0xe0>
      }
      *uint_ptr = tcpcurrestab;
 800a242:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	601a      	str	r2, [r3, #0]
    }
    return sizeof(*uint_ptr);
 800a248:	2304      	movs	r3, #4
 800a24a:	e042      	b.n	800a2d2 <tcp_get_value+0x192>
    case 10: /* tcpInSegs */
      *uint_ptr = STATS_GET(mib2.tcpinsegs);
 800a24c:	4b23      	ldr	r3, [pc, #140]	; (800a2dc <tcp_get_value+0x19c>)
 800a24e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 800a256:	2304      	movs	r3, #4
 800a258:	e03b      	b.n	800a2d2 <tcp_get_value+0x192>
    case 11: /* tcpOutSegs */
      *uint_ptr = STATS_GET(mib2.tcpoutsegs);
 800a25a:	4b20      	ldr	r3, [pc, #128]	; (800a2dc <tcp_get_value+0x19c>)
 800a25c:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 800a264:	2304      	movs	r3, #4
 800a266:	e034      	b.n	800a2d2 <tcp_get_value+0x192>
    case 12: /* tcpRetransSegs */
      *uint_ptr = STATS_GET(mib2.tcpretranssegs);
 800a268:	4b1c      	ldr	r3, [pc, #112]	; (800a2dc <tcp_get_value+0x19c>)
 800a26a:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 800a272:	2304      	movs	r3, #4
 800a274:	e02d      	b.n	800a2d2 <tcp_get_value+0x192>
    case 14: /* tcpInErrs */
      *uint_ptr = STATS_GET(mib2.tcpinerrs);
 800a276:	4b19      	ldr	r3, [pc, #100]	; (800a2dc <tcp_get_value+0x19c>)
 800a278:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 800a280:	2304      	movs	r3, #4
 800a282:	e026      	b.n	800a2d2 <tcp_get_value+0x192>
    case 15: /* tcpOutRsts */
      *uint_ptr = STATS_GET(mib2.tcpoutrsts);
 800a284:	4b15      	ldr	r3, [pc, #84]	; (800a2dc <tcp_get_value+0x19c>)
 800a286:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 800a28a:	69fb      	ldr	r3, [r7, #28]
 800a28c:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 800a28e:	2304      	movs	r3, #4
 800a290:	e01f      	b.n	800a2d2 <tcp_get_value+0x192>
#if LWIP_HAVE_INT64
    case 17: { /* tcpHCInSegs */
      /* use the 32 bit counter for now... */
      u64_t val64 = STATS_GET(mib2.tcpinsegs);
 800a292:	4b12      	ldr	r3, [pc, #72]	; (800a2dc <tcp_get_value+0x19c>)
 800a294:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800a298:	2200      	movs	r2, #0
 800a29a:	461c      	mov	r4, r3
 800a29c:	4615      	mov	r5, r2
 800a29e:	e9c7 4502 	strd	r4, r5, [r7, #8]
      *((u64_t *)value) = val64;
 800a2a2:	6839      	ldr	r1, [r7, #0]
 800a2a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a2a8:	e9c1 2300 	strd	r2, r3, [r1]
    }
    return sizeof(u64_t);
 800a2ac:	2308      	movs	r3, #8
 800a2ae:	e010      	b.n	800a2d2 <tcp_get_value+0x192>
    case 18: { /* tcpHCOutSegs */
      /* use the 32 bit counter for now... */
      u64_t val64 = STATS_GET(mib2.tcpoutsegs);
 800a2b0:	490a      	ldr	r1, [pc, #40]	; (800a2dc <tcp_get_value+0x19c>)
 800a2b2:	f8d1 1128 	ldr.w	r1, [r1, #296]	; 0x128
 800a2b6:	2000      	movs	r0, #0
 800a2b8:	460a      	mov	r2, r1
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *((u64_t *)value) = val64;
 800a2c0:	6839      	ldr	r1, [r7, #0]
 800a2c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a2c6:	e9c1 2300 	strd	r2, r3, [r1]
    }
    return sizeof(u64_t);
 800a2ca:	2308      	movs	r3, #8
 800a2cc:	e001      	b.n	800a2d2 <tcp_get_value+0x192>
#endif
    default:
      LWIP_DEBUGF(SNMP_MIB_DEBUG, ("tcp_get_value(): unknown id: %"S32_F"\n", instance->node->oid));
      break;
 800a2ce:	bf00      	nop
  }

  return 0;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	372c      	adds	r7, #44	; 0x2c
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bcb0      	pop	{r4, r5, r7}
 800a2da:	4770      	bx	lr
 800a2dc:	20007204 	.word	0x20007204
 800a2e0:	200073a8 	.word	0x200073a8

0800a2e4 <tcp_ConnTable_get_cell_value_core>:
  { 0, 0xffff }  /* Port */
};

static snmp_err_t
tcp_ConnTable_get_cell_value_core(struct tcp_pcb *pcb, const u32_t *column, union snmp_variant_value *value, u32_t *value_len)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	607a      	str	r2, [r7, #4]
 800a2f0:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(value_len);

  /* value */
  switch (*column) {
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	2b04      	cmp	r3, #4
 800a2fa:	d83b      	bhi.n	800a374 <tcp_ConnTable_get_cell_value_core+0x90>
 800a2fc:	a201      	add	r2, pc, #4	; (adr r2, 800a304 <tcp_ConnTable_get_cell_value_core+0x20>)
 800a2fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a302:	bf00      	nop
 800a304:	0800a319 	.word	0x0800a319
 800a308:	0800a327 	.word	0x0800a327
 800a30c:	0800a331 	.word	0x0800a331
 800a310:	0800a33d 	.word	0x0800a33d
 800a314:	0800a359 	.word	0x0800a359
    case 1: /* tcpConnState */
      value->u32 = pcb->state + 1;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	7d1b      	ldrb	r3, [r3, #20]
 800a31c:	3301      	adds	r3, #1
 800a31e:	461a      	mov	r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	601a      	str	r2, [r3, #0]
      break;
 800a324:	e02e      	b.n	800a384 <tcp_ConnTable_get_cell_value_core+0xa0>
    case 2: /* tcpConnLocalAddress */
      value->u32 = ip_2_ip4(&pcb->local_ip)->addr;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	601a      	str	r2, [r3, #0]
      break;
 800a32e:	e029      	b.n	800a384 <tcp_ConnTable_get_cell_value_core+0xa0>
    case 3: /* tcpConnLocalPort */
      value->u32 = pcb->local_port;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	8adb      	ldrh	r3, [r3, #22]
 800a334:	461a      	mov	r2, r3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	601a      	str	r2, [r3, #0]
      break;
 800a33a:	e023      	b.n	800a384 <tcp_ConnTable_get_cell_value_core+0xa0>
    case 4: /* tcpConnRemAddress */
      if (pcb->state == LISTEN) {
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	7d1b      	ldrb	r3, [r3, #20]
 800a340:	2b01      	cmp	r3, #1
 800a342:	d104      	bne.n	800a34e <tcp_ConnTable_get_cell_value_core+0x6a>
        value->u32 = IP4_ADDR_ANY4->addr;
 800a344:	4b12      	ldr	r3, [pc, #72]	; (800a390 <tcp_ConnTable_get_cell_value_core+0xac>)
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	601a      	str	r2, [r3, #0]
      } else {
        value->u32 = ip_2_ip4(&pcb->remote_ip)->addr;
      }
      break;
 800a34c:	e01a      	b.n	800a384 <tcp_ConnTable_get_cell_value_core+0xa0>
        value->u32 = ip_2_ip4(&pcb->remote_ip)->addr;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	685a      	ldr	r2, [r3, #4]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	601a      	str	r2, [r3, #0]
      break;
 800a356:	e015      	b.n	800a384 <tcp_ConnTable_get_cell_value_core+0xa0>
    case 5: /* tcpConnRemPort */
      if (pcb->state == LISTEN) {
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	7d1b      	ldrb	r3, [r3, #20]
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d103      	bne.n	800a368 <tcp_ConnTable_get_cell_value_core+0x84>
        value->u32 = 0;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	601a      	str	r2, [r3, #0]
      } else {
        value->u32 = pcb->remote_port;
      }
      break;
 800a366:	e00d      	b.n	800a384 <tcp_ConnTable_get_cell_value_core+0xa0>
        value->u32 = pcb->remote_port;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	8b1b      	ldrh	r3, [r3, #24]
 800a36c:	461a      	mov	r2, r3
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	601a      	str	r2, [r3, #0]
      break;
 800a372:	e007      	b.n	800a384 <tcp_ConnTable_get_cell_value_core+0xa0>
    default:
      LWIP_ASSERT("invalid id", 0);
 800a374:	4b07      	ldr	r3, [pc, #28]	; (800a394 <tcp_ConnTable_get_cell_value_core+0xb0>)
 800a376:	22c3      	movs	r2, #195	; 0xc3
 800a378:	4907      	ldr	r1, [pc, #28]	; (800a398 <tcp_ConnTable_get_cell_value_core+0xb4>)
 800a37a:	4808      	ldr	r0, [pc, #32]	; (800a39c <tcp_ConnTable_get_cell_value_core+0xb8>)
 800a37c:	f012 f9d8 	bl	801c730 <iprintf>
      return SNMP_ERR_NOSUCHINSTANCE;
 800a380:	23f1      	movs	r3, #241	; 0xf1
 800a382:	e000      	b.n	800a386 <tcp_ConnTable_get_cell_value_core+0xa2>
  }

  return SNMP_ERR_NOERROR;
 800a384:	2300      	movs	r3, #0
}
 800a386:	4618      	mov	r0, r3
 800a388:	3710      	adds	r7, #16
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	08024538 	.word	0x08024538
 800a394:	080203f4 	.word	0x080203f4
 800a398:	08020434 	.word	0x08020434
 800a39c:	08020440 	.word	0x08020440

0800a3a0 <tcp_ConnTable_get_cell_value>:

static snmp_err_t
tcp_ConnTable_get_cell_value(const u32_t *column, const u32_t *row_oid, u8_t row_oid_len, union snmp_variant_value *value, u32_t *value_len)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b08a      	sub	sp, #40	; 0x28
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	603b      	str	r3, [r7, #0]
 800a3ac:	4613      	mov	r3, r2
 800a3ae:	71fb      	strb	r3, [r7, #7]
  u16_t local_port;
  u16_t remote_port;
  struct tcp_pcb *pcb;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, tcp_ConnTable_oid_ranges, LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges))) {
 800a3b0:	79f9      	ldrb	r1, [r7, #7]
 800a3b2:	230a      	movs	r3, #10
 800a3b4:	4a37      	ldr	r2, [pc, #220]	; (800a494 <tcp_ConnTable_get_cell_value+0xf4>)
 800a3b6:	68b8      	ldr	r0, [r7, #8]
 800a3b8:	f7fe fc8e 	bl	8008cd8 <snmp_oid_in_range>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d101      	bne.n	800a3c6 <tcp_ConnTable_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 800a3c2:	23f1      	movs	r3, #241	; 0xf1
 800a3c4:	e061      	b.n	800a48a <tcp_ConnTable_get_cell_value+0xea>
  }

  /* get IPs and ports from incoming OID */
  snmp_oid_to_ip4(&row_oid[0], &local_ip); /* we know it succeeds because of oid_in_range check above */
 800a3c6:	f107 0318 	add.w	r3, r7, #24
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	68b8      	ldr	r0, [r7, #8]
 800a3ce:	f7fd fd5b 	bl	8007e88 <snmp_oid_to_ip4>
  local_port = (u16_t)row_oid[4];
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	3310      	adds	r3, #16
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	83fb      	strh	r3, [r7, #30]
  snmp_oid_to_ip4(&row_oid[5], &remote_ip); /* we know it succeeds because of oid_in_range check above */
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	3314      	adds	r3, #20
 800a3de:	f107 0214 	add.w	r2, r7, #20
 800a3e2:	4611      	mov	r1, r2
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7fd fd4f 	bl	8007e88 <snmp_oid_to_ip4>
  remote_port = (u16_t)row_oid[9];
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	3324      	adds	r3, #36	; 0x24
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	83bb      	strh	r3, [r7, #28]

  /* find tcp_pcb with requested ips and ports */
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a3f8:	e042      	b.n	800a480 <tcp_ConnTable_get_cell_value+0xe0>
    pcb = *tcp_pcb_lists[i];
 800a3fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3fe:	4a26      	ldr	r2, [pc, #152]	; (800a498 <tcp_ConnTable_get_cell_value+0xf8>)
 800a400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	623b      	str	r3, [r7, #32]

    while (pcb != NULL) {
 800a408:	e032      	b.n	800a470 <tcp_ConnTable_get_cell_value+0xd0>
      /* do local IP and local port match? */
      if (IP_IS_V4_VAL(pcb->local_ip) &&
          ip4_addr_cmp(&local_ip, ip_2_ip4(&pcb->local_ip)) && (local_port == pcb->local_port)) {
 800a40a:	69ba      	ldr	r2, [r7, #24]
 800a40c:	6a3b      	ldr	r3, [r7, #32]
 800a40e:	681b      	ldr	r3, [r3, #0]
      if (IP_IS_V4_VAL(pcb->local_ip) &&
 800a410:	429a      	cmp	r2, r3
 800a412:	d12a      	bne.n	800a46a <tcp_ConnTable_get_cell_value+0xca>
          ip4_addr_cmp(&local_ip, ip_2_ip4(&pcb->local_ip)) && (local_port == pcb->local_port)) {
 800a414:	6a3b      	ldr	r3, [r7, #32]
 800a416:	8adb      	ldrh	r3, [r3, #22]
 800a418:	8bfa      	ldrh	r2, [r7, #30]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d125      	bne.n	800a46a <tcp_ConnTable_get_cell_value+0xca>

        /* PCBs in state LISTEN are not connected and have no remote_ip or remote_port */
        if (pcb->state == LISTEN) {
 800a41e:	6a3b      	ldr	r3, [r7, #32]
 800a420:	7d1b      	ldrb	r3, [r3, #20]
 800a422:	2b01      	cmp	r3, #1
 800a424:	d10f      	bne.n	800a446 <tcp_ConnTable_get_cell_value+0xa6>
          if (ip4_addr_cmp(&remote_ip, IP4_ADDR_ANY4) && (remote_port == 0)) {
 800a426:	697a      	ldr	r2, [r7, #20]
 800a428:	4b1c      	ldr	r3, [pc, #112]	; (800a49c <tcp_ConnTable_get_cell_value+0xfc>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d11c      	bne.n	800a46a <tcp_ConnTable_get_cell_value+0xca>
 800a430:	8bbb      	ldrh	r3, [r7, #28]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d119      	bne.n	800a46a <tcp_ConnTable_get_cell_value+0xca>
            /* fill in object properties */
            return tcp_ConnTable_get_cell_value_core(pcb, column, value, value_len);
 800a436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a438:	683a      	ldr	r2, [r7, #0]
 800a43a:	68f9      	ldr	r1, [r7, #12]
 800a43c:	6a38      	ldr	r0, [r7, #32]
 800a43e:	f7ff ff51 	bl	800a2e4 <tcp_ConnTable_get_cell_value_core>
 800a442:	4603      	mov	r3, r0
 800a444:	e021      	b.n	800a48a <tcp_ConnTable_get_cell_value+0xea>
          }
        } else {
          if (IP_IS_V4_VAL(pcb->remote_ip) &&
              ip4_addr_cmp(&remote_ip, ip_2_ip4(&pcb->remote_ip)) && (remote_port == pcb->remote_port)) {
 800a446:	697a      	ldr	r2, [r7, #20]
 800a448:	6a3b      	ldr	r3, [r7, #32]
 800a44a:	685b      	ldr	r3, [r3, #4]
          if (IP_IS_V4_VAL(pcb->remote_ip) &&
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d10c      	bne.n	800a46a <tcp_ConnTable_get_cell_value+0xca>
              ip4_addr_cmp(&remote_ip, ip_2_ip4(&pcb->remote_ip)) && (remote_port == pcb->remote_port)) {
 800a450:	6a3b      	ldr	r3, [r7, #32]
 800a452:	8b1b      	ldrh	r3, [r3, #24]
 800a454:	8bba      	ldrh	r2, [r7, #28]
 800a456:	429a      	cmp	r2, r3
 800a458:	d107      	bne.n	800a46a <tcp_ConnTable_get_cell_value+0xca>
            /* fill in object properties */
            return tcp_ConnTable_get_cell_value_core(pcb, column, value, value_len);
 800a45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45c:	683a      	ldr	r2, [r7, #0]
 800a45e:	68f9      	ldr	r1, [r7, #12]
 800a460:	6a38      	ldr	r0, [r7, #32]
 800a462:	f7ff ff3f 	bl	800a2e4 <tcp_ConnTable_get_cell_value_core>
 800a466:	4603      	mov	r3, r0
 800a468:	e00f      	b.n	800a48a <tcp_ConnTable_get_cell_value+0xea>
          }
        }
      }

      pcb = pcb->next;
 800a46a:	6a3b      	ldr	r3, [r7, #32]
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	623b      	str	r3, [r7, #32]
    while (pcb != NULL) {
 800a470:	6a3b      	ldr	r3, [r7, #32]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d1c9      	bne.n	800a40a <tcp_ConnTable_get_cell_value+0x6a>
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a476:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a47a:	3301      	adds	r3, #1
 800a47c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a484:	2b03      	cmp	r3, #3
 800a486:	d9b8      	bls.n	800a3fa <tcp_ConnTable_get_cell_value+0x5a>
    }
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800a488:	23f1      	movs	r3, #241	; 0xf1
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3728      	adds	r7, #40	; 0x28
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	08023ea4 	.word	0x08023ea4
 800a498:	080244f8 	.word	0x080244f8
 800a49c:	08024538 	.word	0x08024538

0800a4a0 <tcp_ConnTable_get_next_cell_instance_and_value>:

static snmp_err_t
tcp_ConnTable_get_next_cell_instance_and_value(const u32_t *column, struct snmp_obj_id *row_oid, union snmp_variant_value *value, u32_t *value_len)
{
 800a4a0:	b590      	push	{r4, r7, lr}
 800a4a2:	b0a3      	sub	sp, #140	; 0x8c
 800a4a4:	af02      	add	r7, sp, #8
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	607a      	str	r2, [r7, #4]
 800a4ac:	603b      	str	r3, [r7, #0]
  struct tcp_pcb *pcb;
  struct snmp_next_oid_state state;
  u32_t result_temp[LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges));
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	1d19      	adds	r1, r3, #4
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	781a      	ldrb	r2, [r3, #0]
 800a4b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a4ba:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800a4be:	240a      	movs	r4, #10
 800a4c0:	9400      	str	r4, [sp, #0]
 800a4c2:	f7fe fba3 	bl	8008c0c <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800a4cc:	e03e      	b.n	800a54c <tcp_ConnTable_get_next_cell_instance_and_value+0xac>
    pcb = *tcp_pcb_lists[i];
 800a4ce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a4d2:	4a2c      	ldr	r2, [pc, #176]	; (800a584 <tcp_ConnTable_get_next_cell_instance_and_value+0xe4>)
 800a4d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	67bb      	str	r3, [r7, #120]	; 0x78
    while (pcb != NULL) {
 800a4dc:	e02e      	b.n	800a53c <tcp_ConnTable_get_next_cell_instance_and_value+0x9c>
      u32_t test_oid[LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges)];

      if (IP_IS_V4_VAL(pcb->local_ip)) {
        snmp_ip4_to_oid(ip_2_ip4(&pcb->local_ip), &test_oid[0]);
 800a4de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4e0:	f107 0214 	add.w	r2, r7, #20
 800a4e4:	4611      	mov	r1, r2
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7fd fd56 	bl	8007f98 <snmp_ip4_to_oid>
        test_oid[4] = pcb->local_port;
 800a4ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4ee:	8adb      	ldrh	r3, [r3, #22]
 800a4f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* PCBs in state LISTEN are not connected and have no remote_ip or remote_port */
        if (pcb->state == LISTEN) {
 800a4f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4f4:	7d1b      	ldrb	r3, [r3, #20]
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d109      	bne.n	800a50e <tcp_ConnTable_get_next_cell_instance_and_value+0x6e>
          snmp_ip4_to_oid(IP4_ADDR_ANY4, &test_oid[5]);
 800a4fa:	f107 0314 	add.w	r3, r7, #20
 800a4fe:	3314      	adds	r3, #20
 800a500:	4619      	mov	r1, r3
 800a502:	4821      	ldr	r0, [pc, #132]	; (800a588 <tcp_ConnTable_get_next_cell_instance_and_value+0xe8>)
 800a504:	f7fd fd48 	bl	8007f98 <snmp_ip4_to_oid>
          test_oid[9] = 0;
 800a508:	2300      	movs	r3, #0
 800a50a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a50c:	e00b      	b.n	800a526 <tcp_ConnTable_get_next_cell_instance_and_value+0x86>
        } else {
          if (IP_IS_V6_VAL(pcb->remote_ip)) { /* should never happen */
            continue;
          }
          snmp_ip4_to_oid(ip_2_ip4(&pcb->remote_ip), &test_oid[5]);
 800a50e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a510:	1d1a      	adds	r2, r3, #4
 800a512:	f107 0314 	add.w	r3, r7, #20
 800a516:	3314      	adds	r3, #20
 800a518:	4619      	mov	r1, r3
 800a51a:	4610      	mov	r0, r2
 800a51c:	f7fd fd3c 	bl	8007f98 <snmp_ip4_to_oid>
          test_oid[9] = pcb->remote_port;
 800a520:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a522:	8b1b      	ldrh	r3, [r3, #24]
 800a524:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        /* check generated OID: is it a candidate for the next one? */
        snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(tcp_ConnTable_oid_ranges), pcb);
 800a526:	f107 0114 	add.w	r1, r7, #20
 800a52a:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800a52e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a530:	220a      	movs	r2, #10
 800a532:	f7fe fb8b 	bl	8008c4c <snmp_next_oid_check>
      }

      pcb = pcb->next;
 800a536:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	67bb      	str	r3, [r7, #120]	; 0x78
    while (pcb != NULL) {
 800a53c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d1cd      	bne.n	800a4de <tcp_ConnTable_get_next_cell_instance_and_value+0x3e>
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a542:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a546:	3301      	adds	r3, #1
 800a548:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800a54c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a550:	2b03      	cmp	r3, #3
 800a552:	d9bc      	bls.n	800a4ce <tcp_ConnTable_get_next_cell_instance_and_value+0x2e>
    }
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 800a554:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d10e      	bne.n	800a57a <tcp_ConnTable_get_next_cell_instance_and_value+0xda>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 800a55c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a55e:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 800a562:	4619      	mov	r1, r3
 800a564:	68b8      	ldr	r0, [r7, #8]
 800a566:	f7fd fdeb 	bl	8008140 <snmp_oid_assign>
    /* fill in object properties */
    return tcp_ConnTable_get_cell_value_core((struct tcp_pcb *)state.reference, column, value, value_len);
 800a56a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	68f9      	ldr	r1, [r7, #12]
 800a572:	f7ff feb7 	bl	800a2e4 <tcp_ConnTable_get_cell_value_core>
 800a576:	4603      	mov	r3, r0
 800a578:	e000      	b.n	800a57c <tcp_ConnTable_get_next_cell_instance_and_value+0xdc>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800a57a:	23f1      	movs	r3, #241	; 0xf1
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3784      	adds	r7, #132	; 0x84
 800a580:	46bd      	mov	sp, r7
 800a582:	bd90      	pop	{r4, r7, pc}
 800a584:	080244f8 	.word	0x080244f8
 800a588:	08024538 	.word	0x08024538

0800a58c <tcp_ConnectionTable_get_cell_value_core>:

/* --- tcpConnectionTable --- */

static snmp_err_t
tcp_ConnectionTable_get_cell_value_core(const u32_t *column, struct tcp_pcb *pcb, union snmp_variant_value *value)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b085      	sub	sp, #20
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]
  /* all items except tcpConnectionState and tcpConnectionProcess are declared as not-accessible */
  switch (*column) {
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	2b07      	cmp	r3, #7
 800a59e:	d002      	beq.n	800a5a6 <tcp_ConnectionTable_get_cell_value_core+0x1a>
 800a5a0:	2b08      	cmp	r3, #8
 800a5a2:	d007      	beq.n	800a5b4 <tcp_ConnectionTable_get_cell_value_core+0x28>
 800a5a4:	e00a      	b.n	800a5bc <tcp_ConnectionTable_get_cell_value_core+0x30>
    case 7: /* tcpConnectionState */
      value->u32 = pcb->state + 1;
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	7d1b      	ldrb	r3, [r3, #20]
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	601a      	str	r2, [r3, #0]
      break;
 800a5b2:	e005      	b.n	800a5c0 <tcp_ConnectionTable_get_cell_value_core+0x34>
    case 8: /* tcpConnectionProcess */
      value->u32 = 0; /* not supported */
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	601a      	str	r2, [r3, #0]
      break;
 800a5ba:	e001      	b.n	800a5c0 <tcp_ConnectionTable_get_cell_value_core+0x34>
    default:
      return SNMP_ERR_NOSUCHINSTANCE;
 800a5bc:	23f1      	movs	r3, #241	; 0xf1
 800a5be:	e000      	b.n	800a5c2 <tcp_ConnectionTable_get_cell_value_core+0x36>
  }

  return SNMP_ERR_NOERROR;
 800a5c0:	2300      	movs	r3, #0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3714      	adds	r7, #20
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
	...

0800a5d0 <tcp_ConnectionTable_get_cell_value>:

static snmp_err_t
tcp_ConnectionTable_get_cell_value(const u32_t *column, const u32_t *row_oid, u8_t row_oid_len, union snmp_variant_value *value, u32_t *value_len)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b08c      	sub	sp, #48	; 0x30
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	603b      	str	r3, [r7, #0]
 800a5dc:	4613      	mov	r3, r2
 800a5de:	71fb      	strb	r3, [r7, #7]
  ip_addr_t local_ip, remote_ip;
  u16_t local_port, remote_port;
  struct tcp_pcb *pcb;
  u8_t idx = 0;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  u8_t i;
  struct tcp_pcb **const tcp_pcb_nonlisten_lists[] = {&tcp_bound_pcbs, &tcp_active_pcbs, &tcp_tw_pcbs};
 800a5e6:	4a3e      	ldr	r2, [pc, #248]	; (800a6e0 <tcp_ConnectionTable_get_cell_value+0x110>)
 800a5e8:	f107 0310 	add.w	r3, r7, #16
 800a5ec:	ca07      	ldmia	r2, {r0, r1, r2}
 800a5ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  LWIP_UNUSED_ARG(value_len);

  /* tcpConnectionLocalAddressType + tcpConnectionLocalAddress + tcpConnectionLocalPort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len - idx, &local_ip, &local_port);
 800a5f2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	68ba      	ldr	r2, [r7, #8]
 800a5fa:	18d0      	adds	r0, r2, r3
 800a5fc:	79fa      	ldrb	r2, [r7, #7]
 800a5fe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a602:	1ad3      	subs	r3, r2, r3
 800a604:	b2d9      	uxtb	r1, r3
 800a606:	f107 031e 	add.w	r3, r7, #30
 800a60a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a60e:	f7fd fd62 	bl	80080d6 <snmp_oid_to_ip_port>
 800a612:	4603      	mov	r3, r0
 800a614:	461a      	mov	r2, r3
 800a616:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a61a:	4413      	add	r3, r2
 800a61c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  if (idx == 0) {
 800a620:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a624:	2b00      	cmp	r3, #0
 800a626:	d101      	bne.n	800a62c <tcp_ConnectionTable_get_cell_value+0x5c>
    return SNMP_ERR_NOSUCHINSTANCE;
 800a628:	23f1      	movs	r3, #241	; 0xf1
 800a62a:	e055      	b.n	800a6d8 <tcp_ConnectionTable_get_cell_value+0x108>
  }

  /* tcpConnectionRemAddressType + tcpConnectionRemAddress + tcpConnectionRemPort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len - idx, &remote_ip, &remote_port);
 800a62c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a630:	009b      	lsls	r3, r3, #2
 800a632:	68ba      	ldr	r2, [r7, #8]
 800a634:	18d0      	adds	r0, r2, r3
 800a636:	79fa      	ldrb	r2, [r7, #7]
 800a638:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a63c:	1ad3      	subs	r3, r2, r3
 800a63e:	b2d9      	uxtb	r1, r3
 800a640:	f107 031c 	add.w	r3, r7, #28
 800a644:	f107 0220 	add.w	r2, r7, #32
 800a648:	f7fd fd45 	bl	80080d6 <snmp_oid_to_ip_port>
 800a64c:	4603      	mov	r3, r0
 800a64e:	461a      	mov	r2, r3
 800a650:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a654:	4413      	add	r3, r2
 800a656:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  if (idx == 0) {
 800a65a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d101      	bne.n	800a666 <tcp_ConnectionTable_get_cell_value+0x96>
    return SNMP_ERR_NOSUCHINSTANCE;
 800a662:	23f1      	movs	r3, #241	; 0xf1
 800a664:	e038      	b.n	800a6d8 <tcp_ConnectionTable_get_cell_value+0x108>
  }

  /* find tcp_pcb with requested ip and port*/
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_nonlisten_lists); i++) {
 800a666:	2300      	movs	r3, #0
 800a668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a66c:	e02f      	b.n	800a6ce <tcp_ConnectionTable_get_cell_value+0xfe>
    pcb = *tcp_pcb_nonlisten_lists[i];
 800a66e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	3330      	adds	r3, #48	; 0x30
 800a676:	443b      	add	r3, r7
 800a678:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (pcb != NULL) {
 800a680:	e01d      	b.n	800a6be <tcp_ConnectionTable_get_cell_value+0xee>
      if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 800a682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d115      	bne.n	800a6b8 <tcp_ConnectionTable_get_cell_value+0xe8>
          (local_port == pcb->local_port) &&
 800a68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68e:	8ada      	ldrh	r2, [r3, #22]
 800a690:	8bfb      	ldrh	r3, [r7, #30]
      if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 800a692:	429a      	cmp	r2, r3
 800a694:	d110      	bne.n	800a6b8 <tcp_ConnectionTable_get_cell_value+0xe8>
          ip_addr_cmp(&remote_ip, &pcb->remote_ip) &&
 800a696:	6a3a      	ldr	r2, [r7, #32]
 800a698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a69a:	685b      	ldr	r3, [r3, #4]
          (local_port == pcb->local_port) &&
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d10b      	bne.n	800a6b8 <tcp_ConnectionTable_get_cell_value+0xe8>
          (remote_port == pcb->remote_port)) {
 800a6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a2:	8b1a      	ldrh	r2, [r3, #24]
 800a6a4:	8bbb      	ldrh	r3, [r7, #28]
          ip_addr_cmp(&remote_ip, &pcb->remote_ip) &&
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d106      	bne.n	800a6b8 <tcp_ConnectionTable_get_cell_value+0xe8>
        /* fill in object properties */
        return tcp_ConnectionTable_get_cell_value_core(column, pcb, value);
 800a6aa:	683a      	ldr	r2, [r7, #0]
 800a6ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6ae:	68f8      	ldr	r0, [r7, #12]
 800a6b0:	f7ff ff6c 	bl	800a58c <tcp_ConnectionTable_get_cell_value_core>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	e00f      	b.n	800a6d8 <tcp_ConnectionTable_get_cell_value+0x108>
      }
      pcb = pcb->next;
 800a6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (pcb != NULL) {
 800a6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1de      	bne.n	800a682 <tcp_ConnectionTable_get_cell_value+0xb2>
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_nonlisten_lists); i++) {
 800a6c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a6d2:	2b02      	cmp	r3, #2
 800a6d4:	d9cb      	bls.n	800a66e <tcp_ConnectionTable_get_cell_value+0x9e>
    }
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800a6d6:	23f1      	movs	r3, #241	; 0xf1
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3730      	adds	r7, #48	; 0x30
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	08020468 	.word	0x08020468

0800a6e4 <tcp_ConnectionTable_get_next_cell_instance_and_value>:

static snmp_err_t
tcp_ConnectionTable_get_next_cell_instance_and_value(const u32_t *column, struct snmp_obj_id *row_oid, union snmp_variant_value *value, u32_t *value_len)
{
 800a6e4:	b590      	push	{r4, r7, lr}
 800a6e6:	b0dd      	sub	sp, #372	; 0x174
 800a6e8:	af02      	add	r7, sp, #8
 800a6ea:	f507 74b4 	add.w	r4, r7, #360	; 0x168
 800a6ee:	f5a4 74ae 	sub.w	r4, r4, #348	; 0x15c
 800a6f2:	6020      	str	r0, [r4, #0]
 800a6f4:	f507 70b4 	add.w	r0, r7, #360	; 0x168
 800a6f8:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
 800a6fc:	6001      	str	r1, [r0, #0]
 800a6fe:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 800a702:	f5a1 71b2 	sub.w	r1, r1, #356	; 0x164
 800a706:	600a      	str	r2, [r1, #0]
 800a708:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800a70c:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 800a710:	6013      	str	r3, [r2, #0]
  struct snmp_next_oid_state state;
  /* 1x tcpConnectionLocalAddressType + 1x OID len + 16x tcpConnectionLocalAddress  + 1x tcpConnectionLocalPort
   * 1x tcpConnectionRemAddressType   + 1x OID len + 16x tcpConnectionRemAddress    + 1x tcpConnectionRemPort */
  u32_t  result_temp[38];
  u8_t i;
  struct tcp_pcb **const tcp_pcb_nonlisten_lists[] = {&tcp_bound_pcbs, &tcp_active_pcbs, &tcp_tw_pcbs};
 800a712:	4a4c      	ldr	r2, [pc, #304]	; (800a844 <tcp_ConnectionTable_get_next_cell_instance_and_value+0x160>)
 800a714:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800a718:	ca07      	ldmia	r2, {r0, r1, r2}
 800a71a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  LWIP_UNUSED_ARG(value_len);

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(result_temp));
 800a71e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800a722:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	1d19      	adds	r1, r3, #4
 800a72a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800a72e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	781a      	ldrb	r2, [r3, #0]
 800a736:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800a73a:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 800a73e:	2426      	movs	r4, #38	; 0x26
 800a740:	9400      	str	r4, [sp, #0]
 800a742:	f7fe fa63 	bl	8008c0c <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_nonlisten_lists); i++) {
 800a746:	2300      	movs	r3, #0
 800a748:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
 800a74c:	e051      	b.n	800a7f2 <tcp_ConnectionTable_get_next_cell_instance_and_value+0x10e>
    pcb = *tcp_pcb_nonlisten_lists[i];
 800a74e:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800a758:	443b      	add	r3, r7
 800a75a:	f853 3cc0 	ldr.w	r3, [r3, #-192]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

    while (pcb != NULL) {
 800a764:	e03c      	b.n	800a7e0 <tcp_ConnectionTable_get_next_cell_instance_and_value+0xfc>
      u8_t idx = 0;
 800a766:	2300      	movs	r3, #0
 800a768:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162
      u32_t test_oid[LWIP_ARRAYSIZE(result_temp)];

      /* tcpConnectionLocalAddressType + tcpConnectionLocalAddress + tcpConnectionLocalPort */
      idx += snmp_ip_port_to_oid(&pcb->local_ip, pcb->local_port, &test_oid[idx]);
 800a76c:	f8d7 0164 	ldr.w	r0, [r7, #356]	; 0x164
 800a770:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800a774:	8ad9      	ldrh	r1, [r3, #22]
 800a776:	f897 3162 	ldrb.w	r3, [r7, #354]	; 0x162
 800a77a:	f107 0210 	add.w	r2, r7, #16
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	4413      	add	r3, r2
 800a782:	461a      	mov	r2, r3
 800a784:	f7fd fc2a 	bl	8007fdc <snmp_ip_port_to_oid>
 800a788:	4603      	mov	r3, r0
 800a78a:	461a      	mov	r2, r3
 800a78c:	f897 3162 	ldrb.w	r3, [r7, #354]	; 0x162
 800a790:	4413      	add	r3, r2
 800a792:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162

      /* tcpConnectionRemAddressType + tcpConnectionRemAddress + tcpConnectionRemPort */
      idx += snmp_ip_port_to_oid(&pcb->remote_ip, pcb->remote_port, &test_oid[idx]);
 800a796:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800a79a:	1d18      	adds	r0, r3, #4
 800a79c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800a7a0:	8b19      	ldrh	r1, [r3, #24]
 800a7a2:	f897 3162 	ldrb.w	r3, [r7, #354]	; 0x162
 800a7a6:	f107 0210 	add.w	r2, r7, #16
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	4413      	add	r3, r2
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	f7fd fc14 	bl	8007fdc <snmp_ip_port_to_oid>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	f897 3162 	ldrb.w	r3, [r7, #354]	; 0x162
 800a7bc:	4413      	add	r3, r2
 800a7be:	f887 3162 	strb.w	r3, [r7, #354]	; 0x162

      /* check generated OID: is it a candidate for the next one? */
      snmp_next_oid_check(&state, test_oid, idx, pcb);
 800a7c2:	f897 2162 	ldrb.w	r2, [r7, #354]	; 0x162
 800a7c6:	f107 0110 	add.w	r1, r7, #16
 800a7ca:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 800a7ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800a7d2:	f7fe fa3b 	bl	8008c4c <snmp_next_oid_check>

      pcb = pcb->next;
 800a7d6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    while (pcb != NULL) {
 800a7e0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d1be      	bne.n	800a766 <tcp_ConnectionTable_get_next_cell_instance_and_value+0x82>
  for (i = 0; i < LWIP_ARRAYSIZE(tcp_pcb_nonlisten_lists); i++) {
 800a7e8:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
 800a7f2:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	d9a9      	bls.n	800a74e <tcp_ConnectionTable_get_next_cell_instance_and_value+0x6a>
    }
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 800a7fa:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d11a      	bne.n	800a838 <tcp_ConnectionTable_get_next_cell_instance_and_value+0x154>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 800a802:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 800a806:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800a80a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800a80e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800a812:	6818      	ldr	r0, [r3, #0]
 800a814:	f7fd fc94 	bl	8008140 <snmp_oid_assign>
    /* fill in object properties */
    return tcp_ConnectionTable_get_cell_value_core(column, (struct tcp_pcb *)state.reference, value);
 800a818:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 800a81c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800a820:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 800a824:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800a828:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800a82c:	6812      	ldr	r2, [r2, #0]
 800a82e:	6818      	ldr	r0, [r3, #0]
 800a830:	f7ff feac 	bl	800a58c <tcp_ConnectionTable_get_cell_value_core>
 800a834:	4603      	mov	r3, r0
 800a836:	e000      	b.n	800a83a <tcp_ConnectionTable_get_next_cell_instance_and_value+0x156>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 800a838:	23f1      	movs	r3, #241	; 0xf1
  }
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 800a840:	46bd      	mov	sp, r7
 800a842:	bd90      	pop	{r4, r7, pc}
 800a844:	08020468 	.word	0x08020468

0800a848 <tcp_ListenerTable_get_cell_value_core>:

/* --- tcpListenerTable --- */

static snmp_err_t
tcp_ListenerTable_get_cell_value_core(const u32_t *column, union snmp_variant_value *value)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
  /* all items except tcpListenerProcess are declared as not-accessible */
  switch (*column) {
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2b04      	cmp	r3, #4
 800a858:	d105      	bne.n	800a866 <tcp_ListenerTable_get_cell_value_core+0x1e>
    case 4: /* tcpListenerProcess */
      value->u32 = 0; /* not supported */
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	2200      	movs	r2, #0
 800a85e:	601a      	str	r2, [r3, #0]
      break;
 800a860:	bf00      	nop
    default:
      return SNMP_ERR_NOSUCHINSTANCE;
  }

  return SNMP_ERR_NOERROR;
 800a862:	2300      	movs	r3, #0
 800a864:	e000      	b.n	800a868 <tcp_ListenerTable_get_cell_value_core+0x20>
      return SNMP_ERR_NOSUCHINSTANCE;
 800a866:	23f1      	movs	r3, #241	; 0xf1
}
 800a868:	4618      	mov	r0, r3
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <tcp_ListenerTable_get_cell_value>:

static snmp_err_t
tcp_ListenerTable_get_cell_value(const u32_t *column, const u32_t *row_oid, u8_t row_oid_len, union snmp_variant_value *value, u32_t *value_len)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b088      	sub	sp, #32
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	603b      	str	r3, [r7, #0]
 800a880:	4613      	mov	r3, r2
 800a882:	71fb      	strb	r3, [r7, #7]
  ip_addr_t local_ip;
  u16_t local_port;
  struct tcp_pcb_listen *pcb;
  u8_t idx = 0;
 800a884:	2300      	movs	r3, #0
 800a886:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(value_len);

  /* tcpListenerLocalAddressType + tcpListenerLocalAddress + tcpListenerLocalPort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len - idx, &local_ip, &local_port);
 800a888:	7efb      	ldrb	r3, [r7, #27]
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	68ba      	ldr	r2, [r7, #8]
 800a88e:	18d0      	adds	r0, r2, r3
 800a890:	79fa      	ldrb	r2, [r7, #7]
 800a892:	7efb      	ldrb	r3, [r7, #27]
 800a894:	1ad3      	subs	r3, r2, r3
 800a896:	b2d9      	uxtb	r1, r3
 800a898:	f107 0312 	add.w	r3, r7, #18
 800a89c:	f107 0214 	add.w	r2, r7, #20
 800a8a0:	f7fd fc19 	bl	80080d6 <snmp_oid_to_ip_port>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	7efb      	ldrb	r3, [r7, #27]
 800a8aa:	4413      	add	r3, r2
 800a8ac:	76fb      	strb	r3, [r7, #27]
  if (idx == 0) {
 800a8ae:	7efb      	ldrb	r3, [r7, #27]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d101      	bne.n	800a8b8 <tcp_ListenerTable_get_cell_value+0x44>
    return SNMP_ERR_NOSUCHINSTANCE;
 800a8b4:	23f1      	movs	r3, #241	; 0xf1
 800a8b6:	e01a      	b.n	800a8ee <tcp_ListenerTable_get_cell_value+0x7a>
  }

  /* find tcp_pcb with requested ip and port*/
  pcb = tcp_listen_pcbs.listen_pcbs;
 800a8b8:	4b0f      	ldr	r3, [pc, #60]	; (800a8f8 <tcp_ListenerTable_get_cell_value+0x84>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 800a8be:	e012      	b.n	800a8e6 <tcp_ListenerTable_get_cell_value+0x72>
    if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 800a8c0:	697a      	ldr	r2, [r7, #20]
 800a8c2:	69fb      	ldr	r3, [r7, #28]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d10a      	bne.n	800a8e0 <tcp_ListenerTable_get_cell_value+0x6c>
        (local_port == pcb->local_port)) {
 800a8ca:	69fb      	ldr	r3, [r7, #28]
 800a8cc:	8ada      	ldrh	r2, [r3, #22]
 800a8ce:	8a7b      	ldrh	r3, [r7, #18]
    if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d105      	bne.n	800a8e0 <tcp_ListenerTable_get_cell_value+0x6c>
      /* fill in object properties */
      return tcp_ListenerTable_get_cell_value_core(column, value);
 800a8d4:	6839      	ldr	r1, [r7, #0]
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	f7ff ffb6 	bl	800a848 <tcp_ListenerTable_get_cell_value_core>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	e006      	b.n	800a8ee <tcp_ListenerTable_get_cell_value+0x7a>
    }
    pcb = pcb->next;
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1e9      	bne.n	800a8c0 <tcp_ListenerTable_get_cell_value+0x4c>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800a8ec:	23f1      	movs	r3, #241	; 0xf1
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3720      	adds	r7, #32
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	200073a4 	.word	0x200073a4

0800a8fc <tcp_ListenerTable_get_next_cell_instance_and_value>:

static snmp_err_t
tcp_ListenerTable_get_next_cell_instance_and_value(const u32_t *column, struct snmp_obj_id *row_oid, union snmp_variant_value *value, u32_t *value_len)
{
 800a8fc:	b590      	push	{r4, r7, lr}
 800a8fe:	b0b5      	sub	sp, #212	; 0xd4
 800a900:	af02      	add	r7, sp, #8
 800a902:	60f8      	str	r0, [r7, #12]
 800a904:	60b9      	str	r1, [r7, #8]
 800a906:	607a      	str	r2, [r7, #4]
 800a908:	603b      	str	r3, [r7, #0]
  u32_t  result_temp[19];

  LWIP_UNUSED_ARG(value_len);

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(result_temp));
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	1d19      	adds	r1, r3, #4
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	781a      	ldrb	r2, [r3, #0]
 800a912:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800a916:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 800a91a:	2413      	movs	r4, #19
 800a91c:	9400      	str	r4, [sp, #0]
 800a91e:	f7fe f975 	bl	8008c0c <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  pcb = tcp_listen_pcbs.listen_pcbs;
 800a922:	4b23      	ldr	r3, [pc, #140]	; (800a9b0 <tcp_ListenerTable_get_next_cell_instance_and_value+0xb4>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  while (pcb != NULL) {
 800a92a:	e025      	b.n	800a978 <tcp_ListenerTable_get_next_cell_instance_and_value+0x7c>
    u8_t idx = 0;
 800a92c:	2300      	movs	r3, #0
 800a92e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
    u32_t test_oid[LWIP_ARRAYSIZE(result_temp)];

    /* tcpListenerLocalAddressType + tcpListenerLocalAddress + tcpListenerLocalPort */
    idx += snmp_ip_port_to_oid(&pcb->local_ip, pcb->local_port, &test_oid[idx]);
 800a932:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800a936:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a93a:	8ad9      	ldrh	r1, [r3, #22]
 800a93c:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800a940:	f107 0214 	add.w	r2, r7, #20
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	4413      	add	r3, r2
 800a948:	461a      	mov	r2, r3
 800a94a:	f7fd fb47 	bl	8007fdc <snmp_ip_port_to_oid>
 800a94e:	4603      	mov	r3, r0
 800a950:	461a      	mov	r2, r3
 800a952:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800a956:	4413      	add	r3, r2
 800a958:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

    /* check generated OID: is it a candidate for the next one? */
    snmp_next_oid_check(&state, test_oid, idx, NULL);
 800a95c:	f897 20c3 	ldrb.w	r2, [r7, #195]	; 0xc3
 800a960:	f107 0114 	add.w	r1, r7, #20
 800a964:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 800a968:	2300      	movs	r3, #0
 800a96a:	f7fe f96f 	bl	8008c4c <snmp_next_oid_check>

    pcb = pcb->next;
 800a96e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  while (pcb != NULL) {
 800a978:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d1d5      	bne.n	800a92c <tcp_ListenerTable_get_next_cell_instance_and_value+0x30>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 800a980:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 800a984:	2b00      	cmp	r3, #0
 800a986:	d10d      	bne.n	800a9a4 <tcp_ListenerTable_get_next_cell_instance_and_value+0xa8>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 800a988:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a98c:	f897 20b8 	ldrb.w	r2, [r7, #184]	; 0xb8
 800a990:	4619      	mov	r1, r3
 800a992:	68b8      	ldr	r0, [r7, #8]
 800a994:	f7fd fbd4 	bl	8008140 <snmp_oid_assign>
    /* fill in object properties */
    return tcp_ListenerTable_get_cell_value_core(column, value);
 800a998:	6879      	ldr	r1, [r7, #4]
 800a99a:	68f8      	ldr	r0, [r7, #12]
 800a99c:	f7ff ff54 	bl	800a848 <tcp_ListenerTable_get_cell_value_core>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	e000      	b.n	800a9a6 <tcp_ListenerTable_get_next_cell_instance_and_value+0xaa>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 800a9a4:	23f1      	movs	r3, #241	; 0xf1
  }
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	37cc      	adds	r7, #204	; 0xcc
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd90      	pop	{r4, r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	200073a4 	.word	0x200073a4

0800a9b4 <udp_get_value>:

/* --- udp .1.3.6.1.2.1.7 ----------------------------------------------------- */

static s16_t
udp_get_value(struct snmp_node_instance *instance, void *value)
{
 800a9b4:	b4b0      	push	{r4, r5, r7}
 800a9b6:	b089      	sub	sp, #36	; 0x24
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
  u32_t *uint_ptr = (u32_t *)value;
 800a9be:	6839      	ldr	r1, [r7, #0]
 800a9c0:	61f9      	str	r1, [r7, #28]

  switch (instance->node->oid) {
 800a9c2:	6879      	ldr	r1, [r7, #4]
 800a9c4:	6809      	ldr	r1, [r1, #0]
 800a9c6:	6849      	ldr	r1, [r1, #4]
 800a9c8:	3901      	subs	r1, #1
 800a9ca:	2908      	cmp	r1, #8
 800a9cc:	d84e      	bhi.n	800aa6c <udp_get_value+0xb8>
 800a9ce:	a001      	add	r0, pc, #4	; (adr r0, 800a9d4 <udp_get_value+0x20>)
 800a9d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a9d4:	0800a9f9 	.word	0x0800a9f9
 800a9d8:	0800aa07 	.word	0x0800aa07
 800a9dc:	0800aa15 	.word	0x0800aa15
 800a9e0:	0800aa23 	.word	0x0800aa23
 800a9e4:	0800aa6d 	.word	0x0800aa6d
 800a9e8:	0800aa6d 	.word	0x0800aa6d
 800a9ec:	0800aa6d 	.word	0x0800aa6d
 800a9f0:	0800aa31 	.word	0x0800aa31
 800a9f4:	0800aa4f 	.word	0x0800aa4f
    case 1: /* udpInDatagrams */
      *uint_ptr = STATS_GET(mib2.udpindatagrams);
 800a9f8:	4b20      	ldr	r3, [pc, #128]	; (800aa7c <udp_get_value+0xc8>)
 800a9fa:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 800aa02:	2304      	movs	r3, #4
 800aa04:	e034      	b.n	800aa70 <udp_get_value+0xbc>
    case 2: /* udpNoPorts */
      *uint_ptr = STATS_GET(mib2.udpnoports);
 800aa06:	4b1d      	ldr	r3, [pc, #116]	; (800aa7c <udp_get_value+0xc8>)
 800aa08:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 800aa10:	2304      	movs	r3, #4
 800aa12:	e02d      	b.n	800aa70 <udp_get_value+0xbc>
    case 3: /* udpInErrors */
      *uint_ptr = STATS_GET(mib2.udpinerrors);
 800aa14:	4b19      	ldr	r3, [pc, #100]	; (800aa7c <udp_get_value+0xc8>)
 800aa16:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 800aa1e:	2304      	movs	r3, #4
 800aa20:	e026      	b.n	800aa70 <udp_get_value+0xbc>
    case 4: /* udpOutDatagrams */
      *uint_ptr = STATS_GET(mib2.udpoutdatagrams);
 800aa22:	4b16      	ldr	r3, [pc, #88]	; (800aa7c <udp_get_value+0xc8>)
 800aa24:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800aa28:	69fb      	ldr	r3, [r7, #28]
 800aa2a:	601a      	str	r2, [r3, #0]
      return sizeof(*uint_ptr);
 800aa2c:	2304      	movs	r3, #4
 800aa2e:	e01f      	b.n	800aa70 <udp_get_value+0xbc>
#if LWIP_HAVE_INT64
    case 8: { /* udpHCInDatagrams */
      /* use the 32 bit counter for now... */
      u64_t val64 = STATS_GET(mib2.udpindatagrams);
 800aa30:	4b12      	ldr	r3, [pc, #72]	; (800aa7c <udp_get_value+0xc8>)
 800aa32:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800aa36:	2200      	movs	r2, #0
 800aa38:	461c      	mov	r4, r3
 800aa3a:	4615      	mov	r5, r2
 800aa3c:	e9c7 4502 	strd	r4, r5, [r7, #8]
      *((u64_t *)value) = val64;
 800aa40:	6839      	ldr	r1, [r7, #0]
 800aa42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aa46:	e9c1 2300 	strd	r2, r3, [r1]
    }
    return sizeof(u64_t);
 800aa4a:	2308      	movs	r3, #8
 800aa4c:	e010      	b.n	800aa70 <udp_get_value+0xbc>
    case 9: { /* udpHCOutDatagrams */
      /* use the 32 bit counter for now... */
      u64_t val64 = STATS_GET(mib2.udpoutdatagrams);
 800aa4e:	490b      	ldr	r1, [pc, #44]	; (800aa7c <udp_get_value+0xc8>)
 800aa50:	f8d1 1148 	ldr.w	r1, [r1, #328]	; 0x148
 800aa54:	2000      	movs	r0, #0
 800aa56:	460a      	mov	r2, r1
 800aa58:	4603      	mov	r3, r0
 800aa5a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *((u64_t *)value) = val64;
 800aa5e:	6839      	ldr	r1, [r7, #0]
 800aa60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800aa64:	e9c1 2300 	strd	r2, r3, [r1]
    }
    return sizeof(u64_t);
 800aa68:	2308      	movs	r3, #8
 800aa6a:	e001      	b.n	800aa70 <udp_get_value+0xbc>
#endif
    default:
      LWIP_DEBUGF(SNMP_MIB_DEBUG, ("udp_get_value(): unknown id: %"S32_F"\n", instance->node->oid));
      break;
 800aa6c:	bf00      	nop
  }

  return 0;
 800aa6e:	2300      	movs	r3, #0
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3724      	adds	r7, #36	; 0x24
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bcb0      	pop	{r4, r5, r7}
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop
 800aa7c:	20007204 	.word	0x20007204

0800aa80 <udp_endpointTable_get_cell_value_core>:

/* --- udpEndpointTable --- */

static snmp_err_t
udp_endpointTable_get_cell_value_core(const u32_t *column, union snmp_variant_value *value)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
  /* all items except udpEndpointProcess are declared as not-accessible */
  switch (*column) {
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	2b08      	cmp	r3, #8
 800aa90:	d105      	bne.n	800aa9e <udp_endpointTable_get_cell_value_core+0x1e>
    case 8: /* udpEndpointProcess */
      value->u32 = 0; /* not supported */
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	2200      	movs	r2, #0
 800aa96:	601a      	str	r2, [r3, #0]
      break;
 800aa98:	bf00      	nop
    default:
      return SNMP_ERR_NOSUCHINSTANCE;
  }

  return SNMP_ERR_NOERROR;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	e000      	b.n	800aaa0 <udp_endpointTable_get_cell_value_core+0x20>
      return SNMP_ERR_NOSUCHINSTANCE;
 800aa9e:	23f1      	movs	r3, #241	; 0xf1
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	370c      	adds	r7, #12
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr

0800aaac <udp_endpointTable_get_cell_value>:

static snmp_err_t
udp_endpointTable_get_cell_value(const u32_t *column, const u32_t *row_oid, u8_t row_oid_len, union snmp_variant_value *value, u32_t *value_len)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b08a      	sub	sp, #40	; 0x28
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	603b      	str	r3, [r7, #0]
 800aab8:	4613      	mov	r3, r2
 800aaba:	71fb      	strb	r3, [r7, #7]
  ip_addr_t local_ip, remote_ip;
  u16_t local_port, remote_port;
  struct udp_pcb *pcb;
  u8_t idx = 0;
 800aabc:	2300      	movs	r3, #0
 800aabe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  LWIP_UNUSED_ARG(value_len);

  /* udpEndpointLocalAddressType + udpEndpointLocalAddress + udpEndpointLocalPort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len - idx, &local_ip, &local_port);
 800aac2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	68ba      	ldr	r2, [r7, #8]
 800aaca:	18d0      	adds	r0, r2, r3
 800aacc:	79fa      	ldrb	r2, [r7, #7]
 800aace:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aad2:	1ad3      	subs	r3, r2, r3
 800aad4:	b2d9      	uxtb	r1, r3
 800aad6:	f107 0316 	add.w	r3, r7, #22
 800aada:	f107 021c 	add.w	r2, r7, #28
 800aade:	f7fd fafa 	bl	80080d6 <snmp_oid_to_ip_port>
 800aae2:	4603      	mov	r3, r0
 800aae4:	461a      	mov	r2, r3
 800aae6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aaea:	4413      	add	r3, r2
 800aaec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (idx == 0) {
 800aaf0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d101      	bne.n	800aafc <udp_endpointTable_get_cell_value+0x50>
    return SNMP_ERR_NOSUCHINSTANCE;
 800aaf8:	23f1      	movs	r3, #241	; 0xf1
 800aafa:	e052      	b.n	800aba2 <udp_endpointTable_get_cell_value+0xf6>
  }

  /* udpEndpointRemoteAddressType + udpEndpointRemoteAddress + udpEndpointRemotePort */
  idx += snmp_oid_to_ip_port(&row_oid[idx], row_oid_len - idx, &remote_ip, &remote_port);
 800aafc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	68ba      	ldr	r2, [r7, #8]
 800ab04:	18d0      	adds	r0, r2, r3
 800ab06:	79fa      	ldrb	r2, [r7, #7]
 800ab08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab0c:	1ad3      	subs	r3, r2, r3
 800ab0e:	b2d9      	uxtb	r1, r3
 800ab10:	f107 0314 	add.w	r3, r7, #20
 800ab14:	f107 0218 	add.w	r2, r7, #24
 800ab18:	f7fd fadd 	bl	80080d6 <snmp_oid_to_ip_port>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	461a      	mov	r2, r3
 800ab20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab24:	4413      	add	r3, r2
 800ab26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (idx == 0) {
 800ab2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d101      	bne.n	800ab36 <udp_endpointTable_get_cell_value+0x8a>
    return SNMP_ERR_NOSUCHINSTANCE;
 800ab32:	23f1      	movs	r3, #241	; 0xf1
 800ab34:	e035      	b.n	800aba2 <udp_endpointTable_get_cell_value+0xf6>
  }

  /* udpEndpointInstance */
  if (row_oid_len < (idx + 1)) {
 800ab36:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800ab3a:	79fb      	ldrb	r3, [r7, #7]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d301      	bcc.n	800ab44 <udp_endpointTable_get_cell_value+0x98>
    return SNMP_ERR_NOSUCHINSTANCE;
 800ab40:	23f1      	movs	r3, #241	; 0xf1
 800ab42:	e02e      	b.n	800aba2 <udp_endpointTable_get_cell_value+0xf6>
  }
  if (row_oid[idx] != 0) {
 800ab44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	68ba      	ldr	r2, [r7, #8]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d001      	beq.n	800ab58 <udp_endpointTable_get_cell_value+0xac>
    return SNMP_ERR_NOSUCHINSTANCE;
 800ab54:	23f1      	movs	r3, #241	; 0xf1
 800ab56:	e024      	b.n	800aba2 <udp_endpointTable_get_cell_value+0xf6>
  }

  /* find udp_pcb with requested ip and port*/
  pcb = udp_pcbs;
 800ab58:	4b14      	ldr	r3, [pc, #80]	; (800abac <udp_endpointTable_get_cell_value+0x100>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800ab5e:	e01c      	b.n	800ab9a <udp_endpointTable_get_cell_value+0xee>
    if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 800ab60:	69fa      	ldr	r2, [r7, #28]
 800ab62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d114      	bne.n	800ab94 <udp_endpointTable_get_cell_value+0xe8>
        (local_port == pcb->local_port) &&
 800ab6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6c:	8a5a      	ldrh	r2, [r3, #18]
 800ab6e:	8afb      	ldrh	r3, [r7, #22]
    if (ip_addr_cmp(&local_ip, &pcb->local_ip) &&
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d10f      	bne.n	800ab94 <udp_endpointTable_get_cell_value+0xe8>
        ip_addr_cmp(&remote_ip, &pcb->remote_ip) &&
 800ab74:	69ba      	ldr	r2, [r7, #24]
 800ab76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab78:	685b      	ldr	r3, [r3, #4]
        (local_port == pcb->local_port) &&
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d10a      	bne.n	800ab94 <udp_endpointTable_get_cell_value+0xe8>
        (remote_port == pcb->remote_port)) {
 800ab7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab80:	8a9a      	ldrh	r2, [r3, #20]
 800ab82:	8abb      	ldrh	r3, [r7, #20]
        ip_addr_cmp(&remote_ip, &pcb->remote_ip) &&
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d105      	bne.n	800ab94 <udp_endpointTable_get_cell_value+0xe8>
      /* fill in object properties */
      return udp_endpointTable_get_cell_value_core(column, value);
 800ab88:	6839      	ldr	r1, [r7, #0]
 800ab8a:	68f8      	ldr	r0, [r7, #12]
 800ab8c:	f7ff ff78 	bl	800aa80 <udp_endpointTable_get_cell_value_core>
 800ab90:	4603      	mov	r3, r0
 800ab92:	e006      	b.n	800aba2 <udp_endpointTable_get_cell_value+0xf6>
    }
    pcb = pcb->next;
 800ab94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800ab9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d1df      	bne.n	800ab60 <udp_endpointTable_get_cell_value+0xb4>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800aba0:	23f1      	movs	r3, #241	; 0xf1
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3728      	adds	r7, #40	; 0x28
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	200073f8 	.word	0x200073f8

0800abb0 <udp_endpointTable_get_next_cell_instance_and_value>:

static snmp_err_t
udp_endpointTable_get_next_cell_instance_and_value(const u32_t *column, struct snmp_obj_id *row_oid, union snmp_variant_value *value, u32_t *value_len)
{
 800abb0:	b590      	push	{r4, r7, lr}
 800abb2:	b0dd      	sub	sp, #372	; 0x174
 800abb4:	af02      	add	r7, sp, #8
 800abb6:	f507 74b4 	add.w	r4, r7, #360	; 0x168
 800abba:	f5a4 74ae 	sub.w	r4, r4, #348	; 0x15c
 800abbe:	6020      	str	r0, [r4, #0]
 800abc0:	f507 70b4 	add.w	r0, r7, #360	; 0x168
 800abc4:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
 800abc8:	6001      	str	r1, [r0, #0]
 800abca:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 800abce:	f5a1 71b2 	sub.w	r1, r1, #356	; 0x164
 800abd2:	600a      	str	r2, [r1, #0]
 800abd4:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 800abd8:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 800abdc:	6013      	str	r3, [r2, #0]
  u32_t  result_temp[39];

  LWIP_UNUSED_ARG(value_len);

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(result_temp));
 800abde:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800abe2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	1d19      	adds	r1, r3, #4
 800abea:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800abee:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	781a      	ldrb	r2, [r3, #0]
 800abf6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800abfa:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 800abfe:	2427      	movs	r4, #39	; 0x27
 800ac00:	9400      	str	r4, [sp, #0]
 800ac02:	f7fe f803 	bl	8008c0c <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  pcb = udp_pcbs;
 800ac06:	4b3b      	ldr	r3, [pc, #236]	; (800acf4 <udp_endpointTable_get_next_cell_instance_and_value+0x144>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  while (pcb != NULL) {
 800ac0e:	e049      	b.n	800aca4 <udp_endpointTable_get_next_cell_instance_and_value+0xf4>
    u32_t test_oid[LWIP_ARRAYSIZE(result_temp)];
    u8_t idx = 0;
 800ac10:	2300      	movs	r3, #0
 800ac12:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163

    /* udpEndpointLocalAddressType + udpEndpointLocalAddress + udpEndpointLocalPort */
    idx += snmp_ip_port_to_oid(&pcb->local_ip, pcb->local_port, &test_oid[idx]);
 800ac16:	f8d7 0164 	ldr.w	r0, [r7, #356]	; 0x164
 800ac1a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800ac1e:	8a59      	ldrh	r1, [r3, #18]
 800ac20:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 800ac24:	f107 0214 	add.w	r2, r7, #20
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	4413      	add	r3, r2
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	f7fd f9d5 	bl	8007fdc <snmp_ip_port_to_oid>
 800ac32:	4603      	mov	r3, r0
 800ac34:	461a      	mov	r2, r3
 800ac36:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 800ac3a:	4413      	add	r3, r2
 800ac3c:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163

    /* udpEndpointRemoteAddressType + udpEndpointRemoteAddress + udpEndpointRemotePort */
    idx += snmp_ip_port_to_oid(&pcb->remote_ip, pcb->remote_port, &test_oid[idx]);
 800ac40:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800ac44:	1d18      	adds	r0, r3, #4
 800ac46:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800ac4a:	8a99      	ldrh	r1, [r3, #20]
 800ac4c:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 800ac50:	f107 0214 	add.w	r2, r7, #20
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	4413      	add	r3, r2
 800ac58:	461a      	mov	r2, r3
 800ac5a:	f7fd f9bf 	bl	8007fdc <snmp_ip_port_to_oid>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	461a      	mov	r2, r3
 800ac62:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 800ac66:	4413      	add	r3, r2
 800ac68:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163

    test_oid[idx] = 0; /* udpEndpointInstance */
 800ac6c:	f897 2163 	ldrb.w	r2, [r7, #355]	; 0x163
 800ac70:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800ac74:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800ac78:	2100      	movs	r1, #0
 800ac7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    idx++;
 800ac7e:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 800ac82:	3301      	adds	r3, #1
 800ac84:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163

    /* check generated OID: is it a candidate for the next one? */
    snmp_next_oid_check(&state, test_oid, idx, NULL);
 800ac88:	f897 2163 	ldrb.w	r2, [r7, #355]	; 0x163
 800ac8c:	f107 0114 	add.w	r1, r7, #20
 800ac90:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 800ac94:	2300      	movs	r3, #0
 800ac96:	f7fd ffd9 	bl	8008c4c <snmp_next_oid_check>

    pcb = pcb->next;
 800ac9a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800ac9e:	68db      	ldr	r3, [r3, #12]
 800aca0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  while (pcb != NULL) {
 800aca4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d1b1      	bne.n	800ac10 <udp_endpointTable_get_next_cell_instance_and_value+0x60>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 800acac:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d118      	bne.n	800ace6 <udp_endpointTable_get_next_cell_instance_and_value+0x136>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 800acb4:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 800acb8:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800acbc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800acc0:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800acc4:	6818      	ldr	r0, [r3, #0]
 800acc6:	f7fd fa3b 	bl	8008140 <snmp_oid_assign>
    /* fill in object properties */
    return udp_endpointTable_get_cell_value_core(column, value);
 800acca:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800acce:	f5a3 72b2 	sub.w	r2, r3, #356	; 0x164
 800acd2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800acd6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800acda:	6811      	ldr	r1, [r2, #0]
 800acdc:	6818      	ldr	r0, [r3, #0]
 800acde:	f7ff fecf 	bl	800aa80 <udp_endpointTable_get_cell_value_core>
 800ace2:	4603      	mov	r3, r0
 800ace4:	e000      	b.n	800ace8 <udp_endpointTable_get_next_cell_instance_and_value+0x138>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 800ace6:	23f1      	movs	r3, #241	; 0xf1
  }
}
 800ace8:	4618      	mov	r0, r3
 800acea:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd90      	pop	{r4, r7, pc}
 800acf2:	bf00      	nop
 800acf4:	200073f8 	.word	0x200073f8

0800acf8 <udp_Table_get_cell_value_core>:
  { 1, 0xffff }  /* Port        */
};

static snmp_err_t
udp_Table_get_cell_value_core(struct udp_pcb *pcb, const u32_t *column, union snmp_variant_value *value, u32_t *value_len)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b085      	sub	sp, #20
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	607a      	str	r2, [r7, #4]
 800ad04:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(value_len);

  switch (*column) {
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d002      	beq.n	800ad14 <udp_Table_get_cell_value_core+0x1c>
 800ad0e:	2b02      	cmp	r3, #2
 800ad10:	d005      	beq.n	800ad1e <udp_Table_get_cell_value_core+0x26>
 800ad12:	e00a      	b.n	800ad2a <udp_Table_get_cell_value_core+0x32>
    case 1: /* udpLocalAddress */
      /* set reference to PCB local IP and return a generic node that copies IP4 addresses */
      value->u32 = ip_2_ip4(&pcb->local_ip)->addr;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681a      	ldr	r2, [r3, #0]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	601a      	str	r2, [r3, #0]
      break;
 800ad1c:	e007      	b.n	800ad2e <udp_Table_get_cell_value_core+0x36>
    case 2: /* udpLocalPort */
      /* set reference to PCB local port and return a generic node that copies u16_t values */
      value->u32 = pcb->local_port;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	8a5b      	ldrh	r3, [r3, #18]
 800ad22:	461a      	mov	r2, r3
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	601a      	str	r2, [r3, #0]
      break;
 800ad28:	e001      	b.n	800ad2e <udp_Table_get_cell_value_core+0x36>
    default:
      return SNMP_ERR_NOSUCHINSTANCE;
 800ad2a:	23f1      	movs	r3, #241	; 0xf1
 800ad2c:	e000      	b.n	800ad30 <udp_Table_get_cell_value_core+0x38>
  }

  return SNMP_ERR_NOERROR;
 800ad2e:	2300      	movs	r3, #0
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3714      	adds	r7, #20
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr

0800ad3c <udp_Table_get_cell_value>:

static snmp_err_t
udp_Table_get_cell_value(const u32_t *column, const u32_t *row_oid, u8_t row_oid_len, union snmp_variant_value *value, u32_t *value_len)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b088      	sub	sp, #32
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	603b      	str	r3, [r7, #0]
 800ad48:	4613      	mov	r3, r2
 800ad4a:	71fb      	strb	r3, [r7, #7]
  ip4_addr_t ip;
  u16_t port;
  struct udp_pcb *pcb;

  /* check if incoming OID length and if values are in plausible range */
  if (!snmp_oid_in_range(row_oid, row_oid_len, udp_Table_oid_ranges, LWIP_ARRAYSIZE(udp_Table_oid_ranges))) {
 800ad4c:	79f9      	ldrb	r1, [r7, #7]
 800ad4e:	2305      	movs	r3, #5
 800ad50:	4a19      	ldr	r2, [pc, #100]	; (800adb8 <udp_Table_get_cell_value+0x7c>)
 800ad52:	68b8      	ldr	r0, [r7, #8]
 800ad54:	f7fd ffc0 	bl	8008cd8 <snmp_oid_in_range>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d101      	bne.n	800ad62 <udp_Table_get_cell_value+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 800ad5e:	23f1      	movs	r3, #241	; 0xf1
 800ad60:	e026      	b.n	800adb0 <udp_Table_get_cell_value+0x74>
  }

  /* get IP and port from incoming OID */
  snmp_oid_to_ip4(&row_oid[0], &ip); /* we know it succeeds because of oid_in_range check above */
 800ad62:	f107 0314 	add.w	r3, r7, #20
 800ad66:	4619      	mov	r1, r3
 800ad68:	68b8      	ldr	r0, [r7, #8]
 800ad6a:	f7fd f88d 	bl	8007e88 <snmp_oid_to_ip4>
  port = (u16_t)row_oid[4];
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	3310      	adds	r3, #16
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	837b      	strh	r3, [r7, #26]

  /* find udp_pcb with requested ip and port*/
  pcb = udp_pcbs;
 800ad76:	4b11      	ldr	r3, [pc, #68]	; (800adbc <udp_Table_get_cell_value+0x80>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 800ad7c:	e014      	b.n	800ada8 <udp_Table_get_cell_value+0x6c>
    if (IP_IS_V4_VAL(pcb->local_ip)) {
      if (ip4_addr_cmp(&ip, ip_2_ip4(&pcb->local_ip)) && (port == pcb->local_port)) {
 800ad7e:	697a      	ldr	r2, [r7, #20]
 800ad80:	69fb      	ldr	r3, [r7, #28]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d10c      	bne.n	800ada2 <udp_Table_get_cell_value+0x66>
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	8a5b      	ldrh	r3, [r3, #18]
 800ad8c:	8b7a      	ldrh	r2, [r7, #26]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d107      	bne.n	800ada2 <udp_Table_get_cell_value+0x66>
        /* fill in object properties */
        return udp_Table_get_cell_value_core(pcb, column, value, value_len);
 800ad92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad94:	683a      	ldr	r2, [r7, #0]
 800ad96:	68f9      	ldr	r1, [r7, #12]
 800ad98:	69f8      	ldr	r0, [r7, #28]
 800ad9a:	f7ff ffad 	bl	800acf8 <udp_Table_get_cell_value_core>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	e006      	b.n	800adb0 <udp_Table_get_cell_value+0x74>
      }
    }
    pcb = pcb->next;
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	68db      	ldr	r3, [r3, #12]
 800ada6:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 800ada8:	69fb      	ldr	r3, [r7, #28]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d1e7      	bne.n	800ad7e <udp_Table_get_cell_value+0x42>
  }

  /* not found */
  return SNMP_ERR_NOSUCHINSTANCE;
 800adae:	23f1      	movs	r3, #241	; 0xf1
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3720      	adds	r7, #32
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	080241f0 	.word	0x080241f0
 800adbc:	200073f8 	.word	0x200073f8

0800adc0 <udp_Table_get_next_cell_instance_and_value>:

static snmp_err_t
udp_Table_get_next_cell_instance_and_value(const u32_t *column, struct snmp_obj_id *row_oid, union snmp_variant_value *value, u32_t *value_len)
{
 800adc0:	b590      	push	{r4, r7, lr}
 800adc2:	b097      	sub	sp, #92	; 0x5c
 800adc4:	af02      	add	r7, sp, #8
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	607a      	str	r2, [r7, #4]
 800adcc:	603b      	str	r3, [r7, #0]
  struct udp_pcb *pcb;
  struct snmp_next_oid_state state;
  u32_t  result_temp[LWIP_ARRAYSIZE(udp_Table_oid_ranges)];

  /* init struct to search next oid */
  snmp_next_oid_init(&state, row_oid->id, row_oid->len, result_temp, LWIP_ARRAYSIZE(udp_Table_oid_ranges));
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	1d19      	adds	r1, r3, #4
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	781a      	ldrb	r2, [r3, #0]
 800add6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adda:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800adde:	2405      	movs	r4, #5
 800ade0:	9400      	str	r4, [sp, #0]
 800ade2:	f7fd ff13 	bl	8008c0c <snmp_next_oid_init>

  /* iterate over all possible OIDs to find the next one */
  pcb = udp_pcbs;
 800ade6:	4b1a      	ldr	r3, [pc, #104]	; (800ae50 <udp_Table_get_next_cell_instance_and_value+0x90>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	64fb      	str	r3, [r7, #76]	; 0x4c
  while (pcb != NULL) {
 800adec:	e014      	b.n	800ae18 <udp_Table_get_next_cell_instance_and_value+0x58>
    u32_t test_oid[LWIP_ARRAYSIZE(udp_Table_oid_ranges)];

    if (IP_IS_V4_VAL(pcb->local_ip)) {
      snmp_ip4_to_oid(ip_2_ip4(&pcb->local_ip), &test_oid[0]);
 800adee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adf0:	f107 0210 	add.w	r2, r7, #16
 800adf4:	4611      	mov	r1, r2
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7fd f8ce 	bl	8007f98 <snmp_ip4_to_oid>
      test_oid[4] = pcb->local_port;
 800adfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adfe:	8a5b      	ldrh	r3, [r3, #18]
 800ae00:	623b      	str	r3, [r7, #32]

      /* check generated OID: is it a candidate for the next one? */
      snmp_next_oid_check(&state, test_oid, LWIP_ARRAYSIZE(udp_Table_oid_ranges), pcb);
 800ae02:	f107 0110 	add.w	r1, r7, #16
 800ae06:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800ae0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae0c:	2205      	movs	r2, #5
 800ae0e:	f7fd ff1d 	bl	8008c4c <snmp_next_oid_check>
    }

    pcb = pcb->next;
 800ae12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae14:	68db      	ldr	r3, [r3, #12]
 800ae16:	64fb      	str	r3, [r7, #76]	; 0x4c
  while (pcb != NULL) {
 800ae18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d1e7      	bne.n	800adee <udp_Table_get_next_cell_instance_and_value+0x2e>
  }

  /* did we find a next one? */
  if (state.status == SNMP_NEXT_OID_STATUS_SUCCESS) {
 800ae1e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d10e      	bne.n	800ae44 <udp_Table_get_next_cell_instance_and_value+0x84>
    snmp_oid_assign(row_oid, state.next_oid, state.next_oid_len);
 800ae26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae28:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	68b8      	ldr	r0, [r7, #8]
 800ae30:	f7fd f986 	bl	8008140 <snmp_oid_assign>
    /* fill in object properties */
    return udp_Table_get_cell_value_core((struct udp_pcb *)state.reference, column, value, value_len);
 800ae34:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	68f9      	ldr	r1, [r7, #12]
 800ae3c:	f7ff ff5c 	bl	800acf8 <udp_Table_get_cell_value_core>
 800ae40:	4603      	mov	r3, r0
 800ae42:	e000      	b.n	800ae46 <udp_Table_get_next_cell_instance_and_value+0x86>
  } else {
    /* not found */
    return SNMP_ERR_NOSUCHINSTANCE;
 800ae44:	23f1      	movs	r3, #241	; 0xf1
  }
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3754      	adds	r7, #84	; 0x54
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd90      	pop	{r4, r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	200073f8 	.word	0x200073f8

0800ae54 <snmp_receive>:
/* implementation */
/* ----------------------------------------------------------------------- */

void
snmp_receive(void *handle, struct pbuf *p, const ip_addr_t *source_ip, u16_t port)
{
 800ae54:	b590      	push	{r4, r7, lr}
 800ae56:	b0cf      	sub	sp, #316	; 0x13c
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	f507 749c 	add.w	r4, r7, #312	; 0x138
 800ae5e:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
 800ae62:	6020      	str	r0, [r4, #0]
 800ae64:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800ae68:	f5a0 7098 	sub.w	r0, r0, #304	; 0x130
 800ae6c:	6001      	str	r1, [r0, #0]
 800ae6e:	f507 719c 	add.w	r1, r7, #312	; 0x138
 800ae72:	f5a1 719a 	sub.w	r1, r1, #308	; 0x134
 800ae76:	600a      	str	r2, [r1, #0]
 800ae78:	461a      	mov	r2, r3
 800ae7a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ae7e:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800ae82:	801a      	strh	r2, [r3, #0]
  err_t err;
  struct snmp_request request;

  memset(&request, 0, sizeof(request));
 800ae84:	f107 0310 	add.w	r3, r7, #16
 800ae88:	f44f 7292 	mov.w	r2, #292	; 0x124
 800ae8c:	2100      	movs	r1, #0
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f010 fd08 	bl	801b8a4 <memset>
  request.handle       = handle;
 800ae94:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ae98:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800ae9c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800aea0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800aea4:	6812      	ldr	r2, [r2, #0]
 800aea6:	601a      	str	r2, [r3, #0]
  request.source_ip    = source_ip;
 800aea8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800aeac:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800aeb0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800aeb4:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800aeb8:	6812      	ldr	r2, [r2, #0]
 800aeba:	605a      	str	r2, [r3, #4]
  request.source_port  = port;
 800aebc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800aec0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800aec4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800aec8:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800aecc:	8812      	ldrh	r2, [r2, #0]
 800aece:	811a      	strh	r2, [r3, #8]
  request.inbound_pbuf = p;
 800aed0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800aed4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800aed8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800aedc:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800aee0:	6812      	ldr	r2, [r2, #0]
 800aee2:	631a      	str	r2, [r3, #48]	; 0x30

  snmp_stats.inpkts++;
 800aee4:	4b5c      	ldr	r3, [pc, #368]	; (800b058 <snmp_receive+0x204>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	3301      	adds	r3, #1
 800aeea:	4a5b      	ldr	r2, [pc, #364]	; (800b058 <snmp_receive+0x204>)
 800aeec:	6013      	str	r3, [r2, #0]

  err = snmp_parse_inbound_frame(&request);
 800aeee:	f107 0310 	add.w	r3, r7, #16
 800aef2:	4618      	mov	r0, r3
 800aef4:	f000 fd7e 	bl	800b9f4 <snmp_parse_inbound_frame>
 800aef8:	4603      	mov	r3, r0
 800aefa:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
  if (err == ERR_OK) {
 800aefe:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 800af02:	2b00      	cmp	r3, #0
 800af04:	f040 80a2 	bne.w	800b04c <snmp_receive+0x1f8>
    err = snmp_prepare_outbound_frame(&request);
 800af08:	f107 0310 	add.w	r3, r7, #16
 800af0c:	4618      	mov	r0, r3
 800af0e:	f001 f887 	bl	800c020 <snmp_prepare_outbound_frame>
 800af12:	4603      	mov	r3, r0
 800af14:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    if (err == ERR_OK) {
 800af18:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	f040 8086 	bne.w	800b02e <snmp_receive+0x1da>

      if (request.error_status == SNMP_ERR_NOERROR) {
 800af22:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800af26:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800af2a:	69db      	ldr	r3, [r3, #28]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d13e      	bne.n	800afae <snmp_receive+0x15a>
        /* only process frame if we do not already have an error to return (e.g. all readonly) */
        if (request.request_type == SNMP_ASN1_CONTEXT_PDU_GET_REQ) {
 800af30:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800af34:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800af38:	7d9b      	ldrb	r3, [r3, #22]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d108      	bne.n	800af50 <snmp_receive+0xfc>
          err = snmp_process_get_request(&request);
 800af3e:	f107 0310 	add.w	r3, r7, #16
 800af42:	4618      	mov	r0, r3
 800af44:	f000 fa68 	bl	800b418 <snmp_process_get_request>
 800af48:	4603      	mov	r3, r0
 800af4a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800af4e:	e02e      	b.n	800afae <snmp_receive+0x15a>
        } else if (request.request_type == SNMP_ASN1_CONTEXT_PDU_GET_NEXT_REQ) {
 800af50:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800af54:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800af58:	7d9b      	ldrb	r3, [r3, #22]
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d108      	bne.n	800af70 <snmp_receive+0x11c>
          err = snmp_process_getnext_request(&request);
 800af5e:	f107 0310 	add.w	r3, r7, #16
 800af62:	4618      	mov	r0, r3
 800af64:	f000 fa9d 	bl	800b4a2 <snmp_process_getnext_request>
 800af68:	4603      	mov	r3, r0
 800af6a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800af6e:	e01e      	b.n	800afae <snmp_receive+0x15a>
        } else if (request.request_type == SNMP_ASN1_CONTEXT_PDU_GET_BULK_REQ) {
 800af70:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800af74:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800af78:	7d9b      	ldrb	r3, [r3, #22]
 800af7a:	2b05      	cmp	r3, #5
 800af7c:	d108      	bne.n	800af90 <snmp_receive+0x13c>
          err = snmp_process_getbulk_request(&request);
 800af7e:	f107 0310 	add.w	r3, r7, #16
 800af82:	4618      	mov	r0, r3
 800af84:	f000 fad2 	bl	800b52c <snmp_process_getbulk_request>
 800af88:	4603      	mov	r3, r0
 800af8a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800af8e:	e00e      	b.n	800afae <snmp_receive+0x15a>
        } else if (request.request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) {
 800af90:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800af94:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800af98:	7d9b      	ldrb	r3, [r3, #22]
 800af9a:	2b03      	cmp	r3, #3
 800af9c:	d107      	bne.n	800afae <snmp_receive+0x15a>
          err = snmp_process_set_request(&request);
 800af9e:	f107 0310 	add.w	r3, r7, #16
 800afa2:	4618      	mov	r0, r3
 800afa4:	f000 fbab 	bl	800b6fe <snmp_process_set_request>
 800afa8:	4603      	mov	r3, r0
 800afaa:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
        request.request_out_type = (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_REPORT);
        request.request_id = request.msg_id;
      }
#endif

      if (err == ERR_OK) {
 800afae:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d13b      	bne.n	800b02e <snmp_receive+0x1da>
        err = snmp_complete_outbound_frame(&request);
 800afb6:	f107 0310 	add.w	r3, r7, #16
 800afba:	4618      	mov	r0, r3
 800afbc:	f001 fbcc 	bl	800c758 <snmp_complete_outbound_frame>
 800afc0:	4603      	mov	r3, r0
 800afc2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137

        if (err == ERR_OK) {
 800afc6:	f997 3137 	ldrsb.w	r3, [r7, #311]	; 0x137
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d12f      	bne.n	800b02e <snmp_receive+0x1da>
          err = snmp_sendto(request.handle, request.outbound_pbuf, request.source_ip, request.source_port);
 800afce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800afd2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800afd6:	6818      	ldr	r0, [r3, #0]
 800afd8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800afdc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800afe0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800afe2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800afe6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800afea:	685a      	ldr	r2, [r3, #4]
 800afec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800aff0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800aff4:	891b      	ldrh	r3, [r3, #8]
 800aff6:	f002 f944 	bl	800d282 <snmp_sendto>
 800affa:	4603      	mov	r3, r0
 800affc:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137

          if ((request.request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ)
 800b000:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b004:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800b008:	7d9b      	ldrb	r3, [r3, #22]
 800b00a:	2b03      	cmp	r3, #3
 800b00c:	d10f      	bne.n	800b02e <snmp_receive+0x1da>
              && (request.error_status == SNMP_ERR_NOERROR)
 800b00e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b012:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800b016:	69db      	ldr	r3, [r3, #28]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d108      	bne.n	800b02e <snmp_receive+0x1da>
              && (snmp_write_callback != NULL)) {
 800b01c:	4b0f      	ldr	r3, [pc, #60]	; (800b05c <snmp_receive+0x208>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d004      	beq.n	800b02e <snmp_receive+0x1da>
            /* raise write notification for all written objects */
            snmp_execute_write_callbacks(&request);
 800b024:	f107 0310 	add.w	r3, r7, #16
 800b028:	4618      	mov	r0, r3
 800b02a:	f001 fd87 	bl	800cb3c <snmp_execute_write_callbacks>
          }
        }
      }
    }

    if (request.outbound_pbuf != NULL) {
 800b02e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b032:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800b036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d007      	beq.n	800b04c <snmp_receive+0x1f8>
      pbuf_free(request.outbound_pbuf);
 800b03c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b040:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800b044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b046:	4618      	mov	r0, r3
 800b048:	f005 f8a2 	bl	8010190 <pbuf_free>
    }
  }
}
 800b04c:	bf00      	nop
 800b04e:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800b052:	46bd      	mov	sp, r7
 800b054:	bd90      	pop	{r4, r7, pc}
 800b056:	bf00      	nop
 800b058:	200036a8 	.word	0x200036a8
 800b05c:	20003748 	.word	0x20003748

0800b060 <snmp_msg_getnext_validate_node_inst>:

static u8_t
snmp_msg_getnext_validate_node_inst(struct snmp_node_instance *node_instance, void *validate_arg)
{
 800b060:	b480      	push	{r7}
 800b062:	b083      	sub	sp, #12
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
  if (((node_instance->access & SNMP_NODE_INSTANCE_ACCESS_READ) != SNMP_NODE_INSTANCE_ACCESS_READ) || (node_instance->get_value == NULL)) {
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
 800b070:	f003 0301 	and.w	r3, r3, #1
 800b074:	2b00      	cmp	r3, #0
 800b076:	d004      	beq.n	800b082 <snmp_msg_getnext_validate_node_inst+0x22>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d101      	bne.n	800b086 <snmp_msg_getnext_validate_node_inst+0x26>
    return SNMP_ERR_NOSUCHINSTANCE;
 800b082:	23f1      	movs	r3, #241	; 0xf1
 800b084:	e00b      	b.n	800b09e <snmp_msg_getnext_validate_node_inst+0x3e>
  }

#if LWIP_HAVE_INT64
  if ((node_instance->asn1_type == SNMP_ASN1_TYPE_COUNTER64) && (((struct snmp_request *)validate_arg)->version == SNMP_VERSION_1)) {
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 800b08c:	2b46      	cmp	r3, #70	; 0x46
 800b08e:	d105      	bne.n	800b09c <snmp_msg_getnext_validate_node_inst+0x3c>
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	7a9b      	ldrb	r3, [r3, #10]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d101      	bne.n	800b09c <snmp_msg_getnext_validate_node_inst+0x3c>
    /* according to RFC 2089 skip Counter64 objects in GetNext requests from v1 clients */
    return SNMP_ERR_NOSUCHINSTANCE;
 800b098:	23f1      	movs	r3, #241	; 0xf1
 800b09a:	e000      	b.n	800b09e <snmp_msg_getnext_validate_node_inst+0x3e>
  }
#endif

  return SNMP_ERR_NOERROR;
 800b09c:	2300      	movs	r3, #0
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	370c      	adds	r7, #12
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr
	...

0800b0ac <snmp_process_varbind>:

static void
snmp_process_varbind(struct snmp_request *request, struct snmp_varbind *vb, u8_t get_next)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b0fa      	sub	sp, #488	; 0x1e8
 800b0b0:	af02      	add	r7, sp, #8
 800b0b2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b0b6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800b0ba:	6018      	str	r0, [r3, #0]
 800b0bc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b0c0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800b0c4:	6019      	str	r1, [r3, #0]
 800b0c6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b0ca:	f2a3 13d9 	subw	r3, r3, #473	; 0x1d9
 800b0ce:	701a      	strb	r2, [r3, #0]
  err_t err;
  struct snmp_node_instance node_instance;
  memset(&node_instance, 0, sizeof(node_instance));
 800b0d0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800b0d4:	22f8      	movs	r2, #248	; 0xf8
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f010 fbe3 	bl	801b8a4 <memset>

  if (get_next) {
 800b0de:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b0e2:	f2a3 13d9 	subw	r3, r3, #473	; 0x1d9
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d03d      	beq.n	800b168 <snmp_process_varbind+0xbc>
    struct snmp_obj_id result_oid;
    request->error_status = snmp_get_next_node_instance_from_oid(vb->oid.id, vb->oid.len, snmp_msg_getnext_validate_node_inst, request,  &result_oid, &node_instance);
 800b0ec:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b0f0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f103 000c 	add.w	r0, r3, #12
 800b0fa:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b0fe:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	7a19      	ldrb	r1, [r3, #8]
 800b106:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b10a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800b10e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800b112:	9201      	str	r2, [sp, #4]
 800b114:	f107 0214 	add.w	r2, r7, #20
 800b118:	9200      	str	r2, [sp, #0]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4aba      	ldr	r2, [pc, #744]	; (800b408 <snmp_process_varbind+0x35c>)
 800b11e:	f7fd fa80 	bl	8008622 <snmp_get_next_node_instance_from_oid>
 800b122:	4603      	mov	r3, r0
 800b124:	461a      	mov	r2, r3
 800b126:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b12a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	61da      	str	r2, [r3, #28]

    if (request->error_status == SNMP_ERR_NOERROR) {
 800b132:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b136:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	69db      	ldr	r3, [r3, #28]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d160      	bne.n	800b204 <snmp_process_varbind+0x158>
      snmp_oid_assign(&vb->oid, result_oid.id, result_oid.len);
 800b142:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b146:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f103 0008 	add.w	r0, r3, #8
 800b150:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b154:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800b158:	781a      	ldrb	r2, [r3, #0]
 800b15a:	f107 0314 	add.w	r3, r7, #20
 800b15e:	3304      	adds	r3, #4
 800b160:	4619      	mov	r1, r3
 800b162:	f7fc ffed 	bl	8008140 <snmp_oid_assign>
 800b166:	e04d      	b.n	800b204 <snmp_process_varbind+0x158>
    }
  } else {
    request->error_status = snmp_get_node_instance_from_oid(vb->oid.id, vb->oid.len, &node_instance);
 800b168:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b16c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f103 000c 	add.w	r0, r3, #12
 800b176:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b17a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	7a1b      	ldrb	r3, [r3, #8]
 800b182:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800b186:	4619      	mov	r1, r3
 800b188:	f7fd fa04 	bl	8008594 <snmp_get_node_instance_from_oid>
 800b18c:	4603      	mov	r3, r0
 800b18e:	461a      	mov	r2, r3
 800b190:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b194:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	61da      	str	r2, [r3, #28]

    if (request->error_status == SNMP_ERR_NOERROR) {
 800b19c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b1a0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	69db      	ldr	r3, [r3, #28]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d12b      	bne.n	800b204 <snmp_process_varbind+0x158>
      /* use 'getnext_validate' method for validation to avoid code duplication (some checks have to be executed here) */
      request->error_status = snmp_msg_getnext_validate_node_inst(&node_instance, request);
 800b1ac:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b1b0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800b1b4:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800b1b8:	6819      	ldr	r1, [r3, #0]
 800b1ba:	4610      	mov	r0, r2
 800b1bc:	f7ff ff50 	bl	800b060 <snmp_msg_getnext_validate_node_inst>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b1c8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	61da      	str	r2, [r3, #28]

      if (request->error_status != SNMP_ERR_NOERROR) {
 800b1d0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b1d4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	69db      	ldr	r3, [r3, #28]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d011      	beq.n	800b204 <snmp_process_varbind+0x158>
        if (node_instance.release_instance != NULL) {
 800b1e0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b1e4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b1e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d009      	beq.n	800b204 <snmp_process_varbind+0x158>
          node_instance.release_instance(&node_instance);
 800b1f0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b1f4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b1f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b1fc:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800b200:	4610      	mov	r0, r2
 800b202:	4798      	blx	r3
        }
      }
    }
  }

  if (request->error_status != SNMP_ERR_NOERROR)  {
 800b204:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b208:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	69db      	ldr	r3, [r3, #28]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d070      	beq.n	800b2f6 <snmp_process_varbind+0x24a>
    if (request->error_status >= SNMP_VARBIND_EXCEPTION_OFFSET) {
 800b214:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b218:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	69db      	ldr	r3, [r3, #28]
 800b220:	2bef      	cmp	r3, #239	; 0xef
 800b222:	dd60      	ble.n	800b2e6 <snmp_process_varbind+0x23a>
      if ((request->version == SNMP_VERSION_2c) || request->version == SNMP_VERSION_3) {
 800b224:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b228:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	7a9b      	ldrb	r3, [r3, #10]
 800b230:	2b01      	cmp	r3, #1
 800b232:	d008      	beq.n	800b246 <snmp_process_varbind+0x19a>
 800b234:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b238:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	7a9b      	ldrb	r3, [r3, #10]
 800b240:	2b03      	cmp	r3, #3
 800b242:	f040 80dc 	bne.w	800b3fe <snmp_process_varbind+0x352>
        /* in SNMP v2c a varbind related exception is stored in varbind and not in frame header */
        vb->type = (SNMP_ASN1_CONTENTTYPE_PRIMITIVE | SNMP_ASN1_CLASS_CONTEXT | (request->error_status & SNMP_VARBIND_EXCEPTION_MASK));
 800b246:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b24a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	69db      	ldr	r3, [r3, #28]
 800b252:	b25b      	sxtb	r3, r3
 800b254:	f003 030f 	and.w	r3, r3, #15
 800b258:	b25b      	sxtb	r3, r3
 800b25a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b25e:	b25b      	sxtb	r3, r3
 800b260:	b2da      	uxtb	r2, r3
 800b262:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b266:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
        vb->value_len = 0;
 800b270:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b274:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6

        err = snmp_append_outbound_varbind(&(request->outbound_pbuf_stream), vb);
 800b280:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b284:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800b28e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b292:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800b296:	6819      	ldr	r1, [r3, #0]
 800b298:	4610      	mov	r0, r2
 800b29a:	f001 f943 	bl	800c524 <snmp_append_outbound_varbind>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	f887 31dd 	strb.w	r3, [r7, #477]	; 0x1dd
        if (err == ERR_OK) {
 800b2a4:	f997 31dd 	ldrsb.w	r3, [r7, #477]	; 0x1dd
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d107      	bne.n	800b2bc <snmp_process_varbind+0x210>
          /* we stored the exception in varbind -> go on */
          request->error_status = SNMP_ERR_NOERROR;
 800b2ac:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b2b0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	61da      	str	r2, [r3, #28]

    if (node_instance.release_instance != NULL) {
      node_instance.release_instance(&node_instance);
    }
  }
}
 800b2ba:	e0a0      	b.n	800b3fe <snmp_process_varbind+0x352>
        } else if (err == ERR_BUF) {
 800b2bc:	f997 31dd 	ldrsb.w	r3, [r7, #477]	; 0x1dd
 800b2c0:	f113 0f02 	cmn.w	r3, #2
 800b2c4:	d107      	bne.n	800b2d6 <snmp_process_varbind+0x22a>
          request->error_status = SNMP_ERR_TOOBIG;
 800b2c6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b2ca:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	61da      	str	r2, [r3, #28]
}
 800b2d4:	e093      	b.n	800b3fe <snmp_process_varbind+0x352>
          request->error_status = SNMP_ERR_GENERROR;
 800b2d6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b2da:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	2205      	movs	r2, #5
 800b2e2:	61da      	str	r2, [r3, #28]
}
 800b2e4:	e08b      	b.n	800b3fe <snmp_process_varbind+0x352>
      request->error_status = SNMP_ERR_GENERROR;
 800b2e6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b2ea:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	2205      	movs	r2, #5
 800b2f2:	61da      	str	r2, [r3, #28]
}
 800b2f4:	e083      	b.n	800b3fe <snmp_process_varbind+0x352>
    s16_t len = node_instance.get_value(&node_instance, vb->value);
 800b2f6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b2fa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b2fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b302:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 800b306:	f5a2 72ec 	sub.w	r2, r2, #472	; 0x1d8
 800b30a:	6812      	ldr	r2, [r2, #0]
 800b30c:	f8d2 10d8 	ldr.w	r1, [r2, #216]	; 0xd8
 800b310:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800b314:	4610      	mov	r0, r2
 800b316:	4798      	blx	r3
 800b318:	4603      	mov	r3, r0
 800b31a:	f8a7 31de 	strh.w	r3, [r7, #478]	; 0x1de
    if (len >= 0) {
 800b31e:	f9b7 31de 	ldrsh.w	r3, [r7, #478]	; 0x1de
 800b322:	2b00      	cmp	r3, #0
 800b324:	db52      	blt.n	800b3cc <snmp_process_varbind+0x320>
      vb->value_len = (u16_t)len; /* cast is OK because we checked >= 0 above */
 800b326:	f8b7 21de 	ldrh.w	r2, [r7, #478]	; 0x1de
 800b32a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b32e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
      vb->type = node_instance.asn1_type;
 800b338:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b33c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b340:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
 800b344:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b348:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
      LWIP_ASSERT("SNMP_MAX_VALUE_SIZE is configured too low", (vb->value_len & ~SNMP_GET_VALUE_RAW_DATA) <= SNMP_MAX_VALUE_SIZE);
 800b352:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b356:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 800b360:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b364:	2bc8      	cmp	r3, #200	; 0xc8
 800b366:	d906      	bls.n	800b376 <snmp_process_varbind+0x2ca>
 800b368:	4b28      	ldr	r3, [pc, #160]	; (800b40c <snmp_process_varbind+0x360>)
 800b36a:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b36e:	4928      	ldr	r1, [pc, #160]	; (800b410 <snmp_process_varbind+0x364>)
 800b370:	4828      	ldr	r0, [pc, #160]	; (800b414 <snmp_process_varbind+0x368>)
 800b372:	f011 f9dd 	bl	801c730 <iprintf>
      err = snmp_append_outbound_varbind(&request->outbound_pbuf_stream, vb);
 800b376:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b37a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800b384:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b388:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800b38c:	6819      	ldr	r1, [r3, #0]
 800b38e:	4610      	mov	r0, r2
 800b390:	f001 f8c8 	bl	800c524 <snmp_append_outbound_varbind>
 800b394:	4603      	mov	r3, r0
 800b396:	f887 31dd 	strb.w	r3, [r7, #477]	; 0x1dd
      if (err == ERR_BUF) {
 800b39a:	f997 31dd 	ldrsb.w	r3, [r7, #477]	; 0x1dd
 800b39e:	f113 0f02 	cmn.w	r3, #2
 800b3a2:	d107      	bne.n	800b3b4 <snmp_process_varbind+0x308>
        request->error_status = SNMP_ERR_TOOBIG;
 800b3a4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b3a8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	61da      	str	r2, [r3, #28]
 800b3b2:	e012      	b.n	800b3da <snmp_process_varbind+0x32e>
      } else if (err != ERR_OK) {
 800b3b4:	f997 31dd 	ldrsb.w	r3, [r7, #477]	; 0x1dd
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d00e      	beq.n	800b3da <snmp_process_varbind+0x32e>
        request->error_status = SNMP_ERR_GENERROR;
 800b3bc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b3c0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	2205      	movs	r2, #5
 800b3c8:	61da      	str	r2, [r3, #28]
 800b3ca:	e006      	b.n	800b3da <snmp_process_varbind+0x32e>
      request->error_status = SNMP_ERR_GENERROR;
 800b3cc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b3d0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	2205      	movs	r2, #5
 800b3d8:	61da      	str	r2, [r3, #28]
    if (node_instance.release_instance != NULL) {
 800b3da:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b3de:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b3e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d009      	beq.n	800b3fe <snmp_process_varbind+0x352>
      node_instance.release_instance(&node_instance);
 800b3ea:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b3ee:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b3f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3f6:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800b3fa:	4610      	mov	r0, r2
 800b3fc:	4798      	blx	r3
}
 800b3fe:	bf00      	nop
 800b400:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}
 800b408:	0800b061 	.word	0x0800b061
 800b40c:	08020484 	.word	0x08020484
 800b410:	0802052c 	.word	0x0802052c
 800b414:	080204e0 	.word	0x080204e0

0800b418 <snmp_process_get_request>:
 *
 * @param request points to the associated message process state
 */
static err_t
snmp_process_get_request(struct snmp_request *request)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b0ba      	sub	sp, #232	; 0xe8
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  snmp_vb_enumerator_err_t err;
  struct snmp_varbind vb;
  vb.value = request->value_buffer;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	335c      	adds	r3, #92	; 0x5c
 800b424:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  LWIP_DEBUGF(SNMP_DEBUG, ("SNMP get request\n"));

  while (request->error_status == SNMP_ERR_NOERROR) {
 800b428:	e030      	b.n	800b48c <snmp_process_get_request+0x74>
    err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	3334      	adds	r3, #52	; 0x34
 800b42e:	f107 0208 	add.w	r2, r7, #8
 800b432:	4611      	mov	r1, r2
 800b434:	4618      	mov	r0, r3
 800b436:	f001 fbcd 	bl	800cbd4 <snmp_vb_enumerator_get_next>
 800b43a:	4603      	mov	r3, r0
 800b43c:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
    if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 800b440:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800b444:	2b00      	cmp	r3, #0
 800b446:	d113      	bne.n	800b470 <snmp_process_get_request+0x58>
      if ((vb.type == SNMP_ASN1_TYPE_NULL) && (vb.value_len == 0)) {
 800b448:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 800b44c:	2b05      	cmp	r3, #5
 800b44e:	d10b      	bne.n	800b468 <snmp_process_get_request+0x50>
 800b450:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 800b454:	2b00      	cmp	r3, #0
 800b456:	d107      	bne.n	800b468 <snmp_process_get_request+0x50>
        snmp_process_varbind(request, &vb, 0);
 800b458:	f107 0308 	add.w	r3, r7, #8
 800b45c:	2200      	movs	r2, #0
 800b45e:	4619      	mov	r1, r3
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f7ff fe23 	bl	800b0ac <snmp_process_varbind>
 800b466:	e011      	b.n	800b48c <snmp_process_get_request+0x74>
      } else {
        request->error_status = SNMP_ERR_GENERROR;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2205      	movs	r2, #5
 800b46c:	61da      	str	r2, [r3, #28]
 800b46e:	e00d      	b.n	800b48c <snmp_process_get_request+0x74>
      }
    } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 800b470:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800b474:	2b01      	cmp	r3, #1
 800b476:	d00e      	beq.n	800b496 <snmp_process_get_request+0x7e>
      /* no more varbinds in request */
      break;
    } else if (err == SNMP_VB_ENUMERATOR_ERR_ASN1ERROR) {
 800b478:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800b47c:	2b02      	cmp	r3, #2
 800b47e:	d102      	bne.n	800b486 <snmp_process_get_request+0x6e>
      /* malformed ASN.1, don't answer */
      return ERR_ARG;
 800b480:	f06f 030f 	mvn.w	r3, #15
 800b484:	e009      	b.n	800b49a <snmp_process_get_request+0x82>
    } else {
      request->error_status = SNMP_ERR_GENERROR;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2205      	movs	r2, #5
 800b48a:	61da      	str	r2, [r3, #28]
  while (request->error_status == SNMP_ERR_NOERROR) {
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	69db      	ldr	r3, [r3, #28]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d0ca      	beq.n	800b42a <snmp_process_get_request+0x12>
 800b494:	e000      	b.n	800b498 <snmp_process_get_request+0x80>
      break;
 800b496:	bf00      	nop
    }
  }

  return ERR_OK;
 800b498:	2300      	movs	r3, #0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	37e8      	adds	r7, #232	; 0xe8
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <snmp_process_getnext_request>:
 *
 * @param request points to the associated message process state
 */
static err_t
snmp_process_getnext_request(struct snmp_request *request)
{
 800b4a2:	b580      	push	{r7, lr}
 800b4a4:	b0ba      	sub	sp, #232	; 0xe8
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
  snmp_vb_enumerator_err_t err;
  struct snmp_varbind vb;
  vb.value = request->value_buffer;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	335c      	adds	r3, #92	; 0x5c
 800b4ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  LWIP_DEBUGF(SNMP_DEBUG, ("SNMP get-next request\n"));

  while (request->error_status == SNMP_ERR_NOERROR) {
 800b4b2:	e030      	b.n	800b516 <snmp_process_getnext_request+0x74>
    err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	3334      	adds	r3, #52	; 0x34
 800b4b8:	f107 0208 	add.w	r2, r7, #8
 800b4bc:	4611      	mov	r1, r2
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f001 fb88 	bl	800cbd4 <snmp_vb_enumerator_get_next>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
    if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 800b4ca:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d113      	bne.n	800b4fa <snmp_process_getnext_request+0x58>
      if ((vb.type == SNMP_ASN1_TYPE_NULL) && (vb.value_len == 0)) {
 800b4d2:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 800b4d6:	2b05      	cmp	r3, #5
 800b4d8:	d10b      	bne.n	800b4f2 <snmp_process_getnext_request+0x50>
 800b4da:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d107      	bne.n	800b4f2 <snmp_process_getnext_request+0x50>
        snmp_process_varbind(request, &vb, 1);
 800b4e2:	f107 0308 	add.w	r3, r7, #8
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f7ff fdde 	bl	800b0ac <snmp_process_varbind>
 800b4f0:	e011      	b.n	800b516 <snmp_process_getnext_request+0x74>
      } else {
        request->error_status = SNMP_ERR_GENERROR;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2205      	movs	r2, #5
 800b4f6:	61da      	str	r2, [r3, #28]
 800b4f8:	e00d      	b.n	800b516 <snmp_process_getnext_request+0x74>
      }
    } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 800b4fa:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d00e      	beq.n	800b520 <snmp_process_getnext_request+0x7e>
      /* no more varbinds in request */
      break;
    } else if (err == SNMP_VB_ENUMERATOR_ERR_ASN1ERROR) {
 800b502:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800b506:	2b02      	cmp	r3, #2
 800b508:	d102      	bne.n	800b510 <snmp_process_getnext_request+0x6e>
      /* malformed ASN.1, don't answer */
      return ERR_ARG;
 800b50a:	f06f 030f 	mvn.w	r3, #15
 800b50e:	e009      	b.n	800b524 <snmp_process_getnext_request+0x82>
    } else {
      request->error_status = SNMP_ERR_GENERROR;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2205      	movs	r2, #5
 800b514:	61da      	str	r2, [r3, #28]
  while (request->error_status == SNMP_ERR_NOERROR) {
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	69db      	ldr	r3, [r3, #28]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d0ca      	beq.n	800b4b4 <snmp_process_getnext_request+0x12>
 800b51e:	e000      	b.n	800b522 <snmp_process_getnext_request+0x80>
      break;
 800b520:	bf00      	nop
    }
  }

  return ERR_OK;
 800b522:	2300      	movs	r3, #0
}
 800b524:	4618      	mov	r0, r3
 800b526:	37e8      	adds	r7, #232	; 0xe8
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <snmp_process_getbulk_request>:
 *
 * @param request points to the associated message process state
 */
static err_t
snmp_process_getbulk_request(struct snmp_request *request)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b0c0      	sub	sp, #256	; 0x100
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  snmp_vb_enumerator_err_t err;
  s32_t non_repeaters     = request->non_repeaters;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b538:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  s32_t repetitions;
  u16_t repetition_offset = 0;
 800b53c:	2300      	movs	r3, #0
 800b53e:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
  struct snmp_varbind_enumerator repetition_varbind_enumerator;
  struct snmp_varbind vb;
  vb.value = request->value_buffer;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	335c      	adds	r3, #92	; 0x5c
 800b546:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  if (SNMP_LWIP_GETBULK_MAX_REPETITIONS > 0) {
    repetitions = LWIP_MIN(request->max_repetitions, SNMP_LWIP_GETBULK_MAX_REPETITIONS);
  } else {
    repetitions = request->max_repetitions;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b54e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  }

  LWIP_DEBUGF(SNMP_DEBUG, ("SNMP get-bulk request\n"));

  /* process non repeaters and first repetition */
  while (request->error_status == SNMP_ERR_NOERROR) {
 800b552:	e043      	b.n	800b5dc <snmp_process_getbulk_request+0xb0>
    if (non_repeaters == 0) {
 800b554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d10d      	bne.n	800b578 <snmp_process_getbulk_request+0x4c>
      repetition_offset = request->outbound_pbuf_stream.offset;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b562:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

      if (repetitions == 0) {
 800b566:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d03b      	beq.n	800b5e6 <snmp_process_getbulk_request+0xba>
        /* do not resolve repeaters when repetitions is set to 0 */
        break;
      }
      repetitions--;
 800b56e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b572:	3b01      	subs	r3, #1
 800b574:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    }

    err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	3334      	adds	r3, #52	; 0x34
 800b57c:	f107 020c 	add.w	r2, r7, #12
 800b580:	4611      	mov	r1, r2
 800b582:	4618      	mov	r0, r3
 800b584:	f001 fb26 	bl	800cbd4 <snmp_vb_enumerator_get_next>
 800b588:	4603      	mov	r3, r0
 800b58a:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
    if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 800b58e:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 800b592:	2b01      	cmp	r3, #1
 800b594:	d029      	beq.n	800b5ea <snmp_process_getbulk_request+0xbe>
      /* no more varbinds in request */
      break;
    } else if (err == SNMP_VB_ENUMERATOR_ERR_ASN1ERROR) {
 800b596:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 800b59a:	2b02      	cmp	r3, #2
 800b59c:	d102      	bne.n	800b5a4 <snmp_process_getbulk_request+0x78>
      /* malformed ASN.1, don't answer */
      return ERR_ARG;
 800b59e:	f06f 030f 	mvn.w	r3, #15
 800b5a2:	e0a7      	b.n	800b6f4 <snmp_process_getbulk_request+0x1c8>
    } else if ((err != SNMP_VB_ENUMERATOR_ERR_OK) || (vb.type != SNMP_ASN1_TYPE_NULL) || (vb.value_len != 0)) {
 800b5a4:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d107      	bne.n	800b5bc <snmp_process_getbulk_request+0x90>
 800b5ac:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 800b5b0:	2b05      	cmp	r3, #5
 800b5b2:	d103      	bne.n	800b5bc <snmp_process_getbulk_request+0x90>
 800b5b4:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	; 0xe2
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d003      	beq.n	800b5c4 <snmp_process_getbulk_request+0x98>
      request->error_status = SNMP_ERR_GENERROR;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2205      	movs	r2, #5
 800b5c0:	61da      	str	r2, [r3, #28]
 800b5c2:	e00b      	b.n	800b5dc <snmp_process_getbulk_request+0xb0>
    } else {
      snmp_process_varbind(request, &vb, 1);
 800b5c4:	f107 030c 	add.w	r3, r7, #12
 800b5c8:	2201      	movs	r2, #1
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f7ff fd6d 	bl	800b0ac <snmp_process_varbind>
      non_repeaters--;
 800b5d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5d6:	3b01      	subs	r3, #1
 800b5d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  while (request->error_status == SNMP_ERR_NOERROR) {
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	69db      	ldr	r3, [r3, #28]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d0b7      	beq.n	800b554 <snmp_process_getbulk_request+0x28>
 800b5e4:	e06d      	b.n	800b6c2 <snmp_process_getbulk_request+0x196>
        break;
 800b5e6:	bf00      	nop
 800b5e8:	e06b      	b.n	800b6c2 <snmp_process_getbulk_request+0x196>
      break;
 800b5ea:	bf00      	nop
    }
  }

  /* process repetitions > 1 */
  while ((request->error_status == SNMP_ERR_NOERROR) && (repetitions > 0) && (request->outbound_pbuf_stream.offset != repetition_offset)) {
 800b5ec:	e069      	b.n	800b6c2 <snmp_process_getbulk_request+0x196>

    u8_t all_endofmibview = 1;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5

    snmp_vb_enumerator_init(&repetition_varbind_enumerator, request->outbound_pbuf, repetition_offset, request->outbound_pbuf_stream.offset - repetition_offset);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800b5fe:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800b602:	1ad3      	subs	r3, r2, r3
 800b604:	b29b      	uxth	r3, r3
 800b606:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	; 0xf6
 800b60a:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 800b60e:	f001 fac9 	bl	800cba4 <snmp_vb_enumerator_init>
    repetition_offset = request->outbound_pbuf_stream.offset; /* for next loop */
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b618:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

    while (request->error_status == SNMP_ERR_NOERROR) {
 800b61c:	e03e      	b.n	800b69c <snmp_process_getbulk_request+0x170>
      vb.value = NULL; /* do NOT decode value (we enumerate outbound buffer here, so all varbinds have values assigned) */
 800b61e:	2300      	movs	r3, #0
 800b620:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      err = snmp_vb_enumerator_get_next(&repetition_varbind_enumerator, &vb);
 800b624:	f107 020c 	add.w	r2, r7, #12
 800b628:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800b62c:	4611      	mov	r1, r2
 800b62e:	4618      	mov	r0, r3
 800b630:	f001 fad0 	bl	800cbd4 <snmp_vb_enumerator_get_next>
 800b634:	4603      	mov	r3, r0
 800b636:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
      if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 800b63a:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d11e      	bne.n	800b680 <snmp_process_getbulk_request+0x154>
        vb.value = request->value_buffer;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	335c      	adds	r3, #92	; 0x5c
 800b646:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        snmp_process_varbind(request, &vb, 1);
 800b64a:	f107 030c 	add.w	r3, r7, #12
 800b64e:	2201      	movs	r2, #1
 800b650:	4619      	mov	r1, r3
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f7ff fd2a 	bl	800b0ac <snmp_process_varbind>

        if (request->error_status != SNMP_ERR_NOERROR) {
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	69db      	ldr	r3, [r3, #28]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d007      	beq.n	800b670 <snmp_process_getbulk_request+0x144>
          /* already set correct error-index (here it cannot be taken from inbound varbind enumerator) */
          request->error_index = request->non_repeaters + repetition_varbind_enumerator.varbind_count;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b664:	f8b7 20f0 	ldrh.w	r2, [r7, #240]	; 0xf0
 800b668:	441a      	add	r2, r3
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	621a      	str	r2, [r3, #32]
 800b66e:	e015      	b.n	800b69c <snmp_process_getbulk_request+0x170>
        } else if (vb.type != (SNMP_ASN1_CONTENTTYPE_PRIMITIVE | SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTEXT_VARBIND_END_OF_MIB_VIEW)) {
 800b670:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 800b674:	2b82      	cmp	r3, #130	; 0x82
 800b676:	d011      	beq.n	800b69c <snmp_process_getbulk_request+0x170>
          all_endofmibview = 0;
 800b678:	2300      	movs	r3, #0
 800b67a:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
 800b67e:	e00d      	b.n	800b69c <snmp_process_getbulk_request+0x170>
        }
      } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 800b680:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 800b684:	2b01      	cmp	r3, #1
 800b686:	d00e      	beq.n	800b6a6 <snmp_process_getbulk_request+0x17a>
        /* no more varbinds in request */
        break;
      } else {
        LWIP_DEBUGF(SNMP_DEBUG, ("Very strange, we cannot parse the varbind output that we created just before!"));
        request->error_status = SNMP_ERR_GENERROR;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2205      	movs	r2, #5
 800b68c:	61da      	str	r2, [r3, #28]
        request->error_index  = request->non_repeaters + repetition_varbind_enumerator.varbind_count;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b692:	f8b7 20f0 	ldrh.w	r2, [r7, #240]	; 0xf0
 800b696:	441a      	add	r2, r3
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	621a      	str	r2, [r3, #32]
    while (request->error_status == SNMP_ERR_NOERROR) {
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	69db      	ldr	r3, [r3, #28]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d0bc      	beq.n	800b61e <snmp_process_getbulk_request+0xf2>
 800b6a4:	e000      	b.n	800b6a8 <snmp_process_getbulk_request+0x17c>
        break;
 800b6a6:	bf00      	nop
      }
    }

    if ((request->error_status == SNMP_ERR_NOERROR) && all_endofmibview) {
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	69db      	ldr	r3, [r3, #28]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d103      	bne.n	800b6b8 <snmp_process_getbulk_request+0x18c>
 800b6b0:	f897 30f5 	ldrb.w	r3, [r7, #245]	; 0xf5
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d114      	bne.n	800b6e2 <snmp_process_getbulk_request+0x1b6>
      /* stop when all varbinds in a loop return EndOfMibView */
      break;
    }

    repetitions--;
 800b6b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b6bc:	3b01      	subs	r3, #1
 800b6be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  while ((request->error_status == SNMP_ERR_NOERROR) && (repetitions > 0) && (request->outbound_pbuf_stream.offset != repetition_offset)) {
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	69db      	ldr	r3, [r3, #28]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d10c      	bne.n	800b6e4 <snmp_process_getbulk_request+0x1b8>
 800b6ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	dd08      	ble.n	800b6e4 <snmp_process_getbulk_request+0x1b8>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6d8:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	; 0xf6
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d186      	bne.n	800b5ee <snmp_process_getbulk_request+0xc2>
 800b6e0:	e000      	b.n	800b6e4 <snmp_process_getbulk_request+0x1b8>
      break;
 800b6e2:	bf00      	nop
  }

  if (request->error_status == SNMP_ERR_TOOBIG) {
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	69db      	ldr	r3, [r3, #28]
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	d102      	bne.n	800b6f2 <snmp_process_getbulk_request+0x1c6>
    /* for GetBulk it is ok, if not all requested variables fit into the response -> just return the varbinds added so far */
    request->error_status = SNMP_ERR_NOERROR;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	61da      	str	r2, [r3, #28]
  }

  return ERR_OK;
 800b6f2:	2300      	movs	r3, #0
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <snmp_process_set_request>:
 *
 * @param request points to the associated message process state
 */
static err_t
snmp_process_set_request(struct snmp_request *request)
{
 800b6fe:	b580      	push	{r7, lr}
 800b700:	b0f8      	sub	sp, #480	; 0x1e0
 800b702:	af00      	add	r7, sp, #0
 800b704:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b708:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b70c:	6018      	str	r0, [r3, #0]
  snmp_vb_enumerator_err_t err;
  struct snmp_varbind vb;
  vb.value = request->value_buffer;
 800b70e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b712:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	335c      	adds	r3, #92	; 0x5c
 800b71a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

  LWIP_DEBUGF(SNMP_DEBUG, ("SNMP set request\n"));

  /* perform set test on all objects */
  while (request->error_status == SNMP_ERR_NOERROR) {
 800b71e:	e0ad      	b.n	800b87c <snmp_process_set_request+0x17e>
    err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 800b720:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b724:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	3334      	adds	r3, #52	; 0x34
 800b72c:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800b730:	4611      	mov	r1, r2
 800b732:	4618      	mov	r0, r3
 800b734:	f001 fa4e 	bl	800cbd4 <snmp_vb_enumerator_get_next>
 800b738:	4603      	mov	r3, r0
 800b73a:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
    if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 800b73e:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800b742:	2b00      	cmp	r3, #0
 800b744:	d17c      	bne.n	800b840 <snmp_process_set_request+0x142>
      struct snmp_node_instance node_instance;
      memset(&node_instance, 0, sizeof(node_instance));
 800b746:	f107 0308 	add.w	r3, r7, #8
 800b74a:	22f8      	movs	r2, #248	; 0xf8
 800b74c:	2100      	movs	r1, #0
 800b74e:	4618      	mov	r0, r3
 800b750:	f010 f8a8 	bl	801b8a4 <memset>

      request->error_status = snmp_get_node_instance_from_oid(vb.oid.id, vb.oid.len, &node_instance);
 800b754:	f897 1108 	ldrb.w	r1, [r7, #264]	; 0x108
 800b758:	f107 0208 	add.w	r2, r7, #8
 800b75c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800b760:	330c      	adds	r3, #12
 800b762:	4618      	mov	r0, r3
 800b764:	f7fc ff16 	bl	8008594 <snmp_get_node_instance_from_oid>
 800b768:	4603      	mov	r3, r0
 800b76a:	461a      	mov	r2, r3
 800b76c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b770:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	61da      	str	r2, [r3, #28]
      if (request->error_status == SNMP_ERR_NOERROR) {
 800b778:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b77c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	69db      	ldr	r3, [r3, #28]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d179      	bne.n	800b87c <snmp_process_set_request+0x17e>
        if (node_instance.asn1_type != vb.type) {
 800b788:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b78c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800b790:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
 800b794:	f897 31d4 	ldrb.w	r3, [r7, #468]	; 0x1d4
 800b798:	429a      	cmp	r2, r3
 800b79a:	d007      	beq.n	800b7ac <snmp_process_set_request+0xae>
          request->error_status = SNMP_ERR_WRONGTYPE;
 800b79c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b7a0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	2207      	movs	r2, #7
 800b7a8:	61da      	str	r2, [r3, #28]
 800b7aa:	e036      	b.n	800b81a <snmp_process_set_request+0x11c>
        } else if (((node_instance.access & SNMP_NODE_INSTANCE_ACCESS_WRITE) != SNMP_NODE_INSTANCE_ACCESS_WRITE) || (node_instance.set_value == NULL)) {
 800b7ac:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b7b0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800b7b4:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
 800b7b8:	f003 0302 	and.w	r3, r3, #2
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d007      	beq.n	800b7d0 <snmp_process_set_request+0xd2>
 800b7c0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b7c4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800b7c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d107      	bne.n	800b7e0 <snmp_process_set_request+0xe2>
          request->error_status = SNMP_ERR_NOTWRITABLE;
 800b7d0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b7d4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2211      	movs	r2, #17
 800b7dc:	61da      	str	r2, [r3, #28]
 800b7de:	e01c      	b.n	800b81a <snmp_process_set_request+0x11c>
        } else {
          if (node_instance.set_test != NULL) {
 800b7e0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b7e4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800b7e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d014      	beq.n	800b81a <snmp_process_set_request+0x11c>
            request->error_status = node_instance.set_test(&node_instance, vb.value_len, vb.value);
 800b7f0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b7f4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800b7f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b7fc:	f8b7 11d6 	ldrh.w	r1, [r7, #470]	; 0x1d6
 800b800:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800b804:	f107 0008 	add.w	r0, r7, #8
 800b808:	4798      	blx	r3
 800b80a:	4603      	mov	r3, r0
 800b80c:	461a      	mov	r2, r3
 800b80e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b812:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	61da      	str	r2, [r3, #28]
          }
        }

        if (node_instance.release_instance != NULL) {
 800b81a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b81e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800b822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b826:	2b00      	cmp	r3, #0
 800b828:	d028      	beq.n	800b87c <snmp_process_set_request+0x17e>
          node_instance.release_instance(&node_instance);
 800b82a:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b82e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800b832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b836:	f107 0208 	add.w	r2, r7, #8
 800b83a:	4610      	mov	r0, r2
 800b83c:	4798      	blx	r3
 800b83e:	e01d      	b.n	800b87c <snmp_process_set_request+0x17e>
        }
      }
    } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 800b840:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800b844:	2b01      	cmp	r3, #1
 800b846:	d023      	beq.n	800b890 <snmp_process_set_request+0x192>
      /* no more varbinds in request */
      break;
    } else if (err == SNMP_VB_ENUMERATOR_ERR_INVALIDLENGTH) {
 800b848:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800b84c:	2b03      	cmp	r3, #3
 800b84e:	d107      	bne.n	800b860 <snmp_process_set_request+0x162>
      request->error_status = SNMP_ERR_WRONGLENGTH;
 800b850:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b854:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	2208      	movs	r2, #8
 800b85c:	61da      	str	r2, [r3, #28]
 800b85e:	e00d      	b.n	800b87c <snmp_process_set_request+0x17e>
    } else if (err == SNMP_VB_ENUMERATOR_ERR_ASN1ERROR) {
 800b860:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800b864:	2b02      	cmp	r3, #2
 800b866:	d102      	bne.n	800b86e <snmp_process_set_request+0x170>
      /* malformed ASN.1, don't answer */
      return ERR_ARG;
 800b868:	f06f 030f 	mvn.w	r3, #15
 800b86c:	e0bd      	b.n	800b9ea <snmp_process_set_request+0x2ec>
    } else {
      request->error_status = SNMP_ERR_GENERROR;
 800b86e:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b872:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	2205      	movs	r2, #5
 800b87a:	61da      	str	r2, [r3, #28]
  while (request->error_status == SNMP_ERR_NOERROR) {
 800b87c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b880:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	69db      	ldr	r3, [r3, #28]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	f43f af49 	beq.w	800b720 <snmp_process_set_request+0x22>
 800b88e:	e000      	b.n	800b892 <snmp_process_set_request+0x194>
      break;
 800b890:	bf00      	nop
    }
  }

  /* perform real set operation on all objects */
  if (request->error_status == SNMP_ERR_NOERROR) {
 800b892:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b896:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	69db      	ldr	r3, [r3, #28]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	f040 80a2 	bne.w	800b9e8 <snmp_process_set_request+0x2ea>
    snmp_vb_enumerator_init(&request->inbound_varbind_enumerator, request->inbound_pbuf, request->inbound_varbind_offset, request->inbound_varbind_len);
 800b8a4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b8a8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800b8b2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b8b6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b8be:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b8c2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800b8cc:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b8d0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800b8da:	f001 f963 	bl	800cba4 <snmp_vb_enumerator_init>
    while (request->error_status == SNMP_ERR_NOERROR) {
 800b8de:	e078      	b.n	800b9d2 <snmp_process_set_request+0x2d4>
      err = snmp_vb_enumerator_get_next(&request->inbound_varbind_enumerator, &vb);
 800b8e0:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b8e4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	3334      	adds	r3, #52	; 0x34
 800b8ec:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800b8f0:	4611      	mov	r1, r2
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f001 f96e 	bl	800cbd4 <snmp_vb_enumerator_get_next>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
      if (err == SNMP_VB_ENUMERATOR_ERR_OK) {
 800b8fe:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800b902:	2b00      	cmp	r3, #0
 800b904:	d15a      	bne.n	800b9bc <snmp_process_set_request+0x2be>
        struct snmp_node_instance node_instance;
        memset(&node_instance, 0, sizeof(node_instance));
 800b906:	f107 0308 	add.w	r3, r7, #8
 800b90a:	22f8      	movs	r2, #248	; 0xf8
 800b90c:	2100      	movs	r1, #0
 800b90e:	4618      	mov	r0, r3
 800b910:	f00f ffc8 	bl	801b8a4 <memset>
        request->error_status = snmp_get_node_instance_from_oid(vb.oid.id, vb.oid.len, &node_instance);
 800b914:	f897 1108 	ldrb.w	r1, [r7, #264]	; 0x108
 800b918:	f107 0208 	add.w	r2, r7, #8
 800b91c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800b920:	330c      	adds	r3, #12
 800b922:	4618      	mov	r0, r3
 800b924:	f7fc fe36 	bl	8008594 <snmp_get_node_instance_from_oid>
 800b928:	4603      	mov	r3, r0
 800b92a:	461a      	mov	r2, r3
 800b92c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b930:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	61da      	str	r2, [r3, #28]
        if (request->error_status == SNMP_ERR_NOERROR) {
 800b938:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b93c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	69db      	ldr	r3, [r3, #28]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d144      	bne.n	800b9d2 <snmp_process_set_request+0x2d4>
          if (node_instance.set_value(&node_instance, vb.value_len, vb.value) != SNMP_ERR_NOERROR) {
 800b948:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b94c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800b950:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b954:	f8b7 11d6 	ldrh.w	r1, [r7, #470]	; 0x1d6
 800b958:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800b95c:	f107 0008 	add.w	r0, r7, #8
 800b960:	4798      	blx	r3
 800b962:	4603      	mov	r3, r0
 800b964:	2b00      	cmp	r3, #0
 800b966:	d016      	beq.n	800b996 <snmp_process_set_request+0x298>
            if (request->inbound_varbind_enumerator.varbind_count == 1) {
 800b968:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b96c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800b974:	2b01      	cmp	r3, #1
 800b976:	d107      	bne.n	800b988 <snmp_process_set_request+0x28a>
              request->error_status = SNMP_ERR_COMMITFAILED;
 800b978:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b97c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	220e      	movs	r2, #14
 800b984:	61da      	str	r2, [r3, #28]
 800b986:	e006      	b.n	800b996 <snmp_process_set_request+0x298>
            } else {
              /* we cannot undo the set operations done so far */
              request->error_status = SNMP_ERR_UNDOFAILED;
 800b988:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b98c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	220f      	movs	r2, #15
 800b994:	61da      	str	r2, [r3, #28]
            }
          }

          if (node_instance.release_instance != NULL) {
 800b996:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b99a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800b99e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d015      	beq.n	800b9d2 <snmp_process_set_request+0x2d4>
            node_instance.release_instance(&node_instance);
 800b9a6:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b9aa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800b9ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b9b2:	f107 0208 	add.w	r2, r7, #8
 800b9b6:	4610      	mov	r0, r2
 800b9b8:	4798      	blx	r3
 800b9ba:	e00a      	b.n	800b9d2 <snmp_process_set_request+0x2d4>
          }
        }
      } else if (err == SNMP_VB_ENUMERATOR_ERR_EOVB) {
 800b9bc:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d010      	beq.n	800b9e6 <snmp_process_set_request+0x2e8>
        /* no more varbinds in request */
        break;
      } else {
        /* first time enumerating varbinds work but second time not, although nothing should have changed in between ??? */
        request->error_status = SNMP_ERR_GENERROR;
 800b9c4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b9c8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	2205      	movs	r2, #5
 800b9d0:	61da      	str	r2, [r3, #28]
    while (request->error_status == SNMP_ERR_NOERROR) {
 800b9d2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800b9d6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	69db      	ldr	r3, [r3, #28]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	f43f af7e 	beq.w	800b8e0 <snmp_process_set_request+0x1e2>
 800b9e4:	e000      	b.n	800b9e8 <snmp_process_set_request+0x2ea>
        break;
 800b9e6:	bf00      	nop
      }
    }
  }

  return ERR_OK;
 800b9e8:	2300      	movs	r3, #0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <snmp_parse_inbound_frame>:
 * - ERR_OK SNMP header is sane and accepted
 * - ERR_VAL SNMP header is either malformed or rejected
 */
static err_t
snmp_parse_inbound_frame(struct snmp_request *request)
{
 800b9f4:	b590      	push	{r4, r7, lr}
 800b9f6:	b08d      	sub	sp, #52	; 0x34
 800b9f8:	af02      	add	r7, sp, #8
 800b9fa:	6078      	str	r0, [r7, #4]
#if LWIP_SNMP_V3
  snmpv3_auth_algo_t auth;
  snmpv3_priv_algo_t priv;
#endif

  IF_PARSE_EXEC(snmp_pbuf_stream_init(&pbuf_stream, request->inbound_pbuf, 0, request->inbound_pbuf->tot_len));
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba04:	891b      	ldrh	r3, [r3, #8]
 800ba06:	f107 0018 	add.w	r0, r7, #24
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f001 faf2 	bl	800cff4 <snmp_pbuf_stream_init>
 800ba10:	4603      	mov	r3, r0
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d007      	beq.n	800ba26 <snmp_parse_inbound_frame+0x32>
 800ba16:	4b9f      	ldr	r3, [pc, #636]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800ba18:	695b      	ldr	r3, [r3, #20]
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	4a9d      	ldr	r2, [pc, #628]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800ba1e:	6153      	str	r3, [r2, #20]
 800ba20:	f06f 030f 	mvn.w	r3, #15
 800ba24:	e2f6      	b.n	800c014 <snmp_parse_inbound_frame+0x620>

  /* decode main container consisting of version, community and PDU */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 800ba26:	f107 0210 	add.w	r2, r7, #16
 800ba2a:	f107 0318 	add.w	r3, r7, #24
 800ba2e:	4611      	mov	r1, r2
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7fb fedd 	bl	80077f0 <snmp_asn1_dec_tlv>
 800ba36:	4603      	mov	r3, r0
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d007      	beq.n	800ba4c <snmp_parse_inbound_frame+0x58>
 800ba3c:	4b95      	ldr	r3, [pc, #596]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800ba3e:	695b      	ldr	r3, [r3, #20]
 800ba40:	3301      	adds	r3, #1
 800ba42:	4a94      	ldr	r2, [pc, #592]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800ba44:	6153      	str	r3, [r2, #20]
 800ba46:	f06f 030f 	mvn.w	r3, #15
 800ba4a:	e2e3      	b.n	800c014 <snmp_parse_inbound_frame+0x620>
  IF_PARSE_ASSERT((tlv.type == SNMP_ASN1_TYPE_SEQUENCE) && (tlv.value_len == pbuf_stream.length));
 800ba4c:	7c3b      	ldrb	r3, [r7, #16]
 800ba4e:	2b30      	cmp	r3, #48	; 0x30
 800ba50:	d103      	bne.n	800ba5a <snmp_parse_inbound_frame+0x66>
 800ba52:	8aba      	ldrh	r2, [r7, #20]
 800ba54:	8bfb      	ldrh	r3, [r7, #30]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d007      	beq.n	800ba6a <snmp_parse_inbound_frame+0x76>
 800ba5a:	4b8e      	ldr	r3, [pc, #568]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800ba5c:	695b      	ldr	r3, [r3, #20]
 800ba5e:	3301      	adds	r3, #1
 800ba60:	4a8c      	ldr	r2, [pc, #560]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800ba62:	6153      	str	r3, [r2, #20]
 800ba64:	f06f 030f 	mvn.w	r3, #15
 800ba68:	e2d4      	b.n	800c014 <snmp_parse_inbound_frame+0x620>
  parent_tlv_value_len = tlv.value_len;
 800ba6a:	8abb      	ldrh	r3, [r7, #20]
 800ba6c:	627b      	str	r3, [r7, #36]	; 0x24

  /* decode version */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 800ba6e:	f107 0210 	add.w	r2, r7, #16
 800ba72:	f107 0318 	add.w	r3, r7, #24
 800ba76:	4611      	mov	r1, r2
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7fb feb9 	bl	80077f0 <snmp_asn1_dec_tlv>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d007      	beq.n	800ba94 <snmp_parse_inbound_frame+0xa0>
 800ba84:	4b83      	ldr	r3, [pc, #524]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800ba86:	695b      	ldr	r3, [r3, #20]
 800ba88:	3301      	adds	r3, #1
 800ba8a:	4a82      	ldr	r2, [pc, #520]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800ba8c:	6153      	str	r3, [r2, #20]
 800ba8e:	f06f 030f 	mvn.w	r3, #15
 800ba92:	e2bf      	b.n	800c014 <snmp_parse_inbound_frame+0x620>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_INTEGER);
 800ba94:	7c3b      	ldrb	r3, [r7, #16]
 800ba96:	2b02      	cmp	r3, #2
 800ba98:	d007      	beq.n	800baaa <snmp_parse_inbound_frame+0xb6>
 800ba9a:	4b7e      	ldr	r3, [pc, #504]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800ba9c:	695b      	ldr	r3, [r3, #20]
 800ba9e:	3301      	adds	r3, #1
 800baa0:	4a7c      	ldr	r2, [pc, #496]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800baa2:	6153      	str	r3, [r2, #20]
 800baa4:	f06f 030f 	mvn.w	r3, #15
 800baa8:	e2b4      	b.n	800c014 <snmp_parse_inbound_frame+0x620>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 800baaa:	7c7b      	ldrb	r3, [r7, #17]
 800baac:	461a      	mov	r2, r3
 800baae:	7cbb      	ldrb	r3, [r7, #18]
 800bab0:	4413      	add	r3, r2
 800bab2:	8aba      	ldrh	r2, [r7, #20]
 800bab4:	4413      	add	r3, r2
 800bab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bab8:	1ad3      	subs	r3, r2, r3
 800baba:	627b      	str	r3, [r7, #36]	; 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 800babc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babe:	2b00      	cmp	r3, #0
 800bac0:	dc07      	bgt.n	800bad2 <snmp_parse_inbound_frame+0xde>
 800bac2:	4b74      	ldr	r3, [pc, #464]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800bac4:	695b      	ldr	r3, [r3, #20]
 800bac6:	3301      	adds	r3, #1
 800bac8:	4a72      	ldr	r2, [pc, #456]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800baca:	6153      	str	r3, [r2, #20]
 800bacc:	f06f 030f 	mvn.w	r3, #15
 800bad0:	e2a0      	b.n	800c014 <snmp_parse_inbound_frame+0x620>

  IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &s32_value));
 800bad2:	8ab9      	ldrh	r1, [r7, #20]
 800bad4:	f107 020c 	add.w	r2, r7, #12
 800bad8:	f107 0318 	add.w	r3, r7, #24
 800badc:	4618      	mov	r0, r3
 800bade:	f7fb ff63 	bl	80079a8 <snmp_asn1_dec_s32t>
 800bae2:	4603      	mov	r3, r0
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d007      	beq.n	800baf8 <snmp_parse_inbound_frame+0x104>
 800bae8:	4b6a      	ldr	r3, [pc, #424]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800baea:	695b      	ldr	r3, [r3, #20]
 800baec:	3301      	adds	r3, #1
 800baee:	4a69      	ldr	r2, [pc, #420]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800baf0:	6153      	str	r3, [r2, #20]
 800baf2:	f06f 030f 	mvn.w	r3, #15
 800baf6:	e28d      	b.n	800c014 <snmp_parse_inbound_frame+0x620>

  if (((s32_value != SNMP_VERSION_1) &&
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d00a      	beq.n	800bb14 <snmp_parse_inbound_frame+0x120>
       (s32_value != SNMP_VERSION_2c)
 800bafe:	68fb      	ldr	r3, [r7, #12]
  if (((s32_value != SNMP_VERSION_1) &&
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d007      	beq.n	800bb14 <snmp_parse_inbound_frame+0x120>
#if LWIP_SNMP_CONFIGURE_VERSIONS
      || (!snmp_version_enabled(s32_value))
#endif
     ) {
    /* unsupported SNMP version */
    snmp_stats.inbadversions++;
 800bb04:	4b63      	ldr	r3, [pc, #396]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800bb06:	689b      	ldr	r3, [r3, #8]
 800bb08:	3301      	adds	r3, #1
 800bb0a:	4a62      	ldr	r2, [pc, #392]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800bb0c:	6093      	str	r3, [r2, #8]
    return ERR_ARG;
 800bb0e:	f06f 030f 	mvn.w	r3, #15
 800bb12:	e27f      	b.n	800c014 <snmp_parse_inbound_frame+0x620>
  }
  request->version = (u8_t)s32_value;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	b2da      	uxtb	r2, r3
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	729a      	strb	r2, [r3, #10]
    /* TODO: do we need to verify this contextname too? */
  } else
#endif
  {
    /* decode community */
    IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 800bb1c:	f107 0210 	add.w	r2, r7, #16
 800bb20:	f107 0318 	add.w	r3, r7, #24
 800bb24:	4611      	mov	r1, r2
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7fb fe62 	bl	80077f0 <snmp_asn1_dec_tlv>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d007      	beq.n	800bb42 <snmp_parse_inbound_frame+0x14e>
 800bb32:	4b58      	ldr	r3, [pc, #352]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800bb34:	695b      	ldr	r3, [r3, #20]
 800bb36:	3301      	adds	r3, #1
 800bb38:	4a56      	ldr	r2, [pc, #344]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800bb3a:	6153      	str	r3, [r2, #20]
 800bb3c:	f06f 030f 	mvn.w	r3, #15
 800bb40:	e268      	b.n	800c014 <snmp_parse_inbound_frame+0x620>
    IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_OCTET_STRING);
 800bb42:	7c3b      	ldrb	r3, [r7, #16]
 800bb44:	2b04      	cmp	r3, #4
 800bb46:	d007      	beq.n	800bb58 <snmp_parse_inbound_frame+0x164>
 800bb48:	4b52      	ldr	r3, [pc, #328]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800bb4a:	695b      	ldr	r3, [r3, #20]
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	4a51      	ldr	r2, [pc, #324]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800bb50:	6153      	str	r3, [r2, #20]
 800bb52:	f06f 030f 	mvn.w	r3, #15
 800bb56:	e25d      	b.n	800c014 <snmp_parse_inbound_frame+0x620>
    parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 800bb58:	7c7b      	ldrb	r3, [r7, #17]
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	7cbb      	ldrb	r3, [r7, #18]
 800bb5e:	4413      	add	r3, r2
 800bb60:	8aba      	ldrh	r2, [r7, #20]
 800bb62:	4413      	add	r3, r2
 800bb64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb66:	1ad3      	subs	r3, r2, r3
 800bb68:	627b      	str	r3, [r7, #36]	; 0x24
    IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 800bb6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	dc07      	bgt.n	800bb80 <snmp_parse_inbound_frame+0x18c>
 800bb70:	4b48      	ldr	r3, [pc, #288]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800bb72:	695b      	ldr	r3, [r3, #20]
 800bb74:	3301      	adds	r3, #1
 800bb76:	4a47      	ldr	r2, [pc, #284]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800bb78:	6153      	str	r3, [r2, #20]
 800bb7a:	f06f 030f 	mvn.w	r3, #15
 800bb7e:	e249      	b.n	800c014 <snmp_parse_inbound_frame+0x620>

    err = snmp_asn1_dec_raw(&pbuf_stream, tlv.value_len, request->community, &request->community_strlen, SNMP_MAX_COMMUNITY_STR_LEN);
 800bb80:	8ab9      	ldrh	r1, [r7, #20]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f103 020b 	add.w	r2, r3, #11
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	3314      	adds	r3, #20
 800bb8c:	f107 0018 	add.w	r0, r7, #24
 800bb90:	2408      	movs	r4, #8
 800bb92:	9400      	str	r4, [sp, #0]
 800bb94:	f7fc f828 	bl	8007be8 <snmp_asn1_dec_raw>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err == ERR_MEM) {
 800bb9e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800bba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bba6:	d10b      	bne.n	800bbc0 <snmp_parse_inbound_frame+0x1cc>
      /* community string does not fit in our buffer -> its too long -> its invalid */
      request->community_strlen = 0;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	829a      	strh	r2, [r3, #20]
      snmp_pbuf_stream_seek(&pbuf_stream, tlv.value_len);
 800bbae:	8abb      	ldrh	r3, [r7, #20]
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	f107 0318 	add.w	r3, r7, #24
 800bbb6:	4611      	mov	r1, r2
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f001 fb12 	bl	800d1e2 <snmp_pbuf_stream_seek>
 800bbbe:	e00b      	b.n	800bbd8 <snmp_parse_inbound_frame+0x1e4>
    } else {
      IF_PARSE_ASSERT(err == ERR_OK);
 800bbc0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d007      	beq.n	800bbd8 <snmp_parse_inbound_frame+0x1e4>
 800bbc8:	4b32      	ldr	r3, [pc, #200]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800bbca:	695b      	ldr	r3, [r3, #20]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	4a31      	ldr	r2, [pc, #196]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800bbd0:	6153      	str	r3, [r2, #20]
 800bbd2:	f06f 030f 	mvn.w	r3, #15
 800bbd6:	e21d      	b.n	800c014 <snmp_parse_inbound_frame+0x620>
    }
    /* add zero terminator */
    request->community[request->community_strlen] = 0;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	8a9b      	ldrh	r3, [r3, #20]
 800bbdc:	461a      	mov	r2, r3
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	4413      	add	r3, r2
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	72da      	strb	r2, [r3, #11]
  }

  /* decode PDU type (next container level) */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 800bbe6:	f107 0210 	add.w	r2, r7, #16
 800bbea:	f107 0318 	add.w	r3, r7, #24
 800bbee:	4611      	mov	r1, r2
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7fb fdfd 	bl	80077f0 <snmp_asn1_dec_tlv>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d007      	beq.n	800bc0c <snmp_parse_inbound_frame+0x218>
 800bbfc:	4b25      	ldr	r3, [pc, #148]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800bbfe:	695b      	ldr	r3, [r3, #20]
 800bc00:	3301      	adds	r3, #1
 800bc02:	4a24      	ldr	r2, [pc, #144]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800bc04:	6153      	str	r3, [r2, #20]
 800bc06:	f06f 030f 	mvn.w	r3, #15
 800bc0a:	e203      	b.n	800c014 <snmp_parse_inbound_frame+0x620>
  IF_PARSE_ASSERT(tlv.value_len <= pbuf_stream.length);
 800bc0c:	8aba      	ldrh	r2, [r7, #20]
 800bc0e:	8bfb      	ldrh	r3, [r7, #30]
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d907      	bls.n	800bc24 <snmp_parse_inbound_frame+0x230>
 800bc14:	4b1f      	ldr	r3, [pc, #124]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800bc16:	695b      	ldr	r3, [r3, #20]
 800bc18:	3301      	adds	r3, #1
 800bc1a:	4a1e      	ldr	r2, [pc, #120]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800bc1c:	6153      	str	r3, [r2, #20]
 800bc1e:	f06f 030f 	mvn.w	r3, #15
 800bc22:	e1f7      	b.n	800c014 <snmp_parse_inbound_frame+0x620>
  request->inbound_padding_len = pbuf_stream.length - tlv.value_len;
 800bc24:	8bfa      	ldrh	r2, [r7, #30]
 800bc26:	8abb      	ldrh	r3, [r7, #20]
 800bc28:	1ad3      	subs	r3, r2, r3
 800bc2a:	b29a      	uxth	r2, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  parent_tlv_value_len = tlv.value_len;
 800bc32:	8abb      	ldrh	r3, [r7, #20]
 800bc34:	627b      	str	r3, [r7, #36]	; 0x24

  /* validate PDU type */
  switch (tlv.type) {
 800bc36:	7c3b      	ldrb	r3, [r7, #16]
 800bc38:	3ba0      	subs	r3, #160	; 0xa0
 800bc3a:	2b05      	cmp	r3, #5
 800bc3c:	d827      	bhi.n	800bc8e <snmp_parse_inbound_frame+0x29a>
 800bc3e:	a201      	add	r2, pc, #4	; (adr r2, 800bc44 <snmp_parse_inbound_frame+0x250>)
 800bc40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc44:	0800bc5d 	.word	0x0800bc5d
 800bc48:	0800bc69 	.word	0x0800bc69
 800bc4c:	0800bc8f 	.word	0x0800bc8f
 800bc50:	0800bc83 	.word	0x0800bc83
 800bc54:	0800bc8f 	.word	0x0800bc8f
 800bc58:	0800bc75 	.word	0x0800bc75
    case (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_REQ):
      /* GetRequest PDU */
      snmp_stats.ingetrequests++;
 800bc5c:	4b0d      	ldr	r3, [pc, #52]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800bc5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc60:	3301      	adds	r3, #1
 800bc62:	4a0c      	ldr	r2, [pc, #48]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800bc64:	6353      	str	r3, [r2, #52]	; 0x34
      break;
 800bc66:	e018      	b.n	800bc9a <snmp_parse_inbound_frame+0x2a6>
    case (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_NEXT_REQ):
      /* GetNextRequest PDU */
      snmp_stats.ingetnexts++;
 800bc68:	4b0a      	ldr	r3, [pc, #40]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800bc6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	4a09      	ldr	r2, [pc, #36]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800bc70:	6393      	str	r3, [r2, #56]	; 0x38
      break;
 800bc72:	e012      	b.n	800bc9a <snmp_parse_inbound_frame+0x2a6>
    case (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_BULK_REQ):
      /* GetBulkRequest PDU */
      if (request->version < SNMP_VERSION_2c) {
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	7a9b      	ldrb	r3, [r3, #10]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d10d      	bne.n	800bc98 <snmp_parse_inbound_frame+0x2a4>
        /* RFC2089: invalid, drop packet */
        return ERR_ARG;
 800bc7c:	f06f 030f 	mvn.w	r3, #15
 800bc80:	e1c8      	b.n	800c014 <snmp_parse_inbound_frame+0x620>
      }
      break;
    case (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_SET_REQ):
      /* SetRequest PDU */
      snmp_stats.insetrequests++;
 800bc82:	4b04      	ldr	r3, [pc, #16]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800bc84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc86:	3301      	adds	r3, #1
 800bc88:	4a02      	ldr	r2, [pc, #8]	; (800bc94 <snmp_parse_inbound_frame+0x2a0>)
 800bc8a:	63d3      	str	r3, [r2, #60]	; 0x3c
      break;
 800bc8c:	e005      	b.n	800bc9a <snmp_parse_inbound_frame+0x2a6>
    default:
      /* unsupported input PDU for this agent (no parse error) */
      LWIP_DEBUGF(SNMP_DEBUG, ("Unknown/Invalid SNMP PDU type received: %d", tlv.type)); \
      return ERR_ARG;
 800bc8e:	f06f 030f 	mvn.w	r3, #15
 800bc92:	e1bf      	b.n	800c014 <snmp_parse_inbound_frame+0x620>
 800bc94:	200036a8 	.word	0x200036a8
      break;
 800bc98:	bf00      	nop
  }
  request->request_type = tlv.type & SNMP_ASN1_DATATYPE_MASK;
 800bc9a:	7c3b      	ldrb	r3, [r7, #16]
 800bc9c:	f003 031f 	and.w	r3, r3, #31
 800bca0:	b2da      	uxtb	r2, r3
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	759a      	strb	r2, [r3, #22]
  request->request_out_type = (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_GET_RESP);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	22a2      	movs	r2, #162	; 0xa2
 800bcaa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* validate community (do this after decoding PDU type because we don't want to increase 'inbadcommunitynames' for wrong frame types */
  if (request->community_strlen == 0) {
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	8a9b      	ldrh	r3, [r3, #20]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d109      	bne.n	800bcca <snmp_parse_inbound_frame+0x2d6>
    /* community string was too long or really empty*/
    snmp_stats.inbadcommunitynames++;
 800bcb6:	4ba2      	ldr	r3, [pc, #648]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800bcb8:	68db      	ldr	r3, [r3, #12]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	4aa0      	ldr	r2, [pc, #640]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800bcbe:	60d3      	str	r3, [r2, #12]
    snmp_authfail_trap();
 800bcc0:	f002 f90a 	bl	800ded8 <snmp_authfail_trap>
    return ERR_ARG;
 800bcc4:	f06f 030f 	mvn.w	r3, #15
 800bcc8:	e1a4      	b.n	800c014 <snmp_parse_inbound_frame+0x620>
  } else if (request->request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) {
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	7d9b      	ldrb	r3, [r3, #22]
 800bcce:	2b03      	cmp	r3, #3
 800bcd0:	d120      	bne.n	800bd14 <snmp_parse_inbound_frame+0x320>
    if (snmp_community_write[0] == 0) {
 800bcd2:	4b9c      	ldr	r3, [pc, #624]	; (800bf44 <snmp_parse_inbound_frame+0x550>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d106      	bne.n	800bcea <snmp_parse_inbound_frame+0x2f6>
      /* our write community is empty, that means all our objects are readonly */
      request->error_status = SNMP_ERR_NOTWRITABLE;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2211      	movs	r2, #17
 800bce0:	61da      	str	r2, [r3, #28]
      request->error_index  = 1;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2201      	movs	r2, #1
 800bce6:	621a      	str	r2, [r3, #32]
 800bce8:	e029      	b.n	800bd3e <snmp_parse_inbound_frame+0x34a>
    } else if (strncmp(snmp_community_write, (const char *)request->community, SNMP_MAX_COMMUNITY_STR_LEN) != 0) {
 800bcea:	4b96      	ldr	r3, [pc, #600]	; (800bf44 <snmp_parse_inbound_frame+0x550>)
 800bcec:	6818      	ldr	r0, [r3, #0]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	330b      	adds	r3, #11
 800bcf2:	2208      	movs	r2, #8
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	f010 fdaf 	bl	801c858 <strncmp>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d01e      	beq.n	800bd3e <snmp_parse_inbound_frame+0x34a>
      /* community name does not match */
      snmp_stats.inbadcommunitynames++;
 800bd00:	4b8f      	ldr	r3, [pc, #572]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800bd02:	68db      	ldr	r3, [r3, #12]
 800bd04:	3301      	adds	r3, #1
 800bd06:	4a8e      	ldr	r2, [pc, #568]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800bd08:	60d3      	str	r3, [r2, #12]
      snmp_authfail_trap();
 800bd0a:	f002 f8e5 	bl	800ded8 <snmp_authfail_trap>
      return ERR_ARG;
 800bd0e:	f06f 030f 	mvn.w	r3, #15
 800bd12:	e17f      	b.n	800c014 <snmp_parse_inbound_frame+0x620>
    }
  } else {
    if (strncmp(snmp_community, (const char *)request->community, SNMP_MAX_COMMUNITY_STR_LEN) != 0) {
 800bd14:	4b8c      	ldr	r3, [pc, #560]	; (800bf48 <snmp_parse_inbound_frame+0x554>)
 800bd16:	6818      	ldr	r0, [r3, #0]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	330b      	adds	r3, #11
 800bd1c:	2208      	movs	r2, #8
 800bd1e:	4619      	mov	r1, r3
 800bd20:	f010 fd9a 	bl	801c858 <strncmp>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d009      	beq.n	800bd3e <snmp_parse_inbound_frame+0x34a>
      /* community name does not match */
      snmp_stats.inbadcommunitynames++;
 800bd2a:	4b85      	ldr	r3, [pc, #532]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800bd2c:	68db      	ldr	r3, [r3, #12]
 800bd2e:	3301      	adds	r3, #1
 800bd30:	4a83      	ldr	r2, [pc, #524]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800bd32:	60d3      	str	r3, [r2, #12]
      snmp_authfail_trap();
 800bd34:	f002 f8d0 	bl	800ded8 <snmp_authfail_trap>
      return ERR_ARG;
 800bd38:	f06f 030f 	mvn.w	r3, #15
 800bd3c:	e16a      	b.n	800c014 <snmp_parse_inbound_frame+0x620>
    }
  }

  /* decode request ID */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 800bd3e:	f107 0210 	add.w	r2, r7, #16
 800bd42:	f107 0318 	add.w	r3, r7, #24
 800bd46:	4611      	mov	r1, r2
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7fb fd51 	bl	80077f0 <snmp_asn1_dec_tlv>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d007      	beq.n	800bd64 <snmp_parse_inbound_frame+0x370>
 800bd54:	4b7a      	ldr	r3, [pc, #488]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800bd56:	695b      	ldr	r3, [r3, #20]
 800bd58:	3301      	adds	r3, #1
 800bd5a:	4a79      	ldr	r2, [pc, #484]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800bd5c:	6153      	str	r3, [r2, #20]
 800bd5e:	f06f 030f 	mvn.w	r3, #15
 800bd62:	e157      	b.n	800c014 <snmp_parse_inbound_frame+0x620>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_INTEGER);
 800bd64:	7c3b      	ldrb	r3, [r7, #16]
 800bd66:	2b02      	cmp	r3, #2
 800bd68:	d007      	beq.n	800bd7a <snmp_parse_inbound_frame+0x386>
 800bd6a:	4b75      	ldr	r3, [pc, #468]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800bd6c:	695b      	ldr	r3, [r3, #20]
 800bd6e:	3301      	adds	r3, #1
 800bd70:	4a73      	ldr	r2, [pc, #460]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800bd72:	6153      	str	r3, [r2, #20]
 800bd74:	f06f 030f 	mvn.w	r3, #15
 800bd78:	e14c      	b.n	800c014 <snmp_parse_inbound_frame+0x620>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 800bd7a:	7c7b      	ldrb	r3, [r7, #17]
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	7cbb      	ldrb	r3, [r7, #18]
 800bd80:	4413      	add	r3, r2
 800bd82:	8aba      	ldrh	r2, [r7, #20]
 800bd84:	4413      	add	r3, r2
 800bd86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd88:	1ad3      	subs	r3, r2, r3
 800bd8a:	627b      	str	r3, [r7, #36]	; 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 800bd8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	dc07      	bgt.n	800bda2 <snmp_parse_inbound_frame+0x3ae>
 800bd92:	4b6b      	ldr	r3, [pc, #428]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800bd94:	695b      	ldr	r3, [r3, #20]
 800bd96:	3301      	adds	r3, #1
 800bd98:	4a69      	ldr	r2, [pc, #420]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800bd9a:	6153      	str	r3, [r2, #20]
 800bd9c:	f06f 030f 	mvn.w	r3, #15
 800bda0:	e138      	b.n	800c014 <snmp_parse_inbound_frame+0x620>

  IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &request->request_id));
 800bda2:	8ab9      	ldrh	r1, [r7, #20]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f103 0218 	add.w	r2, r3, #24
 800bdaa:	f107 0318 	add.w	r3, r7, #24
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f7fb fdfa 	bl	80079a8 <snmp_asn1_dec_s32t>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d007      	beq.n	800bdca <snmp_parse_inbound_frame+0x3d6>
 800bdba:	4b61      	ldr	r3, [pc, #388]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800bdbc:	695b      	ldr	r3, [r3, #20]
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	4a5f      	ldr	r2, [pc, #380]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800bdc2:	6153      	str	r3, [r2, #20]
 800bdc4:	f06f 030f 	mvn.w	r3, #15
 800bdc8:	e124      	b.n	800c014 <snmp_parse_inbound_frame+0x620>

  /* decode error status / non-repeaters */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 800bdca:	f107 0210 	add.w	r2, r7, #16
 800bdce:	f107 0318 	add.w	r3, r7, #24
 800bdd2:	4611      	mov	r1, r2
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7fb fd0b 	bl	80077f0 <snmp_asn1_dec_tlv>
 800bdda:	4603      	mov	r3, r0
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d007      	beq.n	800bdf0 <snmp_parse_inbound_frame+0x3fc>
 800bde0:	4b57      	ldr	r3, [pc, #348]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800bde2:	695b      	ldr	r3, [r3, #20]
 800bde4:	3301      	adds	r3, #1
 800bde6:	4a56      	ldr	r2, [pc, #344]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800bde8:	6153      	str	r3, [r2, #20]
 800bdea:	f06f 030f 	mvn.w	r3, #15
 800bdee:	e111      	b.n	800c014 <snmp_parse_inbound_frame+0x620>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_INTEGER);
 800bdf0:	7c3b      	ldrb	r3, [r7, #16]
 800bdf2:	2b02      	cmp	r3, #2
 800bdf4:	d007      	beq.n	800be06 <snmp_parse_inbound_frame+0x412>
 800bdf6:	4b52      	ldr	r3, [pc, #328]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800bdf8:	695b      	ldr	r3, [r3, #20]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	4a50      	ldr	r2, [pc, #320]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800bdfe:	6153      	str	r3, [r2, #20]
 800be00:	f06f 030f 	mvn.w	r3, #15
 800be04:	e106      	b.n	800c014 <snmp_parse_inbound_frame+0x620>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 800be06:	7c7b      	ldrb	r3, [r7, #17]
 800be08:	461a      	mov	r2, r3
 800be0a:	7cbb      	ldrb	r3, [r7, #18]
 800be0c:	4413      	add	r3, r2
 800be0e:	8aba      	ldrh	r2, [r7, #20]
 800be10:	4413      	add	r3, r2
 800be12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be14:	1ad3      	subs	r3, r2, r3
 800be16:	627b      	str	r3, [r7, #36]	; 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 800be18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	dc07      	bgt.n	800be2e <snmp_parse_inbound_frame+0x43a>
 800be1e:	4b48      	ldr	r3, [pc, #288]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800be20:	695b      	ldr	r3, [r3, #20]
 800be22:	3301      	adds	r3, #1
 800be24:	4a46      	ldr	r2, [pc, #280]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800be26:	6153      	str	r3, [r2, #20]
 800be28:	f06f 030f 	mvn.w	r3, #15
 800be2c:	e0f2      	b.n	800c014 <snmp_parse_inbound_frame+0x620>

  if (request->request_type == SNMP_ASN1_CONTEXT_PDU_GET_BULK_REQ) {
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	7d9b      	ldrb	r3, [r3, #22]
 800be32:	2b05      	cmp	r3, #5
 800be34:	d11b      	bne.n	800be6e <snmp_parse_inbound_frame+0x47a>
    IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &request->non_repeaters));
 800be36:	8ab9      	ldrh	r1, [r7, #20]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800be3e:	f107 0318 	add.w	r3, r7, #24
 800be42:	4618      	mov	r0, r3
 800be44:	f7fb fdb0 	bl	80079a8 <snmp_asn1_dec_s32t>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d007      	beq.n	800be5e <snmp_parse_inbound_frame+0x46a>
 800be4e:	4b3c      	ldr	r3, [pc, #240]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800be50:	695b      	ldr	r3, [r3, #20]
 800be52:	3301      	adds	r3, #1
 800be54:	4a3a      	ldr	r2, [pc, #232]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800be56:	6153      	str	r3, [r2, #20]
 800be58:	f06f 030f 	mvn.w	r3, #15
 800be5c:	e0da      	b.n	800c014 <snmp_parse_inbound_frame+0x620>
    if (request->non_repeaters < 0) {
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be62:	2b00      	cmp	r3, #0
 800be64:	da21      	bge.n	800beaa <snmp_parse_inbound_frame+0x4b6>
      /* RFC 1905, 4.2.3 */
      request->non_repeaters = 0;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2200      	movs	r2, #0
 800be6a:	625a      	str	r2, [r3, #36]	; 0x24
 800be6c:	e01d      	b.n	800beaa <snmp_parse_inbound_frame+0x4b6>
    }
  } else {
    /* only check valid value, don't touch 'request->error_status', maybe a response error status was already set to above; */
    IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &s32_value));
 800be6e:	8ab9      	ldrh	r1, [r7, #20]
 800be70:	f107 020c 	add.w	r2, r7, #12
 800be74:	f107 0318 	add.w	r3, r7, #24
 800be78:	4618      	mov	r0, r3
 800be7a:	f7fb fd95 	bl	80079a8 <snmp_asn1_dec_s32t>
 800be7e:	4603      	mov	r3, r0
 800be80:	2b00      	cmp	r3, #0
 800be82:	d007      	beq.n	800be94 <snmp_parse_inbound_frame+0x4a0>
 800be84:	4b2e      	ldr	r3, [pc, #184]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800be86:	695b      	ldr	r3, [r3, #20]
 800be88:	3301      	adds	r3, #1
 800be8a:	4a2d      	ldr	r2, [pc, #180]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800be8c:	6153      	str	r3, [r2, #20]
 800be8e:	f06f 030f 	mvn.w	r3, #15
 800be92:	e0bf      	b.n	800c014 <snmp_parse_inbound_frame+0x620>
    IF_PARSE_ASSERT(s32_value == SNMP_ERR_NOERROR);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d007      	beq.n	800beaa <snmp_parse_inbound_frame+0x4b6>
 800be9a:	4b29      	ldr	r3, [pc, #164]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800be9c:	695b      	ldr	r3, [r3, #20]
 800be9e:	3301      	adds	r3, #1
 800bea0:	4a27      	ldr	r2, [pc, #156]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800bea2:	6153      	str	r3, [r2, #20]
 800bea4:	f06f 030f 	mvn.w	r3, #15
 800bea8:	e0b4      	b.n	800c014 <snmp_parse_inbound_frame+0x620>
  }

  /* decode error index / max-repetitions */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 800beaa:	f107 0210 	add.w	r2, r7, #16
 800beae:	f107 0318 	add.w	r3, r7, #24
 800beb2:	4611      	mov	r1, r2
 800beb4:	4618      	mov	r0, r3
 800beb6:	f7fb fc9b 	bl	80077f0 <snmp_asn1_dec_tlv>
 800beba:	4603      	mov	r3, r0
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d007      	beq.n	800bed0 <snmp_parse_inbound_frame+0x4dc>
 800bec0:	4b1f      	ldr	r3, [pc, #124]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800bec2:	695b      	ldr	r3, [r3, #20]
 800bec4:	3301      	adds	r3, #1
 800bec6:	4a1e      	ldr	r2, [pc, #120]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800bec8:	6153      	str	r3, [r2, #20]
 800beca:	f06f 030f 	mvn.w	r3, #15
 800bece:	e0a1      	b.n	800c014 <snmp_parse_inbound_frame+0x620>
  IF_PARSE_ASSERT(tlv.type == SNMP_ASN1_TYPE_INTEGER);
 800bed0:	7c3b      	ldrb	r3, [r7, #16]
 800bed2:	2b02      	cmp	r3, #2
 800bed4:	d007      	beq.n	800bee6 <snmp_parse_inbound_frame+0x4f2>
 800bed6:	4b1a      	ldr	r3, [pc, #104]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800bed8:	695b      	ldr	r3, [r3, #20]
 800beda:	3301      	adds	r3, #1
 800bedc:	4a18      	ldr	r2, [pc, #96]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800bede:	6153      	str	r3, [r2, #20]
 800bee0:	f06f 030f 	mvn.w	r3, #15
 800bee4:	e096      	b.n	800c014 <snmp_parse_inbound_frame+0x620>
  parent_tlv_value_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 800bee6:	7c7b      	ldrb	r3, [r7, #17]
 800bee8:	461a      	mov	r2, r3
 800beea:	7cbb      	ldrb	r3, [r7, #18]
 800beec:	4413      	add	r3, r2
 800beee:	8aba      	ldrh	r2, [r7, #20]
 800bef0:	4413      	add	r3, r2
 800bef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bef4:	1ad3      	subs	r3, r2, r3
 800bef6:	627b      	str	r3, [r7, #36]	; 0x24
  IF_PARSE_ASSERT(parent_tlv_value_len > 0);
 800bef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befa:	2b00      	cmp	r3, #0
 800befc:	dc07      	bgt.n	800bf0e <snmp_parse_inbound_frame+0x51a>
 800befe:	4b10      	ldr	r3, [pc, #64]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800bf00:	695b      	ldr	r3, [r3, #20]
 800bf02:	3301      	adds	r3, #1
 800bf04:	4a0e      	ldr	r2, [pc, #56]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800bf06:	6153      	str	r3, [r2, #20]
 800bf08:	f06f 030f 	mvn.w	r3, #15
 800bf0c:	e082      	b.n	800c014 <snmp_parse_inbound_frame+0x620>

  if (request->request_type == SNMP_ASN1_CONTEXT_PDU_GET_BULK_REQ) {
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	7d9b      	ldrb	r3, [r3, #22]
 800bf12:	2b05      	cmp	r3, #5
 800bf14:	d122      	bne.n	800bf5c <snmp_parse_inbound_frame+0x568>
    IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &request->max_repetitions));
 800bf16:	8ab9      	ldrh	r1, [r7, #20]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800bf1e:	f107 0318 	add.w	r3, r7, #24
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7fb fd40 	bl	80079a8 <snmp_asn1_dec_s32t>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d00e      	beq.n	800bf4c <snmp_parse_inbound_frame+0x558>
 800bf2e:	4b04      	ldr	r3, [pc, #16]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800bf30:	695b      	ldr	r3, [r3, #20]
 800bf32:	3301      	adds	r3, #1
 800bf34:	4a02      	ldr	r2, [pc, #8]	; (800bf40 <snmp_parse_inbound_frame+0x54c>)
 800bf36:	6153      	str	r3, [r2, #20]
 800bf38:	f06f 030f 	mvn.w	r3, #15
 800bf3c:	e06a      	b.n	800c014 <snmp_parse_inbound_frame+0x620>
 800bf3e:	bf00      	nop
 800bf40:	200036a8 	.word	0x200036a8
 800bf44:	20000050 	.word	0x20000050
 800bf48:	2000004c 	.word	0x2000004c
    if (request->max_repetitions < 0) {
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	da22      	bge.n	800bf9a <snmp_parse_inbound_frame+0x5a6>
      /* RFC 1905, 4.2.3 */
      request->max_repetitions = 0;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2200      	movs	r2, #0
 800bf58:	629a      	str	r2, [r3, #40]	; 0x28
 800bf5a:	e01e      	b.n	800bf9a <snmp_parse_inbound_frame+0x5a6>
    }
  } else {
    IF_PARSE_EXEC(snmp_asn1_dec_s32t(&pbuf_stream, tlv.value_len, &request->error_index));
 800bf5c:	8ab9      	ldrh	r1, [r7, #20]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f103 0220 	add.w	r2, r3, #32
 800bf64:	f107 0318 	add.w	r3, r7, #24
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7fb fd1d 	bl	80079a8 <snmp_asn1_dec_s32t>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d007      	beq.n	800bf84 <snmp_parse_inbound_frame+0x590>
 800bf74:	4b29      	ldr	r3, [pc, #164]	; (800c01c <snmp_parse_inbound_frame+0x628>)
 800bf76:	695b      	ldr	r3, [r3, #20]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	4a28      	ldr	r2, [pc, #160]	; (800c01c <snmp_parse_inbound_frame+0x628>)
 800bf7c:	6153      	str	r3, [r2, #20]
 800bf7e:	f06f 030f 	mvn.w	r3, #15
 800bf82:	e047      	b.n	800c014 <snmp_parse_inbound_frame+0x620>
    IF_PARSE_ASSERT(s32_value == 0);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d007      	beq.n	800bf9a <snmp_parse_inbound_frame+0x5a6>
 800bf8a:	4b24      	ldr	r3, [pc, #144]	; (800c01c <snmp_parse_inbound_frame+0x628>)
 800bf8c:	695b      	ldr	r3, [r3, #20]
 800bf8e:	3301      	adds	r3, #1
 800bf90:	4a22      	ldr	r2, [pc, #136]	; (800c01c <snmp_parse_inbound_frame+0x628>)
 800bf92:	6153      	str	r3, [r2, #20]
 800bf94:	f06f 030f 	mvn.w	r3, #15
 800bf98:	e03c      	b.n	800c014 <snmp_parse_inbound_frame+0x620>
  }

  /* decode varbind-list type (next container level) */
  IF_PARSE_EXEC(snmp_asn1_dec_tlv(&pbuf_stream, &tlv));
 800bf9a:	f107 0210 	add.w	r2, r7, #16
 800bf9e:	f107 0318 	add.w	r3, r7, #24
 800bfa2:	4611      	mov	r1, r2
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7fb fc23 	bl	80077f0 <snmp_asn1_dec_tlv>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d007      	beq.n	800bfc0 <snmp_parse_inbound_frame+0x5cc>
 800bfb0:	4b1a      	ldr	r3, [pc, #104]	; (800c01c <snmp_parse_inbound_frame+0x628>)
 800bfb2:	695b      	ldr	r3, [r3, #20]
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	4a19      	ldr	r2, [pc, #100]	; (800c01c <snmp_parse_inbound_frame+0x628>)
 800bfb8:	6153      	str	r3, [r2, #20]
 800bfba:	f06f 030f 	mvn.w	r3, #15
 800bfbe:	e029      	b.n	800c014 <snmp_parse_inbound_frame+0x620>
  IF_PARSE_ASSERT((tlv.type == SNMP_ASN1_TYPE_SEQUENCE) && (tlv.value_len <= pbuf_stream.length));
 800bfc0:	7c3b      	ldrb	r3, [r7, #16]
 800bfc2:	2b30      	cmp	r3, #48	; 0x30
 800bfc4:	d103      	bne.n	800bfce <snmp_parse_inbound_frame+0x5da>
 800bfc6:	8aba      	ldrh	r2, [r7, #20]
 800bfc8:	8bfb      	ldrh	r3, [r7, #30]
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d907      	bls.n	800bfde <snmp_parse_inbound_frame+0x5ea>
 800bfce:	4b13      	ldr	r3, [pc, #76]	; (800c01c <snmp_parse_inbound_frame+0x628>)
 800bfd0:	695b      	ldr	r3, [r3, #20]
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	4a11      	ldr	r2, [pc, #68]	; (800c01c <snmp_parse_inbound_frame+0x628>)
 800bfd6:	6153      	str	r3, [r2, #20]
 800bfd8:	f06f 030f 	mvn.w	r3, #15
 800bfdc:	e01a      	b.n	800c014 <snmp_parse_inbound_frame+0x620>

  request->inbound_varbind_offset = pbuf_stream.offset;
 800bfde:	8bba      	ldrh	r2, [r7, #28]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  request->inbound_varbind_len    = pbuf_stream.length - request->inbound_padding_len;
 800bfe6:	8bfa      	ldrh	r2, [r7, #30]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bfee:	1ad3      	subs	r3, r2, r3
 800bff0:	b29a      	uxth	r2, r3
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  snmp_vb_enumerator_init(&(request->inbound_varbind_enumerator), request->inbound_pbuf, request->inbound_varbind_offset, request->inbound_varbind_len);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800c00e:	f000 fdc9 	bl	800cba4 <snmp_vb_enumerator_init>

  return ERR_OK;
 800c012:	2300      	movs	r3, #0
}
 800c014:	4618      	mov	r0, r3
 800c016:	372c      	adds	r7, #44	; 0x2c
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd90      	pop	{r4, r7, pc}
 800c01c:	200036a8 	.word	0x200036a8

0800c020 <snmp_prepare_outbound_frame>:

#define OF_BUILD_EXEC(code) BUILD_EXEC(code, ERR_ARG)

static err_t
snmp_prepare_outbound_frame(struct snmp_request *request)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b086      	sub	sp, #24
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  struct snmp_asn1_tlv tlv;
  struct snmp_pbuf_stream *pbuf_stream = &(request->outbound_pbuf_stream);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	334c      	adds	r3, #76	; 0x4c
 800c02c:	617b      	str	r3, [r7, #20]

  /* try allocating pbuf(s) for maximum response size */
  request->outbound_pbuf = pbuf_alloc(PBUF_TRANSPORT, 1472, PBUF_RAM);
 800c02e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c032:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
 800c036:	2036      	movs	r0, #54	; 0x36
 800c038:	f003 fdc6 	bl	800fbc8 <pbuf_alloc>
 800c03c:	4602      	mov	r2, r0
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	649a      	str	r2, [r3, #72]	; 0x48
  if (request->outbound_pbuf == NULL) {
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c046:	2b00      	cmp	r3, #0
 800c048:	d102      	bne.n	800c050 <snmp_prepare_outbound_frame+0x30>
    return ERR_MEM;
 800c04a:	f04f 33ff 	mov.w	r3, #4294967295
 800c04e:	e110      	b.n	800c272 <snmp_prepare_outbound_frame+0x252>
  }

  snmp_pbuf_stream_init(pbuf_stream, request->outbound_pbuf, 0, request->outbound_pbuf->tot_len);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c058:	891b      	ldrh	r3, [r3, #8]
 800c05a:	2200      	movs	r2, #0
 800c05c:	6978      	ldr	r0, [r7, #20]
 800c05e:	f000 ffc9 	bl	800cff4 <snmp_pbuf_stream_init>

  /* 'Message' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 3, 0);
 800c062:	2330      	movs	r3, #48	; 0x30
 800c064:	733b      	strb	r3, [r7, #12]
 800c066:	2300      	movs	r3, #0
 800c068:	737b      	strb	r3, [r7, #13]
 800c06a:	2303      	movs	r3, #3
 800c06c:	73bb      	strb	r3, [r7, #14]
 800c06e:	2300      	movs	r3, #0
 800c070:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 800c072:	f107 030c 	add.w	r3, r7, #12
 800c076:	4619      	mov	r1, r3
 800c078:	6978      	ldr	r0, [r7, #20]
 800c07a:	f7fb f979 	bl	8007370 <snmp_ans1_enc_tlv>
 800c07e:	4603      	mov	r3, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	d002      	beq.n	800c08a <snmp_prepare_outbound_frame+0x6a>
 800c084:	f06f 030f 	mvn.w	r3, #15
 800c088:	e0f3      	b.n	800c272 <snmp_prepare_outbound_frame+0x252>

  /* version */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 800c08a:	2302      	movs	r3, #2
 800c08c:	733b      	strb	r3, [r7, #12]
 800c08e:	2300      	movs	r3, #0
 800c090:	737b      	strb	r3, [r7, #13]
 800c092:	2300      	movs	r3, #0
 800c094:	73bb      	strb	r3, [r7, #14]
 800c096:	2300      	movs	r3, #0
 800c098:	823b      	strh	r3, [r7, #16]
  snmp_asn1_enc_s32t_cnt(request->version, &tlv.value_len);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	7a9b      	ldrb	r3, [r3, #10]
 800c09e:	461a      	mov	r2, r3
 800c0a0:	f107 030c 	add.w	r3, r7, #12
 800c0a4:	3304      	adds	r3, #4
 800c0a6:	4619      	mov	r1, r3
 800c0a8:	4610      	mov	r0, r2
 800c0aa:	f7fb fb33 	bl	8007714 <snmp_asn1_enc_s32t_cnt>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 800c0ae:	f107 030c 	add.w	r3, r7, #12
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	6978      	ldr	r0, [r7, #20]
 800c0b6:	f7fb f95b 	bl	8007370 <snmp_ans1_enc_tlv>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d002      	beq.n	800c0c6 <snmp_prepare_outbound_frame+0xa6>
 800c0c0:	f06f 030f 	mvn.w	r3, #15
 800c0c4:	e0d5      	b.n	800c272 <snmp_prepare_outbound_frame+0x252>
  OF_BUILD_EXEC( snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, request->version) );
 800c0c6:	8a39      	ldrh	r1, [r7, #16]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	7a9b      	ldrb	r3, [r3, #10]
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	6978      	ldr	r0, [r7, #20]
 800c0d0:	f7fb fa36 	bl	8007540 <snmp_asn1_enc_s32t>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d002      	beq.n	800c0e0 <snmp_prepare_outbound_frame+0xc0>
 800c0da:	f06f 030f 	mvn.w	r3, #15
 800c0de:	e0c8      	b.n	800c272 <snmp_prepare_outbound_frame+0x252>

#if LWIP_SNMP_V3
  if (request->version < SNMP_VERSION_3) {
#endif
    /* community */
    SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_OCTET_STRING, 0, request->community_strlen);
 800c0e0:	2304      	movs	r3, #4
 800c0e2:	733b      	strb	r3, [r7, #12]
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	737b      	strb	r3, [r7, #13]
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	73bb      	strb	r3, [r7, #14]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	8a9b      	ldrh	r3, [r3, #20]
 800c0f0:	823b      	strh	r3, [r7, #16]
    OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 800c0f2:	f107 030c 	add.w	r3, r7, #12
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	6978      	ldr	r0, [r7, #20]
 800c0fa:	f7fb f939 	bl	8007370 <snmp_ans1_enc_tlv>
 800c0fe:	4603      	mov	r3, r0
 800c100:	2b00      	cmp	r3, #0
 800c102:	d002      	beq.n	800c10a <snmp_prepare_outbound_frame+0xea>
 800c104:	f06f 030f 	mvn.w	r3, #15
 800c108:	e0b3      	b.n	800c272 <snmp_prepare_outbound_frame+0x252>
    OF_BUILD_EXEC( snmp_asn1_enc_raw(pbuf_stream, request->community, request->community_strlen) );
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f103 010b 	add.w	r1, r3, #11
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	8a9b      	ldrh	r3, [r3, #20]
 800c114:	461a      	mov	r2, r3
 800c116:	6978      	ldr	r0, [r7, #20]
 800c118:	f7fb f9b5 	bl	8007486 <snmp_asn1_enc_raw>
 800c11c:	4603      	mov	r3, r0
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d002      	beq.n	800c128 <snmp_prepare_outbound_frame+0x108>
 800c122:	f06f 030f 	mvn.w	r3, #15
 800c126:	e0a4      	b.n	800c272 <snmp_prepare_outbound_frame+0x252>
    OF_BUILD_EXEC(snmp_asn1_enc_raw(pbuf_stream, request->context_name, request->context_name_len));
  }
#endif

  /* 'PDU' sequence */
  request->outbound_pdu_offset = pbuf_stream->offset;
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	889a      	ldrh	r2, [r3, #4]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  SNMP_ASN1_SET_TLV_PARAMS(tlv, request->request_out_type, 3, 0);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c138:	733b      	strb	r3, [r7, #12]
 800c13a:	2300      	movs	r3, #0
 800c13c:	737b      	strb	r3, [r7, #13]
 800c13e:	2303      	movs	r3, #3
 800c140:	73bb      	strb	r3, [r7, #14]
 800c142:	2300      	movs	r3, #0
 800c144:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 800c146:	f107 030c 	add.w	r3, r7, #12
 800c14a:	4619      	mov	r1, r3
 800c14c:	6978      	ldr	r0, [r7, #20]
 800c14e:	f7fb f90f 	bl	8007370 <snmp_ans1_enc_tlv>
 800c152:	4603      	mov	r3, r0
 800c154:	2b00      	cmp	r3, #0
 800c156:	d002      	beq.n	800c15e <snmp_prepare_outbound_frame+0x13e>
 800c158:	f06f 030f 	mvn.w	r3, #15
 800c15c:	e089      	b.n	800c272 <snmp_prepare_outbound_frame+0x252>

  /* request ID */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 800c15e:	2302      	movs	r3, #2
 800c160:	733b      	strb	r3, [r7, #12]
 800c162:	2300      	movs	r3, #0
 800c164:	737b      	strb	r3, [r7, #13]
 800c166:	2300      	movs	r3, #0
 800c168:	73bb      	strb	r3, [r7, #14]
 800c16a:	2300      	movs	r3, #0
 800c16c:	823b      	strh	r3, [r7, #16]
  snmp_asn1_enc_s32t_cnt(request->request_id, &tlv.value_len);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	699a      	ldr	r2, [r3, #24]
 800c172:	f107 030c 	add.w	r3, r7, #12
 800c176:	3304      	adds	r3, #4
 800c178:	4619      	mov	r1, r3
 800c17a:	4610      	mov	r0, r2
 800c17c:	f7fb faca 	bl	8007714 <snmp_asn1_enc_s32t_cnt>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 800c180:	f107 030c 	add.w	r3, r7, #12
 800c184:	4619      	mov	r1, r3
 800c186:	6978      	ldr	r0, [r7, #20]
 800c188:	f7fb f8f2 	bl	8007370 <snmp_ans1_enc_tlv>
 800c18c:	4603      	mov	r3, r0
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d002      	beq.n	800c198 <snmp_prepare_outbound_frame+0x178>
 800c192:	f06f 030f 	mvn.w	r3, #15
 800c196:	e06c      	b.n	800c272 <snmp_prepare_outbound_frame+0x252>
  OF_BUILD_EXEC( snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, request->request_id) );
 800c198:	8a39      	ldrh	r1, [r7, #16]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	699b      	ldr	r3, [r3, #24]
 800c19e:	461a      	mov	r2, r3
 800c1a0:	6978      	ldr	r0, [r7, #20]
 800c1a2:	f7fb f9cd 	bl	8007540 <snmp_asn1_enc_s32t>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d002      	beq.n	800c1b2 <snmp_prepare_outbound_frame+0x192>
 800c1ac:	f06f 030f 	mvn.w	r3, #15
 800c1b0:	e05f      	b.n	800c272 <snmp_prepare_outbound_frame+0x252>

  /* error status */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 1);
 800c1b2:	2302      	movs	r3, #2
 800c1b4:	733b      	strb	r3, [r7, #12]
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	737b      	strb	r3, [r7, #13]
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	73bb      	strb	r3, [r7, #14]
 800c1be:	2301      	movs	r3, #1
 800c1c0:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 800c1c2:	f107 030c 	add.w	r3, r7, #12
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	6978      	ldr	r0, [r7, #20]
 800c1ca:	f7fb f8d1 	bl	8007370 <snmp_ans1_enc_tlv>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d002      	beq.n	800c1da <snmp_prepare_outbound_frame+0x1ba>
 800c1d4:	f06f 030f 	mvn.w	r3, #15
 800c1d8:	e04b      	b.n	800c272 <snmp_prepare_outbound_frame+0x252>
  request->outbound_error_status_offset = pbuf_stream->offset;
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	889a      	ldrh	r2, [r3, #4]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  OF_BUILD_EXEC( snmp_pbuf_stream_write(pbuf_stream, 0) );
 800c1e4:	2100      	movs	r1, #0
 800c1e6:	6978      	ldr	r0, [r7, #20]
 800c1e8:	f000 ff4a 	bl	800d080 <snmp_pbuf_stream_write>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d002      	beq.n	800c1f8 <snmp_prepare_outbound_frame+0x1d8>
 800c1f2:	f06f 030f 	mvn.w	r3, #15
 800c1f6:	e03c      	b.n	800c272 <snmp_prepare_outbound_frame+0x252>

  /* error index */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 1);
 800c1f8:	2302      	movs	r3, #2
 800c1fa:	733b      	strb	r3, [r7, #12]
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	737b      	strb	r3, [r7, #13]
 800c200:	2300      	movs	r3, #0
 800c202:	73bb      	strb	r3, [r7, #14]
 800c204:	2301      	movs	r3, #1
 800c206:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 800c208:	f107 030c 	add.w	r3, r7, #12
 800c20c:	4619      	mov	r1, r3
 800c20e:	6978      	ldr	r0, [r7, #20]
 800c210:	f7fb f8ae 	bl	8007370 <snmp_ans1_enc_tlv>
 800c214:	4603      	mov	r3, r0
 800c216:	2b00      	cmp	r3, #0
 800c218:	d002      	beq.n	800c220 <snmp_prepare_outbound_frame+0x200>
 800c21a:	f06f 030f 	mvn.w	r3, #15
 800c21e:	e028      	b.n	800c272 <snmp_prepare_outbound_frame+0x252>
  request->outbound_error_index_offset = pbuf_stream->offset;
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	889a      	ldrh	r2, [r3, #4]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  OF_BUILD_EXEC( snmp_pbuf_stream_write(pbuf_stream, 0) );
 800c22a:	2100      	movs	r1, #0
 800c22c:	6978      	ldr	r0, [r7, #20]
 800c22e:	f000 ff27 	bl	800d080 <snmp_pbuf_stream_write>
 800c232:	4603      	mov	r3, r0
 800c234:	2b00      	cmp	r3, #0
 800c236:	d002      	beq.n	800c23e <snmp_prepare_outbound_frame+0x21e>
 800c238:	f06f 030f 	mvn.w	r3, #15
 800c23c:	e019      	b.n	800c272 <snmp_prepare_outbound_frame+0x252>

  /* 'VarBindList' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 3, 0);
 800c23e:	2330      	movs	r3, #48	; 0x30
 800c240:	733b      	strb	r3, [r7, #12]
 800c242:	2300      	movs	r3, #0
 800c244:	737b      	strb	r3, [r7, #13]
 800c246:	2303      	movs	r3, #3
 800c248:	73bb      	strb	r3, [r7, #14]
 800c24a:	2300      	movs	r3, #0
 800c24c:	823b      	strh	r3, [r7, #16]
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 800c24e:	f107 030c 	add.w	r3, r7, #12
 800c252:	4619      	mov	r1, r3
 800c254:	6978      	ldr	r0, [r7, #20]
 800c256:	f7fb f88b 	bl	8007370 <snmp_ans1_enc_tlv>
 800c25a:	4603      	mov	r3, r0
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d002      	beq.n	800c266 <snmp_prepare_outbound_frame+0x246>
 800c260:	f06f 030f 	mvn.w	r3, #15
 800c264:	e005      	b.n	800c272 <snmp_prepare_outbound_frame+0x252>

  request->outbound_varbind_offset = pbuf_stream->offset;
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	889a      	ldrh	r2, [r3, #4]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  return ERR_OK;
 800c270:	2300      	movs	r3, #0
}
 800c272:	4618      	mov	r0, r3
 800c274:	3718      	adds	r7, #24
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
	...

0800c27c <snmp_varbind_length>:

/** Calculate the length of a varbind list */
err_t
snmp_varbind_length(struct snmp_varbind *varbind, struct snmp_varbind_len *len)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b082      	sub	sp, #8
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
  /* calculate required lengths */
  snmp_asn1_enc_oid_cnt(varbind->oid.id, varbind->oid.len, &len->oid_value_len);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f103 000c 	add.w	r0, r3, #12
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	7a1b      	ldrb	r3, [r3, #8]
 800c290:	b299      	uxth	r1, r3
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	3306      	adds	r3, #6
 800c296:	461a      	mov	r2, r3
 800c298:	f7fb fa67 	bl	800776a <snmp_asn1_enc_oid_cnt>
  snmp_asn1_enc_length_cnt(len->oid_value_len, &len->oid_len_len);
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	88da      	ldrh	r2, [r3, #6]
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	3304      	adds	r3, #4
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	4610      	mov	r0, r2
 800c2a8:	f7fb f9eb 	bl	8007682 <snmp_asn1_enc_length_cnt>

  if (varbind->value_len == 0) {
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d103      	bne.n	800c2be <snmp_varbind_length+0x42>
    len->value_value_len = 0;
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	815a      	strh	r2, [r3, #10]
 800c2bc:	e10a      	b.n	800c4d4 <snmp_varbind_length+0x258>
  } else if (varbind->value_len & SNMP_GET_VALUE_RAW_DATA) {
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 800c2c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d008      	beq.n	800c2de <snmp_varbind_length+0x62>
    len->value_value_len = varbind->value_len & (~SNMP_GET_VALUE_RAW_DATA);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 800c2d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c2d6:	b29a      	uxth	r2, r3
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	815a      	strh	r2, [r3, #10]
 800c2dc:	e0fa      	b.n	800c4d4 <snmp_varbind_length+0x258>
  } else {
    switch (varbind->type) {
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800c2e4:	3b02      	subs	r3, #2
 800c2e6:	2b44      	cmp	r3, #68	; 0x44
 800c2e8:	f200 80f1 	bhi.w	800c4ce <snmp_varbind_length+0x252>
 800c2ec:	a201      	add	r2, pc, #4	; (adr r2, 800c2f4 <snmp_varbind_length+0x78>)
 800c2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2f2:	bf00      	nop
 800c2f4:	0800c409 	.word	0x0800c409
 800c2f8:	0800c4cf 	.word	0x0800c4cf
 800c2fc:	0800c455 	.word	0x0800c455
 800c300:	0800c461 	.word	0x0800c461
 800c304:	0800c479 	.word	0x0800c479
 800c308:	0800c4cf 	.word	0x0800c4cf
 800c30c:	0800c4cf 	.word	0x0800c4cf
 800c310:	0800c4cf 	.word	0x0800c4cf
 800c314:	0800c4cf 	.word	0x0800c4cf
 800c318:	0800c4cf 	.word	0x0800c4cf
 800c31c:	0800c4cf 	.word	0x0800c4cf
 800c320:	0800c4cf 	.word	0x0800c4cf
 800c324:	0800c4cf 	.word	0x0800c4cf
 800c328:	0800c4cf 	.word	0x0800c4cf
 800c32c:	0800c4cf 	.word	0x0800c4cf
 800c330:	0800c4cf 	.word	0x0800c4cf
 800c334:	0800c4cf 	.word	0x0800c4cf
 800c338:	0800c4cf 	.word	0x0800c4cf
 800c33c:	0800c4cf 	.word	0x0800c4cf
 800c340:	0800c4cf 	.word	0x0800c4cf
 800c344:	0800c4cf 	.word	0x0800c4cf
 800c348:	0800c4cf 	.word	0x0800c4cf
 800c34c:	0800c4cf 	.word	0x0800c4cf
 800c350:	0800c4cf 	.word	0x0800c4cf
 800c354:	0800c4cf 	.word	0x0800c4cf
 800c358:	0800c4cf 	.word	0x0800c4cf
 800c35c:	0800c4cf 	.word	0x0800c4cf
 800c360:	0800c4cf 	.word	0x0800c4cf
 800c364:	0800c4cf 	.word	0x0800c4cf
 800c368:	0800c4cf 	.word	0x0800c4cf
 800c36c:	0800c4cf 	.word	0x0800c4cf
 800c370:	0800c4cf 	.word	0x0800c4cf
 800c374:	0800c4cf 	.word	0x0800c4cf
 800c378:	0800c4cf 	.word	0x0800c4cf
 800c37c:	0800c4cf 	.word	0x0800c4cf
 800c380:	0800c4cf 	.word	0x0800c4cf
 800c384:	0800c4cf 	.word	0x0800c4cf
 800c388:	0800c4cf 	.word	0x0800c4cf
 800c38c:	0800c4cf 	.word	0x0800c4cf
 800c390:	0800c4cf 	.word	0x0800c4cf
 800c394:	0800c4cf 	.word	0x0800c4cf
 800c398:	0800c4cf 	.word	0x0800c4cf
 800c39c:	0800c4cf 	.word	0x0800c4cf
 800c3a0:	0800c4cf 	.word	0x0800c4cf
 800c3a4:	0800c4cf 	.word	0x0800c4cf
 800c3a8:	0800c4cf 	.word	0x0800c4cf
 800c3ac:	0800c4cf 	.word	0x0800c4cf
 800c3b0:	0800c4cf 	.word	0x0800c4cf
 800c3b4:	0800c4cf 	.word	0x0800c4cf
 800c3b8:	0800c4cf 	.word	0x0800c4cf
 800c3bc:	0800c4cf 	.word	0x0800c4cf
 800c3c0:	0800c4cf 	.word	0x0800c4cf
 800c3c4:	0800c4cf 	.word	0x0800c4cf
 800c3c8:	0800c4cf 	.word	0x0800c4cf
 800c3cc:	0800c4cf 	.word	0x0800c4cf
 800c3d0:	0800c4cf 	.word	0x0800c4cf
 800c3d4:	0800c4cf 	.word	0x0800c4cf
 800c3d8:	0800c4cf 	.word	0x0800c4cf
 800c3dc:	0800c4cf 	.word	0x0800c4cf
 800c3e0:	0800c4cf 	.word	0x0800c4cf
 800c3e4:	0800c4cf 	.word	0x0800c4cf
 800c3e8:	0800c4cf 	.word	0x0800c4cf
 800c3ec:	0800c455 	.word	0x0800c455
 800c3f0:	0800c42f 	.word	0x0800c42f
 800c3f4:	0800c42f 	.word	0x0800c42f
 800c3f8:	0800c42f 	.word	0x0800c42f
 800c3fc:	0800c455 	.word	0x0800c455
 800c400:	0800c4cf 	.word	0x0800c4cf
 800c404:	0800c4a9 	.word	0x0800c4a9
      case SNMP_ASN1_TYPE_INTEGER:
        if (varbind->value_len != sizeof (s32_t)) {
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 800c40e:	2b04      	cmp	r3, #4
 800c410:	d002      	beq.n	800c418 <snmp_varbind_length+0x19c>
          return ERR_VAL;
 800c412:	f06f 0305 	mvn.w	r3, #5
 800c416:	e081      	b.n	800c51c <snmp_varbind_length+0x2a0>
        }
        snmp_asn1_enc_s32t_cnt(*((s32_t *) varbind->value), &len->value_value_len);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c41e:	681a      	ldr	r2, [r3, #0]
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	330a      	adds	r3, #10
 800c424:	4619      	mov	r1, r3
 800c426:	4610      	mov	r0, r2
 800c428:	f7fb f974 	bl	8007714 <snmp_asn1_enc_s32t_cnt>
        break;
 800c42c:	e052      	b.n	800c4d4 <snmp_varbind_length+0x258>
      case SNMP_ASN1_TYPE_COUNTER:
      case SNMP_ASN1_TYPE_GAUGE:
      case SNMP_ASN1_TYPE_TIMETICKS:
        if (varbind->value_len != sizeof (u32_t)) {
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 800c434:	2b04      	cmp	r3, #4
 800c436:	d002      	beq.n	800c43e <snmp_varbind_length+0x1c2>
          return ERR_VAL;
 800c438:	f06f 0305 	mvn.w	r3, #5
 800c43c:	e06e      	b.n	800c51c <snmp_varbind_length+0x2a0>
        }
        snmp_asn1_enc_u32t_cnt(*((u32_t *) varbind->value), &len->value_value_len);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	330a      	adds	r3, #10
 800c44a:	4619      	mov	r1, r3
 800c44c:	4610      	mov	r0, r2
 800c44e:	f7fb f935 	bl	80076bc <snmp_asn1_enc_u32t_cnt>
        break;
 800c452:	e03f      	b.n	800c4d4 <snmp_varbind_length+0x258>
      case SNMP_ASN1_TYPE_OCTET_STRING:
      case SNMP_ASN1_TYPE_IPADDR:
      case SNMP_ASN1_TYPE_OPAQUE:
        len->value_value_len = varbind->value_len;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8b3 20d6 	ldrh.w	r2, [r3, #214]	; 0xd6
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	815a      	strh	r2, [r3, #10]
        break;
 800c45e:	e039      	b.n	800c4d4 <snmp_varbind_length+0x258>
      case SNMP_ASN1_TYPE_NULL:
        if (varbind->value_len != 0) {
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 800c466:	2b00      	cmp	r3, #0
 800c468:	d002      	beq.n	800c470 <snmp_varbind_length+0x1f4>
          return ERR_VAL;
 800c46a:	f06f 0305 	mvn.w	r3, #5
 800c46e:	e055      	b.n	800c51c <snmp_varbind_length+0x2a0>
        }
        len->value_value_len = 0;
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	2200      	movs	r2, #0
 800c474:	815a      	strh	r2, [r3, #10]
        break;
 800c476:	e02d      	b.n	800c4d4 <snmp_varbind_length+0x258>
      case SNMP_ASN1_TYPE_OBJECT_ID:
        if ((varbind->value_len & 0x03) != 0) {
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 800c47e:	f003 0303 	and.w	r3, r3, #3
 800c482:	2b00      	cmp	r3, #0
 800c484:	d002      	beq.n	800c48c <snmp_varbind_length+0x210>
          return ERR_VAL;
 800c486:	f06f 0305 	mvn.w	r3, #5
 800c48a:	e047      	b.n	800c51c <snmp_varbind_length+0x2a0>
        }
        snmp_asn1_enc_oid_cnt((u32_t *) varbind->value, varbind->value_len >> 2, &len->value_value_len);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 800c498:	089b      	lsrs	r3, r3, #2
 800c49a:	b299      	uxth	r1, r3
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	330a      	adds	r3, #10
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	f7fb f962 	bl	800776a <snmp_asn1_enc_oid_cnt>
        break;
 800c4a6:	e015      	b.n	800c4d4 <snmp_varbind_length+0x258>
#if LWIP_HAVE_INT64
      case SNMP_ASN1_TYPE_COUNTER64:
        if (varbind->value_len != sizeof(u64_t)) {
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 800c4ae:	2b08      	cmp	r3, #8
 800c4b0:	d002      	beq.n	800c4b8 <snmp_varbind_length+0x23c>
          return ERR_VAL;
 800c4b2:	f06f 0305 	mvn.w	r3, #5
 800c4b6:	e031      	b.n	800c51c <snmp_varbind_length+0x2a0>
        }
        snmp_asn1_enc_u64t_cnt(*(u64_t *)varbind->value, &len->value_value_len);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c4be:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	330a      	adds	r3, #10
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	f7fb fbb9 	bl	8007c3e <snmp_asn1_enc_u64t_cnt>
        break;
 800c4cc:	e002      	b.n	800c4d4 <snmp_varbind_length+0x258>
#endif
      default:
        /* unsupported type */
        return ERR_VAL;
 800c4ce:	f06f 0305 	mvn.w	r3, #5
 800c4d2:	e023      	b.n	800c51c <snmp_varbind_length+0x2a0>
    }
  }
  snmp_asn1_enc_length_cnt(len->value_value_len, &len->value_len_len);
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	895a      	ldrh	r2, [r3, #10]
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	3308      	adds	r3, #8
 800c4dc:	4619      	mov	r1, r3
 800c4de:	4610      	mov	r0, r2
 800c4e0:	f7fb f8cf 	bl	8007682 <snmp_asn1_enc_length_cnt>

  len->vb_value_len = 1 + len->oid_len_len + len->oid_value_len + 1 + len->value_len_len + len->value_value_len;
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	791b      	ldrb	r3, [r3, #4]
 800c4e8:	b29a      	uxth	r2, r3
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	88db      	ldrh	r3, [r3, #6]
 800c4ee:	4413      	add	r3, r2
 800c4f0:	b29a      	uxth	r2, r3
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	7a1b      	ldrb	r3, [r3, #8]
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	4413      	add	r3, r2
 800c4fa:	b29a      	uxth	r2, r3
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	895b      	ldrh	r3, [r3, #10]
 800c500:	4413      	add	r3, r2
 800c502:	b29b      	uxth	r3, r3
 800c504:	3302      	adds	r3, #2
 800c506:	b29a      	uxth	r2, r3
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	805a      	strh	r2, [r3, #2]
  snmp_asn1_enc_length_cnt(len->vb_value_len, &len->vb_len_len);
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	885b      	ldrh	r3, [r3, #2]
 800c510:	683a      	ldr	r2, [r7, #0]
 800c512:	4611      	mov	r1, r2
 800c514:	4618      	mov	r0, r3
 800c516:	f7fb f8b4 	bl	8007682 <snmp_asn1_enc_length_cnt>

  return ERR_OK;
 800c51a:	2300      	movs	r3, #0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3708      	adds	r7, #8
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <snmp_append_outbound_varbind>:

#define OVB_BUILD_EXEC(code) BUILD_EXEC(code, ERR_ARG)

err_t
snmp_append_outbound_varbind(struct snmp_pbuf_stream *pbuf_stream, struct snmp_varbind *varbind)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b088      	sub	sp, #32
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	6039      	str	r1, [r7, #0]
  struct snmp_asn1_tlv tlv;
  struct snmp_varbind_len len;
  err_t err;

  err = snmp_varbind_length(varbind, &len);
 800c52e:	f107 030c 	add.w	r3, r7, #12
 800c532:	4619      	mov	r1, r3
 800c534:	6838      	ldr	r0, [r7, #0]
 800c536:	f7ff fea1 	bl	800c27c <snmp_varbind_length>
 800c53a:	4603      	mov	r3, r0
 800c53c:	77fb      	strb	r3, [r7, #31]

  if (err != ERR_OK) {
 800c53e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d002      	beq.n	800c54c <snmp_append_outbound_varbind+0x28>
    return err;
 800c546:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c54a:	e0fb      	b.n	800c744 <snmp_append_outbound_varbind+0x220>
  }

  /* check length already before adding first data because in case of GetBulk,
   *  data added so far is returned and therefore no partial data shall be added
   */
  if ((1 + len.vb_len_len + len.vb_value_len) > pbuf_stream->length) {
 800c54c:	7b3b      	ldrb	r3, [r7, #12]
 800c54e:	3301      	adds	r3, #1
 800c550:	89fa      	ldrh	r2, [r7, #14]
 800c552:	4413      	add	r3, r2
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	88d2      	ldrh	r2, [r2, #6]
 800c558:	4293      	cmp	r3, r2
 800c55a:	dd02      	ble.n	800c562 <snmp_append_outbound_varbind+0x3e>
    return ERR_BUF;
 800c55c:	f06f 0301 	mvn.w	r3, #1
 800c560:	e0f0      	b.n	800c744 <snmp_append_outbound_varbind+0x220>
  }

  /* 'VarBind' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, len.vb_len_len, len.vb_value_len);
 800c562:	2330      	movs	r3, #48	; 0x30
 800c564:	763b      	strb	r3, [r7, #24]
 800c566:	2300      	movs	r3, #0
 800c568:	767b      	strb	r3, [r7, #25]
 800c56a:	7b3b      	ldrb	r3, [r7, #12]
 800c56c:	76bb      	strb	r3, [r7, #26]
 800c56e:	89fb      	ldrh	r3, [r7, #14]
 800c570:	83bb      	strh	r3, [r7, #28]
  OVB_BUILD_EXEC(snmp_ans1_enc_tlv(pbuf_stream, &tlv));
 800c572:	f107 0318 	add.w	r3, r7, #24
 800c576:	4619      	mov	r1, r3
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f7fa fef9 	bl	8007370 <snmp_ans1_enc_tlv>
 800c57e:	4603      	mov	r3, r0
 800c580:	2b00      	cmp	r3, #0
 800c582:	d002      	beq.n	800c58a <snmp_append_outbound_varbind+0x66>
 800c584:	f06f 030f 	mvn.w	r3, #15
 800c588:	e0dc      	b.n	800c744 <snmp_append_outbound_varbind+0x220>

  /* VarBind OID */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_OBJECT_ID, len.oid_len_len, len.oid_value_len);
 800c58a:	2306      	movs	r3, #6
 800c58c:	763b      	strb	r3, [r7, #24]
 800c58e:	2300      	movs	r3, #0
 800c590:	767b      	strb	r3, [r7, #25]
 800c592:	7c3b      	ldrb	r3, [r7, #16]
 800c594:	76bb      	strb	r3, [r7, #26]
 800c596:	8a7b      	ldrh	r3, [r7, #18]
 800c598:	83bb      	strh	r3, [r7, #28]
  OVB_BUILD_EXEC(snmp_ans1_enc_tlv(pbuf_stream, &tlv));
 800c59a:	f107 0318 	add.w	r3, r7, #24
 800c59e:	4619      	mov	r1, r3
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f7fa fee5 	bl	8007370 <snmp_ans1_enc_tlv>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d002      	beq.n	800c5b2 <snmp_append_outbound_varbind+0x8e>
 800c5ac:	f06f 030f 	mvn.w	r3, #15
 800c5b0:	e0c8      	b.n	800c744 <snmp_append_outbound_varbind+0x220>
  OVB_BUILD_EXEC(snmp_asn1_enc_oid(pbuf_stream, varbind->oid.id, varbind->oid.len));
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	f103 010c 	add.w	r1, r3, #12
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	7a1b      	ldrb	r3, [r3, #8]
 800c5bc:	b29b      	uxth	r3, r3
 800c5be:	461a      	mov	r2, r3
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f7fa ffec 	bl	800759e <snmp_asn1_enc_oid>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d002      	beq.n	800c5d2 <snmp_append_outbound_varbind+0xae>
 800c5cc:	f06f 030f 	mvn.w	r3, #15
 800c5d0:	e0b8      	b.n	800c744 <snmp_append_outbound_varbind+0x220>

  /* VarBind value */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, varbind->type, len.value_len_len, len.value_value_len);
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800c5d8:	763b      	strb	r3, [r7, #24]
 800c5da:	2300      	movs	r3, #0
 800c5dc:	767b      	strb	r3, [r7, #25]
 800c5de:	7d3b      	ldrb	r3, [r7, #20]
 800c5e0:	76bb      	strb	r3, [r7, #26]
 800c5e2:	8afb      	ldrh	r3, [r7, #22]
 800c5e4:	83bb      	strh	r3, [r7, #28]
  OVB_BUILD_EXEC(snmp_ans1_enc_tlv(pbuf_stream, &tlv));
 800c5e6:	f107 0318 	add.w	r3, r7, #24
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f7fa febf 	bl	8007370 <snmp_ans1_enc_tlv>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d002      	beq.n	800c5fe <snmp_append_outbound_varbind+0xda>
 800c5f8:	f06f 030f 	mvn.w	r3, #15
 800c5fc:	e0a2      	b.n	800c744 <snmp_append_outbound_varbind+0x220>

  if (len.value_value_len > 0) {
 800c5fe:	8afb      	ldrh	r3, [r7, #22]
 800c600:	2b00      	cmp	r3, #0
 800c602:	f000 8095 	beq.w	800c730 <snmp_append_outbound_varbind+0x20c>
    if (varbind->value_len & SNMP_GET_VALUE_RAW_DATA) {
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 800c60c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c610:	2b00      	cmp	r3, #0
 800c612:	d00e      	beq.n	800c632 <snmp_append_outbound_varbind+0x10e>
      OVB_BUILD_EXEC(snmp_asn1_enc_raw(pbuf_stream, (u8_t *) varbind->value, len.value_value_len));
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c61a:	8afa      	ldrh	r2, [r7, #22]
 800c61c:	4619      	mov	r1, r3
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f7fa ff31 	bl	8007486 <snmp_asn1_enc_raw>
 800c624:	4603      	mov	r3, r0
 800c626:	2b00      	cmp	r3, #0
 800c628:	f000 808b 	beq.w	800c742 <snmp_append_outbound_varbind+0x21e>
 800c62c:	f06f 030f 	mvn.w	r3, #15
 800c630:	e088      	b.n	800c744 <snmp_append_outbound_varbind+0x220>
    } else {
      switch (varbind->type) {
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800c638:	2b46      	cmp	r3, #70	; 0x46
 800c63a:	dc71      	bgt.n	800c720 <snmp_append_outbound_varbind+0x1fc>
 800c63c:	2b40      	cmp	r3, #64	; 0x40
 800c63e:	da08      	bge.n	800c652 <snmp_append_outbound_varbind+0x12e>
 800c640:	2b06      	cmp	r3, #6
 800c642:	d04c      	beq.n	800c6de <snmp_append_outbound_varbind+0x1ba>
 800c644:	2b06      	cmp	r3, #6
 800c646:	dc6b      	bgt.n	800c720 <snmp_append_outbound_varbind+0x1fc>
 800c648:	2b02      	cmp	r3, #2
 800c64a:	d017      	beq.n	800c67c <snmp_append_outbound_varbind+0x158>
 800c64c:	2b04      	cmp	r3, #4
 800c64e:	d033      	beq.n	800c6b8 <snmp_append_outbound_varbind+0x194>
 800c650:	e066      	b.n	800c720 <snmp_append_outbound_varbind+0x1fc>
 800c652:	3b40      	subs	r3, #64	; 0x40
 800c654:	2b06      	cmp	r3, #6
 800c656:	d863      	bhi.n	800c720 <snmp_append_outbound_varbind+0x1fc>
 800c658:	a201      	add	r2, pc, #4	; (adr r2, 800c660 <snmp_append_outbound_varbind+0x13c>)
 800c65a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c65e:	bf00      	nop
 800c660:	0800c6b9 	.word	0x0800c6b9
 800c664:	0800c69b 	.word	0x0800c69b
 800c668:	0800c69b 	.word	0x0800c69b
 800c66c:	0800c69b 	.word	0x0800c69b
 800c670:	0800c6b9 	.word	0x0800c6b9
 800c674:	0800c721 	.word	0x0800c721
 800c678:	0800c703 	.word	0x0800c703
        case SNMP_ASN1_TYPE_INTEGER:
          OVB_BUILD_EXEC(snmp_asn1_enc_s32t(pbuf_stream, len.value_value_len, *((s32_t *) varbind->value)));
 800c67c:	8af9      	ldrh	r1, [r7, #22]
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	461a      	mov	r2, r3
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f7fa ff59 	bl	8007540 <snmp_asn1_enc_s32t>
 800c68e:	4603      	mov	r3, r0
 800c690:	2b00      	cmp	r3, #0
 800c692:	d04f      	beq.n	800c734 <snmp_append_outbound_varbind+0x210>
 800c694:	f06f 030f 	mvn.w	r3, #15
 800c698:	e054      	b.n	800c744 <snmp_append_outbound_varbind+0x220>
          break;
        case SNMP_ASN1_TYPE_COUNTER:
        case SNMP_ASN1_TYPE_GAUGE:
        case SNMP_ASN1_TYPE_TIMETICKS:
          OVB_BUILD_EXEC(snmp_asn1_enc_u32t(pbuf_stream, len.value_value_len, *((u32_t *) varbind->value)));
 800c69a:	8af9      	ldrh	r1, [r7, #22]
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f7fa ff05 	bl	80074b6 <snmp_asn1_enc_u32t>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d042      	beq.n	800c738 <snmp_append_outbound_varbind+0x214>
 800c6b2:	f06f 030f 	mvn.w	r3, #15
 800c6b6:	e045      	b.n	800c744 <snmp_append_outbound_varbind+0x220>
          break;
        case SNMP_ASN1_TYPE_OCTET_STRING:
        case SNMP_ASN1_TYPE_IPADDR:
        case SNMP_ASN1_TYPE_OPAQUE:
          OVB_BUILD_EXEC(snmp_asn1_enc_raw(pbuf_stream, (u8_t *) varbind->value, len.value_value_len));
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c6be:	8afa      	ldrh	r2, [r7, #22]
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f7fa fedf 	bl	8007486 <snmp_asn1_enc_raw>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d002      	beq.n	800c6d4 <snmp_append_outbound_varbind+0x1b0>
 800c6ce:	f06f 030f 	mvn.w	r3, #15
 800c6d2:	e037      	b.n	800c744 <snmp_append_outbound_varbind+0x220>
          len.value_value_len = varbind->value_len;
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 800c6da:	82fb      	strh	r3, [r7, #22]
          break;
 800c6dc:	e031      	b.n	800c742 <snmp_append_outbound_varbind+0x21e>
        case SNMP_ASN1_TYPE_OBJECT_ID:
          OVB_BUILD_EXEC(snmp_asn1_enc_oid(pbuf_stream, (u32_t *) varbind->value, varbind->value_len / sizeof (u32_t)));
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 800c6ea:	089b      	lsrs	r3, r3, #2
 800c6ec:	b29b      	uxth	r3, r3
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f7fa ff54 	bl	800759e <snmp_asn1_enc_oid>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d01f      	beq.n	800c73c <snmp_append_outbound_varbind+0x218>
 800c6fc:	f06f 030f 	mvn.w	r3, #15
 800c700:	e020      	b.n	800c744 <snmp_append_outbound_varbind+0x220>
          break;
#if LWIP_HAVE_INT64
        case SNMP_ASN1_TYPE_COUNTER64:
          OVB_BUILD_EXEC(snmp_asn1_enc_u64t(pbuf_stream, len.value_value_len, *(u64_t *) varbind->value));
 800c702:	8af9      	ldrh	r1, [r7, #22]
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f7fb fb2d 	bl	8007d6e <snmp_asn1_enc_u64t>
 800c714:	4603      	mov	r3, r0
 800c716:	2b00      	cmp	r3, #0
 800c718:	d012      	beq.n	800c740 <snmp_append_outbound_varbind+0x21c>
 800c71a:	f06f 030f 	mvn.w	r3, #15
 800c71e:	e011      	b.n	800c744 <snmp_append_outbound_varbind+0x220>
          break;
#endif
        default:
          LWIP_ASSERT("Unknown variable type", 0);
 800c720:	4b0a      	ldr	r3, [pc, #40]	; (800c74c <snmp_append_outbound_varbind+0x228>)
 800c722:	f44f 62c7 	mov.w	r2, #1592	; 0x638
 800c726:	490a      	ldr	r1, [pc, #40]	; (800c750 <snmp_append_outbound_varbind+0x22c>)
 800c728:	480a      	ldr	r0, [pc, #40]	; (800c754 <snmp_append_outbound_varbind+0x230>)
 800c72a:	f010 f801 	bl	801c730 <iprintf>
          break;
 800c72e:	e008      	b.n	800c742 <snmp_append_outbound_varbind+0x21e>
      }
    }
 800c730:	bf00      	nop
 800c732:	e006      	b.n	800c742 <snmp_append_outbound_varbind+0x21e>
          break;
 800c734:	bf00      	nop
 800c736:	e004      	b.n	800c742 <snmp_append_outbound_varbind+0x21e>
          break;
 800c738:	bf00      	nop
 800c73a:	e002      	b.n	800c742 <snmp_append_outbound_varbind+0x21e>
          break;
 800c73c:	bf00      	nop
 800c73e:	e000      	b.n	800c742 <snmp_append_outbound_varbind+0x21e>
          break;
 800c740:	bf00      	nop
  }

  return ERR_OK;
 800c742:	2300      	movs	r3, #0
}
 800c744:	4618      	mov	r0, r3
 800c746:	3720      	adds	r7, #32
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}
 800c74c:	08020484 	.word	0x08020484
 800c750:	08020558 	.word	0x08020558
 800c754:	080204e0 	.word	0x080204e0

0800c758 <snmp_complete_outbound_frame>:

static err_t
snmp_complete_outbound_frame(struct snmp_request *request)
{
 800c758:	b590      	push	{r4, r7, lr}
 800c75a:	b089      	sub	sp, #36	; 0x24
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  struct snmp_asn1_tlv tlv;
  u16_t frame_size;
  u8_t outbound_padding = 0;
 800c760:	2300      	movs	r3, #0
 800c762:	77fb      	strb	r3, [r7, #31]

  if (request->version == SNMP_VERSION_1) {
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	7a9b      	ldrb	r3, [r3, #10]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d13c      	bne.n	800c7e6 <snmp_complete_outbound_frame+0x8e>
    if (request->error_status != SNMP_ERR_NOERROR) {
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	69db      	ldr	r3, [r3, #28]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d04f      	beq.n	800c814 <snmp_complete_outbound_frame+0xbc>
      /* map v2c error codes to v1 compliant error code (according to RFC 2089) */
      switch (request->error_status) {
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	69db      	ldr	r3, [r3, #28]
 800c778:	2b12      	cmp	r3, #18
 800c77a:	dc21      	bgt.n	800c7c0 <snmp_complete_outbound_frame+0x68>
 800c77c:	2b06      	cmp	r3, #6
 800c77e:	db2e      	blt.n	800c7de <snmp_complete_outbound_frame+0x86>
 800c780:	3b06      	subs	r3, #6
 800c782:	2b0c      	cmp	r3, #12
 800c784:	d82b      	bhi.n	800c7de <snmp_complete_outbound_frame+0x86>
 800c786:	a201      	add	r2, pc, #4	; (adr r2, 800c78c <snmp_complete_outbound_frame+0x34>)
 800c788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c78c:	0800c7d7 	.word	0x0800c7d7
 800c790:	0800c7cf 	.word	0x0800c7cf
 800c794:	0800c7cf 	.word	0x0800c7cf
 800c798:	0800c7cf 	.word	0x0800c7cf
 800c79c:	0800c7cf 	.word	0x0800c7cf
 800c7a0:	0800c7d7 	.word	0x0800c7d7
 800c7a4:	0800c7cf 	.word	0x0800c7cf
 800c7a8:	0800c7df 	.word	0x0800c7df
 800c7ac:	0800c7df 	.word	0x0800c7df
 800c7b0:	0800c7df 	.word	0x0800c7df
 800c7b4:	0800c7d7 	.word	0x0800c7d7
 800c7b8:	0800c7d7 	.word	0x0800c7d7
 800c7bc:	0800c7d7 	.word	0x0800c7d7
 800c7c0:	3bf0      	subs	r3, #240	; 0xf0
 800c7c2:	2b02      	cmp	r3, #2
 800c7c4:	d80b      	bhi.n	800c7de <snmp_complete_outbound_frame+0x86>
         * (during processing of frame we already stored them in error_status field,
         * so no need to check all varbinds here for those exceptions as suggested by RFC) */
        case SNMP_ERR_NOSUCHINSTANCE:
        case SNMP_ERR_NOSUCHOBJECT:
        case SNMP_ERR_ENDOFMIBVIEW:
          request->error_status = SNMP_ERR_NOSUCHNAME;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2202      	movs	r2, #2
 800c7ca:	61da      	str	r2, [r3, #28]
          break;
 800c7cc:	e023      	b.n	800c816 <snmp_complete_outbound_frame+0xbe>
        case SNMP_ERR_WRONGVALUE:
        case SNMP_ERR_WRONGENCODING:
        case SNMP_ERR_WRONGTYPE:
        case SNMP_ERR_WRONGLENGTH:
        case SNMP_ERR_INCONSISTENTVALUE:
          request->error_status = SNMP_ERR_BADVALUE;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2203      	movs	r2, #3
 800c7d2:	61da      	str	r2, [r3, #28]
          break;
 800c7d4:	e01f      	b.n	800c816 <snmp_complete_outbound_frame+0xbe>
        case SNMP_ERR_NOACCESS:
        case SNMP_ERR_NOTWRITABLE:
        case SNMP_ERR_NOCREATION:
        case SNMP_ERR_INCONSISTENTNAME:
        case SNMP_ERR_AUTHORIZATIONERROR:
          request->error_status = SNMP_ERR_NOSUCHNAME;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2202      	movs	r2, #2
 800c7da:	61da      	str	r2, [r3, #28]
          break;
 800c7dc:	e01b      	b.n	800c816 <snmp_complete_outbound_frame+0xbe>
        case SNMP_ERR_RESOURCEUNAVAILABLE:
        case SNMP_ERR_COMMITFAILED:
        case SNMP_ERR_UNDOFAILED:
        default:
          request->error_status = SNMP_ERR_GENERROR;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2205      	movs	r2, #5
 800c7e2:	61da      	str	r2, [r3, #28]
          break;
 800c7e4:	e017      	b.n	800c816 <snmp_complete_outbound_frame+0xbe>
      }
    }
  } else {
    if (request->request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) {
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	7d9b      	ldrb	r3, [r3, #22]
 800c7ea:	2b03      	cmp	r3, #3
 800c7ec:	d108      	bne.n	800c800 <snmp_complete_outbound_frame+0xa8>
      /* map error codes to according to RFC 1905 (4.2.5.  The SetRequest-PDU) return 'NotWritable' for unknown OIDs) */
      switch (request->error_status) {
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	69db      	ldr	r3, [r3, #28]
 800c7f2:	3bf0      	subs	r3, #240	; 0xf0
 800c7f4:	2b02      	cmp	r3, #2
 800c7f6:	d805      	bhi.n	800c804 <snmp_complete_outbound_frame+0xac>
        case SNMP_ERR_NOSUCHINSTANCE:
        case SNMP_ERR_NOSUCHOBJECT:
        case SNMP_ERR_ENDOFMIBVIEW:
          request->error_status = SNMP_ERR_NOTWRITABLE;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2211      	movs	r2, #17
 800c7fc:	61da      	str	r2, [r3, #28]
          break;
 800c7fe:	e002      	b.n	800c806 <snmp_complete_outbound_frame+0xae>
        default:
          break;
      }
    }
 800c800:	bf00      	nop
 800c802:	e000      	b.n	800c806 <snmp_complete_outbound_frame+0xae>
          break;
 800c804:	bf00      	nop

    if (request->error_status >= SNMP_VARBIND_EXCEPTION_OFFSET) {
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	69db      	ldr	r3, [r3, #28]
 800c80a:	2bef      	cmp	r3, #239	; 0xef
 800c80c:	dd03      	ble.n	800c816 <snmp_complete_outbound_frame+0xbe>
      /* should never occur because v2 frames store exceptions directly inside varbinds and not as frame error_status */
      LWIP_DEBUGF(SNMP_DEBUG, ("snmp_complete_outbound_frame() > Found v2 request with varbind exception code stored as error status!\n"));
      return ERR_ARG;
 800c80e:	f06f 030f 	mvn.w	r3, #15
 800c812:	e18d      	b.n	800cb30 <snmp_complete_outbound_frame+0x3d8>
    }
 800c814:	bf00      	nop
    }
  }

  if ((request->error_status != SNMP_ERR_NOERROR) || (request->request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ)) {
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	69db      	ldr	r3, [r3, #28]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d103      	bne.n	800c826 <snmp_complete_outbound_frame+0xce>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	7d9b      	ldrb	r3, [r3, #22]
 800c822:	2b03      	cmp	r3, #3
 800c824:	d139      	bne.n	800c89a <snmp_complete_outbound_frame+0x142>
    /* all inbound vars are returned in response without any modification for error responses and successful set requests*/
    struct snmp_pbuf_stream inbound_stream;
    OF_BUILD_EXEC( snmp_pbuf_stream_init(&inbound_stream, request->inbound_pbuf, request->inbound_varbind_offset, request->inbound_varbind_len) );
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800c836:	f107 000c 	add.w	r0, r7, #12
 800c83a:	f000 fbdb 	bl	800cff4 <snmp_pbuf_stream_init>
 800c83e:	4603      	mov	r3, r0
 800c840:	2b00      	cmp	r3, #0
 800c842:	d002      	beq.n	800c84a <snmp_complete_outbound_frame+0xf2>
 800c844:	f06f 030f 	mvn.w	r3, #15
 800c848:	e172      	b.n	800cb30 <snmp_complete_outbound_frame+0x3d8>
    OF_BUILD_EXEC( snmp_pbuf_stream_init(&(request->outbound_pbuf_stream), request->outbound_pbuf, request->outbound_varbind_offset, request->outbound_pbuf->tot_len - request->outbound_varbind_offset) );
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f8b3 405a 	ldrh.w	r4, [r3, #90]	; 0x5a
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c85e:	891a      	ldrh	r2, [r3, #8]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c866:	1ad3      	subs	r3, r2, r3
 800c868:	b29b      	uxth	r3, r3
 800c86a:	4622      	mov	r2, r4
 800c86c:	f000 fbc2 	bl	800cff4 <snmp_pbuf_stream_init>
 800c870:	4603      	mov	r3, r0
 800c872:	2b00      	cmp	r3, #0
 800c874:	d002      	beq.n	800c87c <snmp_complete_outbound_frame+0x124>
 800c876:	f06f 030f 	mvn.w	r3, #15
 800c87a:	e159      	b.n	800cb30 <snmp_complete_outbound_frame+0x3d8>
    OF_BUILD_EXEC( snmp_pbuf_stream_writeto(&inbound_stream, &(request->outbound_pbuf_stream), 0) );
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 800c882:	f107 030c 	add.w	r3, r7, #12
 800c886:	2200      	movs	r2, #0
 800c888:	4618      	mov	r0, r3
 800c88a:	f000 fc3a 	bl	800d102 <snmp_pbuf_stream_writeto>
 800c88e:	4603      	mov	r3, r0
 800c890:	2b00      	cmp	r3, #0
 800c892:	d002      	beq.n	800c89a <snmp_complete_outbound_frame+0x142>
 800c894:	f06f 030f 	mvn.w	r3, #15
 800c898:	e14a      	b.n	800cb30 <snmp_complete_outbound_frame+0x3d8>
  }

  frame_size = request->outbound_pbuf_stream.offset;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c8a0:	83bb      	strh	r3, [r7, #28]
    }
  }
#endif

  /* complete missing length in 'Message' sequence ; 'Message' tlv is located at the beginning (offset 0) */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 3, frame_size + outbound_padding - 1 - 3); /* - type - length_len(fixed, see snmp_prepare_outbound_frame()) */
 800c8a2:	2330      	movs	r3, #48	; 0x30
 800c8a4:	753b      	strb	r3, [r7, #20]
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	757b      	strb	r3, [r7, #21]
 800c8aa:	2303      	movs	r3, #3
 800c8ac:	75bb      	strb	r3, [r7, #22]
 800c8ae:	7ffb      	ldrb	r3, [r7, #31]
 800c8b0:	b29a      	uxth	r2, r3
 800c8b2:	8bbb      	ldrh	r3, [r7, #28]
 800c8b4:	4413      	add	r3, r2
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	3b04      	subs	r3, #4
 800c8ba:	b29b      	uxth	r3, r3
 800c8bc:	833b      	strh	r3, [r7, #24]
  OF_BUILD_EXEC( snmp_pbuf_stream_init(&(request->outbound_pbuf_stream), request->outbound_pbuf, 0, request->outbound_pbuf->tot_len) );
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c8cc:	891b      	ldrh	r3, [r3, #8]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	f000 fb90 	bl	800cff4 <snmp_pbuf_stream_init>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d002      	beq.n	800c8e0 <snmp_complete_outbound_frame+0x188>
 800c8da:	f06f 030f 	mvn.w	r3, #15
 800c8de:	e127      	b.n	800cb30 <snmp_complete_outbound_frame+0x3d8>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(&(request->outbound_pbuf_stream), &tlv) );
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	334c      	adds	r3, #76	; 0x4c
 800c8e4:	f107 0214 	add.w	r2, r7, #20
 800c8e8:	4611      	mov	r1, r2
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f7fa fd40 	bl	8007370 <snmp_ans1_enc_tlv>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d002      	beq.n	800c8fc <snmp_complete_outbound_frame+0x1a4>
 800c8f6:	f06f 030f 	mvn.w	r3, #15
 800c8fa:	e119      	b.n	800cb30 <snmp_complete_outbound_frame+0x3d8>
    OF_BUILD_EXEC(snmp_ans1_enc_tlv(&(request->outbound_pbuf_stream), &tlv));
  }
#endif

  /* complete missing length in 'PDU' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, request->request_out_type, 3,
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c902:	753b      	strb	r3, [r7, #20]
 800c904:	2300      	movs	r3, #0
 800c906:	757b      	strb	r3, [r7, #21]
 800c908:	2303      	movs	r3, #3
 800c90a:	75bb      	strb	r3, [r7, #22]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800c912:	8bba      	ldrh	r2, [r7, #28]
 800c914:	1ad3      	subs	r3, r2, r3
 800c916:	b29b      	uxth	r3, r3
 800c918:	3b04      	subs	r3, #4
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	833b      	strh	r3, [r7, #24]
                           frame_size - request->outbound_pdu_offset - 1 - 3); /* - type - length_len(fixed, see snmp_prepare_outbound_frame()) */
  OF_BUILD_EXEC( snmp_pbuf_stream_seek_abs(&(request->outbound_pbuf_stream), request->outbound_pdu_offset) );
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800c92a:	4619      	mov	r1, r3
 800c92c:	4610      	mov	r0, r2
 800c92e:	f000 fc80 	bl	800d232 <snmp_pbuf_stream_seek_abs>
 800c932:	4603      	mov	r3, r0
 800c934:	2b00      	cmp	r3, #0
 800c936:	d002      	beq.n	800c93e <snmp_complete_outbound_frame+0x1e6>
 800c938:	f06f 030f 	mvn.w	r3, #15
 800c93c:	e0f8      	b.n	800cb30 <snmp_complete_outbound_frame+0x3d8>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(&(request->outbound_pbuf_stream), &tlv) );
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	334c      	adds	r3, #76	; 0x4c
 800c942:	f107 0214 	add.w	r2, r7, #20
 800c946:	4611      	mov	r1, r2
 800c948:	4618      	mov	r0, r3
 800c94a:	f7fa fd11 	bl	8007370 <snmp_ans1_enc_tlv>
 800c94e:	4603      	mov	r3, r0
 800c950:	2b00      	cmp	r3, #0
 800c952:	d002      	beq.n	800c95a <snmp_complete_outbound_frame+0x202>
 800c954:	f06f 030f 	mvn.w	r3, #15
 800c958:	e0ea      	b.n	800cb30 <snmp_complete_outbound_frame+0x3d8>

  /* process and encode final error status */
  if (request->error_status != 0) {
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	69db      	ldr	r3, [r3, #28]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d061      	beq.n	800ca26 <snmp_complete_outbound_frame+0x2ce>
    u16_t len;
    snmp_asn1_enc_s32t_cnt(request->error_status, &len);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	69db      	ldr	r3, [r3, #28]
 800c966:	f107 020a 	add.w	r2, r7, #10
 800c96a:	4611      	mov	r1, r2
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7fa fed1 	bl	8007714 <snmp_asn1_enc_s32t_cnt>
    if (len != 1) {
 800c972:	897b      	ldrh	r3, [r7, #10]
 800c974:	2b01      	cmp	r3, #1
 800c976:	d002      	beq.n	800c97e <snmp_complete_outbound_frame+0x226>
      /* error, we only reserved one byte for it */
      return ERR_ARG;
 800c978:	f06f 030f 	mvn.w	r3, #15
 800c97c:	e0d8      	b.n	800cb30 <snmp_complete_outbound_frame+0x3d8>
    }
    OF_BUILD_EXEC( snmp_pbuf_stream_seek_abs(&(request->outbound_pbuf_stream), request->outbound_error_status_offset) );
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c98a:	4619      	mov	r1, r3
 800c98c:	4610      	mov	r0, r2
 800c98e:	f000 fc50 	bl	800d232 <snmp_pbuf_stream_seek_abs>
 800c992:	4603      	mov	r3, r0
 800c994:	2b00      	cmp	r3, #0
 800c996:	d002      	beq.n	800c99e <snmp_complete_outbound_frame+0x246>
 800c998:	f06f 030f 	mvn.w	r3, #15
 800c99c:	e0c8      	b.n	800cb30 <snmp_complete_outbound_frame+0x3d8>
    OF_BUILD_EXEC( snmp_asn1_enc_s32t(&(request->outbound_pbuf_stream), len, request->error_status) );
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 800c9a4:	8979      	ldrh	r1, [r7, #10]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	69db      	ldr	r3, [r3, #28]
 800c9aa:	461a      	mov	r2, r3
 800c9ac:	f7fa fdc8 	bl	8007540 <snmp_asn1_enc_s32t>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d002      	beq.n	800c9bc <snmp_complete_outbound_frame+0x264>
 800c9b6:	f06f 030f 	mvn.w	r3, #15
 800c9ba:	e0b9      	b.n	800cb30 <snmp_complete_outbound_frame+0x3d8>

    /* for compatibility to v1, log statistics; in v2 (RFC 1907) these statistics are obsoleted */
    switch (request->error_status) {
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	69db      	ldr	r3, [r3, #28]
 800c9c0:	2b03      	cmp	r3, #3
 800c9c2:	d012      	beq.n	800c9ea <snmp_complete_outbound_frame+0x292>
 800c9c4:	2b03      	cmp	r3, #3
 800c9c6:	dc16      	bgt.n	800c9f6 <snmp_complete_outbound_frame+0x29e>
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d002      	beq.n	800c9d2 <snmp_complete_outbound_frame+0x27a>
 800c9cc:	2b02      	cmp	r3, #2
 800c9ce:	d006      	beq.n	800c9de <snmp_complete_outbound_frame+0x286>
 800c9d0:	e011      	b.n	800c9f6 <snmp_complete_outbound_frame+0x29e>
      case SNMP_ERR_TOOBIG:
        snmp_stats.outtoobigs++;
 800c9d2:	4b59      	ldr	r3, [pc, #356]	; (800cb38 <snmp_complete_outbound_frame+0x3e0>)
 800c9d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	4a57      	ldr	r2, [pc, #348]	; (800cb38 <snmp_complete_outbound_frame+0x3e0>)
 800c9da:	6493      	str	r3, [r2, #72]	; 0x48
        break;
 800c9dc:	e011      	b.n	800ca02 <snmp_complete_outbound_frame+0x2aa>
      case SNMP_ERR_NOSUCHNAME:
        snmp_stats.outnosuchnames++;
 800c9de:	4b56      	ldr	r3, [pc, #344]	; (800cb38 <snmp_complete_outbound_frame+0x3e0>)
 800c9e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	4a54      	ldr	r2, [pc, #336]	; (800cb38 <snmp_complete_outbound_frame+0x3e0>)
 800c9e6:	64d3      	str	r3, [r2, #76]	; 0x4c
        break;
 800c9e8:	e00b      	b.n	800ca02 <snmp_complete_outbound_frame+0x2aa>
      case SNMP_ERR_BADVALUE:
        snmp_stats.outbadvalues++;
 800c9ea:	4b53      	ldr	r3, [pc, #332]	; (800cb38 <snmp_complete_outbound_frame+0x3e0>)
 800c9ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9ee:	3301      	adds	r3, #1
 800c9f0:	4a51      	ldr	r2, [pc, #324]	; (800cb38 <snmp_complete_outbound_frame+0x3e0>)
 800c9f2:	6513      	str	r3, [r2, #80]	; 0x50
        break;
 800c9f4:	e005      	b.n	800ca02 <snmp_complete_outbound_frame+0x2aa>
      case SNMP_ERR_GENERROR:
      default:
        snmp_stats.outgenerrs++;
 800c9f6:	4b50      	ldr	r3, [pc, #320]	; (800cb38 <snmp_complete_outbound_frame+0x3e0>)
 800c9f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9fa:	3301      	adds	r3, #1
 800c9fc:	4a4e      	ldr	r2, [pc, #312]	; (800cb38 <snmp_complete_outbound_frame+0x3e0>)
 800c9fe:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 800ca00:	bf00      	nop
    }

    if (request->error_status == SNMP_ERR_TOOBIG) {
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	69db      	ldr	r3, [r3, #28]
 800ca06:	2b01      	cmp	r3, #1
 800ca08:	d103      	bne.n	800ca12 <snmp_complete_outbound_frame+0x2ba>
      request->error_index = 0; /* defined by RFC 1157 */
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	621a      	str	r2, [r3, #32]
 800ca10:	e01c      	b.n	800ca4c <snmp_complete_outbound_frame+0x2f4>
    } else if (request->error_index == 0) {
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6a1b      	ldr	r3, [r3, #32]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d118      	bne.n	800ca4c <snmp_complete_outbound_frame+0x2f4>
      /* set index to varbind where error occured (if not already set before, e.g. during GetBulk processing) */
      request->error_index = request->inbound_varbind_enumerator.varbind_count;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800ca1e:	461a      	mov	r2, r3
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	621a      	str	r2, [r3, #32]
 800ca24:	e012      	b.n	800ca4c <snmp_complete_outbound_frame+0x2f4>
    }
  } else {
    if (request->request_type == SNMP_ASN1_CONTEXT_PDU_SET_REQ) {
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	7d9b      	ldrb	r3, [r3, #22]
 800ca2a:	2b03      	cmp	r3, #3
 800ca2c:	d107      	bne.n	800ca3e <snmp_complete_outbound_frame+0x2e6>
      snmp_stats.intotalsetvars += request->inbound_varbind_enumerator.varbind_count;
 800ca2e:	4b42      	ldr	r3, [pc, #264]	; (800cb38 <snmp_complete_outbound_frame+0x3e0>)
 800ca30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca32:	687a      	ldr	r2, [r7, #4]
 800ca34:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 800ca36:	4413      	add	r3, r2
 800ca38:	4a3f      	ldr	r2, [pc, #252]	; (800cb38 <snmp_complete_outbound_frame+0x3e0>)
 800ca3a:	6313      	str	r3, [r2, #48]	; 0x30
 800ca3c:	e006      	b.n	800ca4c <snmp_complete_outbound_frame+0x2f4>
    } else {
      snmp_stats.intotalreqvars += request->inbound_varbind_enumerator.varbind_count;
 800ca3e:	4b3e      	ldr	r3, [pc, #248]	; (800cb38 <snmp_complete_outbound_frame+0x3e0>)
 800ca40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca42:	687a      	ldr	r2, [r7, #4]
 800ca44:	8f92      	ldrh	r2, [r2, #60]	; 0x3c
 800ca46:	4413      	add	r3, r2
 800ca48:	4a3b      	ldr	r2, [pc, #236]	; (800cb38 <snmp_complete_outbound_frame+0x3e0>)
 800ca4a:	62d3      	str	r3, [r2, #44]	; 0x2c
    }
  }

  /* encode final error index*/
  if (request->error_index != 0) {
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6a1b      	ldr	r3, [r3, #32]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d02c      	beq.n	800caae <snmp_complete_outbound_frame+0x356>
    u16_t len;
    snmp_asn1_enc_s32t_cnt(request->error_index, &len);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6a1b      	ldr	r3, [r3, #32]
 800ca58:	f107 0208 	add.w	r2, r7, #8
 800ca5c:	4611      	mov	r1, r2
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f7fa fe58 	bl	8007714 <snmp_asn1_enc_s32t_cnt>
    if (len != 1) {
 800ca64:	893b      	ldrh	r3, [r7, #8]
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	d002      	beq.n	800ca70 <snmp_complete_outbound_frame+0x318>
      /* error, we only reserved one byte for it */
      return ERR_VAL;
 800ca6a:	f06f 0305 	mvn.w	r3, #5
 800ca6e:	e05f      	b.n	800cb30 <snmp_complete_outbound_frame+0x3d8>
    }
    OF_BUILD_EXEC( snmp_pbuf_stream_seek_abs(&(request->outbound_pbuf_stream), request->outbound_error_index_offset) );
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ca7c:	4619      	mov	r1, r3
 800ca7e:	4610      	mov	r0, r2
 800ca80:	f000 fbd7 	bl	800d232 <snmp_pbuf_stream_seek_abs>
 800ca84:	4603      	mov	r3, r0
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d002      	beq.n	800ca90 <snmp_complete_outbound_frame+0x338>
 800ca8a:	f06f 030f 	mvn.w	r3, #15
 800ca8e:	e04f      	b.n	800cb30 <snmp_complete_outbound_frame+0x3d8>
    OF_BUILD_EXEC( snmp_asn1_enc_s32t(&(request->outbound_pbuf_stream), len, request->error_index) );
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 800ca96:	8939      	ldrh	r1, [r7, #8]
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6a1b      	ldr	r3, [r3, #32]
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	f7fa fd4f 	bl	8007540 <snmp_asn1_enc_s32t>
 800caa2:	4603      	mov	r3, r0
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d002      	beq.n	800caae <snmp_complete_outbound_frame+0x356>
 800caa8:	f06f 030f 	mvn.w	r3, #15
 800caac:	e040      	b.n	800cb30 <snmp_complete_outbound_frame+0x3d8>
  }

  /* complete missing length in 'VarBindList' sequence ; 'VarBindList' tlv is located directly before varbind offset */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 3, frame_size - request->outbound_varbind_offset);
 800caae:	2330      	movs	r3, #48	; 0x30
 800cab0:	753b      	strb	r3, [r7, #20]
 800cab2:	2300      	movs	r3, #0
 800cab4:	757b      	strb	r3, [r7, #21]
 800cab6:	2303      	movs	r3, #3
 800cab8:	75bb      	strb	r3, [r7, #22]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cac0:	8bba      	ldrh	r2, [r7, #28]
 800cac2:	1ad3      	subs	r3, r2, r3
 800cac4:	b29b      	uxth	r3, r3
 800cac6:	833b      	strh	r3, [r7, #24]
  OF_BUILD_EXEC( snmp_pbuf_stream_seek_abs(&(request->outbound_pbuf_stream), request->outbound_varbind_offset - 1 - 3) ); /* - type - length_len(fixed, see snmp_prepare_outbound_frame()) */
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cad4:	3b04      	subs	r3, #4
 800cad6:	4619      	mov	r1, r3
 800cad8:	4610      	mov	r0, r2
 800cada:	f000 fbaa 	bl	800d232 <snmp_pbuf_stream_seek_abs>
 800cade:	4603      	mov	r3, r0
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d002      	beq.n	800caea <snmp_complete_outbound_frame+0x392>
 800cae4:	f06f 030f 	mvn.w	r3, #15
 800cae8:	e022      	b.n	800cb30 <snmp_complete_outbound_frame+0x3d8>
  OF_BUILD_EXEC( snmp_ans1_enc_tlv(&(request->outbound_pbuf_stream), &tlv) );
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	334c      	adds	r3, #76	; 0x4c
 800caee:	f107 0214 	add.w	r2, r7, #20
 800caf2:	4611      	mov	r1, r2
 800caf4:	4618      	mov	r0, r3
 800caf6:	f7fa fc3b 	bl	8007370 <snmp_ans1_enc_tlv>
 800cafa:	4603      	mov	r3, r0
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d002      	beq.n	800cb06 <snmp_complete_outbound_frame+0x3ae>
 800cb00:	f06f 030f 	mvn.w	r3, #15
 800cb04:	e014      	b.n	800cb30 <snmp_complete_outbound_frame+0x3d8>
    OF_BUILD_EXEC(snmp_asn1_enc_raw(&request->outbound_pbuf_stream,
                                    request->msg_authentication_parameters, SNMP_V3_MAX_AUTH_PARAM_LENGTH));
  }
#endif

  pbuf_realloc(request->outbound_pbuf, frame_size + outbound_padding);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800cb0a:	7ffb      	ldrb	r3, [r7, #31]
 800cb0c:	b29a      	uxth	r2, r3
 800cb0e:	8bbb      	ldrh	r3, [r7, #28]
 800cb10:	4413      	add	r3, r2
 800cb12:	b29b      	uxth	r3, r3
 800cb14:	4619      	mov	r1, r3
 800cb16:	f003 f9b5 	bl	800fe84 <pbuf_realloc>

  snmp_stats.outgetresponses++;
 800cb1a:	4b07      	ldr	r3, [pc, #28]	; (800cb38 <snmp_complete_outbound_frame+0x3e0>)
 800cb1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb1e:	3301      	adds	r3, #1
 800cb20:	4a05      	ldr	r2, [pc, #20]	; (800cb38 <snmp_complete_outbound_frame+0x3e0>)
 800cb22:	6653      	str	r3, [r2, #100]	; 0x64
  snmp_stats.outpkts++;
 800cb24:	4b04      	ldr	r3, [pc, #16]	; (800cb38 <snmp_complete_outbound_frame+0x3e0>)
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	3301      	adds	r3, #1
 800cb2a:	4a03      	ldr	r2, [pc, #12]	; (800cb38 <snmp_complete_outbound_frame+0x3e0>)
 800cb2c:	6053      	str	r3, [r2, #4]

  return ERR_OK;
 800cb2e:	2300      	movs	r3, #0
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3724      	adds	r7, #36	; 0x24
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd90      	pop	{r4, r7, pc}
 800cb38:	200036a8 	.word	0x200036a8

0800cb3c <snmp_execute_write_callbacks>:

static void
snmp_execute_write_callbacks(struct snmp_request *request)
{
 800cb3c:	b590      	push	{r4, r7, lr}
 800cb3e:	b0bd      	sub	sp, #244	; 0xf4
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  struct snmp_varbind_enumerator inbound_varbind_enumerator;
  struct snmp_varbind vb;

  snmp_vb_enumerator_init(&inbound_varbind_enumerator, request->inbound_pbuf, request->inbound_varbind_offset, request->inbound_varbind_len);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 800cb54:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
 800cb58:	f000 f824 	bl	800cba4 <snmp_vb_enumerator_init>
  vb.value = NULL; /* do NOT decode value (we enumerate outbound buffer here, so all varbinds have values assigned, which we don't need here) */
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  while (snmp_vb_enumerator_get_next(&inbound_varbind_enumerator, &vb) == SNMP_VB_ENUMERATOR_ERR_OK) {
 800cb62:	e00a      	b.n	800cb7a <snmp_execute_write_callbacks+0x3e>
    snmp_write_callback(vb.oid.id, vb.oid.len, snmp_write_callback_arg);
 800cb64:	4b0d      	ldr	r3, [pc, #52]	; (800cb9c <snmp_execute_write_callbacks+0x60>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	7c39      	ldrb	r1, [r7, #16]
 800cb6a:	4a0d      	ldr	r2, [pc, #52]	; (800cba0 <snmp_execute_write_callbacks+0x64>)
 800cb6c:	6814      	ldr	r4, [r2, #0]
 800cb6e:	f107 0208 	add.w	r2, r7, #8
 800cb72:	f102 000c 	add.w	r0, r2, #12
 800cb76:	4622      	mov	r2, r4
 800cb78:	4798      	blx	r3
  while (snmp_vb_enumerator_get_next(&inbound_varbind_enumerator, &vb) == SNMP_VB_ENUMERATOR_ERR_OK) {
 800cb7a:	f107 0208 	add.w	r2, r7, #8
 800cb7e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800cb82:	4611      	mov	r1, r2
 800cb84:	4618      	mov	r0, r3
 800cb86:	f000 f825 	bl	800cbd4 <snmp_vb_enumerator_get_next>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d0e9      	beq.n	800cb64 <snmp_execute_write_callbacks+0x28>
  }
}
 800cb90:	bf00      	nop
 800cb92:	bf00      	nop
 800cb94:	37f4      	adds	r7, #244	; 0xf4
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd90      	pop	{r4, r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	20003748 	.word	0x20003748
 800cba0:	2000374c 	.word	0x2000374c

0800cba4 <snmp_vb_enumerator_init>:
/* VarBind enumerator methods */
/* ----------------------------------------------------------------------- */

void
snmp_vb_enumerator_init(struct snmp_varbind_enumerator *enumerator, struct pbuf *p, u16_t offset, u16_t length)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b084      	sub	sp, #16
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	60f8      	str	r0, [r7, #12]
 800cbac:	60b9      	str	r1, [r7, #8]
 800cbae:	4611      	mov	r1, r2
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	460b      	mov	r3, r1
 800cbb4:	80fb      	strh	r3, [r7, #6]
 800cbb6:	4613      	mov	r3, r2
 800cbb8:	80bb      	strh	r3, [r7, #4]
  snmp_pbuf_stream_init(&(enumerator->pbuf_stream), p, offset, length);
 800cbba:	68f8      	ldr	r0, [r7, #12]
 800cbbc:	88bb      	ldrh	r3, [r7, #4]
 800cbbe:	88fa      	ldrh	r2, [r7, #6]
 800cbc0:	68b9      	ldr	r1, [r7, #8]
 800cbc2:	f000 fa17 	bl	800cff4 <snmp_pbuf_stream_init>
  enumerator->varbind_count = 0;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	811a      	strh	r2, [r3, #8]
}
 800cbcc:	bf00      	nop
 800cbce:	3710      	adds	r7, #16
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}

0800cbd4 <snmp_vb_enumerator_get_next>:
#define VB_PARSE_EXEC(code)   PARSE_EXEC(code, SNMP_VB_ENUMERATOR_ERR_ASN1ERROR)
#define VB_PARSE_ASSERT(code) PARSE_ASSERT(code, SNMP_VB_ENUMERATOR_ERR_ASN1ERROR)

snmp_vb_enumerator_err_t
snmp_vb_enumerator_get_next(struct snmp_varbind_enumerator *enumerator, struct snmp_varbind *varbind)
{
 800cbd4:	b590      	push	{r4, r7, lr}
 800cbd6:	b089      	sub	sp, #36	; 0x24
 800cbd8:	af02      	add	r7, sp, #8
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	6039      	str	r1, [r7, #0]
  struct snmp_asn1_tlv tlv;
  u16_t  varbind_len;
  err_t  err;

  if (enumerator->pbuf_stream.length == 0) {
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	88db      	ldrh	r3, [r3, #6]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d101      	bne.n	800cbea <snmp_vb_enumerator_get_next+0x16>
    return SNMP_VB_ENUMERATOR_ERR_EOVB;
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	e1fe      	b.n	800cfe8 <snmp_vb_enumerator_get_next+0x414>
  }
  enumerator->varbind_count++;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	891b      	ldrh	r3, [r3, #8]
 800cbee:	3301      	adds	r3, #1
 800cbf0:	b29a      	uxth	r2, r3
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	811a      	strh	r2, [r3, #8]

  /* decode varbind itself (parent container of a varbind) */
  VB_PARSE_EXEC(snmp_asn1_dec_tlv(&(enumerator->pbuf_stream), &tlv));
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f107 020c 	add.w	r2, r7, #12
 800cbfc:	4611      	mov	r1, r2
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7fa fdf6 	bl	80077f0 <snmp_asn1_dec_tlv>
 800cc04:	4603      	mov	r3, r0
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d006      	beq.n	800cc18 <snmp_vb_enumerator_get_next+0x44>
 800cc0a:	4bb4      	ldr	r3, [pc, #720]	; (800cedc <snmp_vb_enumerator_get_next+0x308>)
 800cc0c:	695b      	ldr	r3, [r3, #20]
 800cc0e:	3301      	adds	r3, #1
 800cc10:	4ab2      	ldr	r2, [pc, #712]	; (800cedc <snmp_vb_enumerator_get_next+0x308>)
 800cc12:	6153      	str	r3, [r2, #20]
 800cc14:	2302      	movs	r3, #2
 800cc16:	e1e7      	b.n	800cfe8 <snmp_vb_enumerator_get_next+0x414>
  VB_PARSE_ASSERT((tlv.type == SNMP_ASN1_TYPE_SEQUENCE) && (tlv.value_len <= enumerator->pbuf_stream.length));
 800cc18:	7b3b      	ldrb	r3, [r7, #12]
 800cc1a:	2b30      	cmp	r3, #48	; 0x30
 800cc1c:	d104      	bne.n	800cc28 <snmp_vb_enumerator_get_next+0x54>
 800cc1e:	8a3a      	ldrh	r2, [r7, #16]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	88db      	ldrh	r3, [r3, #6]
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d906      	bls.n	800cc36 <snmp_vb_enumerator_get_next+0x62>
 800cc28:	4bac      	ldr	r3, [pc, #688]	; (800cedc <snmp_vb_enumerator_get_next+0x308>)
 800cc2a:	695b      	ldr	r3, [r3, #20]
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	4aab      	ldr	r2, [pc, #684]	; (800cedc <snmp_vb_enumerator_get_next+0x308>)
 800cc30:	6153      	str	r3, [r2, #20]
 800cc32:	2302      	movs	r3, #2
 800cc34:	e1d8      	b.n	800cfe8 <snmp_vb_enumerator_get_next+0x414>
  varbind_len = tlv.value_len;
 800cc36:	8a3b      	ldrh	r3, [r7, #16]
 800cc38:	82fb      	strh	r3, [r7, #22]

  /* decode varbind name (object id) */
  VB_PARSE_EXEC(snmp_asn1_dec_tlv(&(enumerator->pbuf_stream), &tlv));
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f107 020c 	add.w	r2, r7, #12
 800cc40:	4611      	mov	r1, r2
 800cc42:	4618      	mov	r0, r3
 800cc44:	f7fa fdd4 	bl	80077f0 <snmp_asn1_dec_tlv>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d006      	beq.n	800cc5c <snmp_vb_enumerator_get_next+0x88>
 800cc4e:	4ba3      	ldr	r3, [pc, #652]	; (800cedc <snmp_vb_enumerator_get_next+0x308>)
 800cc50:	695b      	ldr	r3, [r3, #20]
 800cc52:	3301      	adds	r3, #1
 800cc54:	4aa1      	ldr	r2, [pc, #644]	; (800cedc <snmp_vb_enumerator_get_next+0x308>)
 800cc56:	6153      	str	r3, [r2, #20]
 800cc58:	2302      	movs	r3, #2
 800cc5a:	e1c5      	b.n	800cfe8 <snmp_vb_enumerator_get_next+0x414>
  VB_PARSE_ASSERT((tlv.type == SNMP_ASN1_TYPE_OBJECT_ID) && (SNMP_ASN1_TLV_LENGTH(tlv) < varbind_len) && (tlv.value_len < enumerator->pbuf_stream.length));
 800cc5c:	7b3b      	ldrb	r3, [r7, #12]
 800cc5e:	2b06      	cmp	r3, #6
 800cc60:	d10d      	bne.n	800cc7e <snmp_vb_enumerator_get_next+0xaa>
 800cc62:	7b7b      	ldrb	r3, [r7, #13]
 800cc64:	461a      	mov	r2, r3
 800cc66:	7bbb      	ldrb	r3, [r7, #14]
 800cc68:	4413      	add	r3, r2
 800cc6a:	8a3a      	ldrh	r2, [r7, #16]
 800cc6c:	441a      	add	r2, r3
 800cc6e:	8afb      	ldrh	r3, [r7, #22]
 800cc70:	429a      	cmp	r2, r3
 800cc72:	da04      	bge.n	800cc7e <snmp_vb_enumerator_get_next+0xaa>
 800cc74:	8a3a      	ldrh	r2, [r7, #16]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	88db      	ldrh	r3, [r3, #6]
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d306      	bcc.n	800cc8c <snmp_vb_enumerator_get_next+0xb8>
 800cc7e:	4b97      	ldr	r3, [pc, #604]	; (800cedc <snmp_vb_enumerator_get_next+0x308>)
 800cc80:	695b      	ldr	r3, [r3, #20]
 800cc82:	3301      	adds	r3, #1
 800cc84:	4a95      	ldr	r2, [pc, #596]	; (800cedc <snmp_vb_enumerator_get_next+0x308>)
 800cc86:	6153      	str	r3, [r2, #20]
 800cc88:	2302      	movs	r3, #2
 800cc8a:	e1ad      	b.n	800cfe8 <snmp_vb_enumerator_get_next+0x414>

  VB_PARSE_EXEC(snmp_asn1_dec_oid(&(enumerator->pbuf_stream), tlv.value_len, varbind->oid.id, &(varbind->oid.len), SNMP_MAX_OBJ_ID_LEN));
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	8a39      	ldrh	r1, [r7, #16]
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	f103 020c 	add.w	r2, r3, #12
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	3308      	adds	r3, #8
 800cc9a:	2432      	movs	r4, #50	; 0x32
 800cc9c:	9400      	str	r4, [sp, #0]
 800cc9e:	f7fa fed5 	bl	8007a4c <snmp_asn1_dec_oid>
 800cca2:	4603      	mov	r3, r0
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d006      	beq.n	800ccb6 <snmp_vb_enumerator_get_next+0xe2>
 800cca8:	4b8c      	ldr	r3, [pc, #560]	; (800cedc <snmp_vb_enumerator_get_next+0x308>)
 800ccaa:	695b      	ldr	r3, [r3, #20]
 800ccac:	3301      	adds	r3, #1
 800ccae:	4a8b      	ldr	r2, [pc, #556]	; (800cedc <snmp_vb_enumerator_get_next+0x308>)
 800ccb0:	6153      	str	r3, [r2, #20]
 800ccb2:	2302      	movs	r3, #2
 800ccb4:	e198      	b.n	800cfe8 <snmp_vb_enumerator_get_next+0x414>
  varbind_len -= SNMP_ASN1_TLV_LENGTH(tlv);
 800ccb6:	7b7b      	ldrb	r3, [r7, #13]
 800ccb8:	b29a      	uxth	r2, r3
 800ccba:	7bbb      	ldrb	r3, [r7, #14]
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	4413      	add	r3, r2
 800ccc0:	b29a      	uxth	r2, r3
 800ccc2:	8a3b      	ldrh	r3, [r7, #16]
 800ccc4:	4413      	add	r3, r2
 800ccc6:	b29b      	uxth	r3, r3
 800ccc8:	8afa      	ldrh	r2, [r7, #22]
 800ccca:	1ad3      	subs	r3, r2, r3
 800cccc:	82fb      	strh	r3, [r7, #22]

  /* decode varbind value (object id) */
  VB_PARSE_EXEC(snmp_asn1_dec_tlv(&(enumerator->pbuf_stream), &tlv));
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f107 020c 	add.w	r2, r7, #12
 800ccd4:	4611      	mov	r1, r2
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7fa fd8a 	bl	80077f0 <snmp_asn1_dec_tlv>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d006      	beq.n	800ccf0 <snmp_vb_enumerator_get_next+0x11c>
 800cce2:	4b7e      	ldr	r3, [pc, #504]	; (800cedc <snmp_vb_enumerator_get_next+0x308>)
 800cce4:	695b      	ldr	r3, [r3, #20]
 800cce6:	3301      	adds	r3, #1
 800cce8:	4a7c      	ldr	r2, [pc, #496]	; (800cedc <snmp_vb_enumerator_get_next+0x308>)
 800ccea:	6153      	str	r3, [r2, #20]
 800ccec:	2302      	movs	r3, #2
 800ccee:	e17b      	b.n	800cfe8 <snmp_vb_enumerator_get_next+0x414>
  VB_PARSE_ASSERT((SNMP_ASN1_TLV_LENGTH(tlv) == varbind_len) && (tlv.value_len <= enumerator->pbuf_stream.length));
 800ccf0:	7b7b      	ldrb	r3, [r7, #13]
 800ccf2:	461a      	mov	r2, r3
 800ccf4:	7bbb      	ldrb	r3, [r7, #14]
 800ccf6:	4413      	add	r3, r2
 800ccf8:	8a3a      	ldrh	r2, [r7, #16]
 800ccfa:	441a      	add	r2, r3
 800ccfc:	8afb      	ldrh	r3, [r7, #22]
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d104      	bne.n	800cd0c <snmp_vb_enumerator_get_next+0x138>
 800cd02:	8a3a      	ldrh	r2, [r7, #16]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	88db      	ldrh	r3, [r3, #6]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d906      	bls.n	800cd1a <snmp_vb_enumerator_get_next+0x146>
 800cd0c:	4b73      	ldr	r3, [pc, #460]	; (800cedc <snmp_vb_enumerator_get_next+0x308>)
 800cd0e:	695b      	ldr	r3, [r3, #20]
 800cd10:	3301      	adds	r3, #1
 800cd12:	4a72      	ldr	r2, [pc, #456]	; (800cedc <snmp_vb_enumerator_get_next+0x308>)
 800cd14:	6153      	str	r3, [r2, #20]
 800cd16:	2302      	movs	r3, #2
 800cd18:	e166      	b.n	800cfe8 <snmp_vb_enumerator_get_next+0x414>
  varbind->type = tlv.type;
 800cd1a:	7b3a      	ldrb	r2, [r7, #12]
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4

  /* shall the value be decoded ? */
  if (varbind->value != NULL) {
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	f000 814e 	beq.w	800cfca <snmp_vb_enumerator_get_next+0x3f6>
    switch (varbind->type) {
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 800cd34:	3b02      	subs	r3, #2
 800cd36:	2b44      	cmp	r3, #68	; 0x44
 800cd38:	f200 8140 	bhi.w	800cfbc <snmp_vb_enumerator_get_next+0x3e8>
 800cd3c:	a201      	add	r2, pc, #4	; (adr r2, 800cd44 <snmp_vb_enumerator_get_next+0x170>)
 800cd3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd42:	bf00      	nop
 800cd44:	0800ce59 	.word	0x0800ce59
 800cd48:	0800cfbd 	.word	0x0800cfbd
 800cd4c:	0800ceb5 	.word	0x0800ceb5
 800cd50:	0800cef7 	.word	0x0800cef7
 800cd54:	0800cf01 	.word	0x0800cf01
 800cd58:	0800cfbd 	.word	0x0800cfbd
 800cd5c:	0800cfbd 	.word	0x0800cfbd
 800cd60:	0800cfbd 	.word	0x0800cfbd
 800cd64:	0800cfbd 	.word	0x0800cfbd
 800cd68:	0800cfbd 	.word	0x0800cfbd
 800cd6c:	0800cfbd 	.word	0x0800cfbd
 800cd70:	0800cfbd 	.word	0x0800cfbd
 800cd74:	0800cfbd 	.word	0x0800cfbd
 800cd78:	0800cfbd 	.word	0x0800cfbd
 800cd7c:	0800cfbd 	.word	0x0800cfbd
 800cd80:	0800cfbd 	.word	0x0800cfbd
 800cd84:	0800cfbd 	.word	0x0800cfbd
 800cd88:	0800cfbd 	.word	0x0800cfbd
 800cd8c:	0800cfbd 	.word	0x0800cfbd
 800cd90:	0800cfbd 	.word	0x0800cfbd
 800cd94:	0800cfbd 	.word	0x0800cfbd
 800cd98:	0800cfbd 	.word	0x0800cfbd
 800cd9c:	0800cfbd 	.word	0x0800cfbd
 800cda0:	0800cfbd 	.word	0x0800cfbd
 800cda4:	0800cfbd 	.word	0x0800cfbd
 800cda8:	0800cfbd 	.word	0x0800cfbd
 800cdac:	0800cfbd 	.word	0x0800cfbd
 800cdb0:	0800cfbd 	.word	0x0800cfbd
 800cdb4:	0800cfbd 	.word	0x0800cfbd
 800cdb8:	0800cfbd 	.word	0x0800cfbd
 800cdbc:	0800cfbd 	.word	0x0800cfbd
 800cdc0:	0800cfbd 	.word	0x0800cfbd
 800cdc4:	0800cfbd 	.word	0x0800cfbd
 800cdc8:	0800cfbd 	.word	0x0800cfbd
 800cdcc:	0800cfbd 	.word	0x0800cfbd
 800cdd0:	0800cfbd 	.word	0x0800cfbd
 800cdd4:	0800cfbd 	.word	0x0800cfbd
 800cdd8:	0800cfbd 	.word	0x0800cfbd
 800cddc:	0800cfbd 	.word	0x0800cfbd
 800cde0:	0800cfbd 	.word	0x0800cfbd
 800cde4:	0800cfbd 	.word	0x0800cfbd
 800cde8:	0800cfbd 	.word	0x0800cfbd
 800cdec:	0800cfbd 	.word	0x0800cfbd
 800cdf0:	0800cfbd 	.word	0x0800cfbd
 800cdf4:	0800cfbd 	.word	0x0800cfbd
 800cdf8:	0800cfbd 	.word	0x0800cfbd
 800cdfc:	0800cfbd 	.word	0x0800cfbd
 800ce00:	0800cfbd 	.word	0x0800cfbd
 800ce04:	0800cfbd 	.word	0x0800cfbd
 800ce08:	0800cfbd 	.word	0x0800cfbd
 800ce0c:	0800cfbd 	.word	0x0800cfbd
 800ce10:	0800cfbd 	.word	0x0800cfbd
 800ce14:	0800cfbd 	.word	0x0800cfbd
 800ce18:	0800cfbd 	.word	0x0800cfbd
 800ce1c:	0800cfbd 	.word	0x0800cfbd
 800ce20:	0800cfbd 	.word	0x0800cfbd
 800ce24:	0800cfbd 	.word	0x0800cfbd
 800ce28:	0800cfbd 	.word	0x0800cfbd
 800ce2c:	0800cfbd 	.word	0x0800cfbd
 800ce30:	0800cfbd 	.word	0x0800cfbd
 800ce34:	0800cfbd 	.word	0x0800cfbd
 800ce38:	0800cfbd 	.word	0x0800cfbd
 800ce3c:	0800cf51 	.word	0x0800cf51
 800ce40:	0800ce87 	.word	0x0800ce87
 800ce44:	0800ce87 	.word	0x0800ce87
 800ce48:	0800ce87 	.word	0x0800ce87
 800ce4c:	0800ceb5 	.word	0x0800ceb5
 800ce50:	0800cfbd 	.word	0x0800cfbd
 800ce54:	0800cf8f 	.word	0x0800cf8f
      case SNMP_ASN1_TYPE_INTEGER:
        VB_PARSE_EXEC(snmp_asn1_dec_s32t(&(enumerator->pbuf_stream), tlv.value_len, (s32_t *)varbind->value));
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	8a39      	ldrh	r1, [r7, #16]
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ce62:	461a      	mov	r2, r3
 800ce64:	f7fa fda0 	bl	80079a8 <snmp_asn1_dec_s32t>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d006      	beq.n	800ce7c <snmp_vb_enumerator_get_next+0x2a8>
 800ce6e:	4b1b      	ldr	r3, [pc, #108]	; (800cedc <snmp_vb_enumerator_get_next+0x308>)
 800ce70:	695b      	ldr	r3, [r3, #20]
 800ce72:	3301      	adds	r3, #1
 800ce74:	4a19      	ldr	r2, [pc, #100]	; (800cedc <snmp_vb_enumerator_get_next+0x308>)
 800ce76:	6153      	str	r3, [r2, #20]
 800ce78:	2302      	movs	r3, #2
 800ce7a:	e0b5      	b.n	800cfe8 <snmp_vb_enumerator_get_next+0x414>
        varbind->value_len = sizeof(s32_t);
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	2204      	movs	r2, #4
 800ce80:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
        break;
 800ce84:	e0af      	b.n	800cfe6 <snmp_vb_enumerator_get_next+0x412>
      case SNMP_ASN1_TYPE_COUNTER:
      case SNMP_ASN1_TYPE_GAUGE:
      case SNMP_ASN1_TYPE_TIMETICKS:
        VB_PARSE_EXEC(snmp_asn1_dec_u32t(&(enumerator->pbuf_stream), tlv.value_len, (u32_t *)varbind->value));
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	8a39      	ldrh	r1, [r7, #16]
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800ce90:	461a      	mov	r2, r3
 800ce92:	f7fa fd36 	bl	8007902 <snmp_asn1_dec_u32t>
 800ce96:	4603      	mov	r3, r0
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d006      	beq.n	800ceaa <snmp_vb_enumerator_get_next+0x2d6>
 800ce9c:	4b0f      	ldr	r3, [pc, #60]	; (800cedc <snmp_vb_enumerator_get_next+0x308>)
 800ce9e:	695b      	ldr	r3, [r3, #20]
 800cea0:	3301      	adds	r3, #1
 800cea2:	4a0e      	ldr	r2, [pc, #56]	; (800cedc <snmp_vb_enumerator_get_next+0x308>)
 800cea4:	6153      	str	r3, [r2, #20]
 800cea6:	2302      	movs	r3, #2
 800cea8:	e09e      	b.n	800cfe8 <snmp_vb_enumerator_get_next+0x414>
        varbind->value_len = sizeof(u32_t);
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	2204      	movs	r2, #4
 800ceae:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
        break;
 800ceb2:	e098      	b.n	800cfe6 <snmp_vb_enumerator_get_next+0x412>
      case SNMP_ASN1_TYPE_OCTET_STRING:
      case SNMP_ASN1_TYPE_OPAQUE:
        err = snmp_asn1_dec_raw(&(enumerator->pbuf_stream), tlv.value_len, (u8_t *)varbind->value, &varbind->value_len, SNMP_MAX_VALUE_SIZE);
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	8a39      	ldrh	r1, [r7, #16]
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	33d6      	adds	r3, #214	; 0xd6
 800cec2:	24c8      	movs	r4, #200	; 0xc8
 800cec4:	9400      	str	r4, [sp, #0]
 800cec6:	f7fa fe8f 	bl	8007be8 <snmp_asn1_dec_raw>
 800ceca:	4603      	mov	r3, r0
 800cecc:	757b      	strb	r3, [r7, #21]
        if (err == ERR_MEM) {
 800cece:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800ced2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ced6:	d103      	bne.n	800cee0 <snmp_vb_enumerator_get_next+0x30c>
          return SNMP_VB_ENUMERATOR_ERR_INVALIDLENGTH;
 800ced8:	2303      	movs	r3, #3
 800ceda:	e085      	b.n	800cfe8 <snmp_vb_enumerator_get_next+0x414>
 800cedc:	200036a8 	.word	0x200036a8
        }
        VB_PARSE_ASSERT(err == ERR_OK);
 800cee0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d07b      	beq.n	800cfe0 <snmp_vb_enumerator_get_next+0x40c>
 800cee8:	4b41      	ldr	r3, [pc, #260]	; (800cff0 <snmp_vb_enumerator_get_next+0x41c>)
 800ceea:	695b      	ldr	r3, [r3, #20]
 800ceec:	3301      	adds	r3, #1
 800ceee:	4a40      	ldr	r2, [pc, #256]	; (800cff0 <snmp_vb_enumerator_get_next+0x41c>)
 800cef0:	6153      	str	r3, [r2, #20]
 800cef2:	2302      	movs	r3, #2
 800cef4:	e078      	b.n	800cfe8 <snmp_vb_enumerator_get_next+0x414>
        break;
      case SNMP_ASN1_TYPE_NULL:
        varbind->value_len = 0;
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	2200      	movs	r2, #0
 800cefa:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
        break;
 800cefe:	e072      	b.n	800cfe6 <snmp_vb_enumerator_get_next+0x412>
      case SNMP_ASN1_TYPE_OBJECT_ID:
        /* misuse tlv.length_len as OID_length transporter */
        err = snmp_asn1_dec_oid(&(enumerator->pbuf_stream), tlv.value_len, (u32_t *)varbind->value, &tlv.length_len, SNMP_MAX_OBJ_ID_LEN);
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	8a39      	ldrh	r1, [r7, #16]
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800cf0a:	f107 030c 	add.w	r3, r7, #12
 800cf0e:	3302      	adds	r3, #2
 800cf10:	2432      	movs	r4, #50	; 0x32
 800cf12:	9400      	str	r4, [sp, #0]
 800cf14:	f7fa fd9a 	bl	8007a4c <snmp_asn1_dec_oid>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	757b      	strb	r3, [r7, #21]
        if (err == ERR_MEM) {
 800cf1c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800cf20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf24:	d101      	bne.n	800cf2a <snmp_vb_enumerator_get_next+0x356>
          return SNMP_VB_ENUMERATOR_ERR_INVALIDLENGTH;
 800cf26:	2303      	movs	r3, #3
 800cf28:	e05e      	b.n	800cfe8 <snmp_vb_enumerator_get_next+0x414>
        }
        VB_PARSE_ASSERT(err == ERR_OK);
 800cf2a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d006      	beq.n	800cf40 <snmp_vb_enumerator_get_next+0x36c>
 800cf32:	4b2f      	ldr	r3, [pc, #188]	; (800cff0 <snmp_vb_enumerator_get_next+0x41c>)
 800cf34:	695b      	ldr	r3, [r3, #20]
 800cf36:	3301      	adds	r3, #1
 800cf38:	4a2d      	ldr	r2, [pc, #180]	; (800cff0 <snmp_vb_enumerator_get_next+0x41c>)
 800cf3a:	6153      	str	r3, [r2, #20]
 800cf3c:	2302      	movs	r3, #2
 800cf3e:	e053      	b.n	800cfe8 <snmp_vb_enumerator_get_next+0x414>
        varbind->value_len = tlv.length_len * sizeof(u32_t);
 800cf40:	7bbb      	ldrb	r3, [r7, #14]
 800cf42:	b29b      	uxth	r3, r3
 800cf44:	009b      	lsls	r3, r3, #2
 800cf46:	b29a      	uxth	r2, r3
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
        break;
 800cf4e:	e04a      	b.n	800cfe6 <snmp_vb_enumerator_get_next+0x412>
      case SNMP_ASN1_TYPE_IPADDR:
        if (tlv.value_len == 4) {
 800cf50:	8a3b      	ldrh	r3, [r7, #16]
 800cf52:	2b04      	cmp	r3, #4
 800cf54:	d114      	bne.n	800cf80 <snmp_vb_enumerator_get_next+0x3ac>
          /* must be exactly 4 octets! */
          VB_PARSE_EXEC(snmp_asn1_dec_raw(&(enumerator->pbuf_stream), tlv.value_len, (u8_t *)varbind->value, &varbind->value_len, SNMP_MAX_VALUE_SIZE));
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	8a39      	ldrh	r1, [r7, #16]
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	33d6      	adds	r3, #214	; 0xd6
 800cf64:	24c8      	movs	r4, #200	; 0xc8
 800cf66:	9400      	str	r4, [sp, #0]
 800cf68:	f7fa fe3e 	bl	8007be8 <snmp_asn1_dec_raw>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d038      	beq.n	800cfe4 <snmp_vb_enumerator_get_next+0x410>
 800cf72:	4b1f      	ldr	r3, [pc, #124]	; (800cff0 <snmp_vb_enumerator_get_next+0x41c>)
 800cf74:	695b      	ldr	r3, [r3, #20]
 800cf76:	3301      	adds	r3, #1
 800cf78:	4a1d      	ldr	r2, [pc, #116]	; (800cff0 <snmp_vb_enumerator_get_next+0x41c>)
 800cf7a:	6153      	str	r3, [r2, #20]
 800cf7c:	2302      	movs	r3, #2
 800cf7e:	e033      	b.n	800cfe8 <snmp_vb_enumerator_get_next+0x414>
        } else {
          VB_PARSE_ASSERT(0);
 800cf80:	4b1b      	ldr	r3, [pc, #108]	; (800cff0 <snmp_vb_enumerator_get_next+0x41c>)
 800cf82:	695b      	ldr	r3, [r3, #20]
 800cf84:	3301      	adds	r3, #1
 800cf86:	4a1a      	ldr	r2, [pc, #104]	; (800cff0 <snmp_vb_enumerator_get_next+0x41c>)
 800cf88:	6153      	str	r3, [r2, #20]
 800cf8a:	2302      	movs	r3, #2
 800cf8c:	e02c      	b.n	800cfe8 <snmp_vb_enumerator_get_next+0x414>
        }
        break;
#if LWIP_HAVE_INT64
      case SNMP_ASN1_TYPE_COUNTER64:
        VB_PARSE_EXEC(snmp_asn1_dec_u64t(&(enumerator->pbuf_stream), tlv.value_len, (u64_t *)varbind->value));
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	8a39      	ldrh	r1, [r7, #16]
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800cf98:	461a      	mov	r2, r3
 800cf9a:	f7fa fe7d 	bl	8007c98 <snmp_asn1_dec_u64t>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d006      	beq.n	800cfb2 <snmp_vb_enumerator_get_next+0x3de>
 800cfa4:	4b12      	ldr	r3, [pc, #72]	; (800cff0 <snmp_vb_enumerator_get_next+0x41c>)
 800cfa6:	695b      	ldr	r3, [r3, #20]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	4a11      	ldr	r2, [pc, #68]	; (800cff0 <snmp_vb_enumerator_get_next+0x41c>)
 800cfac:	6153      	str	r3, [r2, #20]
 800cfae:	2302      	movs	r3, #2
 800cfb0:	e01a      	b.n	800cfe8 <snmp_vb_enumerator_get_next+0x414>
        varbind->value_len = sizeof(u64_t);
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	2208      	movs	r2, #8
 800cfb6:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
        break;
 800cfba:	e014      	b.n	800cfe6 <snmp_vb_enumerator_get_next+0x412>
#endif
      default:
        VB_PARSE_ASSERT(0);
 800cfbc:	4b0c      	ldr	r3, [pc, #48]	; (800cff0 <snmp_vb_enumerator_get_next+0x41c>)
 800cfbe:	695b      	ldr	r3, [r3, #20]
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	4a0b      	ldr	r2, [pc, #44]	; (800cff0 <snmp_vb_enumerator_get_next+0x41c>)
 800cfc4:	6153      	str	r3, [r2, #20]
 800cfc6:	2302      	movs	r3, #2
 800cfc8:	e00e      	b.n	800cfe8 <snmp_vb_enumerator_get_next+0x414>
        break;
    }
  } else {
    snmp_pbuf_stream_seek(&(enumerator->pbuf_stream), tlv.value_len);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	8a3a      	ldrh	r2, [r7, #16]
 800cfce:	4611      	mov	r1, r2
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f000 f906 	bl	800d1e2 <snmp_pbuf_stream_seek>
    varbind->value_len = tlv.value_len;
 800cfd6:	8a3a      	ldrh	r2, [r7, #16]
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
 800cfde:	e002      	b.n	800cfe6 <snmp_vb_enumerator_get_next+0x412>
        break;
 800cfe0:	bf00      	nop
 800cfe2:	e000      	b.n	800cfe6 <snmp_vb_enumerator_get_next+0x412>
        break;
 800cfe4:	bf00      	nop
  }

  return SNMP_VB_ENUMERATOR_ERR_OK;
 800cfe6:	2300      	movs	r3, #0
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	371c      	adds	r7, #28
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd90      	pop	{r4, r7, pc}
 800cff0:	200036a8 	.word	0x200036a8

0800cff4 <snmp_pbuf_stream_init>:
#include "lwip/def.h"
#include <string.h>

err_t
snmp_pbuf_stream_init(struct snmp_pbuf_stream *pbuf_stream, struct pbuf *p, u16_t offset, u16_t length)
{
 800cff4:	b480      	push	{r7}
 800cff6:	b085      	sub	sp, #20
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	60f8      	str	r0, [r7, #12]
 800cffc:	60b9      	str	r1, [r7, #8]
 800cffe:	4611      	mov	r1, r2
 800d000:	461a      	mov	r2, r3
 800d002:	460b      	mov	r3, r1
 800d004:	80fb      	strh	r3, [r7, #6]
 800d006:	4613      	mov	r3, r2
 800d008:	80bb      	strh	r3, [r7, #4]
  pbuf_stream->offset = offset;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	88fa      	ldrh	r2, [r7, #6]
 800d00e:	809a      	strh	r2, [r3, #4]
  pbuf_stream->length = length;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	88ba      	ldrh	r2, [r7, #4]
 800d014:	80da      	strh	r2, [r3, #6]
  pbuf_stream->pbuf   = p;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	68ba      	ldr	r2, [r7, #8]
 800d01a:	601a      	str	r2, [r3, #0]

  return ERR_OK;
 800d01c:	2300      	movs	r3, #0
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3714      	adds	r7, #20
 800d022:	46bd      	mov	sp, r7
 800d024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d028:	4770      	bx	lr

0800d02a <snmp_pbuf_stream_read>:

err_t
snmp_pbuf_stream_read(struct snmp_pbuf_stream *pbuf_stream, u8_t *data)
{
 800d02a:	b580      	push	{r7, lr}
 800d02c:	b082      	sub	sp, #8
 800d02e:	af00      	add	r7, sp, #0
 800d030:	6078      	str	r0, [r7, #4]
 800d032:	6039      	str	r1, [r7, #0]
  if (pbuf_stream->length == 0) {
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	88db      	ldrh	r3, [r3, #6]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d102      	bne.n	800d042 <snmp_pbuf_stream_read+0x18>
    return ERR_BUF;
 800d03c:	f06f 0301 	mvn.w	r3, #1
 800d040:	e01a      	b.n	800d078 <snmp_pbuf_stream_read+0x4e>
  }

  if (pbuf_copy_partial(pbuf_stream->pbuf, data, 1, pbuf_stream->offset) == 0) {
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6818      	ldr	r0, [r3, #0]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	889b      	ldrh	r3, [r3, #4]
 800d04a:	2201      	movs	r2, #1
 800d04c:	6839      	ldr	r1, [r7, #0]
 800d04e:	f003 fa99 	bl	8010584 <pbuf_copy_partial>
 800d052:	4603      	mov	r3, r0
 800d054:	2b00      	cmp	r3, #0
 800d056:	d102      	bne.n	800d05e <snmp_pbuf_stream_read+0x34>
    return ERR_BUF;
 800d058:	f06f 0301 	mvn.w	r3, #1
 800d05c:	e00c      	b.n	800d078 <snmp_pbuf_stream_read+0x4e>
  }

  pbuf_stream->offset++;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	889b      	ldrh	r3, [r3, #4]
 800d062:	3301      	adds	r3, #1
 800d064:	b29a      	uxth	r2, r3
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	809a      	strh	r2, [r3, #4]
  pbuf_stream->length--;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	88db      	ldrh	r3, [r3, #6]
 800d06e:	3b01      	subs	r3, #1
 800d070:	b29a      	uxth	r2, r3
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	80da      	strh	r2, [r3, #6]

  return ERR_OK;
 800d076:	2300      	movs	r3, #0
}
 800d078:	4618      	mov	r0, r3
 800d07a:	3708      	adds	r7, #8
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}

0800d080 <snmp_pbuf_stream_write>:

err_t
snmp_pbuf_stream_write(struct snmp_pbuf_stream *pbuf_stream, u8_t data)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b082      	sub	sp, #8
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	460b      	mov	r3, r1
 800d08a:	70fb      	strb	r3, [r7, #3]
  return snmp_pbuf_stream_writebuf(pbuf_stream, &data, 1);
 800d08c:	1cfb      	adds	r3, r7, #3
 800d08e:	2201      	movs	r2, #1
 800d090:	4619      	mov	r1, r3
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 f805 	bl	800d0a2 <snmp_pbuf_stream_writebuf>
 800d098:	4603      	mov	r3, r0
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3708      	adds	r7, #8
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}

0800d0a2 <snmp_pbuf_stream_writebuf>:

err_t
snmp_pbuf_stream_writebuf(struct snmp_pbuf_stream *pbuf_stream, const void *buf, u16_t buf_len)
{
 800d0a2:	b580      	push	{r7, lr}
 800d0a4:	b084      	sub	sp, #16
 800d0a6:	af00      	add	r7, sp, #0
 800d0a8:	60f8      	str	r0, [r7, #12]
 800d0aa:	60b9      	str	r1, [r7, #8]
 800d0ac:	4613      	mov	r3, r2
 800d0ae:	80fb      	strh	r3, [r7, #6]
  if (pbuf_stream->length < buf_len) {
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	88db      	ldrh	r3, [r3, #6]
 800d0b4:	88fa      	ldrh	r2, [r7, #6]
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	d902      	bls.n	800d0c0 <snmp_pbuf_stream_writebuf+0x1e>
    return ERR_BUF;
 800d0ba:	f06f 0301 	mvn.w	r3, #1
 800d0be:	e01c      	b.n	800d0fa <snmp_pbuf_stream_writebuf+0x58>
  }

  if (pbuf_take_at(pbuf_stream->pbuf, buf, buf_len, pbuf_stream->offset) != ERR_OK) {
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	6818      	ldr	r0, [r3, #0]
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	889b      	ldrh	r3, [r3, #4]
 800d0c8:	88fa      	ldrh	r2, [r7, #6]
 800d0ca:	68b9      	ldr	r1, [r7, #8]
 800d0cc:	f003 fb9a 	bl	8010804 <pbuf_take_at>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d002      	beq.n	800d0dc <snmp_pbuf_stream_writebuf+0x3a>
    return ERR_BUF;
 800d0d6:	f06f 0301 	mvn.w	r3, #1
 800d0da:	e00e      	b.n	800d0fa <snmp_pbuf_stream_writebuf+0x58>
  }

  pbuf_stream->offset += buf_len;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	889a      	ldrh	r2, [r3, #4]
 800d0e0:	88fb      	ldrh	r3, [r7, #6]
 800d0e2:	4413      	add	r3, r2
 800d0e4:	b29a      	uxth	r2, r3
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	809a      	strh	r2, [r3, #4]
  pbuf_stream->length -= buf_len;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	88da      	ldrh	r2, [r3, #6]
 800d0ee:	88fb      	ldrh	r3, [r7, #6]
 800d0f0:	1ad3      	subs	r3, r2, r3
 800d0f2:	b29a      	uxth	r2, r3
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	80da      	strh	r2, [r3, #6]

  return ERR_OK;
 800d0f8:	2300      	movs	r3, #0
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3710      	adds	r7, #16
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}

0800d102 <snmp_pbuf_stream_writeto>:

err_t
snmp_pbuf_stream_writeto(struct snmp_pbuf_stream *pbuf_stream, struct snmp_pbuf_stream *target_pbuf_stream, u16_t len)
{
 800d102:	b580      	push	{r7, lr}
 800d104:	b088      	sub	sp, #32
 800d106:	af00      	add	r7, sp, #0
 800d108:	60f8      	str	r0, [r7, #12]
 800d10a:	60b9      	str	r1, [r7, #8]
 800d10c:	4613      	mov	r3, r2
 800d10e:	80fb      	strh	r3, [r7, #6]

  if ((pbuf_stream == NULL) || (target_pbuf_stream == NULL)) {
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d002      	beq.n	800d11c <snmp_pbuf_stream_writeto+0x1a>
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d102      	bne.n	800d122 <snmp_pbuf_stream_writeto+0x20>
    return ERR_ARG;
 800d11c:	f06f 030f 	mvn.w	r3, #15
 800d120:	e05b      	b.n	800d1da <snmp_pbuf_stream_writeto+0xd8>
  }
  if ((len > pbuf_stream->length) || (len > target_pbuf_stream->length)) {
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	88db      	ldrh	r3, [r3, #6]
 800d126:	88fa      	ldrh	r2, [r7, #6]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d804      	bhi.n	800d136 <snmp_pbuf_stream_writeto+0x34>
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	88db      	ldrh	r3, [r3, #6]
 800d130:	88fa      	ldrh	r2, [r7, #6]
 800d132:	429a      	cmp	r2, r3
 800d134:	d902      	bls.n	800d13c <snmp_pbuf_stream_writeto+0x3a>
    return ERR_ARG;
 800d136:	f06f 030f 	mvn.w	r3, #15
 800d13a:	e04e      	b.n	800d1da <snmp_pbuf_stream_writeto+0xd8>
  }

  if (len == 0) {
 800d13c:	88fb      	ldrh	r3, [r7, #6]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d147      	bne.n	800d1d2 <snmp_pbuf_stream_writeto+0xd0>
    len = LWIP_MIN(pbuf_stream->length, target_pbuf_stream->length);
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	88da      	ldrh	r2, [r3, #6]
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	88db      	ldrh	r3, [r3, #6]
 800d14a:	4293      	cmp	r3, r2
 800d14c:	bf28      	it	cs
 800d14e:	4613      	movcs	r3, r2
 800d150:	80fb      	strh	r3, [r7, #6]
  }

  while (len > 0) {
 800d152:	e03e      	b.n	800d1d2 <snmp_pbuf_stream_writeto+0xd0>
    u16_t chunk_len;
    err_t err;
    u16_t target_offset;
    struct pbuf *pbuf = pbuf_skip(pbuf_stream->pbuf, pbuf_stream->offset, &target_offset);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	6818      	ldr	r0, [r3, #0]
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	889b      	ldrh	r3, [r3, #4]
 800d15c:	f107 0216 	add.w	r2, r7, #22
 800d160:	4619      	mov	r1, r3
 800d162:	f003 faaa 	bl	80106ba <pbuf_skip>
 800d166:	61f8      	str	r0, [r7, #28]

    if ((pbuf == NULL) || (pbuf->len == 0)) {
 800d168:	69fb      	ldr	r3, [r7, #28]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d003      	beq.n	800d176 <snmp_pbuf_stream_writeto+0x74>
 800d16e:	69fb      	ldr	r3, [r7, #28]
 800d170:	895b      	ldrh	r3, [r3, #10]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d102      	bne.n	800d17c <snmp_pbuf_stream_writeto+0x7a>
      return ERR_BUF;
 800d176:	f06f 0301 	mvn.w	r3, #1
 800d17a:	e02e      	b.n	800d1da <snmp_pbuf_stream_writeto+0xd8>
    }

    chunk_len = LWIP_MIN(len, pbuf->len);
 800d17c:	69fb      	ldr	r3, [r7, #28]
 800d17e:	895b      	ldrh	r3, [r3, #10]
 800d180:	88fa      	ldrh	r2, [r7, #6]
 800d182:	4293      	cmp	r3, r2
 800d184:	bf28      	it	cs
 800d186:	4613      	movcs	r3, r2
 800d188:	837b      	strh	r3, [r7, #26]
    err = snmp_pbuf_stream_writebuf(target_pbuf_stream, &((u8_t *)pbuf->payload)[target_offset], chunk_len);
 800d18a:	69fb      	ldr	r3, [r7, #28]
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	8afa      	ldrh	r2, [r7, #22]
 800d190:	4413      	add	r3, r2
 800d192:	8b7a      	ldrh	r2, [r7, #26]
 800d194:	4619      	mov	r1, r3
 800d196:	68b8      	ldr	r0, [r7, #8]
 800d198:	f7ff ff83 	bl	800d0a2 <snmp_pbuf_stream_writebuf>
 800d19c:	4603      	mov	r3, r0
 800d19e:	767b      	strb	r3, [r7, #25]
    if (err != ERR_OK) {
 800d1a0:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d002      	beq.n	800d1ae <snmp_pbuf_stream_writeto+0xac>
      return err;
 800d1a8:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800d1ac:	e015      	b.n	800d1da <snmp_pbuf_stream_writeto+0xd8>
    }

    pbuf_stream->offset   += chunk_len;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	889a      	ldrh	r2, [r3, #4]
 800d1b2:	8b7b      	ldrh	r3, [r7, #26]
 800d1b4:	4413      	add	r3, r2
 800d1b6:	b29a      	uxth	r2, r3
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	809a      	strh	r2, [r3, #4]
    pbuf_stream->length   -= chunk_len;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	88da      	ldrh	r2, [r3, #6]
 800d1c0:	8b7b      	ldrh	r3, [r7, #26]
 800d1c2:	1ad3      	subs	r3, r2, r3
 800d1c4:	b29a      	uxth	r2, r3
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	80da      	strh	r2, [r3, #6]
    len -= chunk_len;
 800d1ca:	88fa      	ldrh	r2, [r7, #6]
 800d1cc:	8b7b      	ldrh	r3, [r7, #26]
 800d1ce:	1ad3      	subs	r3, r2, r3
 800d1d0:	80fb      	strh	r3, [r7, #6]
  while (len > 0) {
 800d1d2:	88fb      	ldrh	r3, [r7, #6]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d1bd      	bne.n	800d154 <snmp_pbuf_stream_writeto+0x52>
  }

  return ERR_OK;
 800d1d8:	2300      	movs	r3, #0
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	3720      	adds	r7, #32
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}

0800d1e2 <snmp_pbuf_stream_seek>:

err_t
snmp_pbuf_stream_seek(struct snmp_pbuf_stream *pbuf_stream, s32_t offset)
{
 800d1e2:	b480      	push	{r7}
 800d1e4:	b083      	sub	sp, #12
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	6078      	str	r0, [r7, #4]
 800d1ea:	6039      	str	r1, [r7, #0]
  if ((offset < 0) || (offset > pbuf_stream->length)) {
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	db05      	blt.n	800d1fe <snmp_pbuf_stream_seek+0x1c>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	88db      	ldrh	r3, [r3, #6]
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	dd02      	ble.n	800d204 <snmp_pbuf_stream_seek+0x22>
    /* we cannot seek backwards or forward behind stream end */
    return ERR_ARG;
 800d1fe:	f06f 030f 	mvn.w	r3, #15
 800d202:	e010      	b.n	800d226 <snmp_pbuf_stream_seek+0x44>
  }

  pbuf_stream->offset += (u16_t)offset;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	889a      	ldrh	r2, [r3, #4]
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	4413      	add	r3, r2
 800d20e:	b29a      	uxth	r2, r3
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	809a      	strh	r2, [r3, #4]
  pbuf_stream->length -= (u16_t)offset;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	88da      	ldrh	r2, [r3, #6]
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	b29b      	uxth	r3, r3
 800d21c:	1ad3      	subs	r3, r2, r3
 800d21e:	b29a      	uxth	r2, r3
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	80da      	strh	r2, [r3, #6]

  return ERR_OK;
 800d224:	2300      	movs	r3, #0
}
 800d226:	4618      	mov	r0, r3
 800d228:	370c      	adds	r7, #12
 800d22a:	46bd      	mov	sp, r7
 800d22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d230:	4770      	bx	lr

0800d232 <snmp_pbuf_stream_seek_abs>:

err_t
snmp_pbuf_stream_seek_abs(struct snmp_pbuf_stream *pbuf_stream, u32_t offset)
{
 800d232:	b580      	push	{r7, lr}
 800d234:	b084      	sub	sp, #16
 800d236:	af00      	add	r7, sp, #0
 800d238:	6078      	str	r0, [r7, #4]
 800d23a:	6039      	str	r1, [r7, #0]
  s32_t rel_offset = offset - pbuf_stream->offset;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	889b      	ldrh	r3, [r3, #4]
 800d240:	461a      	mov	r2, r3
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	1a9b      	subs	r3, r3, r2
 800d246:	60fb      	str	r3, [r7, #12]
  return snmp_pbuf_stream_seek(pbuf_stream, rel_offset);
 800d248:	68f9      	ldr	r1, [r7, #12]
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f7ff ffc9 	bl	800d1e2 <snmp_pbuf_stream_seek>
 800d250:	4603      	mov	r3, r0
}
 800d252:	4618      	mov	r0, r3
 800d254:	3710      	adds	r7, #16
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}

0800d25a <snmp_recv>:
#include "snmp_msg.h"

/* lwIP UDP receive callback function */
static void
snmp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800d25a:	b580      	push	{r7, lr}
 800d25c:	b084      	sub	sp, #16
 800d25e:	af00      	add	r7, sp, #0
 800d260:	60f8      	str	r0, [r7, #12]
 800d262:	60b9      	str	r1, [r7, #8]
 800d264:	607a      	str	r2, [r7, #4]
 800d266:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(arg);

  snmp_receive(pcb, p, addr, port);
 800d268:	8b3b      	ldrh	r3, [r7, #24]
 800d26a:	683a      	ldr	r2, [r7, #0]
 800d26c:	6879      	ldr	r1, [r7, #4]
 800d26e:	68b8      	ldr	r0, [r7, #8]
 800d270:	f7fd fdf0 	bl	800ae54 <snmp_receive>

  pbuf_free(p);
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f002 ff8b 	bl	8010190 <pbuf_free>
}
 800d27a:	bf00      	nop
 800d27c:	3710      	adds	r7, #16
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}

0800d282 <snmp_sendto>:

err_t
snmp_sendto(void *handle, struct pbuf *p, const ip_addr_t *dst, u16_t port)
{
 800d282:	b580      	push	{r7, lr}
 800d284:	b084      	sub	sp, #16
 800d286:	af00      	add	r7, sp, #0
 800d288:	60f8      	str	r0, [r7, #12]
 800d28a:	60b9      	str	r1, [r7, #8]
 800d28c:	607a      	str	r2, [r7, #4]
 800d28e:	807b      	strh	r3, [r7, #2]
  return udp_sendto((struct udp_pcb *)handle, p, dst, port);
 800d290:	887b      	ldrh	r3, [r7, #2]
 800d292:	687a      	ldr	r2, [r7, #4]
 800d294:	68b9      	ldr	r1, [r7, #8]
 800d296:	68f8      	ldr	r0, [r7, #12]
 800d298:	f009 f95c 	bl	8016554 <udp_sendto>
 800d29c:	4603      	mov	r3, r0
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3710      	adds	r7, #16
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}

0800d2a6 <snmp_get_local_ip_for_dst>:

u8_t
snmp_get_local_ip_for_dst(void *handle, const ip_addr_t *dst, ip_addr_t *result)
{
 800d2a6:	b580      	push	{r7, lr}
 800d2a8:	b088      	sub	sp, #32
 800d2aa:	af00      	add	r7, sp, #0
 800d2ac:	60f8      	str	r0, [r7, #12]
 800d2ae:	60b9      	str	r1, [r7, #8]
 800d2b0:	607a      	str	r2, [r7, #4]
  struct udp_pcb *udp_pcb = (struct udp_pcb *)handle;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	61fb      	str	r3, [r7, #28]
  struct netif *dst_if;
  const ip_addr_t *dst_ip;

  LWIP_UNUSED_ARG(udp_pcb); /* unused in case of IPV4 only configuration */

  ip_route_get_local_ip(&udp_pcb->local_ip, dst, dst_if, dst_ip);
 800d2b6:	68b8      	ldr	r0, [r7, #8]
 800d2b8:	f00c fdf0 	bl	8019e9c <ip4_route>
 800d2bc:	61b8      	str	r0, [r7, #24]
 800d2be:	69bb      	ldr	r3, [r7, #24]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d002      	beq.n	800d2ca <snmp_get_local_ip_for_dst+0x24>
 800d2c4:	69bb      	ldr	r3, [r7, #24]
 800d2c6:	3304      	adds	r3, #4
 800d2c8:	e000      	b.n	800d2cc <snmp_get_local_ip_for_dst+0x26>
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	617b      	str	r3, [r7, #20]

  if ((dst_if != NULL) && (dst_ip != NULL)) {
 800d2ce:	69bb      	ldr	r3, [r7, #24]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d008      	beq.n	800d2e6 <snmp_get_local_ip_for_dst+0x40>
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d005      	beq.n	800d2e6 <snmp_get_local_ip_for_dst+0x40>
    ip_addr_copy(*result, *dst_ip);
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	681a      	ldr	r2, [r3, #0]
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	601a      	str	r2, [r3, #0]
    return 1;
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	e000      	b.n	800d2e8 <snmp_get_local_ip_for_dst+0x42>
  } else {
    return 0;
 800d2e6:	2300      	movs	r3, #0
  }
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3720      	adds	r7, #32
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}

0800d2f0 <snmp_init>:
 * Starts SNMP Agent.
 * Allocates UDP pcb and binds it to IP_ANY_TYPE port 161.
 */
void
snmp_init(void)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b082      	sub	sp, #8
 800d2f4:	af00      	add	r7, sp, #0
  err_t err;

  struct udp_pcb *snmp_pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 800d2f6:	202e      	movs	r0, #46	; 0x2e
 800d2f8:	f009 fc6b 	bl	8016bd2 <udp_new_ip_type>
 800d2fc:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("snmp_raw: no PCB", (snmp_pcb != NULL), return;);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d106      	bne.n	800d312 <snmp_init+0x22>
 800d304:	4b11      	ldr	r3, [pc, #68]	; (800d34c <snmp_init+0x5c>)
 800d306:	225c      	movs	r2, #92	; 0x5c
 800d308:	4911      	ldr	r1, [pc, #68]	; (800d350 <snmp_init+0x60>)
 800d30a:	4812      	ldr	r0, [pc, #72]	; (800d354 <snmp_init+0x64>)
 800d30c:	f00f fa10 	bl	801c730 <iprintf>
 800d310:	e019      	b.n	800d346 <snmp_init+0x56>

  LWIP_ASSERT_CORE_LOCKED();

  snmp_traps_handle = snmp_pcb;
 800d312:	4a11      	ldr	r2, [pc, #68]	; (800d358 <snmp_init+0x68>)
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6013      	str	r3, [r2, #0]

  udp_recv(snmp_pcb, snmp_recv, NULL);
 800d318:	2200      	movs	r2, #0
 800d31a:	4910      	ldr	r1, [pc, #64]	; (800d35c <snmp_init+0x6c>)
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f009 fbdf 	bl	8016ae0 <udp_recv>
  err = udp_bind(snmp_pcb, IP_ANY_TYPE, LWIP_IANA_PORT_SNMP);
 800d322:	22a1      	movs	r2, #161	; 0xa1
 800d324:	490e      	ldr	r1, [pc, #56]	; (800d360 <snmp_init+0x70>)
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f009 fae4 	bl	80168f4 <udp_bind>
 800d32c:	4603      	mov	r3, r0
 800d32e:	70fb      	strb	r3, [r7, #3]
  LWIP_ERROR("snmp_raw: Unable to bind PCB", (err == ERR_OK), return;);
 800d330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d006      	beq.n	800d346 <snmp_init+0x56>
 800d338:	4b04      	ldr	r3, [pc, #16]	; (800d34c <snmp_init+0x5c>)
 800d33a:	2264      	movs	r2, #100	; 0x64
 800d33c:	4909      	ldr	r1, [pc, #36]	; (800d364 <snmp_init+0x74>)
 800d33e:	4805      	ldr	r0, [pc, #20]	; (800d354 <snmp_init+0x64>)
 800d340:	f00f f9f6 	bl	801c730 <iprintf>
 800d344:	bf00      	nop
}
 800d346:	3708      	adds	r7, #8
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}
 800d34c:	08020570 	.word	0x08020570
 800d350:	080205ac 	.word	0x080205ac
 800d354:	080205c0 	.word	0x080205c0
 800d358:	20003750 	.word	0x20003750
 800d35c:	0800d25b 	.word	0x0800d25b
 800d360:	08024538 	.word	0x08024538
 800d364:	080205e8 	.word	0x080205e8

0800d368 <snmp_scalar_get_instance>:
static snmp_err_t  snmp_scalar_array_set_test(struct snmp_node_instance *instance, u16_t value_len, void *value);
static snmp_err_t  snmp_scalar_array_set_value(struct snmp_node_instance *instance, u16_t value_len, void *value);

snmp_err_t
snmp_scalar_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance *instance)
{
 800d368:	b480      	push	{r7}
 800d36a:	b087      	sub	sp, #28
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	60f8      	str	r0, [r7, #12]
 800d370:	460b      	mov	r3, r1
 800d372:	607a      	str	r2, [r7, #4]
 800d374:	72fb      	strb	r3, [r7, #11]
  const struct snmp_scalar_node *scalar_node = (const struct snmp_scalar_node *)(const void *)instance->node;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* scalar only has one dedicated instance: .0 */
  if ((instance->instance_oid.len != 1) || (instance->instance_oid.id[0] != 0)) {
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	791b      	ldrb	r3, [r3, #4]
 800d380:	2b01      	cmp	r3, #1
 800d382:	d103      	bne.n	800d38c <snmp_scalar_get_instance+0x24>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	689b      	ldr	r3, [r3, #8]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d001      	beq.n	800d390 <snmp_scalar_get_instance+0x28>
    return SNMP_ERR_NOSUCHINSTANCE;
 800d38c:	23f1      	movs	r3, #241	; 0xf1
 800d38e:	e019      	b.n	800d3c4 <snmp_scalar_get_instance+0x5c>
  }

  instance->access    = scalar_node->access;
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	7c5a      	ldrb	r2, [r3, #17]
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
  instance->asn1_type = scalar_node->asn1_type;
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	7c1a      	ldrb	r2, [r3, #16]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
  instance->get_value = scalar_node->get_value;
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	695a      	ldr	r2, [r3, #20]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  instance->set_test  = scalar_node->set_test;
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	699a      	ldr	r2, [r3, #24]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  instance->set_value = scalar_node->set_value;
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	69da      	ldr	r2, [r3, #28]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  return SNMP_ERR_NOERROR;
 800d3c2:	2300      	movs	r3, #0
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	371c      	adds	r7, #28
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ce:	4770      	bx	lr

0800d3d0 <snmp_scalar_get_next_instance>:

snmp_err_t
snmp_scalar_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance *instance)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b084      	sub	sp, #16
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	60f8      	str	r0, [r7, #12]
 800d3d8:	460b      	mov	r3, r1
 800d3da:	607a      	str	r2, [r7, #4]
 800d3dc:	72fb      	strb	r3, [r7, #11]
  /* because our only instance is .0 we can only return a next instance if no instance oid is passed */
  if (instance->instance_oid.len == 0) {
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	791b      	ldrb	r3, [r3, #4]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d10d      	bne.n	800d402 <snmp_scalar_get_next_instance+0x32>
    instance->instance_oid.len   = 1;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	711a      	strb	r2, [r3, #4]
    instance->instance_oid.id[0] = 0;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	609a      	str	r2, [r3, #8]

    return snmp_scalar_get_instance(root_oid, root_oid_len, instance);
 800d3f2:	7afb      	ldrb	r3, [r7, #11]
 800d3f4:	687a      	ldr	r2, [r7, #4]
 800d3f6:	4619      	mov	r1, r3
 800d3f8:	68f8      	ldr	r0, [r7, #12]
 800d3fa:	f7ff ffb5 	bl	800d368 <snmp_scalar_get_instance>
 800d3fe:	4603      	mov	r3, r0
 800d400:	e000      	b.n	800d404 <snmp_scalar_get_next_instance+0x34>
  }

  return SNMP_ERR_NOSUCHINSTANCE;
 800d402:	23f1      	movs	r3, #241	; 0xf1
}
 800d404:	4618      	mov	r0, r3
 800d406:	3710      	adds	r7, #16
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <snmp_scalar_array_get_instance>:


snmp_err_t
snmp_scalar_array_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance *instance)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b089      	sub	sp, #36	; 0x24
 800d410:	af00      	add	r7, sp, #0
 800d412:	60f8      	str	r0, [r7, #12]
 800d414:	460b      	mov	r3, r1
 800d416:	607a      	str	r2, [r7, #4]
 800d418:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  if ((instance->instance_oid.len == 2) && (instance->instance_oid.id[1] == 0)) {
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	791b      	ldrb	r3, [r3, #4]
 800d41e:	2b02      	cmp	r3, #2
 800d420:	d142      	bne.n	800d4a8 <snmp_scalar_array_get_instance+0x9c>
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	68db      	ldr	r3, [r3, #12]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d13e      	bne.n	800d4a8 <snmp_scalar_array_get_instance+0x9c>
    const struct snmp_scalar_array_node *array_node = (const struct snmp_scalar_array_node *)(const void *)instance->node;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	617b      	str	r3, [r7, #20]
    const struct snmp_scalar_array_node_def *array_node_def = array_node->array_nodes;
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	695b      	ldr	r3, [r3, #20]
 800d434:	61fb      	str	r3, [r7, #28]
    u32_t i = 0;
 800d436:	2300      	movs	r3, #0
 800d438:	61bb      	str	r3, [r7, #24]

    while (i < array_node->array_node_count) {
 800d43a:	e00b      	b.n	800d454 <snmp_scalar_array_get_instance+0x48>
      if (array_node_def->oid == instance->instance_oid.id[0]) {
 800d43c:	69fb      	ldr	r3, [r7, #28]
 800d43e:	681a      	ldr	r2, [r3, #0]
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	689b      	ldr	r3, [r3, #8]
 800d444:	429a      	cmp	r2, r3
 800d446:	d00c      	beq.n	800d462 <snmp_scalar_array_get_instance+0x56>
        break;
      }

      array_node_def++;
 800d448:	69fb      	ldr	r3, [r7, #28]
 800d44a:	3308      	adds	r3, #8
 800d44c:	61fb      	str	r3, [r7, #28]
      i++;
 800d44e:	69bb      	ldr	r3, [r7, #24]
 800d450:	3301      	adds	r3, #1
 800d452:	61bb      	str	r3, [r7, #24]
    while (i < array_node->array_node_count) {
 800d454:	697b      	ldr	r3, [r7, #20]
 800d456:	8a1b      	ldrh	r3, [r3, #16]
 800d458:	461a      	mov	r2, r3
 800d45a:	69bb      	ldr	r3, [r7, #24]
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d3ed      	bcc.n	800d43c <snmp_scalar_array_get_instance+0x30>
 800d460:	e000      	b.n	800d464 <snmp_scalar_array_get_instance+0x58>
        break;
 800d462:	bf00      	nop
    }

    if (i < array_node->array_node_count) {
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	8a1b      	ldrh	r3, [r3, #16]
 800d468:	461a      	mov	r2, r3
 800d46a:	69bb      	ldr	r3, [r7, #24]
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d21b      	bcs.n	800d4a8 <snmp_scalar_array_get_instance+0x9c>
      instance->access              = array_node_def->access;
 800d470:	69fb      	ldr	r3, [r7, #28]
 800d472:	795a      	ldrb	r2, [r3, #5]
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
      instance->asn1_type           = array_node_def->asn1_type;
 800d47a:	69fb      	ldr	r3, [r7, #28]
 800d47c:	791a      	ldrb	r2, [r3, #4]
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
      instance->get_value           = snmp_scalar_array_get_value;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	4a0c      	ldr	r2, [pc, #48]	; (800d4b8 <snmp_scalar_array_get_instance+0xac>)
 800d488:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
      instance->set_test            = snmp_scalar_array_set_test;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	4a0b      	ldr	r2, [pc, #44]	; (800d4bc <snmp_scalar_array_get_instance+0xb0>)
 800d490:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
      instance->set_value           = snmp_scalar_array_set_value;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	4a0a      	ldr	r2, [pc, #40]	; (800d4c0 <snmp_scalar_array_get_instance+0xb4>)
 800d498:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
      instance->reference.const_ptr = array_node_def;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	69fa      	ldr	r2, [r7, #28]
 800d4a0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

      return SNMP_ERR_NOERROR;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	e000      	b.n	800d4aa <snmp_scalar_array_get_instance+0x9e>
    }
  }

  return SNMP_ERR_NOSUCHINSTANCE;
 800d4a8:	23f1      	movs	r3, #241	; 0xf1
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3724      	adds	r7, #36	; 0x24
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b4:	4770      	bx	lr
 800d4b6:	bf00      	nop
 800d4b8:	0800d635 	.word	0x0800d635
 800d4bc:	0800d675 	.word	0x0800d675
 800d4c0:	0800d6b7 	.word	0x0800d6b7

0800d4c4 <snmp_scalar_array_get_next_instance>:

snmp_err_t
snmp_scalar_array_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance *instance)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b08b      	sub	sp, #44	; 0x2c
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	60f8      	str	r0, [r7, #12]
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	607a      	str	r2, [r7, #4]
 800d4d0:	72fb      	strb	r3, [r7, #11]
  const struct snmp_scalar_array_node *array_node = (const struct snmp_scalar_array_node *)(const void *)instance->node;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	613b      	str	r3, [r7, #16]
  const struct snmp_scalar_array_node_def *array_node_def = array_node->array_nodes;
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	695b      	ldr	r3, [r3, #20]
 800d4dc:	627b      	str	r3, [r7, #36]	; 0x24
  const struct snmp_scalar_array_node_def *result = NULL;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	623b      	str	r3, [r7, #32]

  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  if ((instance->instance_oid.len == 0) && (array_node->array_node_count > 0)) {
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	791b      	ldrb	r3, [r3, #4]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d121      	bne.n	800d52e <snmp_scalar_array_get_next_instance+0x6a>
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	8a1b      	ldrh	r3, [r3, #16]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d01d      	beq.n	800d52e <snmp_scalar_array_get_next_instance+0x6a>
    /* return node with lowest OID */
    u16_t i = 0;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	83fb      	strh	r3, [r7, #30]

    result = array_node_def;
 800d4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f8:	623b      	str	r3, [r7, #32]
    array_node_def++;
 800d4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4fc:	3308      	adds	r3, #8
 800d4fe:	627b      	str	r3, [r7, #36]	; 0x24

    for (i = 1; i < array_node->array_node_count; i++) {
 800d500:	2301      	movs	r3, #1
 800d502:	83fb      	strh	r3, [r7, #30]
 800d504:	e00d      	b.n	800d522 <snmp_scalar_array_get_next_instance+0x5e>
      if (array_node_def->oid < result->oid) {
 800d506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d508:	681a      	ldr	r2, [r3, #0]
 800d50a:	6a3b      	ldr	r3, [r7, #32]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	429a      	cmp	r2, r3
 800d510:	d201      	bcs.n	800d516 <snmp_scalar_array_get_next_instance+0x52>
        result = array_node_def;
 800d512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d514:	623b      	str	r3, [r7, #32]
      }
      array_node_def++;
 800d516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d518:	3308      	adds	r3, #8
 800d51a:	627b      	str	r3, [r7, #36]	; 0x24
    for (i = 1; i < array_node->array_node_count; i++) {
 800d51c:	8bfb      	ldrh	r3, [r7, #30]
 800d51e:	3301      	adds	r3, #1
 800d520:	83fb      	strh	r3, [r7, #30]
 800d522:	693b      	ldr	r3, [r7, #16]
 800d524:	8a1b      	ldrh	r3, [r3, #16]
 800d526:	8bfa      	ldrh	r2, [r7, #30]
 800d528:	429a      	cmp	r2, r3
 800d52a:	d3ec      	bcc.n	800d506 <snmp_scalar_array_get_next_instance+0x42>
  if ((instance->instance_oid.len == 0) && (array_node->array_node_count > 0)) {
 800d52c:	e04b      	b.n	800d5c6 <snmp_scalar_array_get_next_instance+0x102>
    }
  } else if (instance->instance_oid.len >= 1) {
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	791b      	ldrb	r3, [r3, #4]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d047      	beq.n	800d5c6 <snmp_scalar_array_get_next_instance+0x102>
    if (instance->instance_oid.len == 1) {
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	791b      	ldrb	r3, [r3, #4]
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	d116      	bne.n	800d56c <snmp_scalar_array_get_next_instance+0xa8>
      /* if we have the requested OID we return its instance, otherwise we search for the next available */
      u16_t i = 0;
 800d53e:	2300      	movs	r3, #0
 800d540:	83bb      	strh	r3, [r7, #28]
      while (i < array_node->array_node_count) {
 800d542:	e00e      	b.n	800d562 <snmp_scalar_array_get_next_instance+0x9e>
        if (array_node_def->oid == instance->instance_oid.id[0]) {
 800d544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d546:	681a      	ldr	r2, [r3, #0]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	689b      	ldr	r3, [r3, #8]
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d102      	bne.n	800d556 <snmp_scalar_array_get_next_instance+0x92>
          result = array_node_def;
 800d550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d552:	623b      	str	r3, [r7, #32]
          break;
 800d554:	e00a      	b.n	800d56c <snmp_scalar_array_get_next_instance+0xa8>
        }

        array_node_def++;
 800d556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d558:	3308      	adds	r3, #8
 800d55a:	627b      	str	r3, [r7, #36]	; 0x24
        i++;
 800d55c:	8bbb      	ldrh	r3, [r7, #28]
 800d55e:	3301      	adds	r3, #1
 800d560:	83bb      	strh	r3, [r7, #28]
      while (i < array_node->array_node_count) {
 800d562:	693b      	ldr	r3, [r7, #16]
 800d564:	8a1b      	ldrh	r3, [r3, #16]
 800d566:	8bba      	ldrh	r2, [r7, #28]
 800d568:	429a      	cmp	r2, r3
 800d56a:	d3eb      	bcc.n	800d544 <snmp_scalar_array_get_next_instance+0x80>
      }
    }
    if (result == NULL) {
 800d56c:	6a3b      	ldr	r3, [r7, #32]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d129      	bne.n	800d5c6 <snmp_scalar_array_get_next_instance+0x102>
      u32_t oid_dist = 0xFFFFFFFFUL;
 800d572:	f04f 33ff 	mov.w	r3, #4294967295
 800d576:	61bb      	str	r3, [r7, #24]
      u16_t i        = 0;
 800d578:	2300      	movs	r3, #0
 800d57a:	82fb      	strh	r3, [r7, #22]
      array_node_def = array_node->array_nodes; /* may be already at the end when if case before was executed without result -> reinitialize to start */
 800d57c:	693b      	ldr	r3, [r7, #16]
 800d57e:	695b      	ldr	r3, [r3, #20]
 800d580:	627b      	str	r3, [r7, #36]	; 0x24
      while (i < array_node->array_node_count) {
 800d582:	e01b      	b.n	800d5bc <snmp_scalar_array_get_next_instance+0xf8>
        if ((array_node_def->oid > instance->instance_oid.id[0]) &&
 800d584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d586:	681a      	ldr	r2, [r3, #0]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	689b      	ldr	r3, [r3, #8]
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d90f      	bls.n	800d5b0 <snmp_scalar_array_get_next_instance+0xec>
            ((u32_t)(array_node_def->oid - instance->instance_oid.id[0]) < oid_dist)) {
 800d590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d592:	681a      	ldr	r2, [r3, #0]
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	689b      	ldr	r3, [r3, #8]
 800d598:	1ad3      	subs	r3, r2, r3
        if ((array_node_def->oid > instance->instance_oid.id[0]) &&
 800d59a:	69ba      	ldr	r2, [r7, #24]
 800d59c:	429a      	cmp	r2, r3
 800d59e:	d907      	bls.n	800d5b0 <snmp_scalar_array_get_next_instance+0xec>
          result   = array_node_def;
 800d5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a2:	623b      	str	r3, [r7, #32]
          oid_dist = array_node_def->oid - instance->instance_oid.id[0];
 800d5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a6:	681a      	ldr	r2, [r3, #0]
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	689b      	ldr	r3, [r3, #8]
 800d5ac:	1ad3      	subs	r3, r2, r3
 800d5ae:	61bb      	str	r3, [r7, #24]
        }

        array_node_def++;
 800d5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b2:	3308      	adds	r3, #8
 800d5b4:	627b      	str	r3, [r7, #36]	; 0x24
        i++;
 800d5b6:	8afb      	ldrh	r3, [r7, #22]
 800d5b8:	3301      	adds	r3, #1
 800d5ba:	82fb      	strh	r3, [r7, #22]
      while (i < array_node->array_node_count) {
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	8a1b      	ldrh	r3, [r3, #16]
 800d5c0:	8afa      	ldrh	r2, [r7, #22]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	d3de      	bcc.n	800d584 <snmp_scalar_array_get_next_instance+0xc0>
      }
    }
  }

  if (result == NULL) {
 800d5c6:	6a3b      	ldr	r3, [r7, #32]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d101      	bne.n	800d5d0 <snmp_scalar_array_get_next_instance+0x10c>
    /* nothing to return */
    return SNMP_ERR_NOSUCHINSTANCE;
 800d5cc:	23f1      	movs	r3, #241	; 0xf1
 800d5ce:	e024      	b.n	800d61a <snmp_scalar_array_get_next_instance+0x156>
  }

  instance->instance_oid.len   = 2;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2202      	movs	r2, #2
 800d5d4:	711a      	strb	r2, [r3, #4]
  instance->instance_oid.id[0] = result->oid;
 800d5d6:	6a3b      	ldr	r3, [r7, #32]
 800d5d8:	681a      	ldr	r2, [r3, #0]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	609a      	str	r2, [r3, #8]
  instance->instance_oid.id[1] = 0;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	60da      	str	r2, [r3, #12]

  instance->access              = result->access;
 800d5e4:	6a3b      	ldr	r3, [r7, #32]
 800d5e6:	795a      	ldrb	r2, [r3, #5]
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
  instance->asn1_type           = result->asn1_type;
 800d5ee:	6a3b      	ldr	r3, [r7, #32]
 800d5f0:	791a      	ldrb	r2, [r3, #4]
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
  instance->get_value           = snmp_scalar_array_get_value;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	4a0b      	ldr	r2, [pc, #44]	; (800d628 <snmp_scalar_array_get_next_instance+0x164>)
 800d5fc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  instance->set_test            = snmp_scalar_array_set_test;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	4a0a      	ldr	r2, [pc, #40]	; (800d62c <snmp_scalar_array_get_next_instance+0x168>)
 800d604:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  instance->set_value           = snmp_scalar_array_set_value;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	4a09      	ldr	r2, [pc, #36]	; (800d630 <snmp_scalar_array_get_next_instance+0x16c>)
 800d60c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  instance->reference.const_ptr = result;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6a3a      	ldr	r2, [r7, #32]
 800d614:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

  return SNMP_ERR_NOERROR;
 800d618:	2300      	movs	r3, #0
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	372c      	adds	r7, #44	; 0x2c
 800d61e:	46bd      	mov	sp, r7
 800d620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d624:	4770      	bx	lr
 800d626:	bf00      	nop
 800d628:	0800d635 	.word	0x0800d635
 800d62c:	0800d675 	.word	0x0800d675
 800d630:	0800d6b7 	.word	0x0800d6b7

0800d634 <snmp_scalar_array_get_value>:

static s16_t
snmp_scalar_array_get_value(struct snmp_node_instance *instance, void *value)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b086      	sub	sp, #24
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
 800d63c:	6039      	str	r1, [r7, #0]
  s16_t result = -1;
 800d63e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d642:	82fb      	strh	r3, [r7, #22]
  const struct snmp_scalar_array_node *array_node = (const struct snmp_scalar_array_node *)(const void *)instance->node;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	613b      	str	r3, [r7, #16]
  const struct snmp_scalar_array_node_def *array_node_def = (const struct snmp_scalar_array_node_def *)instance->reference.const_ptr;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d650:	60fb      	str	r3, [r7, #12]

  if (array_node->get_value != NULL) {
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	699b      	ldr	r3, [r3, #24]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d006      	beq.n	800d668 <snmp_scalar_array_get_value+0x34>
    result = array_node->get_value(array_node_def, value);
 800d65a:	693b      	ldr	r3, [r7, #16]
 800d65c:	699b      	ldr	r3, [r3, #24]
 800d65e:	6839      	ldr	r1, [r7, #0]
 800d660:	68f8      	ldr	r0, [r7, #12]
 800d662:	4798      	blx	r3
 800d664:	4603      	mov	r3, r0
 800d666:	82fb      	strh	r3, [r7, #22]
  }
  return result;
 800d668:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3718      	adds	r7, #24
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}

0800d674 <snmp_scalar_array_set_test>:

static snmp_err_t
snmp_scalar_array_set_test(struct snmp_node_instance *instance, u16_t value_len, void *value)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b088      	sub	sp, #32
 800d678:	af00      	add	r7, sp, #0
 800d67a:	60f8      	str	r0, [r7, #12]
 800d67c:	460b      	mov	r3, r1
 800d67e:	607a      	str	r2, [r7, #4]
 800d680:	817b      	strh	r3, [r7, #10]
  snmp_err_t result = SNMP_ERR_NOTWRITABLE;
 800d682:	2311      	movs	r3, #17
 800d684:	77fb      	strb	r3, [r7, #31]
  const struct snmp_scalar_array_node *array_node = (const struct snmp_scalar_array_node *)(const void *)instance->node;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	61bb      	str	r3, [r7, #24]
  const struct snmp_scalar_array_node_def *array_node_def = (const struct snmp_scalar_array_node_def *)instance->reference.const_ptr;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d692:	617b      	str	r3, [r7, #20]

  if (array_node->set_test != NULL) {
 800d694:	69bb      	ldr	r3, [r7, #24]
 800d696:	69db      	ldr	r3, [r3, #28]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d007      	beq.n	800d6ac <snmp_scalar_array_set_test+0x38>
    result = array_node->set_test(array_node_def, value_len, value);
 800d69c:	69bb      	ldr	r3, [r7, #24]
 800d69e:	69db      	ldr	r3, [r3, #28]
 800d6a0:	8979      	ldrh	r1, [r7, #10]
 800d6a2:	687a      	ldr	r2, [r7, #4]
 800d6a4:	6978      	ldr	r0, [r7, #20]
 800d6a6:	4798      	blx	r3
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	77fb      	strb	r3, [r7, #31]
  }
  return result;
 800d6ac:	7ffb      	ldrb	r3, [r7, #31]
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3720      	adds	r7, #32
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}

0800d6b6 <snmp_scalar_array_set_value>:

static snmp_err_t
snmp_scalar_array_set_value(struct snmp_node_instance *instance, u16_t value_len, void *value)
{
 800d6b6:	b580      	push	{r7, lr}
 800d6b8:	b088      	sub	sp, #32
 800d6ba:	af00      	add	r7, sp, #0
 800d6bc:	60f8      	str	r0, [r7, #12]
 800d6be:	460b      	mov	r3, r1
 800d6c0:	607a      	str	r2, [r7, #4]
 800d6c2:	817b      	strh	r3, [r7, #10]
  snmp_err_t result = SNMP_ERR_NOTWRITABLE;
 800d6c4:	2311      	movs	r3, #17
 800d6c6:	77fb      	strb	r3, [r7, #31]
  const struct snmp_scalar_array_node *array_node = (const struct snmp_scalar_array_node *)(const void *)instance->node;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	61bb      	str	r3, [r7, #24]
  const struct snmp_scalar_array_node_def *array_node_def = (const struct snmp_scalar_array_node_def *)instance->reference.const_ptr;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800d6d4:	617b      	str	r3, [r7, #20]

  if (array_node->set_value != NULL) {
 800d6d6:	69bb      	ldr	r3, [r7, #24]
 800d6d8:	6a1b      	ldr	r3, [r3, #32]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d007      	beq.n	800d6ee <snmp_scalar_array_set_value+0x38>
    result = array_node->set_value(array_node_def, value_len, value);
 800d6de:	69bb      	ldr	r3, [r7, #24]
 800d6e0:	6a1b      	ldr	r3, [r3, #32]
 800d6e2:	8979      	ldrh	r1, [r7, #10]
 800d6e4:	687a      	ldr	r2, [r7, #4]
 800d6e6:	6978      	ldr	r0, [r7, #20]
 800d6e8:	4798      	blx	r3
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	77fb      	strb	r3, [r7, #31]
  }
  return result;
 800d6ee:	7ffb      	ldrb	r3, [r7, #31]
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3720      	adds	r7, #32
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}

0800d6f8 <snmp_table_get_instance>:
#include "lwip/apps/snmp_core.h"
#include "lwip/apps/snmp_table.h"
#include <string.h>

snmp_err_t snmp_table_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance *instance)
{
 800d6f8:	b590      	push	{r4, r7, lr}
 800d6fa:	b089      	sub	sp, #36	; 0x24
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	60f8      	str	r0, [r7, #12]
 800d700:	460b      	mov	r3, r1
 800d702:	607a      	str	r2, [r7, #4]
 800d704:	72fb      	strb	r3, [r7, #11]
  snmp_err_t ret = SNMP_ERR_NOSUCHINSTANCE;
 800d706:	23f1      	movs	r3, #241	; 0xf1
 800d708:	77fb      	strb	r3, [r7, #31]
  const struct snmp_table_node *table_node = (const struct snmp_table_node *)(const void *)instance->node;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	613b      	str	r3, [r7, #16]
  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* check min. length (fixed row entry definition, column, row instance oid with at least one entry */
  /* fixed row entry always has oid 1 */
  if ((instance->instance_oid.len >= 3) && (instance->instance_oid.id[0] == 1)) {
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	791b      	ldrb	r3, [r3, #4]
 800d714:	2b02      	cmp	r3, #2
 800d716:	d947      	bls.n	800d7a8 <snmp_table_get_instance+0xb0>
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	689b      	ldr	r3, [r3, #8]
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	d143      	bne.n	800d7a8 <snmp_table_get_instance+0xb0>
    /* search column */
    const struct snmp_table_col_def *col_def = table_node->columns;
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	695b      	ldr	r3, [r3, #20]
 800d724:	61bb      	str	r3, [r7, #24]
    u16_t i = table_node->column_count;
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	8a1b      	ldrh	r3, [r3, #16]
 800d72a:	82fb      	strh	r3, [r7, #22]
    while (i > 0) {
 800d72c:	e00b      	b.n	800d746 <snmp_table_get_instance+0x4e>
      if (col_def->index == instance->instance_oid.id[1]) {
 800d72e:	69bb      	ldr	r3, [r7, #24]
 800d730:	681a      	ldr	r2, [r3, #0]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	68db      	ldr	r3, [r3, #12]
 800d736:	429a      	cmp	r2, r3
 800d738:	d009      	beq.n	800d74e <snmp_table_get_instance+0x56>
        break;
      }

      col_def++;
 800d73a:	69bb      	ldr	r3, [r7, #24]
 800d73c:	3308      	adds	r3, #8
 800d73e:	61bb      	str	r3, [r7, #24]
      i--;
 800d740:	8afb      	ldrh	r3, [r7, #22]
 800d742:	3b01      	subs	r3, #1
 800d744:	82fb      	strh	r3, [r7, #22]
    while (i > 0) {
 800d746:	8afb      	ldrh	r3, [r7, #22]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d1f0      	bne.n	800d72e <snmp_table_get_instance+0x36>
 800d74c:	e000      	b.n	800d750 <snmp_table_get_instance+0x58>
        break;
 800d74e:	bf00      	nop
    }

    if (i > 0) {
 800d750:	8afb      	ldrh	r3, [r7, #22]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d028      	beq.n	800d7a8 <snmp_table_get_instance+0xb0>
      /* everything may be overwritten by get_cell_instance_method() in order to implement special handling for single columns/cells */
      instance->asn1_type = col_def->asn1_type;
 800d756:	69bb      	ldr	r3, [r7, #24]
 800d758:	791a      	ldrb	r2, [r3, #4]
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
      instance->access    = col_def->access;
 800d760:	69bb      	ldr	r3, [r7, #24]
 800d762:	795a      	ldrb	r2, [r3, #5]
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
      instance->get_value = table_node->get_value;
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	6a1a      	ldr	r2, [r3, #32]
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
      instance->set_test  = table_node->set_test;
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
      instance->set_value = table_node->set_value;
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

      ret = table_node->get_cell_instance(
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	699c      	ldr	r4, [r3, #24]
              &(instance->instance_oid.id[1]),
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f103 000c 	add.w	r0, r3, #12
              &(instance->instance_oid.id[2]),
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f103 0110 	add.w	r1, r3, #16
              instance->instance_oid.len - 2,
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	791b      	ldrb	r3, [r3, #4]
      ret = table_node->get_cell_instance(
 800d79c:	3b02      	subs	r3, #2
 800d79e:	b2da      	uxtb	r2, r3
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	47a0      	blx	r4
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	77fb      	strb	r3, [r7, #31]
              instance);
    }
  }

  return ret;
 800d7a8:	7ffb      	ldrb	r3, [r7, #31]
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3724      	adds	r7, #36	; 0x24
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd90      	pop	{r4, r7, pc}

0800d7b2 <snmp_table_get_next_instance>:

snmp_err_t snmp_table_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance *instance)
{
 800d7b2:	b580      	push	{r7, lr}
 800d7b4:	b0be      	sub	sp, #248	; 0xf8
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	60f8      	str	r0, [r7, #12]
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	607a      	str	r2, [r7, #4]
 800d7be:	72fb      	strb	r3, [r7, #11]
  const struct snmp_table_node *table_node = (const struct snmp_table_node *)(const void *)instance->node;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  const struct snmp_table_col_def *col_def;
  struct snmp_obj_id row_oid;
  u32_t column = 0;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* check that first part of id is 0 or 1, referencing fixed row entry */
  if ((instance->instance_oid.len > 0) && (instance->instance_oid.id[0] > 1)) {
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	791b      	ldrb	r3, [r3, #4]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d005      	beq.n	800d7e2 <snmp_table_get_next_instance+0x30>
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	689b      	ldr	r3, [r3, #8]
 800d7da:	2b01      	cmp	r3, #1
 800d7dc:	d901      	bls.n	800d7e2 <snmp_table_get_next_instance+0x30>
    return SNMP_ERR_NOSUCHINSTANCE;
 800d7de:	23f1      	movs	r3, #241	; 0xf1
 800d7e0:	e0b2      	b.n	800d948 <snmp_table_get_next_instance+0x196>
  }
  if (instance->instance_oid.len > 1) {
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	791b      	ldrb	r3, [r3, #4]
 800d7e6:	2b01      	cmp	r3, #1
 800d7e8:	d903      	bls.n	800d7f2 <snmp_table_get_next_instance+0x40>
    column = instance->instance_oid.id[1];
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	68db      	ldr	r3, [r3, #12]
 800d7ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  }
  if (instance->instance_oid.len > 2) {
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	791b      	ldrb	r3, [r3, #4]
 800d7f6:	2b02      	cmp	r3, #2
 800d7f8:	d90c      	bls.n	800d814 <snmp_table_get_next_instance+0x62>
    snmp_oid_assign(&row_oid, &(instance->instance_oid.id[2]), instance->instance_oid.len - 2);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	f103 0110 	add.w	r1, r3, #16
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	791b      	ldrb	r3, [r3, #4]
 800d804:	3b02      	subs	r3, #2
 800d806:	b2da      	uxtb	r2, r3
 800d808:	f107 0314 	add.w	r3, r7, #20
 800d80c:	4618      	mov	r0, r3
 800d80e:	f7fa fc97 	bl	8008140 <snmp_oid_assign>
 800d812:	e001      	b.n	800d818 <snmp_table_get_next_instance+0x66>
  } else {
    row_oid.len = 0;
 800d814:	2300      	movs	r3, #0
 800d816:	753b      	strb	r3, [r7, #20]
  }

  instance->get_value    = table_node->get_value;
 800d818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d81c:	6a1a      	ldr	r2, [r3, #32]
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  instance->set_test     = table_node->set_test;
 800d824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d828:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  instance->set_value    = table_node->set_value;
 800d830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d834:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /* resolve column and value */
  do {
    u16_t i;
    const struct snmp_table_col_def *next_col_def = NULL;
 800d83c:	2300      	movs	r3, #0
 800d83e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    col_def = table_node->columns;
 800d842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d846:	695b      	ldr	r3, [r3, #20]
 800d848:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    for (i = 0; i < table_node->column_count; i++) {
 800d84c:	2300      	movs	r3, #0
 800d84e:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 800d852:	e02c      	b.n	800d8ae <snmp_table_get_next_instance+0xfc>
      if (col_def->index == column) {
 800d854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800d85e:	429a      	cmp	r2, r3
 800d860:	d104      	bne.n	800d86c <snmp_table_get_next_instance+0xba>
        next_col_def = col_def;
 800d862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d866:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
        break;
 800d86a:	e027      	b.n	800d8bc <snmp_table_get_next_instance+0x10a>
      } else if ((col_def->index > column) && ((next_col_def == NULL) || (col_def->index < next_col_def->index))) {
 800d86c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800d876:	429a      	cmp	r2, r3
 800d878:	d20f      	bcs.n	800d89a <snmp_table_get_next_instance+0xe8>
 800d87a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d007      	beq.n	800d892 <snmp_table_get_next_instance+0xe0>
 800d882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d886:	681a      	ldr	r2, [r3, #0]
 800d888:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	429a      	cmp	r2, r3
 800d890:	d203      	bcs.n	800d89a <snmp_table_get_next_instance+0xe8>
        next_col_def = col_def;
 800d892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d896:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      }
      col_def++;
 800d89a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d89e:	3308      	adds	r3, #8
 800d8a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    for (i = 0; i < table_node->column_count; i++) {
 800d8a4:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
 800d8ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8b2:	8a1b      	ldrh	r3, [r3, #16]
 800d8b4:	f8b7 20ee 	ldrh.w	r2, [r7, #238]	; 0xee
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	d3cb      	bcc.n	800d854 <snmp_table_get_next_instance+0xa2>
    }

    if (next_col_def == NULL) {
 800d8bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d101      	bne.n	800d8c8 <snmp_table_get_next_instance+0x116>
      /* no further column found */
      return SNMP_ERR_NOSUCHINSTANCE;
 800d8c4:	23f1      	movs	r3, #241	; 0xf1
 800d8c6:	e03f      	b.n	800d948 <snmp_table_get_next_instance+0x196>
    }

    instance->asn1_type          = next_col_def->asn1_type;
 800d8c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d8cc:	791a      	ldrb	r2, [r3, #4]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
    instance->access             = next_col_def->access;
 800d8d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d8d8:	795a      	ldrb	r2, [r3, #5]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1

    result = table_node->get_next_cell_instance(
 800d8e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8e4:	69db      	ldr	r3, [r3, #28]
 800d8e6:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800d8ea:	f107 0114 	add.w	r1, r7, #20
 800d8ee:	687a      	ldr	r2, [r7, #4]
 800d8f0:	4798      	blx	r3
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
               &next_col_def->index,
               &row_oid,
               instance);

    if (result == SNMP_ERR_NOERROR) {
 800d8f8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d11a      	bne.n	800d936 <snmp_table_get_next_instance+0x184>
      col_def = next_col_def;
 800d900:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d904:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      break;
 800d908:	bf00      	nop
    row_oid.len = 0; /* reset row_oid because we switch to next column and start with the first entry there */
    column = next_col_def->index + 1;
  } while (1);

  /* build resulting oid */
  instance->instance_oid.len   = 2;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2202      	movs	r2, #2
 800d90e:	711a      	strb	r2, [r3, #4]
  instance->instance_oid.id[0] = 1;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2201      	movs	r2, #1
 800d914:	609a      	str	r2, [r3, #8]
  instance->instance_oid.id[1] = col_def->index;
 800d916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d91a:	681a      	ldr	r2, [r3, #0]
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	60da      	str	r2, [r3, #12]
  snmp_oid_append(&instance->instance_oid, row_oid.id, row_oid.len);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	1d18      	adds	r0, r3, #4
 800d924:	7d3a      	ldrb	r2, [r7, #20]
 800d926:	f107 0314 	add.w	r3, r7, #20
 800d92a:	3304      	adds	r3, #4
 800d92c:	4619      	mov	r1, r3
 800d92e:	f7fa fc31 	bl	8008194 <snmp_oid_append>

  return SNMP_ERR_NOERROR;
 800d932:	2300      	movs	r3, #0
 800d934:	e008      	b.n	800d948 <snmp_table_get_next_instance+0x196>
    row_oid.len = 0; /* reset row_oid because we switch to next column and start with the first entry there */
 800d936:	2300      	movs	r3, #0
 800d938:	753b      	strb	r3, [r7, #20]
    column = next_col_def->index + 1;
 800d93a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	3301      	adds	r3, #1
 800d942:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  do {
 800d946:	e779      	b.n	800d83c <snmp_table_get_next_instance+0x8a>
}
 800d948:	4618      	mov	r0, r3
 800d94a:	37f8      	adds	r7, #248	; 0xf8
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <snmp_table_simple_get_instance>:


snmp_err_t snmp_table_simple_get_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance *instance)
{
 800d950:	b5b0      	push	{r4, r5, r7, lr}
 800d952:	b08a      	sub	sp, #40	; 0x28
 800d954:	af02      	add	r7, sp, #8
 800d956:	60f8      	str	r0, [r7, #12]
 800d958:	460b      	mov	r3, r1
 800d95a:	607a      	str	r2, [r7, #4]
 800d95c:	72fb      	strb	r3, [r7, #11]
  snmp_err_t ret = SNMP_ERR_NOSUCHINSTANCE;
 800d95e:	23f1      	movs	r3, #241	; 0xf1
 800d960:	77fb      	strb	r3, [r7, #31]
  const struct snmp_table_simple_node *table_node = (const struct snmp_table_simple_node *)(const void *)instance->node;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	613b      	str	r3, [r7, #16]
  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* check min. length (fixed row entry definition, column, row instance oid with at least one entry */
  /* fixed row entry always has oid 1 */
  if ((instance->instance_oid.len >= 3) && (instance->instance_oid.id[0] == 1)) {
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	791b      	ldrb	r3, [r3, #4]
 800d96c:	2b02      	cmp	r3, #2
 800d96e:	d969      	bls.n	800da44 <snmp_table_simple_get_instance+0xf4>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	689b      	ldr	r3, [r3, #8]
 800d974:	2b01      	cmp	r3, #1
 800d976:	d165      	bne.n	800da44 <snmp_table_simple_get_instance+0xf4>
    ret = table_node->get_cell_value(
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	699c      	ldr	r4, [r3, #24]
            &(instance->instance_oid.id[1]),
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	f103 000c 	add.w	r0, r3, #12
            &(instance->instance_oid.id[2]),
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f103 0110 	add.w	r1, r3, #16
            instance->instance_oid.len - 2,
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	791b      	ldrb	r3, [r3, #4]
    ret = table_node->get_cell_value(
 800d98c:	3b02      	subs	r3, #2
 800d98e:	b2da      	uxtb	r2, r3
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f103 05e8 	add.w	r5, r3, #232	; 0xe8
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	33f0      	adds	r3, #240	; 0xf0
 800d99a:	9300      	str	r3, [sp, #0]
 800d99c:	462b      	mov	r3, r5
 800d99e:	47a0      	blx	r4
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	77fb      	strb	r3, [r7, #31]
            &instance->reference,
            &instance->reference_len);

    if (ret == SNMP_ERR_NOERROR) {
 800d9a4:	7ffb      	ldrb	r3, [r7, #31]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d14c      	bne.n	800da44 <snmp_table_simple_get_instance+0xf4>
      /* search column */
      const struct snmp_table_simple_col_def *col_def = table_node->columns;
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	695b      	ldr	r3, [r3, #20]
 800d9ae:	61bb      	str	r3, [r7, #24]
      u32_t i = table_node->column_count;
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	8a1b      	ldrh	r3, [r3, #16]
 800d9b4:	617b      	str	r3, [r7, #20]
      while (i > 0) {
 800d9b6:	e00b      	b.n	800d9d0 <snmp_table_simple_get_instance+0x80>
        if (col_def->index == instance->instance_oid.id[1]) {
 800d9b8:	69bb      	ldr	r3, [r7, #24]
 800d9ba:	681a      	ldr	r2, [r3, #0]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	68db      	ldr	r3, [r3, #12]
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d009      	beq.n	800d9d8 <snmp_table_simple_get_instance+0x88>
          break;
        }

        col_def++;
 800d9c4:	69bb      	ldr	r3, [r7, #24]
 800d9c6:	3308      	adds	r3, #8
 800d9c8:	61bb      	str	r3, [r7, #24]
        i--;
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	3b01      	subs	r3, #1
 800d9ce:	617b      	str	r3, [r7, #20]
      while (i > 0) {
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d1f0      	bne.n	800d9b8 <snmp_table_simple_get_instance+0x68>
 800d9d6:	e000      	b.n	800d9da <snmp_table_simple_get_instance+0x8a>
          break;
 800d9d8:	bf00      	nop
      }

      if (i > 0) {
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d02f      	beq.n	800da40 <snmp_table_simple_get_instance+0xf0>
        instance->asn1_type = col_def->asn1_type;
 800d9e0:	69bb      	ldr	r3, [r7, #24]
 800d9e2:	791a      	ldrb	r2, [r3, #4]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
        instance->access    = SNMP_NODE_INSTANCE_READ_ONLY;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
        instance->set_test  = NULL;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
        instance->set_value = NULL;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

        switch (col_def->data_type) {
 800da02:	69bb      	ldr	r3, [r7, #24]
 800da04:	795b      	ldrb	r3, [r3, #5]
 800da06:	2b03      	cmp	r3, #3
 800da08:	dc15      	bgt.n	800da36 <snmp_table_simple_get_instance+0xe6>
 800da0a:	2b02      	cmp	r3, #2
 800da0c:	da0e      	bge.n	800da2c <snmp_table_simple_get_instance+0xdc>
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d002      	beq.n	800da18 <snmp_table_simple_get_instance+0xc8>
 800da12:	2b01      	cmp	r3, #1
 800da14:	d005      	beq.n	800da22 <snmp_table_simple_get_instance+0xd2>
 800da16:	e00e      	b.n	800da36 <snmp_table_simple_get_instance+0xe6>
          case SNMP_VARIANT_VALUE_TYPE_U32:
            instance->get_value = snmp_table_extract_value_from_u32ref;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	4a0d      	ldr	r2, [pc, #52]	; (800da50 <snmp_table_simple_get_instance+0x100>)
 800da1c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
            break;
 800da20:	e00b      	b.n	800da3a <snmp_table_simple_get_instance+0xea>
          case SNMP_VARIANT_VALUE_TYPE_S32:
            instance->get_value = snmp_table_extract_value_from_s32ref;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	4a0b      	ldr	r2, [pc, #44]	; (800da54 <snmp_table_simple_get_instance+0x104>)
 800da26:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
            break;
 800da2a:	e006      	b.n	800da3a <snmp_table_simple_get_instance+0xea>
          case SNMP_VARIANT_VALUE_TYPE_PTR: /* fall through */
          case SNMP_VARIANT_VALUE_TYPE_CONST_PTR:
            instance->get_value = snmp_table_extract_value_from_refconstptr;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	4a0a      	ldr	r2, [pc, #40]	; (800da58 <snmp_table_simple_get_instance+0x108>)
 800da30:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
            break;
 800da34:	e001      	b.n	800da3a <snmp_table_simple_get_instance+0xea>
          default:
            LWIP_DEBUGF(SNMP_DEBUG, ("snmp_table_simple_get_instance(): unknown column data_type: %d\n", col_def->data_type));
            return SNMP_ERR_GENERROR;
 800da36:	2305      	movs	r3, #5
 800da38:	e005      	b.n	800da46 <snmp_table_simple_get_instance+0xf6>
        }

        ret = SNMP_ERR_NOERROR;
 800da3a:	2300      	movs	r3, #0
 800da3c:	77fb      	strb	r3, [r7, #31]
 800da3e:	e001      	b.n	800da44 <snmp_table_simple_get_instance+0xf4>
      } else {
        ret = SNMP_ERR_NOSUCHINSTANCE;
 800da40:	23f1      	movs	r3, #241	; 0xf1
 800da42:	77fb      	strb	r3, [r7, #31]
      }
    }
  }

  return ret;
 800da44:	7ffb      	ldrb	r3, [r7, #31]
}
 800da46:	4618      	mov	r0, r3
 800da48:	3720      	adds	r7, #32
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bdb0      	pop	{r4, r5, r7, pc}
 800da4e:	bf00      	nop
 800da50:	0800dc5b 	.word	0x0800dc5b
 800da54:	0800dc35 	.word	0x0800dc35
 800da58:	0800dc81 	.word	0x0800dc81

0800da5c <snmp_table_simple_get_next_instance>:

snmp_err_t snmp_table_simple_get_next_instance(const u32_t *root_oid, u8_t root_oid_len, struct snmp_node_instance *instance)
{
 800da5c:	b590      	push	{r4, r7, lr}
 800da5e:	b0bf      	sub	sp, #252	; 0xfc
 800da60:	af00      	add	r7, sp, #0
 800da62:	60f8      	str	r0, [r7, #12]
 800da64:	460b      	mov	r3, r1
 800da66:	607a      	str	r2, [r7, #4]
 800da68:	72fb      	strb	r3, [r7, #11]
  const struct snmp_table_simple_node *table_node = (const struct snmp_table_simple_node *)(const void *)instance->node;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  const struct snmp_table_simple_col_def *col_def;
  struct snmp_obj_id row_oid;
  u32_t column = 0;
 800da72:	2300      	movs	r3, #0
 800da74:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

  LWIP_UNUSED_ARG(root_oid);
  LWIP_UNUSED_ARG(root_oid_len);

  /* check that first part of id is 0 or 1, referencing fixed row entry */
  if ((instance->instance_oid.len > 0) && (instance->instance_oid.id[0] > 1)) {
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	791b      	ldrb	r3, [r3, #4]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d005      	beq.n	800da8c <snmp_table_simple_get_next_instance+0x30>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	689b      	ldr	r3, [r3, #8]
 800da84:	2b01      	cmp	r3, #1
 800da86:	d901      	bls.n	800da8c <snmp_table_simple_get_next_instance+0x30>
    return SNMP_ERR_NOSUCHINSTANCE;
 800da88:	23f1      	movs	r3, #241	; 0xf1
 800da8a:	e0c8      	b.n	800dc1e <snmp_table_simple_get_next_instance+0x1c2>
  }
  if (instance->instance_oid.len > 1) {
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	791b      	ldrb	r3, [r3, #4]
 800da90:	2b01      	cmp	r3, #1
 800da92:	d903      	bls.n	800da9c <snmp_table_simple_get_next_instance+0x40>
    column = instance->instance_oid.id[1];
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	68db      	ldr	r3, [r3, #12]
 800da98:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  }
  if (instance->instance_oid.len > 2) {
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	791b      	ldrb	r3, [r3, #4]
 800daa0:	2b02      	cmp	r3, #2
 800daa2:	d90c      	bls.n	800dabe <snmp_table_simple_get_next_instance+0x62>
    snmp_oid_assign(&row_oid, &(instance->instance_oid.id[2]), instance->instance_oid.len - 2);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f103 0110 	add.w	r1, r3, #16
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	791b      	ldrb	r3, [r3, #4]
 800daae:	3b02      	subs	r3, #2
 800dab0:	b2da      	uxtb	r2, r3
 800dab2:	f107 0314 	add.w	r3, r7, #20
 800dab6:	4618      	mov	r0, r3
 800dab8:	f7fa fb42 	bl	8008140 <snmp_oid_assign>
 800dabc:	e001      	b.n	800dac2 <snmp_table_simple_get_next_instance+0x66>
  } else {
    row_oid.len = 0;
 800dabe:	2300      	movs	r3, #0
 800dac0:	753b      	strb	r3, [r7, #20]
  }

  /* resolve column and value */
  do {
    u32_t i;
    const struct snmp_table_simple_col_def *next_col_def = NULL;
 800dac2:	2300      	movs	r3, #0
 800dac4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    col_def = table_node->columns;
 800dac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dacc:	695b      	ldr	r3, [r3, #20]
 800dace:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    for (i = 0; i < table_node->column_count; i++) {
 800dad2:	2300      	movs	r3, #0
 800dad4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800dad8:	e02c      	b.n	800db34 <snmp_table_simple_get_next_instance+0xd8>
      if (col_def->index == column) {
 800dada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d104      	bne.n	800daf2 <snmp_table_simple_get_next_instance+0x96>
        next_col_def = col_def;
 800dae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800daec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
        break;
 800daf0:	e028      	b.n	800db44 <snmp_table_simple_get_next_instance+0xe8>
      } else if ((col_def->index > column) && ((next_col_def == NULL) ||
 800daf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800dafc:	429a      	cmp	r2, r3
 800dafe:	d20f      	bcs.n	800db20 <snmp_table_simple_get_next_instance+0xc4>
 800db00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800db04:	2b00      	cmp	r3, #0
 800db06:	d007      	beq.n	800db18 <snmp_table_simple_get_next_instance+0xbc>
                 (col_def->index < next_col_def->index))) {
 800db08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db0c:	681a      	ldr	r2, [r3, #0]
 800db0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800db12:	681b      	ldr	r3, [r3, #0]
      } else if ((col_def->index > column) && ((next_col_def == NULL) ||
 800db14:	429a      	cmp	r2, r3
 800db16:	d203      	bcs.n	800db20 <snmp_table_simple_get_next_instance+0xc4>
        next_col_def = col_def;
 800db18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db1c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      }
      col_def++;
 800db20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db24:	3308      	adds	r3, #8
 800db26:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    for (i = 0; i < table_node->column_count; i++) {
 800db2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800db2e:	3301      	adds	r3, #1
 800db30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800db34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db38:	8a1b      	ldrh	r3, [r3, #16]
 800db3a:	461a      	mov	r2, r3
 800db3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800db40:	4293      	cmp	r3, r2
 800db42:	d3ca      	bcc.n	800dada <snmp_table_simple_get_next_instance+0x7e>
    }

    if (next_col_def == NULL) {
 800db44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d101      	bne.n	800db50 <snmp_table_simple_get_next_instance+0xf4>
      /* no further column found */
      return SNMP_ERR_NOSUCHINSTANCE;
 800db4c:	23f1      	movs	r3, #241	; 0xf1
 800db4e:	e066      	b.n	800dc1e <snmp_table_simple_get_next_instance+0x1c2>
    }

    result = table_node->get_next_cell_instance_and_value(
 800db50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db54:	69dc      	ldr	r4, [r3, #28]
 800db56:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	33f0      	adds	r3, #240	; 0xf0
 800db64:	f107 0114 	add.w	r1, r7, #20
 800db68:	47a0      	blx	r4
 800db6a:	4603      	mov	r3, r0
 800db6c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
               &next_col_def->index,
               &row_oid,
               &instance->reference,
               &instance->reference_len);

    if (result == SNMP_ERR_NOERROR) {
 800db70:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800db74:	2b00      	cmp	r3, #0
 800db76:	d11c      	bne.n	800dbb2 <snmp_table_simple_get_next_instance+0x156>
      col_def = next_col_def;
 800db78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800db7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      break;
 800db80:	bf00      	nop

    row_oid.len = 0; /* reset row_oid because we switch to next column and start with the first entry there */
    column = next_col_def->index + 1;
  } while (1);

  instance->asn1_type = col_def->asn1_type;
 800db82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db86:	791a      	ldrb	r2, [r3, #4]
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
  instance->access    = SNMP_NODE_INSTANCE_READ_ONLY;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2201      	movs	r2, #1
 800db92:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
  instance->set_test  = NULL;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2200      	movs	r2, #0
 800db9a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  instance->set_value = NULL;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2200      	movs	r2, #0
 800dba2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  switch (col_def->data_type) {
 800dba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dbaa:	795b      	ldrb	r3, [r3, #5]
 800dbac:	2b03      	cmp	r3, #3
 800dbae:	dc1f      	bgt.n	800dbf0 <snmp_table_simple_get_next_instance+0x194>
 800dbb0:	e008      	b.n	800dbc4 <snmp_table_simple_get_next_instance+0x168>
    row_oid.len = 0; /* reset row_oid because we switch to next column and start with the first entry there */
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	753b      	strb	r3, [r7, #20]
    column = next_col_def->index + 1;
 800dbb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  do {
 800dbc2:	e77e      	b.n	800dac2 <snmp_table_simple_get_next_instance+0x66>
  switch (col_def->data_type) {
 800dbc4:	2b02      	cmp	r3, #2
 800dbc6:	da0e      	bge.n	800dbe6 <snmp_table_simple_get_next_instance+0x18a>
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d002      	beq.n	800dbd2 <snmp_table_simple_get_next_instance+0x176>
 800dbcc:	2b01      	cmp	r3, #1
 800dbce:	d005      	beq.n	800dbdc <snmp_table_simple_get_next_instance+0x180>
 800dbd0:	e00e      	b.n	800dbf0 <snmp_table_simple_get_next_instance+0x194>
    case SNMP_VARIANT_VALUE_TYPE_U32:
      instance->get_value = snmp_table_extract_value_from_u32ref;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	4a14      	ldr	r2, [pc, #80]	; (800dc28 <snmp_table_simple_get_next_instance+0x1cc>)
 800dbd6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
      break;
 800dbda:	e00b      	b.n	800dbf4 <snmp_table_simple_get_next_instance+0x198>
    case SNMP_VARIANT_VALUE_TYPE_S32:
      instance->get_value = snmp_table_extract_value_from_s32ref;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	4a13      	ldr	r2, [pc, #76]	; (800dc2c <snmp_table_simple_get_next_instance+0x1d0>)
 800dbe0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
      break;
 800dbe4:	e006      	b.n	800dbf4 <snmp_table_simple_get_next_instance+0x198>
    case SNMP_VARIANT_VALUE_TYPE_PTR: /* fall through */
    case SNMP_VARIANT_VALUE_TYPE_CONST_PTR:
      instance->get_value = snmp_table_extract_value_from_refconstptr;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	4a11      	ldr	r2, [pc, #68]	; (800dc30 <snmp_table_simple_get_next_instance+0x1d4>)
 800dbea:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
      break;
 800dbee:	e001      	b.n	800dbf4 <snmp_table_simple_get_next_instance+0x198>
    default:
      LWIP_DEBUGF(SNMP_DEBUG, ("snmp_table_simple_get_instance(): unknown column data_type: %d\n", col_def->data_type));
      return SNMP_ERR_GENERROR;
 800dbf0:	2305      	movs	r3, #5
 800dbf2:	e014      	b.n	800dc1e <snmp_table_simple_get_next_instance+0x1c2>
  }

  /* build resulting oid */
  instance->instance_oid.len   = 2;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2202      	movs	r2, #2
 800dbf8:	711a      	strb	r2, [r3, #4]
  instance->instance_oid.id[0] = 1;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2201      	movs	r2, #1
 800dbfe:	609a      	str	r2, [r3, #8]
  instance->instance_oid.id[1] = col_def->index;
 800dc00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc04:	681a      	ldr	r2, [r3, #0]
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	60da      	str	r2, [r3, #12]
  snmp_oid_append(&instance->instance_oid, row_oid.id, row_oid.len);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	1d18      	adds	r0, r3, #4
 800dc0e:	7d3a      	ldrb	r2, [r7, #20]
 800dc10:	f107 0314 	add.w	r3, r7, #20
 800dc14:	3304      	adds	r3, #4
 800dc16:	4619      	mov	r1, r3
 800dc18:	f7fa fabc 	bl	8008194 <snmp_oid_append>

  return SNMP_ERR_NOERROR;
 800dc1c:	2300      	movs	r3, #0
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	37fc      	adds	r7, #252	; 0xfc
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd90      	pop	{r4, r7, pc}
 800dc26:	bf00      	nop
 800dc28:	0800dc5b 	.word	0x0800dc5b
 800dc2c:	0800dc35 	.word	0x0800dc35
 800dc30:	0800dc81 	.word	0x0800dc81

0800dc34 <snmp_table_extract_value_from_s32ref>:


s16_t
snmp_table_extract_value_from_s32ref(struct snmp_node_instance *instance, void *value)
{
 800dc34:	b480      	push	{r7}
 800dc36:	b085      	sub	sp, #20
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	6039      	str	r1, [r7, #0]
  s32_t *dst = (s32_t *)value;
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	60fb      	str	r3, [r7, #12]
  *dst = instance->reference.s32;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	601a      	str	r2, [r3, #0]
  return sizeof(*dst);
 800dc4c:	2304      	movs	r3, #4
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3714      	adds	r7, #20
 800dc52:	46bd      	mov	sp, r7
 800dc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc58:	4770      	bx	lr

0800dc5a <snmp_table_extract_value_from_u32ref>:

s16_t
snmp_table_extract_value_from_u32ref(struct snmp_node_instance *instance, void *value)
{
 800dc5a:	b480      	push	{r7}
 800dc5c:	b085      	sub	sp, #20
 800dc5e:	af00      	add	r7, sp, #0
 800dc60:	6078      	str	r0, [r7, #4]
 800dc62:	6039      	str	r1, [r7, #0]
  u32_t *dst = (u32_t *)value;
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	60fb      	str	r3, [r7, #12]
  *dst = instance->reference.u32;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	601a      	str	r2, [r3, #0]
  return sizeof(*dst);
 800dc72:	2304      	movs	r3, #4
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3714      	adds	r7, #20
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7e:	4770      	bx	lr

0800dc80 <snmp_table_extract_value_from_refconstptr>:

s16_t
snmp_table_extract_value_from_refconstptr(struct snmp_node_instance *instance, void *value)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
  MEMCPY(value, instance->reference.const_ptr, instance->reference_len);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f8d3 10e8 	ldr.w	r1, [r3, #232]	; 0xe8
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800dc96:	461a      	mov	r2, r3
 800dc98:	6838      	ldr	r0, [r7, #0]
 800dc9a:	f00d fddb 	bl	801b854 <memcpy>
  return (u16_t)instance->reference_len;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800dca4:	b21b      	sxth	r3, r3
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3708      	adds	r7, #8
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
	...

0800dcb0 <snmp_trap_dst_enable>:
 * @param dst_idx index in 0 .. SNMP_TRAP_DESTINATIONS-1
 * @param enable switch if 0 destination is disabled >0 enabled.
 */
void
snmp_trap_dst_enable(u8_t dst_idx, u8_t enable)
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	b083      	sub	sp, #12
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	460a      	mov	r2, r1
 800dcba:	71fb      	strb	r3, [r7, #7]
 800dcbc:	4613      	mov	r3, r2
 800dcbe:	71bb      	strb	r3, [r7, #6]
  LWIP_ASSERT_CORE_LOCKED();
  if (dst_idx < SNMP_TRAP_DESTINATIONS) {
 800dcc0:	79fb      	ldrb	r3, [r7, #7]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d105      	bne.n	800dcd2 <snmp_trap_dst_enable+0x22>
    trap_dst[dst_idx].enable = enable;
 800dcc6:	79fb      	ldrb	r3, [r7, #7]
 800dcc8:	4a05      	ldr	r2, [pc, #20]	; (800dce0 <snmp_trap_dst_enable+0x30>)
 800dcca:	00db      	lsls	r3, r3, #3
 800dccc:	4413      	add	r3, r2
 800dcce:	79ba      	ldrb	r2, [r7, #6]
 800dcd0:	711a      	strb	r2, [r3, #4]
  }
}
 800dcd2:	bf00      	nop
 800dcd4:	370c      	adds	r7, #12
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcdc:	4770      	bx	lr
 800dcde:	bf00      	nop
 800dce0:	20003754 	.word	0x20003754

0800dce4 <snmp_trap_dst_ip_set>:
 * @param dst_idx index in 0 .. SNMP_TRAP_DESTINATIONS-1
 * @param dst IPv4 address in host order.
 */
void
snmp_trap_dst_ip_set(u8_t dst_idx, const ip_addr_t *dst)
{
 800dce4:	b480      	push	{r7}
 800dce6:	b083      	sub	sp, #12
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	4603      	mov	r3, r0
 800dcec:	6039      	str	r1, [r7, #0]
 800dcee:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();
  if (dst_idx < SNMP_TRAP_DESTINATIONS) {
 800dcf0:	79fb      	ldrb	r3, [r7, #7]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d10a      	bne.n	800dd0c <snmp_trap_dst_ip_set+0x28>
    ip_addr_set(&trap_dst[dst_idx].dip, dst);
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d002      	beq.n	800dd02 <snmp_trap_dst_ip_set+0x1e>
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	e000      	b.n	800dd04 <snmp_trap_dst_ip_set+0x20>
 800dd02:	2300      	movs	r3, #0
 800dd04:	79fa      	ldrb	r2, [r7, #7]
 800dd06:	4904      	ldr	r1, [pc, #16]	; (800dd18 <snmp_trap_dst_ip_set+0x34>)
 800dd08:	f841 3032 	str.w	r3, [r1, r2, lsl #3]
  }
}
 800dd0c:	bf00      	nop
 800dd0e:	370c      	adds	r7, #12
 800dd10:	46bd      	mov	sp, r7
 800dd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd16:	4770      	bx	lr
 800dd18:	20003754 	.word	0x20003754

0800dd1c <snmp_set_auth_traps_enabled>:
 * @ingroup snmp_traps
 * Enable/disable authentication traps
 */
void
snmp_set_auth_traps_enabled(u8_t enable)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b083      	sub	sp, #12
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	4603      	mov	r3, r0
 800dd24:	71fb      	strb	r3, [r7, #7]
  snmp_auth_traps_enabled = enable;
 800dd26:	4a04      	ldr	r2, [pc, #16]	; (800dd38 <snmp_set_auth_traps_enabled+0x1c>)
 800dd28:	79fb      	ldrb	r3, [r7, #7]
 800dd2a:	7013      	strb	r3, [r2, #0]
}
 800dd2c:	bf00      	nop
 800dd2e:	370c      	adds	r7, #12
 800dd30:	46bd      	mov	sp, r7
 800dd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd36:	4770      	bx	lr
 800dd38:	2000375c 	.word	0x2000375c

0800dd3c <snmp_get_auth_traps_enabled>:
 * @ingroup snmp_traps
 * Get authentication traps enabled state
 */
u8_t
snmp_get_auth_traps_enabled(void)
{
 800dd3c:	b480      	push	{r7}
 800dd3e:	af00      	add	r7, sp, #0
  return snmp_auth_traps_enabled;
 800dd40:	4b03      	ldr	r3, [pc, #12]	; (800dd50 <snmp_get_auth_traps_enabled+0x14>)
 800dd42:	781b      	ldrb	r3, [r3, #0]
}
 800dd44:	4618      	mov	r0, r3
 800dd46:	46bd      	mov	sp, r7
 800dd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4c:	4770      	bx	lr
 800dd4e:	bf00      	nop
 800dd50:	2000375c 	.word	0x2000375c

0800dd54 <snmp_send_trap>:
 * and .iso.org.dod.internet.private.enterprises.yourenterprise
 * (sysObjectID) for specific traps.
 */
err_t
snmp_send_trap(const struct snmp_obj_id *eoid, s32_t generic_trap, s32_t specific_trap, struct snmp_varbind *varbinds)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b092      	sub	sp, #72	; 0x48
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	60f8      	str	r0, [r7, #12]
 800dd5c:	60b9      	str	r1, [r7, #8]
 800dd5e:	607a      	str	r2, [r7, #4]
 800dd60:	603b      	str	r3, [r7, #0]
  struct snmp_msg_trap trap_msg;
  struct snmp_trap_dst *td;
  struct pbuf *p;
  u16_t i, tot_len;
  err_t err = ERR_OK;
 800dd62:	2300      	movs	r3, #0
 800dd64:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

  LWIP_ASSERT_CORE_LOCKED();

  trap_msg.snmp_version = 0;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  for (i = 0, td = &trap_dst[0]; i < SNMP_TRAP_DESTINATIONS; i++, td++) {
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800dd72:	4b4c      	ldr	r3, [pc, #304]	; (800dea4 <snmp_send_trap+0x150>)
 800dd74:	647b      	str	r3, [r7, #68]	; 0x44
 800dd76:	e089      	b.n	800de8c <snmp_send_trap+0x138>
    if ((td->enable != 0) && !ip_addr_isany(&td->dip)) {
 800dd78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd7a:	791b      	ldrb	r3, [r3, #4]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d07d      	beq.n	800de7c <snmp_send_trap+0x128>
 800dd80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d07a      	beq.n	800de7c <snmp_send_trap+0x128>
 800dd86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d076      	beq.n	800de7c <snmp_send_trap+0x128>
      /* lookup current source address for this dst */
      if (snmp_get_local_ip_for_dst(snmp_traps_handle, &td->dip, &trap_msg.sip)) {
 800dd8e:	4b46      	ldr	r3, [pc, #280]	; (800dea8 <snmp_send_trap+0x154>)
 800dd90:	6818      	ldr	r0, [r3, #0]
 800dd92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dd94:	f107 0318 	add.w	r3, r7, #24
 800dd98:	3304      	adds	r3, #4
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	f7ff fa83 	bl	800d2a6 <snmp_get_local_ip_for_dst>
 800dda0:	4603      	mov	r3, r0
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d067      	beq.n	800de76 <snmp_send_trap+0x122>
        if (eoid == NULL) {
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d104      	bne.n	800ddb6 <snmp_send_trap+0x62>
          trap_msg.enterprise = snmp_get_device_enterprise_oid();
 800ddac:	f7fa f860 	bl	8007e70 <snmp_get_device_enterprise_oid>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	61bb      	str	r3, [r7, #24]
 800ddb4:	e001      	b.n	800ddba <snmp_send_trap+0x66>
        } else {
          trap_msg.enterprise = eoid;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	61bb      	str	r3, [r7, #24]
        }

        trap_msg.gen_trap = generic_trap;
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	623b      	str	r3, [r7, #32]
        if (generic_trap == SNMP_GENTRAP_ENTERPRISE_SPECIFIC) {
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	2b06      	cmp	r3, #6
 800ddc2:	d102      	bne.n	800ddca <snmp_send_trap+0x76>
          trap_msg.spc_trap = specific_trap;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	627b      	str	r3, [r7, #36]	; 0x24
 800ddc8:	e001      	b.n	800ddce <snmp_send_trap+0x7a>
        } else {
          trap_msg.spc_trap = 0;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	627b      	str	r3, [r7, #36]	; 0x24
        }

        MIB2_COPY_SYSUPTIME_TO(&trap_msg.ts);
 800ddce:	f7f9 fa41 	bl	8007254 <sys_now>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	4a35      	ldr	r2, [pc, #212]	; (800deac <snmp_send_trap+0x158>)
 800ddd6:	fba2 2303 	umull	r2, r3, r2, r3
 800ddda:	08db      	lsrs	r3, r3, #3
 800dddc:	62bb      	str	r3, [r7, #40]	; 0x28

        /* pass 0, calculate length fields */
        tot_len = snmp_trap_varbind_sum(&trap_msg, varbinds);
 800ddde:	f107 0318 	add.w	r3, r7, #24
 800dde2:	6839      	ldr	r1, [r7, #0]
 800dde4:	4618      	mov	r0, r3
 800dde6:	f000 f885 	bl	800def4 <snmp_trap_varbind_sum>
 800ddea:	4603      	mov	r3, r0
 800ddec:	87fb      	strh	r3, [r7, #62]	; 0x3e
        tot_len = snmp_trap_header_sum(&trap_msg, tot_len);
 800ddee:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ddf0:	f107 0318 	add.w	r3, r7, #24
 800ddf4:	4611      	mov	r1, r2
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f000 f8b6 	bl	800df68 <snmp_trap_header_sum>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	87fb      	strh	r3, [r7, #62]	; 0x3e

        /* allocate pbuf(s) */
        p = pbuf_alloc(PBUF_TRANSPORT, tot_len, PBUF_RAM);
 800de00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800de02:	f44f 7220 	mov.w	r2, #640	; 0x280
 800de06:	4619      	mov	r1, r3
 800de08:	2036      	movs	r0, #54	; 0x36
 800de0a:	f001 fedd 	bl	800fbc8 <pbuf_alloc>
 800de0e:	63b8      	str	r0, [r7, #56]	; 0x38
        if (p != NULL) {
 800de10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de12:	2b00      	cmp	r3, #0
 800de14:	d02b      	beq.n	800de6e <snmp_send_trap+0x11a>
          struct snmp_pbuf_stream pbuf_stream;
          snmp_pbuf_stream_init(&pbuf_stream, p, 0, tot_len);
 800de16:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800de18:	f107 0010 	add.w	r0, r7, #16
 800de1c:	2200      	movs	r2, #0
 800de1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800de20:	f7ff f8e8 	bl	800cff4 <snmp_pbuf_stream_init>

          /* pass 1, encode packet into the pbuf(s) */
          snmp_trap_header_enc(&trap_msg, &pbuf_stream);
 800de24:	f107 0210 	add.w	r2, r7, #16
 800de28:	f107 0318 	add.w	r3, r7, #24
 800de2c:	4611      	mov	r1, r2
 800de2e:	4618      	mov	r0, r3
 800de30:	f000 f9c0 	bl	800e1b4 <snmp_trap_header_enc>
          snmp_trap_varbind_enc(&trap_msg, &pbuf_stream, varbinds);
 800de34:	f107 0110 	add.w	r1, r7, #16
 800de38:	f107 0318 	add.w	r3, r7, #24
 800de3c:	683a      	ldr	r2, [r7, #0]
 800de3e:	4618      	mov	r0, r3
 800de40:	f000 f986 	bl	800e150 <snmp_trap_varbind_enc>

          snmp_stats.outtraps++;
 800de44:	4b1a      	ldr	r3, [pc, #104]	; (800deb0 <snmp_send_trap+0x15c>)
 800de46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de48:	3301      	adds	r3, #1
 800de4a:	4a19      	ldr	r2, [pc, #100]	; (800deb0 <snmp_send_trap+0x15c>)
 800de4c:	6693      	str	r3, [r2, #104]	; 0x68
          snmp_stats.outpkts++;
 800de4e:	4b18      	ldr	r3, [pc, #96]	; (800deb0 <snmp_send_trap+0x15c>)
 800de50:	685b      	ldr	r3, [r3, #4]
 800de52:	3301      	adds	r3, #1
 800de54:	4a16      	ldr	r2, [pc, #88]	; (800deb0 <snmp_send_trap+0x15c>)
 800de56:	6053      	str	r3, [r2, #4]

          /** send to the TRAP destination */
          snmp_sendto(snmp_traps_handle, p, &td->dip, LWIP_IANA_PORT_SNMP_TRAP);
 800de58:	4b13      	ldr	r3, [pc, #76]	; (800dea8 <snmp_send_trap+0x154>)
 800de5a:	6818      	ldr	r0, [r3, #0]
 800de5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de5e:	23a2      	movs	r3, #162	; 0xa2
 800de60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800de62:	f7ff fa0e 	bl	800d282 <snmp_sendto>
          pbuf_free(p);
 800de66:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800de68:	f002 f992 	bl	8010190 <pbuf_free>
 800de6c:	e006      	b.n	800de7c <snmp_send_trap+0x128>
        } else {
          err = ERR_MEM;
 800de6e:	23ff      	movs	r3, #255	; 0xff
 800de70:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 800de74:	e002      	b.n	800de7c <snmp_send_trap+0x128>
        }
      } else {
        /* routing error */
        err = ERR_RTE;
 800de76:	23fc      	movs	r3, #252	; 0xfc
 800de78:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
  for (i = 0, td = &trap_dst[0]; i < SNMP_TRAP_DESTINATIONS; i++, td++) {
 800de7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800de80:	3301      	adds	r3, #1
 800de82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800de86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de88:	3308      	adds	r3, #8
 800de8a:	647b      	str	r3, [r7, #68]	; 0x44
 800de8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800de90:	2b00      	cmp	r3, #0
 800de92:	f43f af71 	beq.w	800dd78 <snmp_send_trap+0x24>
      }
    }
  }
  return err;
 800de96:	f997 3041 	ldrsb.w	r3, [r7, #65]	; 0x41
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	3748      	adds	r7, #72	; 0x48
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}
 800dea2:	bf00      	nop
 800dea4:	20003754 	.word	0x20003754
 800dea8:	20003750 	.word	0x20003750
 800deac:	cccccccd 	.word	0xcccccccd
 800deb0:	200036a8 	.word	0x200036a8

0800deb4 <snmp_send_trap_generic>:
 * @ingroup snmp_traps
 * Send generic SNMP trap
 */
err_t
snmp_send_trap_generic(s32_t generic_trap)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b082      	sub	sp, #8
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
  static const struct snmp_obj_id oid = { 7, { 1, 3, 6, 1, 2, 1, 11 } };
  return snmp_send_trap(&oid, generic_trap, 0, NULL);
 800debc:	2300      	movs	r3, #0
 800debe:	2200      	movs	r2, #0
 800dec0:	6879      	ldr	r1, [r7, #4]
 800dec2:	4804      	ldr	r0, [pc, #16]	; (800ded4 <snmp_send_trap_generic+0x20>)
 800dec4:	f7ff ff46 	bl	800dd54 <snmp_send_trap>
 800dec8:	4603      	mov	r3, r0
}
 800deca:	4618      	mov	r0, r3
 800decc:	3708      	adds	r7, #8
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
 800ded2:	bf00      	nop
 800ded4:	08024360 	.word	0x08024360

0800ded8 <snmp_authfail_trap>:
 * @ingroup snmp_traps
 * Send authentication failure trap (used internally by agent)
 */
void
snmp_authfail_trap(void)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	af00      	add	r7, sp, #0
  if (snmp_auth_traps_enabled != 0) {
 800dedc:	4b04      	ldr	r3, [pc, #16]	; (800def0 <snmp_authfail_trap+0x18>)
 800dede:	781b      	ldrb	r3, [r3, #0]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d002      	beq.n	800deea <snmp_authfail_trap+0x12>
    snmp_send_trap_generic(SNMP_GENTRAP_AUTH_FAILURE);
 800dee4:	2004      	movs	r0, #4
 800dee6:	f7ff ffe5 	bl	800deb4 <snmp_send_trap_generic>
  }
}
 800deea:	bf00      	nop
 800deec:	bd80      	pop	{r7, pc}
 800deee:	bf00      	nop
 800def0:	2000375c 	.word	0x2000375c

0800def4 <snmp_trap_varbind_sum>:

static u16_t
snmp_trap_varbind_sum(struct snmp_msg_trap *trap, struct snmp_varbind *varbinds)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b088      	sub	sp, #32
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
 800defc:	6039      	str	r1, [r7, #0]
  struct snmp_varbind *varbind;
  u16_t tot_len;
  u8_t tot_len_len;

  tot_len = 0;
 800defe:	2300      	movs	r3, #0
 800df00:	837b      	strh	r3, [r7, #26]
  varbind = varbinds;
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	61fb      	str	r3, [r7, #28]
  while (varbind != NULL) {
 800df06:	e015      	b.n	800df34 <snmp_trap_varbind_sum+0x40>
    struct snmp_varbind_len len;

    if (snmp_varbind_length(varbind, &len) == ERR_OK) {
 800df08:	f107 030c 	add.w	r3, r7, #12
 800df0c:	4619      	mov	r1, r3
 800df0e:	69f8      	ldr	r0, [r7, #28]
 800df10:	f7fe f9b4 	bl	800c27c <snmp_varbind_length>
 800df14:	4603      	mov	r3, r0
 800df16:	2b00      	cmp	r3, #0
 800df18:	d109      	bne.n	800df2e <snmp_trap_varbind_sum+0x3a>
      tot_len += 1 + len.vb_len_len + len.vb_value_len;
 800df1a:	7b3b      	ldrb	r3, [r7, #12]
 800df1c:	b29a      	uxth	r2, r3
 800df1e:	89fb      	ldrh	r3, [r7, #14]
 800df20:	4413      	add	r3, r2
 800df22:	b29a      	uxth	r2, r3
 800df24:	8b7b      	ldrh	r3, [r7, #26]
 800df26:	4413      	add	r3, r2
 800df28:	b29b      	uxth	r3, r3
 800df2a:	3301      	adds	r3, #1
 800df2c:	837b      	strh	r3, [r7, #26]
    }

    varbind = varbind->next;
 800df2e:	69fb      	ldr	r3, [r7, #28]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	61fb      	str	r3, [r7, #28]
  while (varbind != NULL) {
 800df34:	69fb      	ldr	r3, [r7, #28]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d1e6      	bne.n	800df08 <snmp_trap_varbind_sum+0x14>
  }

  trap->vbseqlen = tot_len;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	8b7a      	ldrh	r2, [r7, #26]
 800df3e:	83da      	strh	r2, [r3, #30]
  snmp_asn1_enc_length_cnt(trap->vbseqlen, &tot_len_len);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	8bdb      	ldrh	r3, [r3, #30]
 800df44:	f107 0219 	add.w	r2, r7, #25
 800df48:	4611      	mov	r1, r2
 800df4a:	4618      	mov	r0, r3
 800df4c:	f7f9 fb99 	bl	8007682 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + tot_len_len;
 800df50:	7e7b      	ldrb	r3, [r7, #25]
 800df52:	b29a      	uxth	r2, r3
 800df54:	8b7b      	ldrh	r3, [r7, #26]
 800df56:	4413      	add	r3, r2
 800df58:	b29b      	uxth	r3, r3
 800df5a:	3301      	adds	r3, #1
 800df5c:	837b      	strh	r3, [r7, #26]

  return tot_len;
 800df5e:	8b7b      	ldrh	r3, [r7, #26]
}
 800df60:	4618      	mov	r0, r3
 800df62:	3720      	adds	r7, #32
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}

0800df68 <snmp_trap_header_sum>:
 * @param vb_len varbind-list length
 * @return the required length for encoding the trap header
 */
static u16_t
snmp_trap_header_sum(struct snmp_msg_trap *trap, u16_t vb_len)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b084      	sub	sp, #16
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	460b      	mov	r3, r1
 800df72:	807b      	strh	r3, [r7, #2]
  u16_t tot_len;
  u16_t len;
  u8_t lenlen;

  tot_len = vb_len;
 800df74:	887b      	ldrh	r3, [r7, #2]
 800df76:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_u32t_cnt(trap->ts, &len);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	691b      	ldr	r3, [r3, #16]
 800df7c:	f107 020c 	add.w	r2, r7, #12
 800df80:	4611      	mov	r1, r2
 800df82:	4618      	mov	r0, r3
 800df84:	f7f9 fb9a 	bl	80076bc <snmp_asn1_enc_u32t_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 800df88:	89bb      	ldrh	r3, [r7, #12]
 800df8a:	f107 020b 	add.w	r2, r7, #11
 800df8e:	4611      	mov	r1, r2
 800df90:	4618      	mov	r0, r3
 800df92:	f7f9 fb76 	bl	8007682 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 800df96:	7afb      	ldrb	r3, [r7, #11]
 800df98:	b29a      	uxth	r2, r3
 800df9a:	89bb      	ldrh	r3, [r7, #12]
 800df9c:	4413      	add	r3, r2
 800df9e:	b29a      	uxth	r2, r3
 800dfa0:	89fb      	ldrh	r3, [r7, #14]
 800dfa2:	4413      	add	r3, r2
 800dfa4:	b29b      	uxth	r3, r3
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_s32t_cnt(trap->spc_trap, &len);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	68db      	ldr	r3, [r3, #12]
 800dfae:	461a      	mov	r2, r3
 800dfb0:	f107 030c 	add.w	r3, r7, #12
 800dfb4:	4619      	mov	r1, r3
 800dfb6:	4610      	mov	r0, r2
 800dfb8:	f7f9 fbac 	bl	8007714 <snmp_asn1_enc_s32t_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 800dfbc:	89bb      	ldrh	r3, [r7, #12]
 800dfbe:	f107 020b 	add.w	r2, r7, #11
 800dfc2:	4611      	mov	r1, r2
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f7f9 fb5c 	bl	8007682 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 800dfca:	7afb      	ldrb	r3, [r7, #11]
 800dfcc:	b29a      	uxth	r2, r3
 800dfce:	89bb      	ldrh	r3, [r7, #12]
 800dfd0:	4413      	add	r3, r2
 800dfd2:	b29a      	uxth	r2, r3
 800dfd4:	89fb      	ldrh	r3, [r7, #14]
 800dfd6:	4413      	add	r3, r2
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	3301      	adds	r3, #1
 800dfdc:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_s32t_cnt(trap->gen_trap, &len);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	689b      	ldr	r3, [r3, #8]
 800dfe2:	461a      	mov	r2, r3
 800dfe4:	f107 030c 	add.w	r3, r7, #12
 800dfe8:	4619      	mov	r1, r3
 800dfea:	4610      	mov	r0, r2
 800dfec:	f7f9 fb92 	bl	8007714 <snmp_asn1_enc_s32t_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 800dff0:	89bb      	ldrh	r3, [r7, #12]
 800dff2:	f107 020b 	add.w	r2, r7, #11
 800dff6:	4611      	mov	r1, r2
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7f9 fb42 	bl	8007682 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 800dffe:	7afb      	ldrb	r3, [r7, #11]
 800e000:	b29a      	uxth	r2, r3
 800e002:	89bb      	ldrh	r3, [r7, #12]
 800e004:	4413      	add	r3, r2
 800e006:	b29a      	uxth	r2, r3
 800e008:	89fb      	ldrh	r3, [r7, #14]
 800e00a:	4413      	add	r3, r2
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	3301      	adds	r3, #1
 800e010:	81fb      	strh	r3, [r7, #14]
#if LWIP_IPV6
    len = sizeof(ip_2_ip6(&trap->sip)->addr);
#endif
  } else {
#if LWIP_IPV4
    len = sizeof(ip_2_ip4(&trap->sip)->addr);
 800e012:	2304      	movs	r3, #4
 800e014:	81bb      	strh	r3, [r7, #12]
#endif
  }
  snmp_asn1_enc_length_cnt(len, &lenlen);
 800e016:	89bb      	ldrh	r3, [r7, #12]
 800e018:	f107 020b 	add.w	r2, r7, #11
 800e01c:	4611      	mov	r1, r2
 800e01e:	4618      	mov	r0, r3
 800e020:	f7f9 fb2f 	bl	8007682 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 800e024:	7afb      	ldrb	r3, [r7, #11]
 800e026:	b29a      	uxth	r2, r3
 800e028:	89bb      	ldrh	r3, [r7, #12]
 800e02a:	4413      	add	r3, r2
 800e02c:	b29a      	uxth	r2, r3
 800e02e:	89fb      	ldrh	r3, [r7, #14]
 800e030:	4413      	add	r3, r2
 800e032:	b29b      	uxth	r3, r3
 800e034:	3301      	adds	r3, #1
 800e036:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_oid_cnt(trap->enterprise->id, trap->enterprise->len, &len);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	1d18      	adds	r0, r3, #4
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	781b      	ldrb	r3, [r3, #0]
 800e044:	b29b      	uxth	r3, r3
 800e046:	f107 020c 	add.w	r2, r7, #12
 800e04a:	4619      	mov	r1, r3
 800e04c:	f7f9 fb8d 	bl	800776a <snmp_asn1_enc_oid_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 800e050:	89bb      	ldrh	r3, [r7, #12]
 800e052:	f107 020b 	add.w	r2, r7, #11
 800e056:	4611      	mov	r1, r2
 800e058:	4618      	mov	r0, r3
 800e05a:	f7f9 fb12 	bl	8007682 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 800e05e:	7afb      	ldrb	r3, [r7, #11]
 800e060:	b29a      	uxth	r2, r3
 800e062:	89bb      	ldrh	r3, [r7, #12]
 800e064:	4413      	add	r3, r2
 800e066:	b29a      	uxth	r2, r3
 800e068:	89fb      	ldrh	r3, [r7, #14]
 800e06a:	4413      	add	r3, r2
 800e06c:	b29b      	uxth	r3, r3
 800e06e:	3301      	adds	r3, #1
 800e070:	81fb      	strh	r3, [r7, #14]

  trap->pdulen = tot_len;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	89fa      	ldrh	r2, [r7, #14]
 800e076:	831a      	strh	r2, [r3, #24]
  snmp_asn1_enc_length_cnt(trap->pdulen, &lenlen);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	8b1b      	ldrh	r3, [r3, #24]
 800e07c:	f107 020b 	add.w	r2, r7, #11
 800e080:	4611      	mov	r1, r2
 800e082:	4618      	mov	r0, r3
 800e084:	f7f9 fafd 	bl	8007682 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + lenlen;
 800e088:	7afb      	ldrb	r3, [r7, #11]
 800e08a:	b29a      	uxth	r2, r3
 800e08c:	89fb      	ldrh	r3, [r7, #14]
 800e08e:	4413      	add	r3, r2
 800e090:	b29b      	uxth	r3, r3
 800e092:	3301      	adds	r3, #1
 800e094:	81fb      	strh	r3, [r7, #14]

  trap->comlen = (u16_t)LWIP_MIN(strlen(snmp_community_trap), 0xFFFF);
 800e096:	4b2d      	ldr	r3, [pc, #180]	; (800e14c <snmp_trap_header_sum+0x1e4>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	4618      	mov	r0, r3
 800e09c:	f7f2 f8d0 	bl	8000240 <strlen>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	d807      	bhi.n	800e0ba <snmp_trap_header_sum+0x152>
 800e0aa:	4b28      	ldr	r3, [pc, #160]	; (800e14c <snmp_trap_header_sum+0x1e4>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f7f2 f8c6 	bl	8000240 <strlen>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	b29a      	uxth	r2, r3
 800e0b8:	e001      	b.n	800e0be <snmp_trap_header_sum+0x156>
 800e0ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	835a      	strh	r2, [r3, #26]
  snmp_asn1_enc_length_cnt(trap->comlen, &lenlen);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	8b5b      	ldrh	r3, [r3, #26]
 800e0c6:	f107 020b 	add.w	r2, r7, #11
 800e0ca:	4611      	mov	r1, r2
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f7f9 fad8 	bl	8007682 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + lenlen + trap->comlen;
 800e0d2:	7afb      	ldrb	r3, [r7, #11]
 800e0d4:	b29a      	uxth	r2, r3
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	8b5b      	ldrh	r3, [r3, #26]
 800e0da:	4413      	add	r3, r2
 800e0dc:	b29a      	uxth	r2, r3
 800e0de:	89fb      	ldrh	r3, [r7, #14]
 800e0e0:	4413      	add	r3, r2
 800e0e2:	b29b      	uxth	r3, r3
 800e0e4:	3301      	adds	r3, #1
 800e0e6:	81fb      	strh	r3, [r7, #14]

  snmp_asn1_enc_s32t_cnt(trap->snmp_version, &len);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	695b      	ldr	r3, [r3, #20]
 800e0ec:	461a      	mov	r2, r3
 800e0ee:	f107 030c 	add.w	r3, r7, #12
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	4610      	mov	r0, r2
 800e0f6:	f7f9 fb0d 	bl	8007714 <snmp_asn1_enc_s32t_cnt>
  snmp_asn1_enc_length_cnt(len, &lenlen);
 800e0fa:	89bb      	ldrh	r3, [r7, #12]
 800e0fc:	f107 020b 	add.w	r2, r7, #11
 800e100:	4611      	mov	r1, r2
 800e102:	4618      	mov	r0, r3
 800e104:	f7f9 fabd 	bl	8007682 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + len + lenlen;
 800e108:	7afb      	ldrb	r3, [r7, #11]
 800e10a:	b29a      	uxth	r2, r3
 800e10c:	89bb      	ldrh	r3, [r7, #12]
 800e10e:	4413      	add	r3, r2
 800e110:	b29a      	uxth	r2, r3
 800e112:	89fb      	ldrh	r3, [r7, #14]
 800e114:	4413      	add	r3, r2
 800e116:	b29b      	uxth	r3, r3
 800e118:	3301      	adds	r3, #1
 800e11a:	81fb      	strh	r3, [r7, #14]

  trap->seqlen = tot_len;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	89fa      	ldrh	r2, [r7, #14]
 800e120:	839a      	strh	r2, [r3, #28]
  snmp_asn1_enc_length_cnt(trap->seqlen, &lenlen);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	8b9b      	ldrh	r3, [r3, #28]
 800e126:	f107 020b 	add.w	r2, r7, #11
 800e12a:	4611      	mov	r1, r2
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7f9 faa8 	bl	8007682 <snmp_asn1_enc_length_cnt>
  tot_len += 1 + lenlen;
 800e132:	7afb      	ldrb	r3, [r7, #11]
 800e134:	b29a      	uxth	r2, r3
 800e136:	89fb      	ldrh	r3, [r7, #14]
 800e138:	4413      	add	r3, r2
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	3301      	adds	r3, #1
 800e13e:	81fb      	strh	r3, [r7, #14]

  return tot_len;
 800e140:	89fb      	ldrh	r3, [r7, #14]
}
 800e142:	4618      	mov	r0, r3
 800e144:	3710      	adds	r7, #16
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop
 800e14c:	20000054 	.word	0x20000054

0800e150 <snmp_trap_varbind_enc>:

static err_t
snmp_trap_varbind_enc(struct snmp_msg_trap *trap, struct snmp_pbuf_stream *pbuf_stream, struct snmp_varbind *varbinds)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b088      	sub	sp, #32
 800e154:	af00      	add	r7, sp, #0
 800e156:	60f8      	str	r0, [r7, #12]
 800e158:	60b9      	str	r1, [r7, #8]
 800e15a:	607a      	str	r2, [r7, #4]
  struct snmp_asn1_tlv tlv;
  struct snmp_varbind *varbind;

  varbind = varbinds;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	61fb      	str	r3, [r7, #28]

  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 0, trap->vbseqlen);
 800e160:	2330      	movs	r3, #48	; 0x30
 800e162:	753b      	strb	r3, [r7, #20]
 800e164:	2300      	movs	r3, #0
 800e166:	757b      	strb	r3, [r7, #21]
 800e168:	2300      	movs	r3, #0
 800e16a:	75bb      	strb	r3, [r7, #22]
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	8bdb      	ldrh	r3, [r3, #30]
 800e170:	833b      	strh	r3, [r7, #24]
  BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 800e172:	f107 0314 	add.w	r3, r7, #20
 800e176:	4619      	mov	r1, r3
 800e178:	68b8      	ldr	r0, [r7, #8]
 800e17a:	f7f9 f8f9 	bl	8007370 <snmp_ans1_enc_tlv>
 800e17e:	4603      	mov	r3, r0
 800e180:	2b00      	cmp	r3, #0
 800e182:	d00f      	beq.n	800e1a4 <snmp_trap_varbind_enc+0x54>
 800e184:	f06f 030f 	mvn.w	r3, #15
 800e188:	e010      	b.n	800e1ac <snmp_trap_varbind_enc+0x5c>

  while (varbind != NULL) {
    BUILD_EXEC( snmp_append_outbound_varbind(pbuf_stream, varbind) );
 800e18a:	69f9      	ldr	r1, [r7, #28]
 800e18c:	68b8      	ldr	r0, [r7, #8]
 800e18e:	f7fe f9c9 	bl	800c524 <snmp_append_outbound_varbind>
 800e192:	4603      	mov	r3, r0
 800e194:	2b00      	cmp	r3, #0
 800e196:	d002      	beq.n	800e19e <snmp_trap_varbind_enc+0x4e>
 800e198:	f06f 030f 	mvn.w	r3, #15
 800e19c:	e006      	b.n	800e1ac <snmp_trap_varbind_enc+0x5c>

    varbind = varbind->next;
 800e19e:	69fb      	ldr	r3, [r7, #28]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	61fb      	str	r3, [r7, #28]
  while (varbind != NULL) {
 800e1a4:	69fb      	ldr	r3, [r7, #28]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d1ef      	bne.n	800e18a <snmp_trap_varbind_enc+0x3a>
  }

  return ERR_OK;
 800e1aa:	2300      	movs	r3, #0
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3720      	adds	r7, #32
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}

0800e1b4 <snmp_trap_header_enc>:
/**
 * Encodes trap header from head to tail.
 */
static err_t
snmp_trap_header_enc(struct snmp_msg_trap *trap, struct snmp_pbuf_stream *pbuf_stream)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b084      	sub	sp, #16
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
 800e1bc:	6039      	str	r1, [r7, #0]
  struct snmp_asn1_tlv tlv;

  /* 'Message' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_SEQUENCE, 0, trap->seqlen);
 800e1be:	2330      	movs	r3, #48	; 0x30
 800e1c0:	723b      	strb	r3, [r7, #8]
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	727b      	strb	r3, [r7, #9]
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	72bb      	strb	r3, [r7, #10]
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	8b9b      	ldrh	r3, [r3, #28]
 800e1ce:	81bb      	strh	r3, [r7, #12]
  BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 800e1d0:	f107 0308 	add.w	r3, r7, #8
 800e1d4:	4619      	mov	r1, r3
 800e1d6:	6838      	ldr	r0, [r7, #0]
 800e1d8:	f7f9 f8ca 	bl	8007370 <snmp_ans1_enc_tlv>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d002      	beq.n	800e1e8 <snmp_trap_header_enc+0x34>
 800e1e2:	f06f 030f 	mvn.w	r3, #15
 800e1e6:	e137      	b.n	800e458 <snmp_trap_header_enc+0x2a4>

  /* version */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 800e1e8:	2302      	movs	r3, #2
 800e1ea:	723b      	strb	r3, [r7, #8]
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	727b      	strb	r3, [r7, #9]
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	72bb      	strb	r3, [r7, #10]
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_s32t_cnt(trap->snmp_version, &tlv.value_len);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	695b      	ldr	r3, [r3, #20]
 800e1fc:	461a      	mov	r2, r3
 800e1fe:	f107 0308 	add.w	r3, r7, #8
 800e202:	3304      	adds	r3, #4
 800e204:	4619      	mov	r1, r3
 800e206:	4610      	mov	r0, r2
 800e208:	f7f9 fa84 	bl	8007714 <snmp_asn1_enc_s32t_cnt>
  BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 800e20c:	f107 0308 	add.w	r3, r7, #8
 800e210:	4619      	mov	r1, r3
 800e212:	6838      	ldr	r0, [r7, #0]
 800e214:	f7f9 f8ac 	bl	8007370 <snmp_ans1_enc_tlv>
 800e218:	4603      	mov	r3, r0
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d002      	beq.n	800e224 <snmp_trap_header_enc+0x70>
 800e21e:	f06f 030f 	mvn.w	r3, #15
 800e222:	e119      	b.n	800e458 <snmp_trap_header_enc+0x2a4>
  BUILD_EXEC( snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, trap->snmp_version) );
 800e224:	89b9      	ldrh	r1, [r7, #12]
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	695b      	ldr	r3, [r3, #20]
 800e22a:	461a      	mov	r2, r3
 800e22c:	6838      	ldr	r0, [r7, #0]
 800e22e:	f7f9 f987 	bl	8007540 <snmp_asn1_enc_s32t>
 800e232:	4603      	mov	r3, r0
 800e234:	2b00      	cmp	r3, #0
 800e236:	d002      	beq.n	800e23e <snmp_trap_header_enc+0x8a>
 800e238:	f06f 030f 	mvn.w	r3, #15
 800e23c:	e10c      	b.n	800e458 <snmp_trap_header_enc+0x2a4>

  /* community */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_OCTET_STRING, 0, trap->comlen);
 800e23e:	2304      	movs	r3, #4
 800e240:	723b      	strb	r3, [r7, #8]
 800e242:	2300      	movs	r3, #0
 800e244:	727b      	strb	r3, [r7, #9]
 800e246:	2300      	movs	r3, #0
 800e248:	72bb      	strb	r3, [r7, #10]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	8b5b      	ldrh	r3, [r3, #26]
 800e24e:	81bb      	strh	r3, [r7, #12]
  BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 800e250:	f107 0308 	add.w	r3, r7, #8
 800e254:	4619      	mov	r1, r3
 800e256:	6838      	ldr	r0, [r7, #0]
 800e258:	f7f9 f88a 	bl	8007370 <snmp_ans1_enc_tlv>
 800e25c:	4603      	mov	r3, r0
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d002      	beq.n	800e268 <snmp_trap_header_enc+0xb4>
 800e262:	f06f 030f 	mvn.w	r3, #15
 800e266:	e0f7      	b.n	800e458 <snmp_trap_header_enc+0x2a4>
  BUILD_EXEC( snmp_asn1_enc_raw(pbuf_stream,  (const u8_t *)snmp_community_trap, trap->comlen) );
 800e268:	4b7d      	ldr	r3, [pc, #500]	; (800e460 <snmp_trap_header_enc+0x2ac>)
 800e26a:	6819      	ldr	r1, [r3, #0]
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	8b5b      	ldrh	r3, [r3, #26]
 800e270:	461a      	mov	r2, r3
 800e272:	6838      	ldr	r0, [r7, #0]
 800e274:	f7f9 f907 	bl	8007486 <snmp_asn1_enc_raw>
 800e278:	4603      	mov	r3, r0
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d002      	beq.n	800e284 <snmp_trap_header_enc+0xd0>
 800e27e:	f06f 030f 	mvn.w	r3, #15
 800e282:	e0e9      	b.n	800e458 <snmp_trap_header_enc+0x2a4>

  /* 'PDU' sequence */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, (SNMP_ASN1_CLASS_CONTEXT | SNMP_ASN1_CONTENTTYPE_CONSTRUCTED | SNMP_ASN1_CONTEXT_PDU_TRAP), 0, trap->pdulen);
 800e284:	23a4      	movs	r3, #164	; 0xa4
 800e286:	723b      	strb	r3, [r7, #8]
 800e288:	2300      	movs	r3, #0
 800e28a:	727b      	strb	r3, [r7, #9]
 800e28c:	2300      	movs	r3, #0
 800e28e:	72bb      	strb	r3, [r7, #10]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	8b1b      	ldrh	r3, [r3, #24]
 800e294:	81bb      	strh	r3, [r7, #12]
  BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 800e296:	f107 0308 	add.w	r3, r7, #8
 800e29a:	4619      	mov	r1, r3
 800e29c:	6838      	ldr	r0, [r7, #0]
 800e29e:	f7f9 f867 	bl	8007370 <snmp_ans1_enc_tlv>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d002      	beq.n	800e2ae <snmp_trap_header_enc+0xfa>
 800e2a8:	f06f 030f 	mvn.w	r3, #15
 800e2ac:	e0d4      	b.n	800e458 <snmp_trap_header_enc+0x2a4>

  /* object ID */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_OBJECT_ID, 0, 0);
 800e2ae:	2306      	movs	r3, #6
 800e2b0:	723b      	strb	r3, [r7, #8]
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	727b      	strb	r3, [r7, #9]
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	72bb      	strb	r3, [r7, #10]
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_oid_cnt(trap->enterprise->id, trap->enterprise->len, &tlv.value_len);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	1d18      	adds	r0, r3, #4
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	781b      	ldrb	r3, [r3, #0]
 800e2ca:	b299      	uxth	r1, r3
 800e2cc:	f107 0308 	add.w	r3, r7, #8
 800e2d0:	3304      	adds	r3, #4
 800e2d2:	461a      	mov	r2, r3
 800e2d4:	f7f9 fa49 	bl	800776a <snmp_asn1_enc_oid_cnt>
  BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 800e2d8:	f107 0308 	add.w	r3, r7, #8
 800e2dc:	4619      	mov	r1, r3
 800e2de:	6838      	ldr	r0, [r7, #0]
 800e2e0:	f7f9 f846 	bl	8007370 <snmp_ans1_enc_tlv>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d002      	beq.n	800e2f0 <snmp_trap_header_enc+0x13c>
 800e2ea:	f06f 030f 	mvn.w	r3, #15
 800e2ee:	e0b3      	b.n	800e458 <snmp_trap_header_enc+0x2a4>
  BUILD_EXEC( snmp_asn1_enc_oid(pbuf_stream, trap->enterprise->id, trap->enterprise->len) );
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	1d19      	adds	r1, r3, #4
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	781b      	ldrb	r3, [r3, #0]
 800e2fc:	b29b      	uxth	r3, r3
 800e2fe:	461a      	mov	r2, r3
 800e300:	6838      	ldr	r0, [r7, #0]
 800e302:	f7f9 f94c 	bl	800759e <snmp_asn1_enc_oid>
 800e306:	4603      	mov	r3, r0
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d002      	beq.n	800e312 <snmp_trap_header_enc+0x15e>
 800e30c:	f06f 030f 	mvn.w	r3, #15
 800e310:	e0a2      	b.n	800e458 <snmp_trap_header_enc+0x2a4>
    BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
    BUILD_EXEC( snmp_asn1_enc_raw(pbuf_stream, (const u8_t *)&ip_2_ip6(&trap->sip)->addr, sizeof(ip_2_ip6(&trap->sip)->addr)) );
#endif
  } else {
#if LWIP_IPV4
    SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_IPADDR, 0, sizeof(ip_2_ip4(&trap->sip)->addr));
 800e312:	2340      	movs	r3, #64	; 0x40
 800e314:	723b      	strb	r3, [r7, #8]
 800e316:	2300      	movs	r3, #0
 800e318:	727b      	strb	r3, [r7, #9]
 800e31a:	2300      	movs	r3, #0
 800e31c:	72bb      	strb	r3, [r7, #10]
 800e31e:	2304      	movs	r3, #4
 800e320:	81bb      	strh	r3, [r7, #12]
    BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 800e322:	f107 0308 	add.w	r3, r7, #8
 800e326:	4619      	mov	r1, r3
 800e328:	6838      	ldr	r0, [r7, #0]
 800e32a:	f7f9 f821 	bl	8007370 <snmp_ans1_enc_tlv>
 800e32e:	4603      	mov	r3, r0
 800e330:	2b00      	cmp	r3, #0
 800e332:	d002      	beq.n	800e33a <snmp_trap_header_enc+0x186>
 800e334:	f06f 030f 	mvn.w	r3, #15
 800e338:	e08e      	b.n	800e458 <snmp_trap_header_enc+0x2a4>
    BUILD_EXEC( snmp_asn1_enc_raw(pbuf_stream, (const u8_t *)&ip_2_ip4(&trap->sip)->addr, sizeof(ip_2_ip4(&trap->sip)->addr)) );
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	3304      	adds	r3, #4
 800e33e:	2204      	movs	r2, #4
 800e340:	4619      	mov	r1, r3
 800e342:	6838      	ldr	r0, [r7, #0]
 800e344:	f7f9 f89f 	bl	8007486 <snmp_asn1_enc_raw>
 800e348:	4603      	mov	r3, r0
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d002      	beq.n	800e354 <snmp_trap_header_enc+0x1a0>
 800e34e:	f06f 030f 	mvn.w	r3, #15
 800e352:	e081      	b.n	800e458 <snmp_trap_header_enc+0x2a4>
#endif
  }

  /* trap length */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 800e354:	2302      	movs	r3, #2
 800e356:	723b      	strb	r3, [r7, #8]
 800e358:	2300      	movs	r3, #0
 800e35a:	727b      	strb	r3, [r7, #9]
 800e35c:	2300      	movs	r3, #0
 800e35e:	72bb      	strb	r3, [r7, #10]
 800e360:	2300      	movs	r3, #0
 800e362:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_s32t_cnt(trap->gen_trap, &tlv.value_len);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	689b      	ldr	r3, [r3, #8]
 800e368:	461a      	mov	r2, r3
 800e36a:	f107 0308 	add.w	r3, r7, #8
 800e36e:	3304      	adds	r3, #4
 800e370:	4619      	mov	r1, r3
 800e372:	4610      	mov	r0, r2
 800e374:	f7f9 f9ce 	bl	8007714 <snmp_asn1_enc_s32t_cnt>
  BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 800e378:	f107 0308 	add.w	r3, r7, #8
 800e37c:	4619      	mov	r1, r3
 800e37e:	6838      	ldr	r0, [r7, #0]
 800e380:	f7f8 fff6 	bl	8007370 <snmp_ans1_enc_tlv>
 800e384:	4603      	mov	r3, r0
 800e386:	2b00      	cmp	r3, #0
 800e388:	d002      	beq.n	800e390 <snmp_trap_header_enc+0x1dc>
 800e38a:	f06f 030f 	mvn.w	r3, #15
 800e38e:	e063      	b.n	800e458 <snmp_trap_header_enc+0x2a4>
  BUILD_EXEC( snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, trap->gen_trap) );
 800e390:	89b9      	ldrh	r1, [r7, #12]
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	689b      	ldr	r3, [r3, #8]
 800e396:	461a      	mov	r2, r3
 800e398:	6838      	ldr	r0, [r7, #0]
 800e39a:	f7f9 f8d1 	bl	8007540 <snmp_asn1_enc_s32t>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d002      	beq.n	800e3aa <snmp_trap_header_enc+0x1f6>
 800e3a4:	f06f 030f 	mvn.w	r3, #15
 800e3a8:	e056      	b.n	800e458 <snmp_trap_header_enc+0x2a4>

  /* specific trap */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_INTEGER, 0, 0);
 800e3aa:	2302      	movs	r3, #2
 800e3ac:	723b      	strb	r3, [r7, #8]
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	727b      	strb	r3, [r7, #9]
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	72bb      	strb	r3, [r7, #10]
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_s32t_cnt(trap->spc_trap, &tlv.value_len);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	68db      	ldr	r3, [r3, #12]
 800e3be:	461a      	mov	r2, r3
 800e3c0:	f107 0308 	add.w	r3, r7, #8
 800e3c4:	3304      	adds	r3, #4
 800e3c6:	4619      	mov	r1, r3
 800e3c8:	4610      	mov	r0, r2
 800e3ca:	f7f9 f9a3 	bl	8007714 <snmp_asn1_enc_s32t_cnt>
  BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 800e3ce:	f107 0308 	add.w	r3, r7, #8
 800e3d2:	4619      	mov	r1, r3
 800e3d4:	6838      	ldr	r0, [r7, #0]
 800e3d6:	f7f8 ffcb 	bl	8007370 <snmp_ans1_enc_tlv>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d002      	beq.n	800e3e6 <snmp_trap_header_enc+0x232>
 800e3e0:	f06f 030f 	mvn.w	r3, #15
 800e3e4:	e038      	b.n	800e458 <snmp_trap_header_enc+0x2a4>
  BUILD_EXEC( snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, trap->spc_trap) );
 800e3e6:	89b9      	ldrh	r1, [r7, #12]
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	68db      	ldr	r3, [r3, #12]
 800e3ec:	461a      	mov	r2, r3
 800e3ee:	6838      	ldr	r0, [r7, #0]
 800e3f0:	f7f9 f8a6 	bl	8007540 <snmp_asn1_enc_s32t>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d002      	beq.n	800e400 <snmp_trap_header_enc+0x24c>
 800e3fa:	f06f 030f 	mvn.w	r3, #15
 800e3fe:	e02b      	b.n	800e458 <snmp_trap_header_enc+0x2a4>

  /* timestamp */
  SNMP_ASN1_SET_TLV_PARAMS(tlv, SNMP_ASN1_TYPE_TIMETICKS, 0, 0);
 800e400:	2343      	movs	r3, #67	; 0x43
 800e402:	723b      	strb	r3, [r7, #8]
 800e404:	2300      	movs	r3, #0
 800e406:	727b      	strb	r3, [r7, #9]
 800e408:	2300      	movs	r3, #0
 800e40a:	72bb      	strb	r3, [r7, #10]
 800e40c:	2300      	movs	r3, #0
 800e40e:	81bb      	strh	r3, [r7, #12]
  snmp_asn1_enc_s32t_cnt(trap->ts, &tlv.value_len);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	691b      	ldr	r3, [r3, #16]
 800e414:	461a      	mov	r2, r3
 800e416:	f107 0308 	add.w	r3, r7, #8
 800e41a:	3304      	adds	r3, #4
 800e41c:	4619      	mov	r1, r3
 800e41e:	4610      	mov	r0, r2
 800e420:	f7f9 f978 	bl	8007714 <snmp_asn1_enc_s32t_cnt>
  BUILD_EXEC( snmp_ans1_enc_tlv(pbuf_stream, &tlv) );
 800e424:	f107 0308 	add.w	r3, r7, #8
 800e428:	4619      	mov	r1, r3
 800e42a:	6838      	ldr	r0, [r7, #0]
 800e42c:	f7f8 ffa0 	bl	8007370 <snmp_ans1_enc_tlv>
 800e430:	4603      	mov	r3, r0
 800e432:	2b00      	cmp	r3, #0
 800e434:	d002      	beq.n	800e43c <snmp_trap_header_enc+0x288>
 800e436:	f06f 030f 	mvn.w	r3, #15
 800e43a:	e00d      	b.n	800e458 <snmp_trap_header_enc+0x2a4>
  BUILD_EXEC( snmp_asn1_enc_s32t(pbuf_stream, tlv.value_len, trap->ts) );
 800e43c:	89b9      	ldrh	r1, [r7, #12]
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	691b      	ldr	r3, [r3, #16]
 800e442:	461a      	mov	r2, r3
 800e444:	6838      	ldr	r0, [r7, #0]
 800e446:	f7f9 f87b 	bl	8007540 <snmp_asn1_enc_s32t>
 800e44a:	4603      	mov	r3, r0
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d002      	beq.n	800e456 <snmp_trap_header_enc+0x2a2>
 800e450:	f06f 030f 	mvn.w	r3, #15
 800e454:	e000      	b.n	800e458 <snmp_trap_header_enc+0x2a4>

  return ERR_OK;
 800e456:	2300      	movs	r3, #0
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3710      	adds	r7, #16
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}
 800e460:	20000054 	.word	0x20000054

0800e464 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800e464:	b480      	push	{r7}
 800e466:	b083      	sub	sp, #12
 800e468:	af00      	add	r7, sp, #0
 800e46a:	4603      	mov	r3, r0
 800e46c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800e46e:	88fb      	ldrh	r3, [r7, #6]
 800e470:	021b      	lsls	r3, r3, #8
 800e472:	b21a      	sxth	r2, r3
 800e474:	88fb      	ldrh	r3, [r7, #6]
 800e476:	0a1b      	lsrs	r3, r3, #8
 800e478:	b29b      	uxth	r3, r3
 800e47a:	b21b      	sxth	r3, r3
 800e47c:	4313      	orrs	r3, r2
 800e47e:	b21b      	sxth	r3, r3
 800e480:	b29b      	uxth	r3, r3
}
 800e482:	4618      	mov	r0, r3
 800e484:	370c      	adds	r7, #12
 800e486:	46bd      	mov	sp, r7
 800e488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48c:	4770      	bx	lr

0800e48e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800e48e:	b480      	push	{r7}
 800e490:	b083      	sub	sp, #12
 800e492:	af00      	add	r7, sp, #0
 800e494:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	061a      	lsls	r2, r3, #24
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	021b      	lsls	r3, r3, #8
 800e49e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e4a2:	431a      	orrs	r2, r3
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	0a1b      	lsrs	r3, r3, #8
 800e4a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e4ac:	431a      	orrs	r2, r3
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	0e1b      	lsrs	r3, r3, #24
 800e4b2:	4313      	orrs	r3, r2
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	370c      	adds	r7, #12
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4be:	4770      	bx	lr

0800e4c0 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800e4c0:	b480      	push	{r7}
 800e4c2:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800e4c4:	bf00      	nop
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4cc:	4770      	bx	lr
	...

0800e4d0 <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	b083      	sub	sp, #12
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	6039      	str	r1, [r7, #0]
 800e4da:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 800e4dc:	79fb      	ldrb	r3, [r7, #7]
 800e4de:	2b01      	cmp	r3, #1
 800e4e0:	d80f      	bhi.n	800e502 <dns_setserver+0x32>
    if (dnsserver != NULL) {
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d006      	beq.n	800e4f6 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 800e4e8:	79fb      	ldrb	r3, [r7, #7]
 800e4ea:	4909      	ldr	r1, [pc, #36]	; (800e510 <dns_setserver+0x40>)
 800e4ec:	683a      	ldr	r2, [r7, #0]
 800e4ee:	6812      	ldr	r2, [r2, #0]
 800e4f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 800e4f4:	e005      	b.n	800e502 <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 800e4f6:	79fb      	ldrb	r3, [r7, #7]
 800e4f8:	4905      	ldr	r1, [pc, #20]	; (800e510 <dns_setserver+0x40>)
 800e4fa:	4a06      	ldr	r2, [pc, #24]	; (800e514 <dns_setserver+0x44>)
 800e4fc:	6812      	ldr	r2, [r2, #0]
 800e4fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800e502:	bf00      	nop
 800e504:	370c      	adds	r7, #12
 800e506:	46bd      	mov	sp, r7
 800e508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50c:	4770      	bx	lr
 800e50e:	bf00      	nop
 800e510:	20003be0 	.word	0x20003be0
 800e514:	08024538 	.word	0x08024538

0800e518 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 800e51c:	f000 faa8 	bl	800ea70 <dns_check_entries>
}
 800e520:	bf00      	nop
 800e522:	bd80      	pop	{r7, pc}

0800e524 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b090      	sub	sp, #64	; 0x40
 800e528:	af00      	add	r7, sp, #0
 800e52a:	4603      	mov	r3, r0
 800e52c:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 800e52e:	79fa      	ldrb	r2, [r7, #7]
 800e530:	4613      	mov	r3, r2
 800e532:	011b      	lsls	r3, r3, #4
 800e534:	4413      	add	r3, r2
 800e536:	011b      	lsls	r3, r3, #4
 800e538:	4a6c      	ldr	r2, [pc, #432]	; (800e6ec <dns_send+0x1c8>)
 800e53a:	4413      	add	r3, r2
 800e53c:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800e53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e540:	7adb      	ldrb	r3, [r3, #11]
 800e542:	2b01      	cmp	r3, #1
 800e544:	d906      	bls.n	800e554 <dns_send+0x30>
 800e546:	4b6a      	ldr	r3, [pc, #424]	; (800e6f0 <dns_send+0x1cc>)
 800e548:	f240 22fa 	movw	r2, #762	; 0x2fa
 800e54c:	4969      	ldr	r1, [pc, #420]	; (800e6f4 <dns_send+0x1d0>)
 800e54e:	486a      	ldr	r0, [pc, #424]	; (800e6f8 <dns_send+0x1d4>)
 800e550:	f00e f8ee 	bl	801c730 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800e554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e556:	7adb      	ldrb	r3, [r3, #11]
 800e558:	461a      	mov	r2, r3
 800e55a:	4b68      	ldr	r3, [pc, #416]	; (800e6fc <dns_send+0x1d8>)
 800e55c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d109      	bne.n	800e578 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 800e564:	79fb      	ldrb	r3, [r7, #7]
 800e566:	2100      	movs	r1, #0
 800e568:	4618      	mov	r0, r3
 800e56a:	f000 f8cb 	bl	800e704 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800e56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e570:	2200      	movs	r2, #0
 800e572:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800e574:	2300      	movs	r3, #0
 800e576:	e0b4      	b.n	800e6e2 <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800e578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e57a:	3310      	adds	r3, #16
 800e57c:	4618      	mov	r0, r3
 800e57e:	f7f1 fe5f 	bl	8000240 <strlen>
 800e582:	4603      	mov	r3, r0
 800e584:	b29b      	uxth	r3, r3
 800e586:	3312      	adds	r3, #18
 800e588:	b29b      	uxth	r3, r3
 800e58a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e58e:	4619      	mov	r1, r3
 800e590:	2036      	movs	r0, #54	; 0x36
 800e592:	f001 fb19 	bl	800fbc8 <pbuf_alloc>
 800e596:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800e598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	f000 8095 	beq.w	800e6ca <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800e5a0:	f107 0310 	add.w	r3, r7, #16
 800e5a4:	220c      	movs	r2, #12
 800e5a6:	2100      	movs	r1, #0
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f00d f97b 	bl	801b8a4 <memset>
    hdr.id = lwip_htons(entry->txid);
 800e5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b0:	891b      	ldrh	r3, [r3, #8]
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f7ff ff56 	bl	800e464 <lwip_htons>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 800e5bc:	2301      	movs	r3, #1
 800e5be:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800e5c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e5c4:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800e5c6:	f107 0310 	add.w	r3, r7, #16
 800e5ca:	220c      	movs	r2, #12
 800e5cc:	4619      	mov	r1, r3
 800e5ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5d0:	f002 f886 	bl	80106e0 <pbuf_take>
    hostname = entry->name;
 800e5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5d6:	3310      	adds	r3, #16
 800e5d8:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 800e5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5dc:	3b01      	subs	r3, #1
 800e5de:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800e5e0:	230c      	movs	r3, #12
 800e5e2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 800e5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5e6:	3301      	adds	r3, #1
 800e5e8:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 800e5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ec:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e5f4:	e007      	b.n	800e606 <dns_send+0xe2>
        ++n;
 800e5f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e5fa:	3301      	adds	r3, #1
 800e5fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800e600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e602:	3301      	adds	r3, #1
 800e604:	63bb      	str	r3, [r7, #56]	; 0x38
 800e606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e608:	781b      	ldrb	r3, [r3, #0]
 800e60a:	2b2e      	cmp	r3, #46	; 0x2e
 800e60c:	d003      	beq.n	800e616 <dns_send+0xf2>
 800e60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e610:	781b      	ldrb	r3, [r3, #0]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d1ef      	bne.n	800e5f6 <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800e616:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e61a:	1ad3      	subs	r3, r2, r3
 800e61c:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 800e61e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800e620:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e624:	4413      	add	r3, r2
 800e626:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e62a:	4293      	cmp	r3, r2
 800e62c:	dc53      	bgt.n	800e6d6 <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 800e62e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e632:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e634:	4619      	mov	r1, r3
 800e636:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e638:	f002 f980 	bl	801093c <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800e63c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e63e:	3301      	adds	r3, #1
 800e640:	b29b      	uxth	r3, r3
 800e642:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e644:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e646:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e648:	f002 f8dc 	bl	8010804 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800e64c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e650:	b29a      	uxth	r2, r3
 800e652:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e654:	4413      	add	r3, r2
 800e656:	b29b      	uxth	r3, r3
 800e658:	3301      	adds	r3, #1
 800e65a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 800e65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e65e:	781b      	ldrb	r3, [r3, #0]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d1bf      	bne.n	800e5e4 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 800e664:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e666:	2200      	movs	r2, #0
 800e668:	4619      	mov	r1, r3
 800e66a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e66c:	f002 f966 	bl	801093c <pbuf_put_at>
    query_idx++;
 800e670:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e672:	3301      	adds	r3, #1
 800e674:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800e676:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e67a:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800e67c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e680:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800e682:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e684:	f107 010c 	add.w	r1, r7, #12
 800e688:	2204      	movs	r2, #4
 800e68a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e68c:	f002 f8ba 	bl	8010804 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 800e690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e692:	7bdb      	ldrb	r3, [r3, #15]
 800e694:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 800e698:	2335      	movs	r3, #53	; 0x35
 800e69a:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 800e69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e69e:	7adb      	ldrb	r3, [r3, #11]
 800e6a0:	009b      	lsls	r3, r3, #2
 800e6a2:	4a16      	ldr	r2, [pc, #88]	; (800e6fc <dns_send+0x1d8>)
 800e6a4:	4413      	add	r3, r2
 800e6a6:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800e6a8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e6ac:	4a14      	ldr	r2, [pc, #80]	; (800e700 <dns_send+0x1dc>)
 800e6ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e6b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e6b4:	69fa      	ldr	r2, [r7, #28]
 800e6b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e6b8:	f007 ff4c 	bl	8016554 <udp_sendto>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 800e6c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e6c4:	f001 fd64 	bl	8010190 <pbuf_free>
 800e6c8:	e002      	b.n	800e6d0 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 800e6ca:	23ff      	movs	r3, #255	; 0xff
 800e6cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 800e6d0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800e6d4:	e005      	b.n	800e6e2 <dns_send+0x1be>
        goto overflow_return;
 800e6d6:	bf00      	nop
overflow_return:
  pbuf_free(p);
 800e6d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e6da:	f001 fd59 	bl	8010190 <pbuf_free>
  return ERR_VAL;
 800e6de:	f06f 0305 	mvn.w	r3, #5
}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	3740      	adds	r7, #64	; 0x40
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}
 800e6ea:	bf00      	nop
 800e6ec:	20003770 	.word	0x20003770
 800e6f0:	08020608 	.word	0x08020608
 800e6f4:	08020638 	.word	0x08020638
 800e6f8:	08020650 	.word	0x08020650
 800e6fc:	20003be0 	.word	0x20003be0
 800e700:	20003760 	.word	0x20003760

0800e704 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 800e704:	b590      	push	{r4, r7, lr}
 800e706:	b085      	sub	sp, #20
 800e708:	af00      	add	r7, sp, #0
 800e70a:	4603      	mov	r3, r0
 800e70c:	6039      	str	r1, [r7, #0]
 800e70e:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800e710:	2300      	movs	r3, #0
 800e712:	73fb      	strb	r3, [r7, #15]
 800e714:	e03d      	b.n	800e792 <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800e716:	7bfa      	ldrb	r2, [r7, #15]
 800e718:	4957      	ldr	r1, [pc, #348]	; (800e878 <dns_call_found+0x174>)
 800e71a:	4613      	mov	r3, r2
 800e71c:	005b      	lsls	r3, r3, #1
 800e71e:	4413      	add	r3, r2
 800e720:	009b      	lsls	r3, r3, #2
 800e722:	440b      	add	r3, r1
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d030      	beq.n	800e78c <dns_call_found+0x88>
 800e72a:	7bfa      	ldrb	r2, [r7, #15]
 800e72c:	4952      	ldr	r1, [pc, #328]	; (800e878 <dns_call_found+0x174>)
 800e72e:	4613      	mov	r3, r2
 800e730:	005b      	lsls	r3, r3, #1
 800e732:	4413      	add	r3, r2
 800e734:	009b      	lsls	r3, r3, #2
 800e736:	440b      	add	r3, r1
 800e738:	3308      	adds	r3, #8
 800e73a:	781b      	ldrb	r3, [r3, #0]
 800e73c:	79fa      	ldrb	r2, [r7, #7]
 800e73e:	429a      	cmp	r2, r3
 800e740:	d124      	bne.n	800e78c <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800e742:	7bfa      	ldrb	r2, [r7, #15]
 800e744:	494c      	ldr	r1, [pc, #304]	; (800e878 <dns_call_found+0x174>)
 800e746:	4613      	mov	r3, r2
 800e748:	005b      	lsls	r3, r3, #1
 800e74a:	4413      	add	r3, r2
 800e74c:	009b      	lsls	r3, r3, #2
 800e74e:	440b      	add	r3, r1
 800e750:	681c      	ldr	r4, [r3, #0]
 800e752:	79fa      	ldrb	r2, [r7, #7]
 800e754:	4613      	mov	r3, r2
 800e756:	011b      	lsls	r3, r3, #4
 800e758:	4413      	add	r3, r2
 800e75a:	011b      	lsls	r3, r3, #4
 800e75c:	3310      	adds	r3, #16
 800e75e:	4a47      	ldr	r2, [pc, #284]	; (800e87c <dns_call_found+0x178>)
 800e760:	1898      	adds	r0, r3, r2
 800e762:	7bfa      	ldrb	r2, [r7, #15]
 800e764:	4944      	ldr	r1, [pc, #272]	; (800e878 <dns_call_found+0x174>)
 800e766:	4613      	mov	r3, r2
 800e768:	005b      	lsls	r3, r3, #1
 800e76a:	4413      	add	r3, r2
 800e76c:	009b      	lsls	r3, r3, #2
 800e76e:	440b      	add	r3, r1
 800e770:	3304      	adds	r3, #4
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	461a      	mov	r2, r3
 800e776:	6839      	ldr	r1, [r7, #0]
 800e778:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 800e77a:	7bfa      	ldrb	r2, [r7, #15]
 800e77c:	493e      	ldr	r1, [pc, #248]	; (800e878 <dns_call_found+0x174>)
 800e77e:	4613      	mov	r3, r2
 800e780:	005b      	lsls	r3, r3, #1
 800e782:	4413      	add	r3, r2
 800e784:	009b      	lsls	r3, r3, #2
 800e786:	440b      	add	r3, r1
 800e788:	2200      	movs	r2, #0
 800e78a:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800e78c:	7bfb      	ldrb	r3, [r7, #15]
 800e78e:	3301      	adds	r3, #1
 800e790:	73fb      	strb	r3, [r7, #15]
 800e792:	7bfb      	ldrb	r3, [r7, #15]
 800e794:	2b03      	cmp	r3, #3
 800e796:	d9be      	bls.n	800e716 <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800e798:	2300      	movs	r3, #0
 800e79a:	73fb      	strb	r3, [r7, #15]
 800e79c:	e031      	b.n	800e802 <dns_call_found+0xfe>
    if (i == idx) {
 800e79e:	7bfa      	ldrb	r2, [r7, #15]
 800e7a0:	79fb      	ldrb	r3, [r7, #7]
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	d029      	beq.n	800e7fa <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800e7a6:	7bfa      	ldrb	r2, [r7, #15]
 800e7a8:	4934      	ldr	r1, [pc, #208]	; (800e87c <dns_call_found+0x178>)
 800e7aa:	4613      	mov	r3, r2
 800e7ac:	011b      	lsls	r3, r3, #4
 800e7ae:	4413      	add	r3, r2
 800e7b0:	011b      	lsls	r3, r3, #4
 800e7b2:	440b      	add	r3, r1
 800e7b4:	330a      	adds	r3, #10
 800e7b6:	781b      	ldrb	r3, [r3, #0]
 800e7b8:	2b02      	cmp	r3, #2
 800e7ba:	d11f      	bne.n	800e7fc <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800e7bc:	7bfa      	ldrb	r2, [r7, #15]
 800e7be:	492f      	ldr	r1, [pc, #188]	; (800e87c <dns_call_found+0x178>)
 800e7c0:	4613      	mov	r3, r2
 800e7c2:	011b      	lsls	r3, r3, #4
 800e7c4:	4413      	add	r3, r2
 800e7c6:	011b      	lsls	r3, r3, #4
 800e7c8:	440b      	add	r3, r1
 800e7ca:	330f      	adds	r3, #15
 800e7cc:	7819      	ldrb	r1, [r3, #0]
 800e7ce:	79fa      	ldrb	r2, [r7, #7]
 800e7d0:	482a      	ldr	r0, [pc, #168]	; (800e87c <dns_call_found+0x178>)
 800e7d2:	4613      	mov	r3, r2
 800e7d4:	011b      	lsls	r3, r3, #4
 800e7d6:	4413      	add	r3, r2
 800e7d8:	011b      	lsls	r3, r3, #4
 800e7da:	4403      	add	r3, r0
 800e7dc:	330f      	adds	r3, #15
 800e7de:	781b      	ldrb	r3, [r3, #0]
 800e7e0:	4299      	cmp	r1, r3
 800e7e2:	d10b      	bne.n	800e7fc <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800e7e4:	79fa      	ldrb	r2, [r7, #7]
 800e7e6:	4925      	ldr	r1, [pc, #148]	; (800e87c <dns_call_found+0x178>)
 800e7e8:	4613      	mov	r3, r2
 800e7ea:	011b      	lsls	r3, r3, #4
 800e7ec:	4413      	add	r3, r2
 800e7ee:	011b      	lsls	r3, r3, #4
 800e7f0:	440b      	add	r3, r1
 800e7f2:	330f      	adds	r3, #15
 800e7f4:	2204      	movs	r2, #4
 800e7f6:	701a      	strb	r2, [r3, #0]
        break;
 800e7f8:	e006      	b.n	800e808 <dns_call_found+0x104>
      continue; /* only check other requests */
 800e7fa:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800e7fc:	7bfb      	ldrb	r3, [r7, #15]
 800e7fe:	3301      	adds	r3, #1
 800e800:	73fb      	strb	r3, [r7, #15]
 800e802:	7bfb      	ldrb	r3, [r7, #15]
 800e804:	2b03      	cmp	r3, #3
 800e806:	d9ca      	bls.n	800e79e <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800e808:	79fa      	ldrb	r2, [r7, #7]
 800e80a:	491c      	ldr	r1, [pc, #112]	; (800e87c <dns_call_found+0x178>)
 800e80c:	4613      	mov	r3, r2
 800e80e:	011b      	lsls	r3, r3, #4
 800e810:	4413      	add	r3, r2
 800e812:	011b      	lsls	r3, r3, #4
 800e814:	440b      	add	r3, r1
 800e816:	330f      	adds	r3, #15
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	2b03      	cmp	r3, #3
 800e81c:	d827      	bhi.n	800e86e <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800e81e:	79fa      	ldrb	r2, [r7, #7]
 800e820:	4916      	ldr	r1, [pc, #88]	; (800e87c <dns_call_found+0x178>)
 800e822:	4613      	mov	r3, r2
 800e824:	011b      	lsls	r3, r3, #4
 800e826:	4413      	add	r3, r2
 800e828:	011b      	lsls	r3, r3, #4
 800e82a:	440b      	add	r3, r1
 800e82c:	330f      	adds	r3, #15
 800e82e:	781b      	ldrb	r3, [r3, #0]
 800e830:	461a      	mov	r2, r3
 800e832:	4b13      	ldr	r3, [pc, #76]	; (800e880 <dns_call_found+0x17c>)
 800e834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e838:	4618      	mov	r0, r3
 800e83a:	f008 f971 	bl	8016b20 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800e83e:	79fa      	ldrb	r2, [r7, #7]
 800e840:	490e      	ldr	r1, [pc, #56]	; (800e87c <dns_call_found+0x178>)
 800e842:	4613      	mov	r3, r2
 800e844:	011b      	lsls	r3, r3, #4
 800e846:	4413      	add	r3, r2
 800e848:	011b      	lsls	r3, r3, #4
 800e84a:	440b      	add	r3, r1
 800e84c:	330f      	adds	r3, #15
 800e84e:	781b      	ldrb	r3, [r3, #0]
 800e850:	4619      	mov	r1, r3
 800e852:	4b0b      	ldr	r3, [pc, #44]	; (800e880 <dns_call_found+0x17c>)
 800e854:	2200      	movs	r2, #0
 800e856:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800e85a:	79fa      	ldrb	r2, [r7, #7]
 800e85c:	4907      	ldr	r1, [pc, #28]	; (800e87c <dns_call_found+0x178>)
 800e85e:	4613      	mov	r3, r2
 800e860:	011b      	lsls	r3, r3, #4
 800e862:	4413      	add	r3, r2
 800e864:	011b      	lsls	r3, r3, #4
 800e866:	440b      	add	r3, r1
 800e868:	330f      	adds	r3, #15
 800e86a:	2204      	movs	r2, #4
 800e86c:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 800e86e:	bf00      	nop
 800e870:	3714      	adds	r7, #20
 800e872:	46bd      	mov	sp, r7
 800e874:	bd90      	pop	{r4, r7, pc}
 800e876:	bf00      	nop
 800e878:	20003bb0 	.word	0x20003bb0
 800e87c:	20003770 	.word	0x20003770
 800e880:	20003760 	.word	0x20003760

0800e884 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b082      	sub	sp, #8
 800e888:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800e88a:	f00d ff69 	bl	801c760 <rand>
 800e88e:	4603      	mov	r3, r0
 800e890:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800e892:	2300      	movs	r3, #0
 800e894:	71fb      	strb	r3, [r7, #7]
 800e896:	e01a      	b.n	800e8ce <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800e898:	79fa      	ldrb	r2, [r7, #7]
 800e89a:	4911      	ldr	r1, [pc, #68]	; (800e8e0 <dns_create_txid+0x5c>)
 800e89c:	4613      	mov	r3, r2
 800e89e:	011b      	lsls	r3, r3, #4
 800e8a0:	4413      	add	r3, r2
 800e8a2:	011b      	lsls	r3, r3, #4
 800e8a4:	440b      	add	r3, r1
 800e8a6:	330a      	adds	r3, #10
 800e8a8:	781b      	ldrb	r3, [r3, #0]
 800e8aa:	2b02      	cmp	r3, #2
 800e8ac:	d10c      	bne.n	800e8c8 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 800e8ae:	79fa      	ldrb	r2, [r7, #7]
 800e8b0:	490b      	ldr	r1, [pc, #44]	; (800e8e0 <dns_create_txid+0x5c>)
 800e8b2:	4613      	mov	r3, r2
 800e8b4:	011b      	lsls	r3, r3, #4
 800e8b6:	4413      	add	r3, r2
 800e8b8:	011b      	lsls	r3, r3, #4
 800e8ba:	440b      	add	r3, r1
 800e8bc:	3308      	adds	r3, #8
 800e8be:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800e8c0:	88ba      	ldrh	r2, [r7, #4]
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d100      	bne.n	800e8c8 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800e8c6:	e7e0      	b.n	800e88a <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800e8c8:	79fb      	ldrb	r3, [r7, #7]
 800e8ca:	3301      	adds	r3, #1
 800e8cc:	71fb      	strb	r3, [r7, #7]
 800e8ce:	79fb      	ldrb	r3, [r7, #7]
 800e8d0:	2b03      	cmp	r3, #3
 800e8d2:	d9e1      	bls.n	800e898 <dns_create_txid+0x14>
    }
  }

  return txid;
 800e8d4:	88bb      	ldrh	r3, [r7, #4]
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3708      	adds	r7, #8
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}
 800e8de:	bf00      	nop
 800e8e0:	20003770 	.word	0x20003770

0800e8e4 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b085      	sub	sp, #20
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d00d      	beq.n	800e912 <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	7adb      	ldrb	r3, [r3, #11]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d109      	bne.n	800e912 <dns_backupserver_available+0x2e>
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	7adb      	ldrb	r3, [r3, #11]
 800e902:	3301      	adds	r3, #1
 800e904:	4a06      	ldr	r2, [pc, #24]	; (800e920 <dns_backupserver_available+0x3c>)
 800e906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d001      	beq.n	800e912 <dns_backupserver_available+0x2e>
      ret = 1;
 800e90e:	2301      	movs	r3, #1
 800e910:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800e912:	7bfb      	ldrb	r3, [r7, #15]
}
 800e914:	4618      	mov	r0, r3
 800e916:	3714      	adds	r7, #20
 800e918:	46bd      	mov	sp, r7
 800e91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91e:	4770      	bx	lr
 800e920:	20003be0 	.word	0x20003be0

0800e924 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b084      	sub	sp, #16
 800e928:	af00      	add	r7, sp, #0
 800e92a:	4603      	mov	r3, r0
 800e92c:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800e92e:	79fa      	ldrb	r2, [r7, #7]
 800e930:	4613      	mov	r3, r2
 800e932:	011b      	lsls	r3, r3, #4
 800e934:	4413      	add	r3, r2
 800e936:	011b      	lsls	r3, r3, #4
 800e938:	4a48      	ldr	r2, [pc, #288]	; (800ea5c <dns_check_entry+0x138>)
 800e93a:	4413      	add	r3, r2
 800e93c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800e93e:	79fb      	ldrb	r3, [r7, #7]
 800e940:	2b03      	cmp	r3, #3
 800e942:	d906      	bls.n	800e952 <dns_check_entry+0x2e>
 800e944:	4b46      	ldr	r3, [pc, #280]	; (800ea60 <dns_check_entry+0x13c>)
 800e946:	f240 421c 	movw	r2, #1052	; 0x41c
 800e94a:	4946      	ldr	r1, [pc, #280]	; (800ea64 <dns_check_entry+0x140>)
 800e94c:	4846      	ldr	r0, [pc, #280]	; (800ea68 <dns_check_entry+0x144>)
 800e94e:	f00d feef 	bl	801c730 <iprintf>

  switch (entry->state) {
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	7a9b      	ldrb	r3, [r3, #10]
 800e956:	2b03      	cmp	r3, #3
 800e958:	d86f      	bhi.n	800ea3a <dns_check_entry+0x116>
 800e95a:	a201      	add	r2, pc, #4	; (adr r2, 800e960 <dns_check_entry+0x3c>)
 800e95c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e960:	0800ea4b 	.word	0x0800ea4b
 800e964:	0800e971 	.word	0x0800e971
 800e968:	0800e9a3 	.word	0x0800e9a3
 800e96c:	0800ea19 	.word	0x0800ea19
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800e970:	f7ff ff88 	bl	800e884 <dns_create_txid>
 800e974:	4603      	mov	r3, r0
 800e976:	461a      	mov	r2, r3
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	2202      	movs	r2, #2
 800e980:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	2200      	movs	r2, #0
 800e986:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	2201      	movs	r2, #1
 800e98c:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	2200      	movs	r2, #0
 800e992:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800e994:	79fb      	ldrb	r3, [r7, #7]
 800e996:	4618      	mov	r0, r3
 800e998:	f7ff fdc4 	bl	800e524 <dns_send>
 800e99c:	4603      	mov	r3, r0
 800e99e:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 800e9a0:	e058      	b.n	800ea54 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	7b1b      	ldrb	r3, [r3, #12]
 800e9a6:	3b01      	subs	r3, #1
 800e9a8:	b2da      	uxtb	r2, r3
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	731a      	strb	r2, [r3, #12]
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	7b1b      	ldrb	r3, [r3, #12]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d14b      	bne.n	800ea4e <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	7b5b      	ldrb	r3, [r3, #13]
 800e9ba:	3301      	adds	r3, #1
 800e9bc:	b2da      	uxtb	r2, r3
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	735a      	strb	r2, [r3, #13]
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	7b5b      	ldrb	r3, [r3, #13]
 800e9c6:	2b04      	cmp	r3, #4
 800e9c8:	d11b      	bne.n	800ea02 <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 800e9ca:	68f8      	ldr	r0, [r7, #12]
 800e9cc:	f7ff ff8a 	bl	800e8e4 <dns_backupserver_available>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d00c      	beq.n	800e9f0 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	7adb      	ldrb	r3, [r3, #11]
 800e9da:	3301      	adds	r3, #1
 800e9dc:	b2da      	uxtb	r2, r3
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	735a      	strb	r2, [r3, #13]
 800e9ee:	e00c      	b.n	800ea0a <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 800e9f0:	79fb      	ldrb	r3, [r7, #7]
 800e9f2:	2100      	movs	r1, #0
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f7ff fe85 	bl	800e704 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	729a      	strb	r2, [r3, #10]
            break;
 800ea00:	e028      	b.n	800ea54 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	7b5a      	ldrb	r2, [r3, #13]
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800ea0a:	79fb      	ldrb	r3, [r7, #7]
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f7ff fd89 	bl	800e524 <dns_send>
 800ea12:	4603      	mov	r3, r0
 800ea14:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800ea16:	e01a      	b.n	800ea4e <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d008      	beq.n	800ea32 <dns_check_entry+0x10e>
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	1e5a      	subs	r2, r3, #1
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	601a      	str	r2, [r3, #0]
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d10f      	bne.n	800ea52 <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	2200      	movs	r2, #0
 800ea36:	729a      	strb	r2, [r3, #10]
      }
      break;
 800ea38:	e00b      	b.n	800ea52 <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800ea3a:	4b09      	ldr	r3, [pc, #36]	; (800ea60 <dns_check_entry+0x13c>)
 800ea3c:	f240 425b 	movw	r2, #1115	; 0x45b
 800ea40:	490a      	ldr	r1, [pc, #40]	; (800ea6c <dns_check_entry+0x148>)
 800ea42:	4809      	ldr	r0, [pc, #36]	; (800ea68 <dns_check_entry+0x144>)
 800ea44:	f00d fe74 	bl	801c730 <iprintf>
      break;
 800ea48:	e004      	b.n	800ea54 <dns_check_entry+0x130>
      break;
 800ea4a:	bf00      	nop
 800ea4c:	e002      	b.n	800ea54 <dns_check_entry+0x130>
      break;
 800ea4e:	bf00      	nop
 800ea50:	e000      	b.n	800ea54 <dns_check_entry+0x130>
      break;
 800ea52:	bf00      	nop
  }
}
 800ea54:	bf00      	nop
 800ea56:	3710      	adds	r7, #16
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}
 800ea5c:	20003770 	.word	0x20003770
 800ea60:	08020608 	.word	0x08020608
 800ea64:	08020678 	.word	0x08020678
 800ea68:	08020650 	.word	0x08020650
 800ea6c:	08020694 	.word	0x08020694

0800ea70 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b082      	sub	sp, #8
 800ea74:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800ea76:	2300      	movs	r3, #0
 800ea78:	71fb      	strb	r3, [r7, #7]
 800ea7a:	e006      	b.n	800ea8a <dns_check_entries+0x1a>
    dns_check_entry(i);
 800ea7c:	79fb      	ldrb	r3, [r7, #7]
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f7ff ff50 	bl	800e924 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800ea84:	79fb      	ldrb	r3, [r7, #7]
 800ea86:	3301      	adds	r3, #1
 800ea88:	71fb      	strb	r3, [r7, #7]
 800ea8a:	79fb      	ldrb	r3, [r7, #7]
 800ea8c:	2b03      	cmp	r3, #3
 800ea8e:	d9f5      	bls.n	800ea7c <dns_check_entries+0xc>
  }
}
 800ea90:	bf00      	nop
 800ea92:	bf00      	nop
 800ea94:	3708      	adds	r7, #8
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}

0800ea9a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ea9a:	b580      	push	{r7, lr}
 800ea9c:	b082      	sub	sp, #8
 800ea9e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 800eaa4:	f001 ff6c 	bl	8010980 <stats_init>
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800eaa8:	f000 f8d6 	bl	800ec58 <mem_init>
  memp_init();
 800eaac:	f000 fc80 	bl	800f3b0 <memp_init>
  pbuf_init();
  netif_init();
 800eab0:	f000 fd66 	bl	800f580 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800eab4:	f007 fb32 	bl	801611c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800eab8:	f001 ff6a 	bl	8010990 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800eabc:	f7ff fd00 	bl	800e4c0 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800eac0:	f007 faa2 	bl	8016008 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800eac4:	bf00      	nop
 800eac6:	3708      	adds	r7, #8
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}

0800eacc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800eacc:	b480      	push	{r7}
 800eace:	b083      	sub	sp, #12
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	4603      	mov	r3, r0
 800ead4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ead6:	4b05      	ldr	r3, [pc, #20]	; (800eaec <ptr_to_mem+0x20>)
 800ead8:	681a      	ldr	r2, [r3, #0]
 800eada:	88fb      	ldrh	r3, [r7, #6]
 800eadc:	4413      	add	r3, r2
}
 800eade:	4618      	mov	r0, r3
 800eae0:	370c      	adds	r7, #12
 800eae2:	46bd      	mov	sp, r7
 800eae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae8:	4770      	bx	lr
 800eaea:	bf00      	nop
 800eaec:	20004254 	.word	0x20004254

0800eaf0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	b083      	sub	sp, #12
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800eaf8:	4b05      	ldr	r3, [pc, #20]	; (800eb10 <mem_to_ptr+0x20>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	687a      	ldr	r2, [r7, #4]
 800eafe:	1ad3      	subs	r3, r2, r3
 800eb00:	b29b      	uxth	r3, r3
}
 800eb02:	4618      	mov	r0, r3
 800eb04:	370c      	adds	r7, #12
 800eb06:	46bd      	mov	sp, r7
 800eb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0c:	4770      	bx	lr
 800eb0e:	bf00      	nop
 800eb10:	20004254 	.word	0x20004254

0800eb14 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800eb14:	b590      	push	{r4, r7, lr}
 800eb16:	b085      	sub	sp, #20
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800eb1c:	4b45      	ldr	r3, [pc, #276]	; (800ec34 <plug_holes+0x120>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	687a      	ldr	r2, [r7, #4]
 800eb22:	429a      	cmp	r2, r3
 800eb24:	d206      	bcs.n	800eb34 <plug_holes+0x20>
 800eb26:	4b44      	ldr	r3, [pc, #272]	; (800ec38 <plug_holes+0x124>)
 800eb28:	f240 12df 	movw	r2, #479	; 0x1df
 800eb2c:	4943      	ldr	r1, [pc, #268]	; (800ec3c <plug_holes+0x128>)
 800eb2e:	4844      	ldr	r0, [pc, #272]	; (800ec40 <plug_holes+0x12c>)
 800eb30:	f00d fdfe 	bl	801c730 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800eb34:	4b43      	ldr	r3, [pc, #268]	; (800ec44 <plug_holes+0x130>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	687a      	ldr	r2, [r7, #4]
 800eb3a:	429a      	cmp	r2, r3
 800eb3c:	d306      	bcc.n	800eb4c <plug_holes+0x38>
 800eb3e:	4b3e      	ldr	r3, [pc, #248]	; (800ec38 <plug_holes+0x124>)
 800eb40:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800eb44:	4940      	ldr	r1, [pc, #256]	; (800ec48 <plug_holes+0x134>)
 800eb46:	483e      	ldr	r0, [pc, #248]	; (800ec40 <plug_holes+0x12c>)
 800eb48:	f00d fdf2 	bl	801c730 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	791b      	ldrb	r3, [r3, #4]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d006      	beq.n	800eb62 <plug_holes+0x4e>
 800eb54:	4b38      	ldr	r3, [pc, #224]	; (800ec38 <plug_holes+0x124>)
 800eb56:	f240 12e1 	movw	r2, #481	; 0x1e1
 800eb5a:	493c      	ldr	r1, [pc, #240]	; (800ec4c <plug_holes+0x138>)
 800eb5c:	4838      	ldr	r0, [pc, #224]	; (800ec40 <plug_holes+0x12c>)
 800eb5e:	f00d fde7 	bl	801c730 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	881b      	ldrh	r3, [r3, #0]
 800eb66:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800eb6a:	d906      	bls.n	800eb7a <plug_holes+0x66>
 800eb6c:	4b32      	ldr	r3, [pc, #200]	; (800ec38 <plug_holes+0x124>)
 800eb6e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800eb72:	4937      	ldr	r1, [pc, #220]	; (800ec50 <plug_holes+0x13c>)
 800eb74:	4832      	ldr	r0, [pc, #200]	; (800ec40 <plug_holes+0x12c>)
 800eb76:	f00d fddb 	bl	801c730 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	881b      	ldrh	r3, [r3, #0]
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f7ff ffa4 	bl	800eacc <ptr_to_mem>
 800eb84:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800eb86:	687a      	ldr	r2, [r7, #4]
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d024      	beq.n	800ebd8 <plug_holes+0xc4>
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	791b      	ldrb	r3, [r3, #4]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d120      	bne.n	800ebd8 <plug_holes+0xc4>
 800eb96:	4b2b      	ldr	r3, [pc, #172]	; (800ec44 <plug_holes+0x130>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	68fa      	ldr	r2, [r7, #12]
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	d01b      	beq.n	800ebd8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800eba0:	4b2c      	ldr	r3, [pc, #176]	; (800ec54 <plug_holes+0x140>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	68fa      	ldr	r2, [r7, #12]
 800eba6:	429a      	cmp	r2, r3
 800eba8:	d102      	bne.n	800ebb0 <plug_holes+0x9c>
      lfree = mem;
 800ebaa:	4a2a      	ldr	r2, [pc, #168]	; (800ec54 <plug_holes+0x140>)
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	881a      	ldrh	r2, [r3, #0]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	881b      	ldrh	r3, [r3, #0]
 800ebbc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ebc0:	d00a      	beq.n	800ebd8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	881b      	ldrh	r3, [r3, #0]
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7ff ff80 	bl	800eacc <ptr_to_mem>
 800ebcc:	4604      	mov	r4, r0
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f7ff ff8e 	bl	800eaf0 <mem_to_ptr>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	885b      	ldrh	r3, [r3, #2]
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f7ff ff75 	bl	800eacc <ptr_to_mem>
 800ebe2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ebe4:	68ba      	ldr	r2, [r7, #8]
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d01f      	beq.n	800ec2c <plug_holes+0x118>
 800ebec:	68bb      	ldr	r3, [r7, #8]
 800ebee:	791b      	ldrb	r3, [r3, #4]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d11b      	bne.n	800ec2c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ebf4:	4b17      	ldr	r3, [pc, #92]	; (800ec54 <plug_holes+0x140>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	687a      	ldr	r2, [r7, #4]
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	d102      	bne.n	800ec04 <plug_holes+0xf0>
      lfree = pmem;
 800ebfe:	4a15      	ldr	r2, [pc, #84]	; (800ec54 <plug_holes+0x140>)
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	881a      	ldrh	r2, [r3, #0]
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	881b      	ldrh	r3, [r3, #0]
 800ec10:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ec14:	d00a      	beq.n	800ec2c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	881b      	ldrh	r3, [r3, #0]
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f7ff ff56 	bl	800eacc <ptr_to_mem>
 800ec20:	4604      	mov	r4, r0
 800ec22:	68b8      	ldr	r0, [r7, #8]
 800ec24:	f7ff ff64 	bl	800eaf0 <mem_to_ptr>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ec2c:	bf00      	nop
 800ec2e:	3714      	adds	r7, #20
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd90      	pop	{r4, r7, pc}
 800ec34:	20004254 	.word	0x20004254
 800ec38:	080206b4 	.word	0x080206b4
 800ec3c:	080206e4 	.word	0x080206e4
 800ec40:	080206fc 	.word	0x080206fc
 800ec44:	20004258 	.word	0x20004258
 800ec48:	08020724 	.word	0x08020724
 800ec4c:	08020740 	.word	0x08020740
 800ec50:	0802075c 	.word	0x0802075c
 800ec54:	2000425c 	.word	0x2000425c

0800ec58 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b082      	sub	sp, #8
 800ec5c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ec5e:	4b1b      	ldr	r3, [pc, #108]	; (800eccc <mem_init+0x74>)
 800ec60:	3303      	adds	r3, #3
 800ec62:	f023 0303 	bic.w	r3, r3, #3
 800ec66:	461a      	mov	r2, r3
 800ec68:	4b19      	ldr	r3, [pc, #100]	; (800ecd0 <mem_init+0x78>)
 800ec6a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ec6c:	4b18      	ldr	r3, [pc, #96]	; (800ecd0 <mem_init+0x78>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ec78:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2200      	movs	r2, #0
 800ec84:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ec86:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800ec8a:	f7ff ff1f 	bl	800eacc <ptr_to_mem>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	4a10      	ldr	r2, [pc, #64]	; (800ecd4 <mem_init+0x7c>)
 800ec92:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ec94:	4b0f      	ldr	r3, [pc, #60]	; (800ecd4 <mem_init+0x7c>)
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	2201      	movs	r2, #1
 800ec9a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ec9c:	4b0d      	ldr	r3, [pc, #52]	; (800ecd4 <mem_init+0x7c>)
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800eca4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800eca6:	4b0b      	ldr	r3, [pc, #44]	; (800ecd4 <mem_init+0x7c>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ecae:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ecb0:	4b07      	ldr	r3, [pc, #28]	; (800ecd0 <mem_init+0x78>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	4a08      	ldr	r2, [pc, #32]	; (800ecd8 <mem_init+0x80>)
 800ecb6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 800ecb8:	4b08      	ldr	r3, [pc, #32]	; (800ecdc <mem_init+0x84>)
 800ecba:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ecbe:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800ecc2:	bf00      	nop
 800ecc4:	3708      	adds	r7, #8
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}
 800ecca:	bf00      	nop
 800eccc:	20003c00 	.word	0x20003c00
 800ecd0:	20004254 	.word	0x20004254
 800ecd4:	20004258 	.word	0x20004258
 800ecd8:	2000425c 	.word	0x2000425c
 800ecdc:	20007204 	.word	0x20007204

0800ece0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b086      	sub	sp, #24
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f7ff ff01 	bl	800eaf0 <mem_to_ptr>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	881b      	ldrh	r3, [r3, #0]
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f7ff fee8 	bl	800eacc <ptr_to_mem>
 800ecfc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	885b      	ldrh	r3, [r3, #2]
 800ed02:	4618      	mov	r0, r3
 800ed04:	f7ff fee2 	bl	800eacc <ptr_to_mem>
 800ed08:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	881b      	ldrh	r3, [r3, #0]
 800ed0e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ed12:	d818      	bhi.n	800ed46 <mem_link_valid+0x66>
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	885b      	ldrh	r3, [r3, #2]
 800ed18:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ed1c:	d813      	bhi.n	800ed46 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ed22:	8afa      	ldrh	r2, [r7, #22]
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d004      	beq.n	800ed32 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	881b      	ldrh	r3, [r3, #0]
 800ed2c:	8afa      	ldrh	r2, [r7, #22]
 800ed2e:	429a      	cmp	r2, r3
 800ed30:	d109      	bne.n	800ed46 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ed32:	4b08      	ldr	r3, [pc, #32]	; (800ed54 <mem_link_valid+0x74>)
 800ed34:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ed36:	693a      	ldr	r2, [r7, #16]
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	d006      	beq.n	800ed4a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ed3c:	693b      	ldr	r3, [r7, #16]
 800ed3e:	885b      	ldrh	r3, [r3, #2]
 800ed40:	8afa      	ldrh	r2, [r7, #22]
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d001      	beq.n	800ed4a <mem_link_valid+0x6a>
    return 0;
 800ed46:	2300      	movs	r3, #0
 800ed48:	e000      	b.n	800ed4c <mem_link_valid+0x6c>
  }
  return 1;
 800ed4a:	2301      	movs	r3, #1
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	3718      	adds	r7, #24
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}
 800ed54:	20004258 	.word	0x20004258

0800ed58 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b084      	sub	sp, #16
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d07d      	beq.n	800ee62 <mem_free+0x10a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f003 0303 	and.w	r3, r3, #3
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d00f      	beq.n	800ed90 <mem_free+0x38>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ed70:	4b3e      	ldr	r3, [pc, #248]	; (800ee6c <mem_free+0x114>)
 800ed72:	f240 2273 	movw	r2, #627	; 0x273
 800ed76:	493e      	ldr	r1, [pc, #248]	; (800ee70 <mem_free+0x118>)
 800ed78:	483e      	ldr	r0, [pc, #248]	; (800ee74 <mem_free+0x11c>)
 800ed7a:	f00d fcd9 	bl	801c730 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ed7e:	4b3e      	ldr	r3, [pc, #248]	; (800ee78 <mem_free+0x120>)
 800ed80:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800ed84:	3301      	adds	r3, #1
 800ed86:	b29a      	uxth	r2, r3
 800ed88:	4b3b      	ldr	r3, [pc, #236]	; (800ee78 <mem_free+0x120>)
 800ed8a:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    return;
 800ed8e:	e069      	b.n	800ee64 <mem_free+0x10c>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	3b08      	subs	r3, #8
 800ed94:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ed96:	4b39      	ldr	r3, [pc, #228]	; (800ee7c <mem_free+0x124>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	68fa      	ldr	r2, [r7, #12]
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d306      	bcc.n	800edae <mem_free+0x56>
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f103 020c 	add.w	r2, r3, #12
 800eda6:	4b36      	ldr	r3, [pc, #216]	; (800ee80 <mem_free+0x128>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	429a      	cmp	r2, r3
 800edac:	d90f      	bls.n	800edce <mem_free+0x76>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800edae:	4b2f      	ldr	r3, [pc, #188]	; (800ee6c <mem_free+0x114>)
 800edb0:	f240 227f 	movw	r2, #639	; 0x27f
 800edb4:	4933      	ldr	r1, [pc, #204]	; (800ee84 <mem_free+0x12c>)
 800edb6:	482f      	ldr	r0, [pc, #188]	; (800ee74 <mem_free+0x11c>)
 800edb8:	f00d fcba 	bl	801c730 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800edbc:	4b2e      	ldr	r3, [pc, #184]	; (800ee78 <mem_free+0x120>)
 800edbe:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800edc2:	3301      	adds	r3, #1
 800edc4:	b29a      	uxth	r2, r3
 800edc6:	4b2c      	ldr	r3, [pc, #176]	; (800ee78 <mem_free+0x120>)
 800edc8:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    return;
 800edcc:	e04a      	b.n	800ee64 <mem_free+0x10c>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	791b      	ldrb	r3, [r3, #4]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d10f      	bne.n	800edf6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800edd6:	4b25      	ldr	r3, [pc, #148]	; (800ee6c <mem_free+0x114>)
 800edd8:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800eddc:	492a      	ldr	r1, [pc, #168]	; (800ee88 <mem_free+0x130>)
 800edde:	4825      	ldr	r0, [pc, #148]	; (800ee74 <mem_free+0x11c>)
 800ede0:	f00d fca6 	bl	801c730 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ede4:	4b24      	ldr	r3, [pc, #144]	; (800ee78 <mem_free+0x120>)
 800ede6:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800edea:	3301      	adds	r3, #1
 800edec:	b29a      	uxth	r2, r3
 800edee:	4b22      	ldr	r3, [pc, #136]	; (800ee78 <mem_free+0x120>)
 800edf0:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    return;
 800edf4:	e036      	b.n	800ee64 <mem_free+0x10c>
  }

  if (!mem_link_valid(mem)) {
 800edf6:	68f8      	ldr	r0, [r7, #12]
 800edf8:	f7ff ff72 	bl	800ece0 <mem_link_valid>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d10f      	bne.n	800ee22 <mem_free+0xca>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ee02:	4b1a      	ldr	r3, [pc, #104]	; (800ee6c <mem_free+0x114>)
 800ee04:	f240 2295 	movw	r2, #661	; 0x295
 800ee08:	4920      	ldr	r1, [pc, #128]	; (800ee8c <mem_free+0x134>)
 800ee0a:	481a      	ldr	r0, [pc, #104]	; (800ee74 <mem_free+0x11c>)
 800ee0c:	f00d fc90 	bl	801c730 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ee10:	4b19      	ldr	r3, [pc, #100]	; (800ee78 <mem_free+0x120>)
 800ee12:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800ee16:	3301      	adds	r3, #1
 800ee18:	b29a      	uxth	r2, r3
 800ee1a:	4b17      	ldr	r3, [pc, #92]	; (800ee78 <mem_free+0x120>)
 800ee1c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    return;
 800ee20:	e020      	b.n	800ee64 <mem_free+0x10c>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	2200      	movs	r2, #0
 800ee26:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ee28:	4b19      	ldr	r3, [pc, #100]	; (800ee90 <mem_free+0x138>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	68fa      	ldr	r2, [r7, #12]
 800ee2e:	429a      	cmp	r2, r3
 800ee30:	d202      	bcs.n	800ee38 <mem_free+0xe0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ee32:	4a17      	ldr	r2, [pc, #92]	; (800ee90 <mem_free+0x138>)
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 800ee38:	4b0f      	ldr	r3, [pc, #60]	; (800ee78 <mem_free+0x120>)
 800ee3a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 800ee3e:	4b0f      	ldr	r3, [pc, #60]	; (800ee7c <mem_free+0x124>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	68f9      	ldr	r1, [r7, #12]
 800ee44:	1acb      	subs	r3, r1, r3
 800ee46:	b299      	uxth	r1, r3
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	881b      	ldrh	r3, [r3, #0]
 800ee4c:	1acb      	subs	r3, r1, r3
 800ee4e:	b29b      	uxth	r3, r3
 800ee50:	4413      	add	r3, r2
 800ee52:	b29a      	uxth	r2, r3
 800ee54:	4b08      	ldr	r3, [pc, #32]	; (800ee78 <mem_free+0x120>)
 800ee56:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ee5a:	68f8      	ldr	r0, [r7, #12]
 800ee5c:	f7ff fe5a 	bl	800eb14 <plug_holes>
 800ee60:	e000      	b.n	800ee64 <mem_free+0x10c>
    return;
 800ee62:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800ee64:	3710      	adds	r7, #16
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}
 800ee6a:	bf00      	nop
 800ee6c:	080206b4 	.word	0x080206b4
 800ee70:	08020788 	.word	0x08020788
 800ee74:	080206fc 	.word	0x080206fc
 800ee78:	20007204 	.word	0x20007204
 800ee7c:	20004254 	.word	0x20004254
 800ee80:	20004258 	.word	0x20004258
 800ee84:	080207ac 	.word	0x080207ac
 800ee88:	080207c8 	.word	0x080207c8
 800ee8c:	080207f0 	.word	0x080207f0
 800ee90:	2000425c 	.word	0x2000425c

0800ee94 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b088      	sub	sp, #32
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	460b      	mov	r3, r1
 800ee9e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800eea0:	887b      	ldrh	r3, [r7, #2]
 800eea2:	3303      	adds	r3, #3
 800eea4:	b29b      	uxth	r3, r3
 800eea6:	f023 0303 	bic.w	r3, r3, #3
 800eeaa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800eeac:	8bfb      	ldrh	r3, [r7, #30]
 800eeae:	2b0b      	cmp	r3, #11
 800eeb0:	d801      	bhi.n	800eeb6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800eeb2:	230c      	movs	r3, #12
 800eeb4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800eeb6:	8bfb      	ldrh	r3, [r7, #30]
 800eeb8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800eebc:	d803      	bhi.n	800eec6 <mem_trim+0x32>
 800eebe:	8bfa      	ldrh	r2, [r7, #30]
 800eec0:	887b      	ldrh	r3, [r7, #2]
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d201      	bcs.n	800eeca <mem_trim+0x36>
    return NULL;
 800eec6:	2300      	movs	r3, #0
 800eec8:	e0ec      	b.n	800f0a4 <mem_trim+0x210>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800eeca:	4b78      	ldr	r3, [pc, #480]	; (800f0ac <mem_trim+0x218>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	687a      	ldr	r2, [r7, #4]
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d304      	bcc.n	800eede <mem_trim+0x4a>
 800eed4:	4b76      	ldr	r3, [pc, #472]	; (800f0b0 <mem_trim+0x21c>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	687a      	ldr	r2, [r7, #4]
 800eeda:	429a      	cmp	r2, r3
 800eedc:	d306      	bcc.n	800eeec <mem_trim+0x58>
 800eede:	4b75      	ldr	r3, [pc, #468]	; (800f0b4 <mem_trim+0x220>)
 800eee0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800eee4:	4974      	ldr	r1, [pc, #464]	; (800f0b8 <mem_trim+0x224>)
 800eee6:	4875      	ldr	r0, [pc, #468]	; (800f0bc <mem_trim+0x228>)
 800eee8:	f00d fc22 	bl	801c730 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800eeec:	4b6f      	ldr	r3, [pc, #444]	; (800f0ac <mem_trim+0x218>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	687a      	ldr	r2, [r7, #4]
 800eef2:	429a      	cmp	r2, r3
 800eef4:	d304      	bcc.n	800ef00 <mem_trim+0x6c>
 800eef6:	4b6e      	ldr	r3, [pc, #440]	; (800f0b0 <mem_trim+0x21c>)
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	687a      	ldr	r2, [r7, #4]
 800eefc:	429a      	cmp	r2, r3
 800eefe:	d309      	bcc.n	800ef14 <mem_trim+0x80>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ef00:	4b6f      	ldr	r3, [pc, #444]	; (800f0c0 <mem_trim+0x22c>)
 800ef02:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800ef06:	3301      	adds	r3, #1
 800ef08:	b29a      	uxth	r2, r3
 800ef0a:	4b6d      	ldr	r3, [pc, #436]	; (800f0c0 <mem_trim+0x22c>)
 800ef0c:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
    return rmem;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	e0c7      	b.n	800f0a4 <mem_trim+0x210>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	3b08      	subs	r3, #8
 800ef18:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ef1a:	69b8      	ldr	r0, [r7, #24]
 800ef1c:	f7ff fde8 	bl	800eaf0 <mem_to_ptr>
 800ef20:	4603      	mov	r3, r0
 800ef22:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ef24:	69bb      	ldr	r3, [r7, #24]
 800ef26:	881a      	ldrh	r2, [r3, #0]
 800ef28:	8afb      	ldrh	r3, [r7, #22]
 800ef2a:	1ad3      	subs	r3, r2, r3
 800ef2c:	b29b      	uxth	r3, r3
 800ef2e:	3b08      	subs	r3, #8
 800ef30:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ef32:	8bfa      	ldrh	r2, [r7, #30]
 800ef34:	8abb      	ldrh	r3, [r7, #20]
 800ef36:	429a      	cmp	r2, r3
 800ef38:	d906      	bls.n	800ef48 <mem_trim+0xb4>
 800ef3a:	4b5e      	ldr	r3, [pc, #376]	; (800f0b4 <mem_trim+0x220>)
 800ef3c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800ef40:	4960      	ldr	r1, [pc, #384]	; (800f0c4 <mem_trim+0x230>)
 800ef42:	485e      	ldr	r0, [pc, #376]	; (800f0bc <mem_trim+0x228>)
 800ef44:	f00d fbf4 	bl	801c730 <iprintf>
  if (newsize > size) {
 800ef48:	8bfa      	ldrh	r2, [r7, #30]
 800ef4a:	8abb      	ldrh	r3, [r7, #20]
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	d901      	bls.n	800ef54 <mem_trim+0xc0>
    /* not supported */
    return NULL;
 800ef50:	2300      	movs	r3, #0
 800ef52:	e0a7      	b.n	800f0a4 <mem_trim+0x210>
  }
  if (newsize == size) {
 800ef54:	8bfa      	ldrh	r2, [r7, #30]
 800ef56:	8abb      	ldrh	r3, [r7, #20]
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d101      	bne.n	800ef60 <mem_trim+0xcc>
    /* No change in size, simply return */
    return rmem;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	e0a1      	b.n	800f0a4 <mem_trim+0x210>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800ef60:	69bb      	ldr	r3, [r7, #24]
 800ef62:	881b      	ldrh	r3, [r3, #0]
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7ff fdb1 	bl	800eacc <ptr_to_mem>
 800ef6a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ef6c:	693b      	ldr	r3, [r7, #16]
 800ef6e:	791b      	ldrb	r3, [r3, #4]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d14b      	bne.n	800f00c <mem_trim+0x178>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ef74:	69bb      	ldr	r3, [r7, #24]
 800ef76:	881b      	ldrh	r3, [r3, #0]
 800ef78:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ef7c:	d106      	bne.n	800ef8c <mem_trim+0xf8>
 800ef7e:	4b4d      	ldr	r3, [pc, #308]	; (800f0b4 <mem_trim+0x220>)
 800ef80:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ef84:	4950      	ldr	r1, [pc, #320]	; (800f0c8 <mem_trim+0x234>)
 800ef86:	484d      	ldr	r0, [pc, #308]	; (800f0bc <mem_trim+0x228>)
 800ef88:	f00d fbd2 	bl	801c730 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ef8c:	693b      	ldr	r3, [r7, #16]
 800ef8e:	881b      	ldrh	r3, [r3, #0]
 800ef90:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ef92:	8afa      	ldrh	r2, [r7, #22]
 800ef94:	8bfb      	ldrh	r3, [r7, #30]
 800ef96:	4413      	add	r3, r2
 800ef98:	b29b      	uxth	r3, r3
 800ef9a:	3308      	adds	r3, #8
 800ef9c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ef9e:	4b4b      	ldr	r3, [pc, #300]	; (800f0cc <mem_trim+0x238>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	693a      	ldr	r2, [r7, #16]
 800efa4:	429a      	cmp	r2, r3
 800efa6:	d106      	bne.n	800efb6 <mem_trim+0x122>
      lfree = ptr_to_mem(ptr2);
 800efa8:	89fb      	ldrh	r3, [r7, #14]
 800efaa:	4618      	mov	r0, r3
 800efac:	f7ff fd8e 	bl	800eacc <ptr_to_mem>
 800efb0:	4603      	mov	r3, r0
 800efb2:	4a46      	ldr	r2, [pc, #280]	; (800f0cc <mem_trim+0x238>)
 800efb4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800efb6:	89fb      	ldrh	r3, [r7, #14]
 800efb8:	4618      	mov	r0, r3
 800efba:	f7ff fd87 	bl	800eacc <ptr_to_mem>
 800efbe:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	2200      	movs	r2, #0
 800efc4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	89ba      	ldrh	r2, [r7, #12]
 800efca:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800efcc:	693b      	ldr	r3, [r7, #16]
 800efce:	8afa      	ldrh	r2, [r7, #22]
 800efd0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800efd2:	69bb      	ldr	r3, [r7, #24]
 800efd4:	89fa      	ldrh	r2, [r7, #14]
 800efd6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800efd8:	693b      	ldr	r3, [r7, #16]
 800efda:	881b      	ldrh	r3, [r3, #0]
 800efdc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800efe0:	d007      	beq.n	800eff2 <mem_trim+0x15e>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800efe2:	693b      	ldr	r3, [r7, #16]
 800efe4:	881b      	ldrh	r3, [r3, #0]
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7ff fd70 	bl	800eacc <ptr_to_mem>
 800efec:	4602      	mov	r2, r0
 800efee:	89fb      	ldrh	r3, [r7, #14]
 800eff0:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 800eff2:	4b33      	ldr	r3, [pc, #204]	; (800f0c0 <mem_trim+0x22c>)
 800eff4:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 800eff8:	8bf9      	ldrh	r1, [r7, #30]
 800effa:	8abb      	ldrh	r3, [r7, #20]
 800effc:	1acb      	subs	r3, r1, r3
 800effe:	b29b      	uxth	r3, r3
 800f000:	4413      	add	r3, r2
 800f002:	b29a      	uxth	r2, r3
 800f004:	4b2e      	ldr	r3, [pc, #184]	; (800f0c0 <mem_trim+0x22c>)
 800f006:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800f00a:	e04a      	b.n	800f0a2 <mem_trim+0x20e>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f00c:	8bfb      	ldrh	r3, [r7, #30]
 800f00e:	f103 0214 	add.w	r2, r3, #20
 800f012:	8abb      	ldrh	r3, [r7, #20]
 800f014:	429a      	cmp	r2, r3
 800f016:	d844      	bhi.n	800f0a2 <mem_trim+0x20e>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f018:	8afa      	ldrh	r2, [r7, #22]
 800f01a:	8bfb      	ldrh	r3, [r7, #30]
 800f01c:	4413      	add	r3, r2
 800f01e:	b29b      	uxth	r3, r3
 800f020:	3308      	adds	r3, #8
 800f022:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f024:	69bb      	ldr	r3, [r7, #24]
 800f026:	881b      	ldrh	r3, [r3, #0]
 800f028:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f02c:	d106      	bne.n	800f03c <mem_trim+0x1a8>
 800f02e:	4b21      	ldr	r3, [pc, #132]	; (800f0b4 <mem_trim+0x220>)
 800f030:	f240 3216 	movw	r2, #790	; 0x316
 800f034:	4924      	ldr	r1, [pc, #144]	; (800f0c8 <mem_trim+0x234>)
 800f036:	4821      	ldr	r0, [pc, #132]	; (800f0bc <mem_trim+0x228>)
 800f038:	f00d fb7a 	bl	801c730 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f03c:	89fb      	ldrh	r3, [r7, #14]
 800f03e:	4618      	mov	r0, r3
 800f040:	f7ff fd44 	bl	800eacc <ptr_to_mem>
 800f044:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f046:	4b21      	ldr	r3, [pc, #132]	; (800f0cc <mem_trim+0x238>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	693a      	ldr	r2, [r7, #16]
 800f04c:	429a      	cmp	r2, r3
 800f04e:	d202      	bcs.n	800f056 <mem_trim+0x1c2>
      lfree = mem2;
 800f050:	4a1e      	ldr	r2, [pc, #120]	; (800f0cc <mem_trim+0x238>)
 800f052:	693b      	ldr	r3, [r7, #16]
 800f054:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f056:	693b      	ldr	r3, [r7, #16]
 800f058:	2200      	movs	r2, #0
 800f05a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f05c:	69bb      	ldr	r3, [r7, #24]
 800f05e:	881a      	ldrh	r2, [r3, #0]
 800f060:	693b      	ldr	r3, [r7, #16]
 800f062:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f064:	693b      	ldr	r3, [r7, #16]
 800f066:	8afa      	ldrh	r2, [r7, #22]
 800f068:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f06a:	69bb      	ldr	r3, [r7, #24]
 800f06c:	89fa      	ldrh	r2, [r7, #14]
 800f06e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	881b      	ldrh	r3, [r3, #0]
 800f074:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f078:	d007      	beq.n	800f08a <mem_trim+0x1f6>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	881b      	ldrh	r3, [r3, #0]
 800f07e:	4618      	mov	r0, r3
 800f080:	f7ff fd24 	bl	800eacc <ptr_to_mem>
 800f084:	4602      	mov	r2, r0
 800f086:	89fb      	ldrh	r3, [r7, #14]
 800f088:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 800f08a:	4b0d      	ldr	r3, [pc, #52]	; (800f0c0 <mem_trim+0x22c>)
 800f08c:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 800f090:	8bf9      	ldrh	r1, [r7, #30]
 800f092:	8abb      	ldrh	r3, [r7, #20]
 800f094:	1acb      	subs	r3, r1, r3
 800f096:	b29b      	uxth	r3, r3
 800f098:	4413      	add	r3, r2
 800f09a:	b29a      	uxth	r2, r3
 800f09c:	4b08      	ldr	r3, [pc, #32]	; (800f0c0 <mem_trim+0x22c>)
 800f09e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800f0a2:	687b      	ldr	r3, [r7, #4]
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3720      	adds	r7, #32
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}
 800f0ac:	20004254 	.word	0x20004254
 800f0b0:	20004258 	.word	0x20004258
 800f0b4:	080206b4 	.word	0x080206b4
 800f0b8:	08020824 	.word	0x08020824
 800f0bc:	080206fc 	.word	0x080206fc
 800f0c0:	20007204 	.word	0x20007204
 800f0c4:	0802083c 	.word	0x0802083c
 800f0c8:	0802085c 	.word	0x0802085c
 800f0cc:	2000425c 	.word	0x2000425c

0800f0d0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f0d0:	b590      	push	{r4, r7, lr}
 800f0d2:	b089      	sub	sp, #36	; 0x24
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f0da:	88fb      	ldrh	r3, [r7, #6]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d101      	bne.n	800f0e4 <mem_malloc+0x14>
    return NULL;
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	e118      	b.n	800f316 <mem_malloc+0x246>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f0e4:	88fb      	ldrh	r3, [r7, #6]
 800f0e6:	3303      	adds	r3, #3
 800f0e8:	b29b      	uxth	r3, r3
 800f0ea:	f023 0303 	bic.w	r3, r3, #3
 800f0ee:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f0f0:	8bbb      	ldrh	r3, [r7, #28]
 800f0f2:	2b0b      	cmp	r3, #11
 800f0f4:	d801      	bhi.n	800f0fa <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f0f6:	230c      	movs	r3, #12
 800f0f8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f0fa:	8bbb      	ldrh	r3, [r7, #28]
 800f0fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f100:	d803      	bhi.n	800f10a <mem_malloc+0x3a>
 800f102:	8bba      	ldrh	r2, [r7, #28]
 800f104:	88fb      	ldrh	r3, [r7, #6]
 800f106:	429a      	cmp	r2, r3
 800f108:	d201      	bcs.n	800f10e <mem_malloc+0x3e>
    return NULL;
 800f10a:	2300      	movs	r3, #0
 800f10c:	e103      	b.n	800f316 <mem_malloc+0x246>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f10e:	4b84      	ldr	r3, [pc, #528]	; (800f320 <mem_malloc+0x250>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	4618      	mov	r0, r3
 800f114:	f7ff fcec 	bl	800eaf0 <mem_to_ptr>
 800f118:	4603      	mov	r3, r0
 800f11a:	83fb      	strh	r3, [r7, #30]
 800f11c:	e0eb      	b.n	800f2f6 <mem_malloc+0x226>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f11e:	8bfb      	ldrh	r3, [r7, #30]
 800f120:	4618      	mov	r0, r3
 800f122:	f7ff fcd3 	bl	800eacc <ptr_to_mem>
 800f126:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	791b      	ldrb	r3, [r3, #4]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	f040 80db 	bne.w	800f2e8 <mem_malloc+0x218>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	881b      	ldrh	r3, [r3, #0]
 800f136:	461a      	mov	r2, r3
 800f138:	8bfb      	ldrh	r3, [r7, #30]
 800f13a:	1ad3      	subs	r3, r2, r3
 800f13c:	f1a3 0208 	sub.w	r2, r3, #8
 800f140:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f142:	429a      	cmp	r2, r3
 800f144:	f0c0 80d0 	bcc.w	800f2e8 <mem_malloc+0x218>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	881b      	ldrh	r3, [r3, #0]
 800f14c:	461a      	mov	r2, r3
 800f14e:	8bfb      	ldrh	r3, [r7, #30]
 800f150:	1ad3      	subs	r3, r2, r3
 800f152:	f1a3 0208 	sub.w	r2, r3, #8
 800f156:	8bbb      	ldrh	r3, [r7, #28]
 800f158:	3314      	adds	r3, #20
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d34c      	bcc.n	800f1f8 <mem_malloc+0x128>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f15e:	8bfa      	ldrh	r2, [r7, #30]
 800f160:	8bbb      	ldrh	r3, [r7, #28]
 800f162:	4413      	add	r3, r2
 800f164:	b29b      	uxth	r3, r3
 800f166:	3308      	adds	r3, #8
 800f168:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f16a:	8a7b      	ldrh	r3, [r7, #18]
 800f16c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f170:	d106      	bne.n	800f180 <mem_malloc+0xb0>
 800f172:	4b6c      	ldr	r3, [pc, #432]	; (800f324 <mem_malloc+0x254>)
 800f174:	f240 3287 	movw	r2, #903	; 0x387
 800f178:	496b      	ldr	r1, [pc, #428]	; (800f328 <mem_malloc+0x258>)
 800f17a:	486c      	ldr	r0, [pc, #432]	; (800f32c <mem_malloc+0x25c>)
 800f17c:	f00d fad8 	bl	801c730 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f180:	8a7b      	ldrh	r3, [r7, #18]
 800f182:	4618      	mov	r0, r3
 800f184:	f7ff fca2 	bl	800eacc <ptr_to_mem>
 800f188:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	2200      	movs	r2, #0
 800f18e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f190:	697b      	ldr	r3, [r7, #20]
 800f192:	881a      	ldrh	r2, [r3, #0]
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	8bfa      	ldrh	r2, [r7, #30]
 800f19c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	8a7a      	ldrh	r2, [r7, #18]
 800f1a2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	881b      	ldrh	r3, [r3, #0]
 800f1ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f1b2:	d007      	beq.n	800f1c4 <mem_malloc+0xf4>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	881b      	ldrh	r3, [r3, #0]
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	f7ff fc87 	bl	800eacc <ptr_to_mem>
 800f1be:	4602      	mov	r2, r0
 800f1c0:	8a7b      	ldrh	r3, [r7, #18]
 800f1c2:	8053      	strh	r3, [r2, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 800f1c4:	4b5a      	ldr	r3, [pc, #360]	; (800f330 <mem_malloc+0x260>)
 800f1c6:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 800f1ca:	8bbb      	ldrh	r3, [r7, #28]
 800f1cc:	4413      	add	r3, r2
 800f1ce:	b29b      	uxth	r3, r3
 800f1d0:	3308      	adds	r3, #8
 800f1d2:	b29a      	uxth	r2, r3
 800f1d4:	4b56      	ldr	r3, [pc, #344]	; (800f330 <mem_malloc+0x260>)
 800f1d6:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800f1da:	4b55      	ldr	r3, [pc, #340]	; (800f330 <mem_malloc+0x260>)
 800f1dc:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
 800f1e0:	4b53      	ldr	r3, [pc, #332]	; (800f330 <mem_malloc+0x260>)
 800f1e2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800f1e6:	429a      	cmp	r2, r3
 800f1e8:	d227      	bcs.n	800f23a <mem_malloc+0x16a>
 800f1ea:	4b51      	ldr	r3, [pc, #324]	; (800f330 <mem_malloc+0x260>)
 800f1ec:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 800f1f0:	4b4f      	ldr	r3, [pc, #316]	; (800f330 <mem_malloc+0x260>)
 800f1f2:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 800f1f6:	e020      	b.n	800f23a <mem_malloc+0x16a>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f1f8:	697b      	ldr	r3, [r7, #20]
 800f1fa:	2201      	movs	r2, #1
 800f1fc:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 800f1fe:	4b4c      	ldr	r3, [pc, #304]	; (800f330 <mem_malloc+0x260>)
 800f200:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 800f204:	697b      	ldr	r3, [r7, #20]
 800f206:	881b      	ldrh	r3, [r3, #0]
 800f208:	4413      	add	r3, r2
 800f20a:	b29c      	uxth	r4, r3
 800f20c:	6978      	ldr	r0, [r7, #20]
 800f20e:	f7ff fc6f 	bl	800eaf0 <mem_to_ptr>
 800f212:	4603      	mov	r3, r0
 800f214:	1ae3      	subs	r3, r4, r3
 800f216:	b29a      	uxth	r2, r3
 800f218:	4b45      	ldr	r3, [pc, #276]	; (800f330 <mem_malloc+0x260>)
 800f21a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 800f21e:	4b44      	ldr	r3, [pc, #272]	; (800f330 <mem_malloc+0x260>)
 800f220:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	; 0xae
 800f224:	4b42      	ldr	r3, [pc, #264]	; (800f330 <mem_malloc+0x260>)
 800f226:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800f22a:	429a      	cmp	r2, r3
 800f22c:	d205      	bcs.n	800f23a <mem_malloc+0x16a>
 800f22e:	4b40      	ldr	r3, [pc, #256]	; (800f330 <mem_malloc+0x260>)
 800f230:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 800f234:	4b3e      	ldr	r3, [pc, #248]	; (800f330 <mem_malloc+0x260>)
 800f236:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f23a:	4b39      	ldr	r3, [pc, #228]	; (800f320 <mem_malloc+0x250>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	697a      	ldr	r2, [r7, #20]
 800f240:	429a      	cmp	r2, r3
 800f242:	d127      	bne.n	800f294 <mem_malloc+0x1c4>
          struct mem *cur = lfree;
 800f244:	4b36      	ldr	r3, [pc, #216]	; (800f320 <mem_malloc+0x250>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f24a:	e005      	b.n	800f258 <mem_malloc+0x188>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f24c:	69bb      	ldr	r3, [r7, #24]
 800f24e:	881b      	ldrh	r3, [r3, #0]
 800f250:	4618      	mov	r0, r3
 800f252:	f7ff fc3b 	bl	800eacc <ptr_to_mem>
 800f256:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f258:	69bb      	ldr	r3, [r7, #24]
 800f25a:	791b      	ldrb	r3, [r3, #4]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d004      	beq.n	800f26a <mem_malloc+0x19a>
 800f260:	4b34      	ldr	r3, [pc, #208]	; (800f334 <mem_malloc+0x264>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	69ba      	ldr	r2, [r7, #24]
 800f266:	429a      	cmp	r2, r3
 800f268:	d1f0      	bne.n	800f24c <mem_malloc+0x17c>
          }
          lfree = cur;
 800f26a:	4a2d      	ldr	r2, [pc, #180]	; (800f320 <mem_malloc+0x250>)
 800f26c:	69bb      	ldr	r3, [r7, #24]
 800f26e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f270:	4b2b      	ldr	r3, [pc, #172]	; (800f320 <mem_malloc+0x250>)
 800f272:	681a      	ldr	r2, [r3, #0]
 800f274:	4b2f      	ldr	r3, [pc, #188]	; (800f334 <mem_malloc+0x264>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	429a      	cmp	r2, r3
 800f27a:	d00b      	beq.n	800f294 <mem_malloc+0x1c4>
 800f27c:	4b28      	ldr	r3, [pc, #160]	; (800f320 <mem_malloc+0x250>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	791b      	ldrb	r3, [r3, #4]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d006      	beq.n	800f294 <mem_malloc+0x1c4>
 800f286:	4b27      	ldr	r3, [pc, #156]	; (800f324 <mem_malloc+0x254>)
 800f288:	f240 32b5 	movw	r2, #949	; 0x3b5
 800f28c:	492a      	ldr	r1, [pc, #168]	; (800f338 <mem_malloc+0x268>)
 800f28e:	4827      	ldr	r0, [pc, #156]	; (800f32c <mem_malloc+0x25c>)
 800f290:	f00d fa4e 	bl	801c730 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f294:	8bba      	ldrh	r2, [r7, #28]
 800f296:	697b      	ldr	r3, [r7, #20]
 800f298:	4413      	add	r3, r2
 800f29a:	3308      	adds	r3, #8
 800f29c:	4a25      	ldr	r2, [pc, #148]	; (800f334 <mem_malloc+0x264>)
 800f29e:	6812      	ldr	r2, [r2, #0]
 800f2a0:	4293      	cmp	r3, r2
 800f2a2:	d906      	bls.n	800f2b2 <mem_malloc+0x1e2>
 800f2a4:	4b1f      	ldr	r3, [pc, #124]	; (800f324 <mem_malloc+0x254>)
 800f2a6:	f240 32b9 	movw	r2, #953	; 0x3b9
 800f2aa:	4924      	ldr	r1, [pc, #144]	; (800f33c <mem_malloc+0x26c>)
 800f2ac:	481f      	ldr	r0, [pc, #124]	; (800f32c <mem_malloc+0x25c>)
 800f2ae:	f00d fa3f 	bl	801c730 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f2b2:	697b      	ldr	r3, [r7, #20]
 800f2b4:	f003 0303 	and.w	r3, r3, #3
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d006      	beq.n	800f2ca <mem_malloc+0x1fa>
 800f2bc:	4b19      	ldr	r3, [pc, #100]	; (800f324 <mem_malloc+0x254>)
 800f2be:	f240 32bb 	movw	r2, #955	; 0x3bb
 800f2c2:	491f      	ldr	r1, [pc, #124]	; (800f340 <mem_malloc+0x270>)
 800f2c4:	4819      	ldr	r0, [pc, #100]	; (800f32c <mem_malloc+0x25c>)
 800f2c6:	f00d fa33 	bl	801c730 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f2ca:	697b      	ldr	r3, [r7, #20]
 800f2cc:	f003 0303 	and.w	r3, r3, #3
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d006      	beq.n	800f2e2 <mem_malloc+0x212>
 800f2d4:	4b13      	ldr	r3, [pc, #76]	; (800f324 <mem_malloc+0x254>)
 800f2d6:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f2da:	491a      	ldr	r1, [pc, #104]	; (800f344 <mem_malloc+0x274>)
 800f2dc:	4813      	ldr	r0, [pc, #76]	; (800f32c <mem_malloc+0x25c>)
 800f2de:	f00d fa27 	bl	801c730 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f2e2:	697b      	ldr	r3, [r7, #20]
 800f2e4:	3308      	adds	r3, #8
 800f2e6:	e016      	b.n	800f316 <mem_malloc+0x246>
         ptr = ptr_to_mem(ptr)->next) {
 800f2e8:	8bfb      	ldrh	r3, [r7, #30]
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f7ff fbee 	bl	800eacc <ptr_to_mem>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	881b      	ldrh	r3, [r3, #0]
 800f2f4:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f2f6:	8bfa      	ldrh	r2, [r7, #30]
 800f2f8:	8bbb      	ldrh	r3, [r7, #28]
 800f2fa:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800f2fe:	429a      	cmp	r2, r3
 800f300:	f4ff af0d 	bcc.w	800f11e <mem_malloc+0x4e>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 800f304:	4b0a      	ldr	r3, [pc, #40]	; (800f330 <mem_malloc+0x260>)
 800f306:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800f30a:	3301      	adds	r3, #1
 800f30c:	b29a      	uxth	r2, r3
 800f30e:	4b08      	ldr	r3, [pc, #32]	; (800f330 <mem_malloc+0x260>)
 800f310:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f314:	2300      	movs	r3, #0
}
 800f316:	4618      	mov	r0, r3
 800f318:	3724      	adds	r7, #36	; 0x24
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd90      	pop	{r4, r7, pc}
 800f31e:	bf00      	nop
 800f320:	2000425c 	.word	0x2000425c
 800f324:	080206b4 	.word	0x080206b4
 800f328:	0802085c 	.word	0x0802085c
 800f32c:	080206fc 	.word	0x080206fc
 800f330:	20007204 	.word	0x20007204
 800f334:	20004258 	.word	0x20004258
 800f338:	08020870 	.word	0x08020870
 800f33c:	0802088c 	.word	0x0802088c
 800f340:	080208bc 	.word	0x080208bc
 800f344:	080208ec 	.word	0x080208ec

0800f348 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f348:	b480      	push	{r7}
 800f34a:	b085      	sub	sp, #20
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	68db      	ldr	r3, [r3, #12]
 800f354:	2200      	movs	r2, #0
 800f356:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	689b      	ldr	r3, [r3, #8]
 800f35c:	3303      	adds	r3, #3
 800f35e:	f023 0303 	bic.w	r3, r3, #3
 800f362:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f364:	2300      	movs	r3, #0
 800f366:	60fb      	str	r3, [r7, #12]
 800f368:	e011      	b.n	800f38e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	68db      	ldr	r3, [r3, #12]
 800f36e:	681a      	ldr	r2, [r3, #0]
 800f370:	68bb      	ldr	r3, [r7, #8]
 800f372:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	68db      	ldr	r3, [r3, #12]
 800f378:	68ba      	ldr	r2, [r7, #8]
 800f37a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	889b      	ldrh	r3, [r3, #4]
 800f380:	461a      	mov	r2, r3
 800f382:	68bb      	ldr	r3, [r7, #8]
 800f384:	4413      	add	r3, r2
 800f386:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	3301      	adds	r3, #1
 800f38c:	60fb      	str	r3, [r7, #12]
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	88db      	ldrh	r3, [r3, #6]
 800f392:	461a      	mov	r2, r3
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	4293      	cmp	r3, r2
 800f398:	dbe7      	blt.n	800f36a <memp_init_pool+0x22>
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	687a      	ldr	r2, [r7, #4]
 800f3a0:	88d2      	ldrh	r2, [r2, #6]
 800f3a2:	805a      	strh	r2, [r3, #2]
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f3a4:	bf00      	nop
 800f3a6:	3714      	adds	r7, #20
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ae:	4770      	bx	lr

0800f3b0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b082      	sub	sp, #8
 800f3b4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	80fb      	strh	r3, [r7, #6]
 800f3ba:	e014      	b.n	800f3e6 <memp_init+0x36>
    memp_init_pool(memp_pools[i]);
 800f3bc:	88fb      	ldrh	r3, [r7, #6]
 800f3be:	4a0e      	ldr	r2, [pc, #56]	; (800f3f8 <memp_init+0x48>)
 800f3c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f7ff ffbf 	bl	800f348 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 800f3ca:	88fb      	ldrh	r3, [r7, #6]
 800f3cc:	4a0a      	ldr	r2, [pc, #40]	; (800f3f8 <memp_init+0x48>)
 800f3ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f3d2:	88fb      	ldrh	r3, [r7, #6]
 800f3d4:	6812      	ldr	r2, [r2, #0]
 800f3d6:	4909      	ldr	r1, [pc, #36]	; (800f3fc <memp_init+0x4c>)
 800f3d8:	332c      	adds	r3, #44	; 0x2c
 800f3da:	009b      	lsls	r3, r3, #2
 800f3dc:	440b      	add	r3, r1
 800f3de:	605a      	str	r2, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f3e0:	88fb      	ldrh	r3, [r7, #6]
 800f3e2:	3301      	adds	r3, #1
 800f3e4:	80fb      	strh	r3, [r7, #6]
 800f3e6:	88fb      	ldrh	r3, [r7, #6]
 800f3e8:	2b08      	cmp	r3, #8
 800f3ea:	d9e7      	bls.n	800f3bc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f3ec:	bf00      	nop
 800f3ee:	bf00      	nop
 800f3f0:	3708      	adds	r7, #8
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}
 800f3f6:	bf00      	nop
 800f3f8:	080244bc 	.word	0x080244bc
 800f3fc:	20007204 	.word	0x20007204

0800f400 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b084      	sub	sp, #16
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	68db      	ldr	r3, [r3, #12]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d026      	beq.n	800f464 <do_memp_malloc_pool+0x64>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	68db      	ldr	r3, [r3, #12]
 800f41a:	68fa      	ldr	r2, [r7, #12]
 800f41c:	6812      	ldr	r2, [r2, #0]
 800f41e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	f003 0303 	and.w	r3, r3, #3
 800f426:	2b00      	cmp	r3, #0
 800f428:	d006      	beq.n	800f438 <do_memp_malloc_pool+0x38>
 800f42a:	4b14      	ldr	r3, [pc, #80]	; (800f47c <do_memp_malloc_pool+0x7c>)
 800f42c:	f44f 728c 	mov.w	r2, #280	; 0x118
 800f430:	4913      	ldr	r1, [pc, #76]	; (800f480 <do_memp_malloc_pool+0x80>)
 800f432:	4814      	ldr	r0, [pc, #80]	; (800f484 <do_memp_malloc_pool+0x84>)
 800f434:	f00d f97c 	bl	801c730 <iprintf>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	889a      	ldrh	r2, [r3, #4]
 800f43e:	3201      	adds	r2, #1
 800f440:	b292      	uxth	r2, r2
 800f442:	809a      	strh	r2, [r3, #4]
    if (desc->stats->used > desc->stats->max) {
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	889a      	ldrh	r2, [r3, #4]
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	88db      	ldrh	r3, [r3, #6]
 800f450:	429a      	cmp	r2, r3
 800f452:	d905      	bls.n	800f460 <do_memp_malloc_pool+0x60>
      desc->stats->max = desc->stats->used;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681a      	ldr	r2, [r3, #0]
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	8892      	ldrh	r2, [r2, #4]
 800f45e:	80da      	strh	r2, [r3, #6]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	e006      	b.n	800f472 <do_memp_malloc_pool+0x72>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	881a      	ldrh	r2, [r3, #0]
 800f46a:	3201      	adds	r2, #1
 800f46c:	b292      	uxth	r2, r2
 800f46e:	801a      	strh	r2, [r3, #0]
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f470:	2300      	movs	r3, #0
}
 800f472:	4618      	mov	r0, r3
 800f474:	3710      	adds	r7, #16
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}
 800f47a:	bf00      	nop
 800f47c:	08020910 	.word	0x08020910
 800f480:	08020940 	.word	0x08020940
 800f484:	08020964 	.word	0x08020964

0800f488 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b084      	sub	sp, #16
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	4603      	mov	r3, r0
 800f490:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f492:	79fb      	ldrb	r3, [r7, #7]
 800f494:	2b08      	cmp	r3, #8
 800f496:	d908      	bls.n	800f4aa <memp_malloc+0x22>
 800f498:	4b0a      	ldr	r3, [pc, #40]	; (800f4c4 <memp_malloc+0x3c>)
 800f49a:	f240 1257 	movw	r2, #343	; 0x157
 800f49e:	490a      	ldr	r1, [pc, #40]	; (800f4c8 <memp_malloc+0x40>)
 800f4a0:	480a      	ldr	r0, [pc, #40]	; (800f4cc <memp_malloc+0x44>)
 800f4a2:	f00d f945 	bl	801c730 <iprintf>
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	e008      	b.n	800f4bc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f4aa:	79fb      	ldrb	r3, [r7, #7]
 800f4ac:	4a08      	ldr	r2, [pc, #32]	; (800f4d0 <memp_malloc+0x48>)
 800f4ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7ff ffa4 	bl	800f400 <do_memp_malloc_pool>
 800f4b8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f4ba:	68fb      	ldr	r3, [r7, #12]
}
 800f4bc:	4618      	mov	r0, r3
 800f4be:	3710      	adds	r7, #16
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}
 800f4c4:	08020910 	.word	0x08020910
 800f4c8:	080209a0 	.word	0x080209a0
 800f4cc:	08020964 	.word	0x08020964
 800f4d0:	080244bc 	.word	0x080244bc

0800f4d4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b084      	sub	sp, #16
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
 800f4dc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	f003 0303 	and.w	r3, r3, #3
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d006      	beq.n	800f4f6 <do_memp_free_pool+0x22>
 800f4e8:	4b0d      	ldr	r3, [pc, #52]	; (800f520 <do_memp_free_pool+0x4c>)
 800f4ea:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800f4ee:	490d      	ldr	r1, [pc, #52]	; (800f524 <do_memp_free_pool+0x50>)
 800f4f0:	480d      	ldr	r0, [pc, #52]	; (800f528 <do_memp_free_pool+0x54>)
 800f4f2:	f00d f91d 	bl	801c730 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	60fb      	str	r3, [r7, #12]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	889a      	ldrh	r2, [r3, #4]
 800f500:	3a01      	subs	r2, #1
 800f502:	b292      	uxth	r2, r2
 800f504:	809a      	strh	r2, [r3, #4]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	68db      	ldr	r3, [r3, #12]
 800f50a:	681a      	ldr	r2, [r3, #0]
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	68db      	ldr	r3, [r3, #12]
 800f514:	68fa      	ldr	r2, [r7, #12]
 800f516:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800f518:	bf00      	nop
 800f51a:	3710      	adds	r7, #16
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}
 800f520:	08020910 	.word	0x08020910
 800f524:	080209c0 	.word	0x080209c0
 800f528:	08020964 	.word	0x08020964

0800f52c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b082      	sub	sp, #8
 800f530:	af00      	add	r7, sp, #0
 800f532:	4603      	mov	r3, r0
 800f534:	6039      	str	r1, [r7, #0]
 800f536:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f538:	79fb      	ldrb	r3, [r7, #7]
 800f53a:	2b08      	cmp	r3, #8
 800f53c:	d907      	bls.n	800f54e <memp_free+0x22>
 800f53e:	4b0c      	ldr	r3, [pc, #48]	; (800f570 <memp_free+0x44>)
 800f540:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800f544:	490b      	ldr	r1, [pc, #44]	; (800f574 <memp_free+0x48>)
 800f546:	480c      	ldr	r0, [pc, #48]	; (800f578 <memp_free+0x4c>)
 800f548:	f00d f8f2 	bl	801c730 <iprintf>
 800f54c:	e00c      	b.n	800f568 <memp_free+0x3c>

  if (mem == NULL) {
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d008      	beq.n	800f566 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f554:	79fb      	ldrb	r3, [r7, #7]
 800f556:	4a09      	ldr	r2, [pc, #36]	; (800f57c <memp_free+0x50>)
 800f558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f55c:	6839      	ldr	r1, [r7, #0]
 800f55e:	4618      	mov	r0, r3
 800f560:	f7ff ffb8 	bl	800f4d4 <do_memp_free_pool>
 800f564:	e000      	b.n	800f568 <memp_free+0x3c>
    return;
 800f566:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f568:	3708      	adds	r7, #8
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}
 800f56e:	bf00      	nop
 800f570:	08020910 	.word	0x08020910
 800f574:	080209e0 	.word	0x080209e0
 800f578:	08020964 	.word	0x08020964
 800f57c:	080244bc 	.word	0x080244bc

0800f580 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f580:	b480      	push	{r7}
 800f582:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f584:	bf00      	nop
 800f586:	46bd      	mov	sp, r7
 800f588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58c:	4770      	bx	lr
	...

0800f590 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b086      	sub	sp, #24
 800f594:	af00      	add	r7, sp, #0
 800f596:	60f8      	str	r0, [r7, #12]
 800f598:	60b9      	str	r1, [r7, #8]
 800f59a:	607a      	str	r2, [r7, #4]
 800f59c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d108      	bne.n	800f5b6 <netif_add+0x26>
 800f5a4:	4b5b      	ldr	r3, [pc, #364]	; (800f714 <netif_add+0x184>)
 800f5a6:	f240 1227 	movw	r2, #295	; 0x127
 800f5aa:	495b      	ldr	r1, [pc, #364]	; (800f718 <netif_add+0x188>)
 800f5ac:	485b      	ldr	r0, [pc, #364]	; (800f71c <netif_add+0x18c>)
 800f5ae:	f00d f8bf 	bl	801c730 <iprintf>
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	e0a9      	b.n	800f70a <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800f5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d108      	bne.n	800f5ce <netif_add+0x3e>
 800f5bc:	4b55      	ldr	r3, [pc, #340]	; (800f714 <netif_add+0x184>)
 800f5be:	f44f 7294 	mov.w	r2, #296	; 0x128
 800f5c2:	4957      	ldr	r1, [pc, #348]	; (800f720 <netif_add+0x190>)
 800f5c4:	4855      	ldr	r0, [pc, #340]	; (800f71c <netif_add+0x18c>)
 800f5c6:	f00d f8b3 	bl	801c730 <iprintf>
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	e09d      	b.n	800f70a <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800f5ce:	68bb      	ldr	r3, [r7, #8]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d101      	bne.n	800f5d8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800f5d4:	4b53      	ldr	r3, [pc, #332]	; (800f724 <netif_add+0x194>)
 800f5d6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d101      	bne.n	800f5e2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800f5de:	4b51      	ldr	r3, [pc, #324]	; (800f724 <netif_add+0x194>)
 800f5e0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d101      	bne.n	800f5ec <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800f5e8:	4b4e      	ldr	r3, [pc, #312]	; (800f724 <netif_add+0x194>)
 800f5ea:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	4a49      	ldr	r2, [pc, #292]	; (800f728 <netif_add+0x198>)
 800f602:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	2200      	movs	r2, #0
 800f608:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	2200      	movs	r2, #0
 800f60e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	3324      	adds	r3, #36	; 0x24
 800f616:	2204      	movs	r2, #4
 800f618:	2100      	movs	r1, #0
 800f61a:	4618      	mov	r0, r3
 800f61c:	f00c f942 	bl	801b8a4 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	2200      	movs	r2, #0
 800f624:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	6a3a      	ldr	r2, [r7, #32]
 800f62a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800f62c:	4b3f      	ldr	r3, [pc, #252]	; (800f72c <netif_add+0x19c>)
 800f62e:	781a      	ldrb	r2, [r3, #0]
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f63a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	687a      	ldr	r2, [r7, #4]
 800f640:	68b9      	ldr	r1, [r7, #8]
 800f642:	68f8      	ldr	r0, [r7, #12]
 800f644:	f000 f914 	bl	800f870 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f64a:	68f8      	ldr	r0, [r7, #12]
 800f64c:	4798      	blx	r3
 800f64e:	4603      	mov	r3, r0
 800f650:	2b00      	cmp	r3, #0
 800f652:	d001      	beq.n	800f658 <netif_add+0xc8>
    return NULL;
 800f654:	2300      	movs	r3, #0
 800f656:	e058      	b.n	800f70a <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f65e:	2bff      	cmp	r3, #255	; 0xff
 800f660:	d103      	bne.n	800f66a <netif_add+0xda>
        netif->num = 0;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	2200      	movs	r2, #0
 800f666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800f66a:	2300      	movs	r3, #0
 800f66c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f66e:	4b30      	ldr	r3, [pc, #192]	; (800f730 <netif_add+0x1a0>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	617b      	str	r3, [r7, #20]
 800f674:	e02b      	b.n	800f6ce <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800f676:	697a      	ldr	r2, [r7, #20]
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d106      	bne.n	800f68c <netif_add+0xfc>
 800f67e:	4b25      	ldr	r3, [pc, #148]	; (800f714 <netif_add+0x184>)
 800f680:	f240 128b 	movw	r2, #395	; 0x18b
 800f684:	492b      	ldr	r1, [pc, #172]	; (800f734 <netif_add+0x1a4>)
 800f686:	4825      	ldr	r0, [pc, #148]	; (800f71c <netif_add+0x18c>)
 800f688:	f00d f852 	bl	801c730 <iprintf>
        num_netifs++;
 800f68c:	693b      	ldr	r3, [r7, #16]
 800f68e:	3301      	adds	r3, #1
 800f690:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800f692:	693b      	ldr	r3, [r7, #16]
 800f694:	2bff      	cmp	r3, #255	; 0xff
 800f696:	dd06      	ble.n	800f6a6 <netif_add+0x116>
 800f698:	4b1e      	ldr	r3, [pc, #120]	; (800f714 <netif_add+0x184>)
 800f69a:	f240 128d 	movw	r2, #397	; 0x18d
 800f69e:	4926      	ldr	r1, [pc, #152]	; (800f738 <netif_add+0x1a8>)
 800f6a0:	481e      	ldr	r0, [pc, #120]	; (800f71c <netif_add+0x18c>)
 800f6a2:	f00d f845 	bl	801c730 <iprintf>
        if (netif2->num == netif->num) {
 800f6a6:	697b      	ldr	r3, [r7, #20]
 800f6a8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f6b2:	429a      	cmp	r2, r3
 800f6b4:	d108      	bne.n	800f6c8 <netif_add+0x138>
          netif->num++;
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f6bc:	3301      	adds	r3, #1
 800f6be:	b2da      	uxtb	r2, r3
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800f6c6:	e005      	b.n	800f6d4 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	617b      	str	r3, [r7, #20]
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d1d0      	bne.n	800f676 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800f6d4:	697b      	ldr	r3, [r7, #20]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d1be      	bne.n	800f658 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f6e0:	2bfe      	cmp	r3, #254	; 0xfe
 800f6e2:	d103      	bne.n	800f6ec <netif_add+0x15c>
    netif_num = 0;
 800f6e4:	4b11      	ldr	r3, [pc, #68]	; (800f72c <netif_add+0x19c>)
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	701a      	strb	r2, [r3, #0]
 800f6ea:	e006      	b.n	800f6fa <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f6f2:	3301      	adds	r3, #1
 800f6f4:	b2da      	uxtb	r2, r3
 800f6f6:	4b0d      	ldr	r3, [pc, #52]	; (800f72c <netif_add+0x19c>)
 800f6f8:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800f6fa:	4b0d      	ldr	r3, [pc, #52]	; (800f730 <netif_add+0x1a0>)
 800f6fc:	681a      	ldr	r2, [r3, #0]
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800f702:	4a0b      	ldr	r2, [pc, #44]	; (800f730 <netif_add+0x1a0>)
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800f708:	68fb      	ldr	r3, [r7, #12]
}
 800f70a:	4618      	mov	r0, r3
 800f70c:	3718      	adds	r7, #24
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}
 800f712:	bf00      	nop
 800f714:	080209fc 	.word	0x080209fc
 800f718:	08020a90 	.word	0x08020a90
 800f71c:	08020a4c 	.word	0x08020a4c
 800f720:	08020aac 	.word	0x08020aac
 800f724:	08024538 	.word	0x08024538
 800f728:	0800fab3 	.word	0x0800fab3
 800f72c:	20007200 	.word	0x20007200
 800f730:	200071f8 	.word	0x200071f8
 800f734:	08020ad0 	.word	0x08020ad0
 800f738:	08020ae4 	.word	0x08020ae4

0800f73c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b082      	sub	sp, #8
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
 800f744:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800f746:	6839      	ldr	r1, [r7, #0]
 800f748:	6878      	ldr	r0, [r7, #4]
 800f74a:	f002 fcb1 	bl	80120b0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800f74e:	6839      	ldr	r1, [r7, #0]
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f007 fa4b 	bl	8016bec <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800f756:	bf00      	nop
 800f758:	3708      	adds	r7, #8
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}
	...

0800f760 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b086      	sub	sp, #24
 800f764:	af00      	add	r7, sp, #0
 800f766:	60f8      	str	r0, [r7, #12]
 800f768:	60b9      	str	r1, [r7, #8]
 800f76a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d106      	bne.n	800f780 <netif_do_set_ipaddr+0x20>
 800f772:	4b1d      	ldr	r3, [pc, #116]	; (800f7e8 <netif_do_set_ipaddr+0x88>)
 800f774:	f240 12cb 	movw	r2, #459	; 0x1cb
 800f778:	491c      	ldr	r1, [pc, #112]	; (800f7ec <netif_do_set_ipaddr+0x8c>)
 800f77a:	481d      	ldr	r0, [pc, #116]	; (800f7f0 <netif_do_set_ipaddr+0x90>)
 800f77c:	f00c ffd8 	bl	801c730 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d106      	bne.n	800f794 <netif_do_set_ipaddr+0x34>
 800f786:	4b18      	ldr	r3, [pc, #96]	; (800f7e8 <netif_do_set_ipaddr+0x88>)
 800f788:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800f78c:	4917      	ldr	r1, [pc, #92]	; (800f7ec <netif_do_set_ipaddr+0x8c>)
 800f78e:	4818      	ldr	r0, [pc, #96]	; (800f7f0 <netif_do_set_ipaddr+0x90>)
 800f790:	f00c ffce 	bl	801c730 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	681a      	ldr	r2, [r3, #0]
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	3304      	adds	r3, #4
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	429a      	cmp	r2, r3
 800f7a0:	d01c      	beq.n	800f7dc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800f7a2:	68bb      	ldr	r3, [r7, #8]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	3304      	adds	r3, #4
 800f7ac:	681a      	ldr	r2, [r3, #0]
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800f7b2:	f107 0314 	add.w	r3, r7, #20
 800f7b6:	4619      	mov	r1, r3
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f7ff ffbf 	bl	800f73c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d002      	beq.n	800f7ca <netif_do_set_ipaddr+0x6a>
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	e000      	b.n	800f7cc <netif_do_set_ipaddr+0x6c>
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	68fa      	ldr	r2, [r7, #12]
 800f7ce:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800f7d0:	2101      	movs	r1, #1
 800f7d2:	68f8      	ldr	r0, [r7, #12]
 800f7d4:	f000 f8de 	bl	800f994 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800f7d8:	2301      	movs	r3, #1
 800f7da:	e000      	b.n	800f7de <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800f7dc:	2300      	movs	r3, #0
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3718      	adds	r7, #24
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}
 800f7e6:	bf00      	nop
 800f7e8:	080209fc 	.word	0x080209fc
 800f7ec:	08020b14 	.word	0x08020b14
 800f7f0:	08020a4c 	.word	0x08020a4c

0800f7f4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b085      	sub	sp, #20
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	60f8      	str	r0, [r7, #12]
 800f7fc:	60b9      	str	r1, [r7, #8]
 800f7fe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	681a      	ldr	r2, [r3, #0]
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	3308      	adds	r3, #8
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	429a      	cmp	r2, r3
 800f80c:	d00a      	beq.n	800f824 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d002      	beq.n	800f81a <netif_do_set_netmask+0x26>
 800f814:	68bb      	ldr	r3, [r7, #8]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	e000      	b.n	800f81c <netif_do_set_netmask+0x28>
 800f81a:	2300      	movs	r3, #0
 800f81c:	68fa      	ldr	r2, [r7, #12]
 800f81e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800f820:	2301      	movs	r3, #1
 800f822:	e000      	b.n	800f826 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800f824:	2300      	movs	r3, #0
}
 800f826:	4618      	mov	r0, r3
 800f828:	3714      	adds	r7, #20
 800f82a:	46bd      	mov	sp, r7
 800f82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f830:	4770      	bx	lr

0800f832 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800f832:	b480      	push	{r7}
 800f834:	b085      	sub	sp, #20
 800f836:	af00      	add	r7, sp, #0
 800f838:	60f8      	str	r0, [r7, #12]
 800f83a:	60b9      	str	r1, [r7, #8]
 800f83c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800f83e:	68bb      	ldr	r3, [r7, #8]
 800f840:	681a      	ldr	r2, [r3, #0]
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	330c      	adds	r3, #12
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	429a      	cmp	r2, r3
 800f84a:	d00a      	beq.n	800f862 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d002      	beq.n	800f858 <netif_do_set_gw+0x26>
 800f852:	68bb      	ldr	r3, [r7, #8]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	e000      	b.n	800f85a <netif_do_set_gw+0x28>
 800f858:	2300      	movs	r3, #0
 800f85a:	68fa      	ldr	r2, [r7, #12]
 800f85c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800f85e:	2301      	movs	r3, #1
 800f860:	e000      	b.n	800f864 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800f862:	2300      	movs	r3, #0
}
 800f864:	4618      	mov	r0, r3
 800f866:	3714      	adds	r7, #20
 800f868:	46bd      	mov	sp, r7
 800f86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86e:	4770      	bx	lr

0800f870 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b088      	sub	sp, #32
 800f874:	af00      	add	r7, sp, #0
 800f876:	60f8      	str	r0, [r7, #12]
 800f878:	60b9      	str	r1, [r7, #8]
 800f87a:	607a      	str	r2, [r7, #4]
 800f87c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800f87e:	2300      	movs	r3, #0
 800f880:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800f882:	2300      	movs	r3, #0
 800f884:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d101      	bne.n	800f890 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800f88c:	4b1c      	ldr	r3, [pc, #112]	; (800f900 <netif_set_addr+0x90>)
 800f88e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d101      	bne.n	800f89a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800f896:	4b1a      	ldr	r3, [pc, #104]	; (800f900 <netif_set_addr+0x90>)
 800f898:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d101      	bne.n	800f8a4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800f8a0:	4b17      	ldr	r3, [pc, #92]	; (800f900 <netif_set_addr+0x90>)
 800f8a2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800f8a4:	68bb      	ldr	r3, [r7, #8]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d003      	beq.n	800f8b2 <netif_set_addr+0x42>
 800f8aa:	68bb      	ldr	r3, [r7, #8]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d101      	bne.n	800f8b6 <netif_set_addr+0x46>
 800f8b2:	2301      	movs	r3, #1
 800f8b4:	e000      	b.n	800f8b8 <netif_set_addr+0x48>
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d006      	beq.n	800f8ce <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f8c0:	f107 0310 	add.w	r3, r7, #16
 800f8c4:	461a      	mov	r2, r3
 800f8c6:	68b9      	ldr	r1, [r7, #8]
 800f8c8:	68f8      	ldr	r0, [r7, #12]
 800f8ca:	f7ff ff49 	bl	800f760 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800f8ce:	69fa      	ldr	r2, [r7, #28]
 800f8d0:	6879      	ldr	r1, [r7, #4]
 800f8d2:	68f8      	ldr	r0, [r7, #12]
 800f8d4:	f7ff ff8e 	bl	800f7f4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800f8d8:	69ba      	ldr	r2, [r7, #24]
 800f8da:	6839      	ldr	r1, [r7, #0]
 800f8dc:	68f8      	ldr	r0, [r7, #12]
 800f8de:	f7ff ffa8 	bl	800f832 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d106      	bne.n	800f8f6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f8e8:	f107 0310 	add.w	r3, r7, #16
 800f8ec:	461a      	mov	r2, r3
 800f8ee:	68b9      	ldr	r1, [r7, #8]
 800f8f0:	68f8      	ldr	r0, [r7, #12]
 800f8f2:	f7ff ff35 	bl	800f760 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800f8f6:	bf00      	nop
 800f8f8:	3720      	adds	r7, #32
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}
 800f8fe:	bf00      	nop
 800f900:	08024538 	.word	0x08024538

0800f904 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800f904:	b480      	push	{r7}
 800f906:	b083      	sub	sp, #12
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800f90c:	4a04      	ldr	r2, [pc, #16]	; (800f920 <netif_set_default+0x1c>)
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800f912:	bf00      	nop
 800f914:	370c      	adds	r7, #12
 800f916:	46bd      	mov	sp, r7
 800f918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91c:	4770      	bx	lr
 800f91e:	bf00      	nop
 800f920:	200071fc 	.word	0x200071fc

0800f924 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b082      	sub	sp, #8
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d107      	bne.n	800f942 <netif_set_up+0x1e>
 800f932:	4b14      	ldr	r3, [pc, #80]	; (800f984 <netif_set_up+0x60>)
 800f934:	f44f 7254 	mov.w	r2, #848	; 0x350
 800f938:	4913      	ldr	r1, [pc, #76]	; (800f988 <netif_set_up+0x64>)
 800f93a:	4814      	ldr	r0, [pc, #80]	; (800f98c <netif_set_up+0x68>)
 800f93c:	f00c fef8 	bl	801c730 <iprintf>
 800f940:	e01c      	b.n	800f97c <netif_set_up+0x58>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f948:	f003 0301 	and.w	r3, r3, #1
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d115      	bne.n	800f97c <netif_set_up+0x58>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f956:	f043 0301 	orr.w	r3, r3, #1
 800f95a:	b2da      	uxtb	r2, r3
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
 800f962:	f7f7 fc77 	bl	8007254 <sys_now>
 800f966:	4603      	mov	r3, r0
 800f968:	4a09      	ldr	r2, [pc, #36]	; (800f990 <netif_set_up+0x6c>)
 800f96a:	fba2 2303 	umull	r2, r3, r2, r3
 800f96e:	08da      	lsrs	r2, r3, #3
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	63da      	str	r2, [r3, #60]	; 0x3c
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f974:	2103      	movs	r1, #3
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f000 f80c 	bl	800f994 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800f97c:	3708      	adds	r7, #8
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}
 800f982:	bf00      	nop
 800f984:	080209fc 	.word	0x080209fc
 800f988:	08020b84 	.word	0x08020b84
 800f98c:	08020a4c 	.word	0x08020a4c
 800f990:	cccccccd 	.word	0xcccccccd

0800f994 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b082      	sub	sp, #8
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
 800f99c:	460b      	mov	r3, r1
 800f99e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d106      	bne.n	800f9b4 <netif_issue_reports+0x20>
 800f9a6:	4b18      	ldr	r3, [pc, #96]	; (800fa08 <netif_issue_reports+0x74>)
 800f9a8:	f240 326d 	movw	r2, #877	; 0x36d
 800f9ac:	4917      	ldr	r1, [pc, #92]	; (800fa0c <netif_issue_reports+0x78>)
 800f9ae:	4818      	ldr	r0, [pc, #96]	; (800fa10 <netif_issue_reports+0x7c>)
 800f9b0:	f00c febe 	bl	801c730 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f9ba:	f003 0304 	and.w	r3, r3, #4
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d01e      	beq.n	800fa00 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f9c8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d017      	beq.n	800fa00 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f9d0:	78fb      	ldrb	r3, [r7, #3]
 800f9d2:	f003 0301 	and.w	r3, r3, #1
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d013      	beq.n	800fa02 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	3304      	adds	r3, #4
 800f9de:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d00e      	beq.n	800fa02 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f9ea:	f003 0308 	and.w	r3, r3, #8
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d007      	beq.n	800fa02 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	3304      	adds	r3, #4
 800f9f6:	4619      	mov	r1, r3
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f009 ffb5 	bl	8019968 <etharp_request>
 800f9fe:	e000      	b.n	800fa02 <netif_issue_reports+0x6e>
    return;
 800fa00:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800fa02:	3708      	adds	r7, #8
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bd80      	pop	{r7, pc}
 800fa08:	080209fc 	.word	0x080209fc
 800fa0c:	08020ba0 	.word	0x08020ba0
 800fa10:	08020a4c 	.word	0x08020a4c

0800fa14 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b082      	sub	sp, #8
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d107      	bne.n	800fa32 <netif_set_down+0x1e>
 800fa22:	4b17      	ldr	r3, [pc, #92]	; (800fa80 <netif_set_down+0x6c>)
 800fa24:	f240 329b 	movw	r2, #923	; 0x39b
 800fa28:	4916      	ldr	r1, [pc, #88]	; (800fa84 <netif_set_down+0x70>)
 800fa2a:	4817      	ldr	r0, [pc, #92]	; (800fa88 <netif_set_down+0x74>)
 800fa2c:	f00c fe80 	bl	801c730 <iprintf>
 800fa30:	e022      	b.n	800fa78 <netif_set_down+0x64>

  if (netif->flags & NETIF_FLAG_UP) {
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fa38:	f003 0301 	and.w	r3, r3, #1
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d01b      	beq.n	800fa78 <netif_set_down+0x64>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fa46:	f023 0301 	bic.w	r3, r3, #1
 800fa4a:	b2da      	uxtb	r2, r3
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
 800fa52:	f7f7 fbff 	bl	8007254 <sys_now>
 800fa56:	4603      	mov	r3, r0
 800fa58:	4a0c      	ldr	r2, [pc, #48]	; (800fa8c <netif_set_down+0x78>)
 800fa5a:	fba2 2303 	umull	r2, r3, r2, r3
 800fa5e:	08da      	lsrs	r2, r3, #3
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	63da      	str	r2, [r3, #60]	; 0x3c

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fa6a:	f003 0308 	and.w	r3, r3, #8
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d002      	beq.n	800fa78 <netif_set_down+0x64>
      etharp_cleanup_netif(netif);
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	f009 fa8a 	bl	8018f8c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800fa78:	3708      	adds	r7, #8
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}
 800fa7e:	bf00      	nop
 800fa80:	080209fc 	.word	0x080209fc
 800fa84:	08020bc4 	.word	0x08020bc4
 800fa88:	08020a4c 	.word	0x08020a4c
 800fa8c:	cccccccd 	.word	0xcccccccd

0800fa90 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800fa90:	b480      	push	{r7}
 800fa92:	b083      	sub	sp, #12
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
 800fa98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d002      	beq.n	800faa6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	683a      	ldr	r2, [r7, #0]
 800faa4:	61da      	str	r2, [r3, #28]
  }
}
 800faa6:	bf00      	nop
 800faa8:	370c      	adds	r7, #12
 800faaa:	46bd      	mov	sp, r7
 800faac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab0:	4770      	bx	lr

0800fab2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800fab2:	b480      	push	{r7}
 800fab4:	b085      	sub	sp, #20
 800fab6:	af00      	add	r7, sp, #0
 800fab8:	60f8      	str	r0, [r7, #12]
 800faba:	60b9      	str	r1, [r7, #8]
 800fabc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800fabe:	f06f 030b 	mvn.w	r3, #11
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3714      	adds	r7, #20
 800fac6:	46bd      	mov	sp, r7
 800fac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800facc:	4770      	bx	lr
	...

0800fad0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800fad0:	b480      	push	{r7}
 800fad2:	b085      	sub	sp, #20
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	4603      	mov	r3, r0
 800fad8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800fada:	79fb      	ldrb	r3, [r7, #7]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d013      	beq.n	800fb08 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800fae0:	4b0d      	ldr	r3, [pc, #52]	; (800fb18 <netif_get_by_index+0x48>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	60fb      	str	r3, [r7, #12]
 800fae6:	e00c      	b.n	800fb02 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800faee:	3301      	adds	r3, #1
 800faf0:	b2db      	uxtb	r3, r3
 800faf2:	79fa      	ldrb	r2, [r7, #7]
 800faf4:	429a      	cmp	r2, r3
 800faf6:	d101      	bne.n	800fafc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	e006      	b.n	800fb0a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	60fb      	str	r3, [r7, #12]
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d1ef      	bne.n	800fae8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800fb08:	2300      	movs	r3, #0
}
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	3714      	adds	r7, #20
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb14:	4770      	bx	lr
 800fb16:	bf00      	nop
 800fb18:	200071f8 	.word	0x200071f8

0800fb1c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b082      	sub	sp, #8
 800fb20:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800fb22:	4b0c      	ldr	r3, [pc, #48]	; (800fb54 <pbuf_free_ooseq+0x38>)
 800fb24:	2200      	movs	r2, #0
 800fb26:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fb28:	4b0b      	ldr	r3, [pc, #44]	; (800fb58 <pbuf_free_ooseq+0x3c>)
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	607b      	str	r3, [r7, #4]
 800fb2e:	e00a      	b.n	800fb46 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d003      	beq.n	800fb40 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f002 faf7 	bl	801212c <tcp_free_ooseq>
      return;
 800fb3e:	e005      	b.n	800fb4c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	68db      	ldr	r3, [r3, #12]
 800fb44:	607b      	str	r3, [r7, #4]
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d1f1      	bne.n	800fb30 <pbuf_free_ooseq+0x14>
    }
  }
}
 800fb4c:	3708      	adds	r7, #8
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	bd80      	pop	{r7, pc}
 800fb52:	bf00      	nop
 800fb54:	20007201 	.word	0x20007201
 800fb58:	200073a8 	.word	0x200073a8

0800fb5c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800fb5c:	b480      	push	{r7}
 800fb5e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800fb60:	4b03      	ldr	r3, [pc, #12]	; (800fb70 <pbuf_pool_is_empty+0x14>)
 800fb62:	2201      	movs	r2, #1
 800fb64:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800fb66:	bf00      	nop
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6e:	4770      	bx	lr
 800fb70:	20007201 	.word	0x20007201

0800fb74 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800fb74:	b480      	push	{r7}
 800fb76:	b085      	sub	sp, #20
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	60f8      	str	r0, [r7, #12]
 800fb7c:	60b9      	str	r1, [r7, #8]
 800fb7e:	4611      	mov	r1, r2
 800fb80:	461a      	mov	r2, r3
 800fb82:	460b      	mov	r3, r1
 800fb84:	80fb      	strh	r3, [r7, #6]
 800fb86:	4613      	mov	r3, r2
 800fb88:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	68ba      	ldr	r2, [r7, #8]
 800fb94:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	88fa      	ldrh	r2, [r7, #6]
 800fb9a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	88ba      	ldrh	r2, [r7, #4]
 800fba0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800fba2:	8b3b      	ldrh	r3, [r7, #24]
 800fba4:	b2da      	uxtb	r2, r3
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	7f3a      	ldrb	r2, [r7, #28]
 800fbae:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	2201      	movs	r2, #1
 800fbb4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	2200      	movs	r2, #0
 800fbba:	73da      	strb	r2, [r3, #15]
}
 800fbbc:	bf00      	nop
 800fbbe:	3714      	adds	r7, #20
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc6:	4770      	bx	lr

0800fbc8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b08c      	sub	sp, #48	; 0x30
 800fbcc:	af02      	add	r7, sp, #8
 800fbce:	4603      	mov	r3, r0
 800fbd0:	71fb      	strb	r3, [r7, #7]
 800fbd2:	460b      	mov	r3, r1
 800fbd4:	80bb      	strh	r3, [r7, #4]
 800fbd6:	4613      	mov	r3, r2
 800fbd8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800fbda:	79fb      	ldrb	r3, [r7, #7]
 800fbdc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800fbde:	887b      	ldrh	r3, [r7, #2]
 800fbe0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800fbe4:	d07f      	beq.n	800fce6 <pbuf_alloc+0x11e>
 800fbe6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800fbea:	f300 80c8 	bgt.w	800fd7e <pbuf_alloc+0x1b6>
 800fbee:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800fbf2:	d010      	beq.n	800fc16 <pbuf_alloc+0x4e>
 800fbf4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800fbf8:	f300 80c1 	bgt.w	800fd7e <pbuf_alloc+0x1b6>
 800fbfc:	2b01      	cmp	r3, #1
 800fbfe:	d002      	beq.n	800fc06 <pbuf_alloc+0x3e>
 800fc00:	2b41      	cmp	r3, #65	; 0x41
 800fc02:	f040 80bc 	bne.w	800fd7e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800fc06:	887a      	ldrh	r2, [r7, #2]
 800fc08:	88bb      	ldrh	r3, [r7, #4]
 800fc0a:	4619      	mov	r1, r3
 800fc0c:	2000      	movs	r0, #0
 800fc0e:	f000 f8d1 	bl	800fdb4 <pbuf_alloc_reference>
 800fc12:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800fc14:	e0bd      	b.n	800fd92 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800fc16:	2300      	movs	r3, #0
 800fc18:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800fc1e:	88bb      	ldrh	r3, [r7, #4]
 800fc20:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800fc22:	2008      	movs	r0, #8
 800fc24:	f7ff fc30 	bl	800f488 <memp_malloc>
 800fc28:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800fc2a:	693b      	ldr	r3, [r7, #16]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d109      	bne.n	800fc44 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800fc30:	f7ff ff94 	bl	800fb5c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800fc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d002      	beq.n	800fc40 <pbuf_alloc+0x78>
            pbuf_free(p);
 800fc3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc3c:	f000 faa8 	bl	8010190 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800fc40:	2300      	movs	r3, #0
 800fc42:	e0a7      	b.n	800fd94 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800fc44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc46:	3303      	adds	r3, #3
 800fc48:	b29b      	uxth	r3, r3
 800fc4a:	f023 0303 	bic.w	r3, r3, #3
 800fc4e:	b29b      	uxth	r3, r3
 800fc50:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800fc54:	b29b      	uxth	r3, r3
 800fc56:	8b7a      	ldrh	r2, [r7, #26]
 800fc58:	4293      	cmp	r3, r2
 800fc5a:	bf28      	it	cs
 800fc5c:	4613      	movcs	r3, r2
 800fc5e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800fc60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc62:	3310      	adds	r3, #16
 800fc64:	693a      	ldr	r2, [r7, #16]
 800fc66:	4413      	add	r3, r2
 800fc68:	3303      	adds	r3, #3
 800fc6a:	f023 0303 	bic.w	r3, r3, #3
 800fc6e:	4618      	mov	r0, r3
 800fc70:	89f9      	ldrh	r1, [r7, #14]
 800fc72:	8b7a      	ldrh	r2, [r7, #26]
 800fc74:	2300      	movs	r3, #0
 800fc76:	9301      	str	r3, [sp, #4]
 800fc78:	887b      	ldrh	r3, [r7, #2]
 800fc7a:	9300      	str	r3, [sp, #0]
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	4601      	mov	r1, r0
 800fc80:	6938      	ldr	r0, [r7, #16]
 800fc82:	f7ff ff77 	bl	800fb74 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800fc86:	693b      	ldr	r3, [r7, #16]
 800fc88:	685b      	ldr	r3, [r3, #4]
 800fc8a:	f003 0303 	and.w	r3, r3, #3
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d006      	beq.n	800fca0 <pbuf_alloc+0xd8>
 800fc92:	4b42      	ldr	r3, [pc, #264]	; (800fd9c <pbuf_alloc+0x1d4>)
 800fc94:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fc98:	4941      	ldr	r1, [pc, #260]	; (800fda0 <pbuf_alloc+0x1d8>)
 800fc9a:	4842      	ldr	r0, [pc, #264]	; (800fda4 <pbuf_alloc+0x1dc>)
 800fc9c:	f00c fd48 	bl	801c730 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800fca0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fca2:	3303      	adds	r3, #3
 800fca4:	f023 0303 	bic.w	r3, r3, #3
 800fca8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800fcac:	d106      	bne.n	800fcbc <pbuf_alloc+0xf4>
 800fcae:	4b3b      	ldr	r3, [pc, #236]	; (800fd9c <pbuf_alloc+0x1d4>)
 800fcb0:	f44f 7281 	mov.w	r2, #258	; 0x102
 800fcb4:	493c      	ldr	r1, [pc, #240]	; (800fda8 <pbuf_alloc+0x1e0>)
 800fcb6:	483b      	ldr	r0, [pc, #236]	; (800fda4 <pbuf_alloc+0x1dc>)
 800fcb8:	f00c fd3a 	bl	801c730 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800fcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d102      	bne.n	800fcc8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800fcc2:	693b      	ldr	r3, [r7, #16]
 800fcc4:	627b      	str	r3, [r7, #36]	; 0x24
 800fcc6:	e002      	b.n	800fcce <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800fcc8:	69fb      	ldr	r3, [r7, #28]
 800fcca:	693a      	ldr	r2, [r7, #16]
 800fccc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800fcce:	693b      	ldr	r3, [r7, #16]
 800fcd0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800fcd2:	8b7a      	ldrh	r2, [r7, #26]
 800fcd4:	89fb      	ldrh	r3, [r7, #14]
 800fcd6:	1ad3      	subs	r3, r2, r3
 800fcd8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800fcde:	8b7b      	ldrh	r3, [r7, #26]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d19e      	bne.n	800fc22 <pbuf_alloc+0x5a>
      break;
 800fce4:	e055      	b.n	800fd92 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800fce6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fce8:	3303      	adds	r3, #3
 800fcea:	b29b      	uxth	r3, r3
 800fcec:	f023 0303 	bic.w	r3, r3, #3
 800fcf0:	b29a      	uxth	r2, r3
 800fcf2:	88bb      	ldrh	r3, [r7, #4]
 800fcf4:	3303      	adds	r3, #3
 800fcf6:	b29b      	uxth	r3, r3
 800fcf8:	f023 0303 	bic.w	r3, r3, #3
 800fcfc:	b29b      	uxth	r3, r3
 800fcfe:	4413      	add	r3, r2
 800fd00:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800fd02:	8b3b      	ldrh	r3, [r7, #24]
 800fd04:	3310      	adds	r3, #16
 800fd06:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800fd08:	8b3a      	ldrh	r2, [r7, #24]
 800fd0a:	88bb      	ldrh	r3, [r7, #4]
 800fd0c:	3303      	adds	r3, #3
 800fd0e:	f023 0303 	bic.w	r3, r3, #3
 800fd12:	429a      	cmp	r2, r3
 800fd14:	d306      	bcc.n	800fd24 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800fd16:	8afa      	ldrh	r2, [r7, #22]
 800fd18:	88bb      	ldrh	r3, [r7, #4]
 800fd1a:	3303      	adds	r3, #3
 800fd1c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800fd20:	429a      	cmp	r2, r3
 800fd22:	d201      	bcs.n	800fd28 <pbuf_alloc+0x160>
        return NULL;
 800fd24:	2300      	movs	r3, #0
 800fd26:	e035      	b.n	800fd94 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800fd28:	8afb      	ldrh	r3, [r7, #22]
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f7ff f9d0 	bl	800f0d0 <mem_malloc>
 800fd30:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800fd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d101      	bne.n	800fd3c <pbuf_alloc+0x174>
        return NULL;
 800fd38:	2300      	movs	r3, #0
 800fd3a:	e02b      	b.n	800fd94 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800fd3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd3e:	3310      	adds	r3, #16
 800fd40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd42:	4413      	add	r3, r2
 800fd44:	3303      	adds	r3, #3
 800fd46:	f023 0303 	bic.w	r3, r3, #3
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	88b9      	ldrh	r1, [r7, #4]
 800fd4e:	88ba      	ldrh	r2, [r7, #4]
 800fd50:	2300      	movs	r3, #0
 800fd52:	9301      	str	r3, [sp, #4]
 800fd54:	887b      	ldrh	r3, [r7, #2]
 800fd56:	9300      	str	r3, [sp, #0]
 800fd58:	460b      	mov	r3, r1
 800fd5a:	4601      	mov	r1, r0
 800fd5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd5e:	f7ff ff09 	bl	800fb74 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800fd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd64:	685b      	ldr	r3, [r3, #4]
 800fd66:	f003 0303 	and.w	r3, r3, #3
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d010      	beq.n	800fd90 <pbuf_alloc+0x1c8>
 800fd6e:	4b0b      	ldr	r3, [pc, #44]	; (800fd9c <pbuf_alloc+0x1d4>)
 800fd70:	f44f 7291 	mov.w	r2, #290	; 0x122
 800fd74:	490d      	ldr	r1, [pc, #52]	; (800fdac <pbuf_alloc+0x1e4>)
 800fd76:	480b      	ldr	r0, [pc, #44]	; (800fda4 <pbuf_alloc+0x1dc>)
 800fd78:	f00c fcda 	bl	801c730 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800fd7c:	e008      	b.n	800fd90 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800fd7e:	4b07      	ldr	r3, [pc, #28]	; (800fd9c <pbuf_alloc+0x1d4>)
 800fd80:	f240 1227 	movw	r2, #295	; 0x127
 800fd84:	490a      	ldr	r1, [pc, #40]	; (800fdb0 <pbuf_alloc+0x1e8>)
 800fd86:	4807      	ldr	r0, [pc, #28]	; (800fda4 <pbuf_alloc+0x1dc>)
 800fd88:	f00c fcd2 	bl	801c730 <iprintf>
      return NULL;
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	e001      	b.n	800fd94 <pbuf_alloc+0x1cc>
      break;
 800fd90:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800fd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fd94:	4618      	mov	r0, r3
 800fd96:	3728      	adds	r7, #40	; 0x28
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}
 800fd9c:	08020c2c 	.word	0x08020c2c
 800fda0:	08020c5c 	.word	0x08020c5c
 800fda4:	08020c8c 	.word	0x08020c8c
 800fda8:	08020cb4 	.word	0x08020cb4
 800fdac:	08020ce8 	.word	0x08020ce8
 800fdb0:	08020d14 	.word	0x08020d14

0800fdb4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b086      	sub	sp, #24
 800fdb8:	af02      	add	r7, sp, #8
 800fdba:	6078      	str	r0, [r7, #4]
 800fdbc:	460b      	mov	r3, r1
 800fdbe:	807b      	strh	r3, [r7, #2]
 800fdc0:	4613      	mov	r3, r2
 800fdc2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800fdc4:	883b      	ldrh	r3, [r7, #0]
 800fdc6:	2b41      	cmp	r3, #65	; 0x41
 800fdc8:	d009      	beq.n	800fdde <pbuf_alloc_reference+0x2a>
 800fdca:	883b      	ldrh	r3, [r7, #0]
 800fdcc:	2b01      	cmp	r3, #1
 800fdce:	d006      	beq.n	800fdde <pbuf_alloc_reference+0x2a>
 800fdd0:	4b0f      	ldr	r3, [pc, #60]	; (800fe10 <pbuf_alloc_reference+0x5c>)
 800fdd2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800fdd6:	490f      	ldr	r1, [pc, #60]	; (800fe14 <pbuf_alloc_reference+0x60>)
 800fdd8:	480f      	ldr	r0, [pc, #60]	; (800fe18 <pbuf_alloc_reference+0x64>)
 800fdda:	f00c fca9 	bl	801c730 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800fdde:	2007      	movs	r0, #7
 800fde0:	f7ff fb52 	bl	800f488 <memp_malloc>
 800fde4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d101      	bne.n	800fdf0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800fdec:	2300      	movs	r3, #0
 800fdee:	e00b      	b.n	800fe08 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800fdf0:	8879      	ldrh	r1, [r7, #2]
 800fdf2:	887a      	ldrh	r2, [r7, #2]
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	9301      	str	r3, [sp, #4]
 800fdf8:	883b      	ldrh	r3, [r7, #0]
 800fdfa:	9300      	str	r3, [sp, #0]
 800fdfc:	460b      	mov	r3, r1
 800fdfe:	6879      	ldr	r1, [r7, #4]
 800fe00:	68f8      	ldr	r0, [r7, #12]
 800fe02:	f7ff feb7 	bl	800fb74 <pbuf_init_alloced_pbuf>
  return p;
 800fe06:	68fb      	ldr	r3, [r7, #12]
}
 800fe08:	4618      	mov	r0, r3
 800fe0a:	3710      	adds	r7, #16
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}
 800fe10:	08020c2c 	.word	0x08020c2c
 800fe14:	08020d30 	.word	0x08020d30
 800fe18:	08020c8c 	.word	0x08020c8c

0800fe1c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b088      	sub	sp, #32
 800fe20:	af02      	add	r7, sp, #8
 800fe22:	607b      	str	r3, [r7, #4]
 800fe24:	4603      	mov	r3, r0
 800fe26:	73fb      	strb	r3, [r7, #15]
 800fe28:	460b      	mov	r3, r1
 800fe2a:	81bb      	strh	r3, [r7, #12]
 800fe2c:	4613      	mov	r3, r2
 800fe2e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800fe30:	7bfb      	ldrb	r3, [r7, #15]
 800fe32:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800fe34:	8a7b      	ldrh	r3, [r7, #18]
 800fe36:	3303      	adds	r3, #3
 800fe38:	f023 0203 	bic.w	r2, r3, #3
 800fe3c:	89bb      	ldrh	r3, [r7, #12]
 800fe3e:	441a      	add	r2, r3
 800fe40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe42:	429a      	cmp	r2, r3
 800fe44:	d901      	bls.n	800fe4a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800fe46:	2300      	movs	r3, #0
 800fe48:	e018      	b.n	800fe7c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800fe4a:	6a3b      	ldr	r3, [r7, #32]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d007      	beq.n	800fe60 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800fe50:	8a7b      	ldrh	r3, [r7, #18]
 800fe52:	3303      	adds	r3, #3
 800fe54:	f023 0303 	bic.w	r3, r3, #3
 800fe58:	6a3a      	ldr	r2, [r7, #32]
 800fe5a:	4413      	add	r3, r2
 800fe5c:	617b      	str	r3, [r7, #20]
 800fe5e:	e001      	b.n	800fe64 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800fe60:	2300      	movs	r3, #0
 800fe62:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	89b9      	ldrh	r1, [r7, #12]
 800fe68:	89ba      	ldrh	r2, [r7, #12]
 800fe6a:	2302      	movs	r3, #2
 800fe6c:	9301      	str	r3, [sp, #4]
 800fe6e:	897b      	ldrh	r3, [r7, #10]
 800fe70:	9300      	str	r3, [sp, #0]
 800fe72:	460b      	mov	r3, r1
 800fe74:	6979      	ldr	r1, [r7, #20]
 800fe76:	f7ff fe7d 	bl	800fb74 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800fe7a:	687b      	ldr	r3, [r7, #4]
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	3718      	adds	r7, #24
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}

0800fe84 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b084      	sub	sp, #16
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
 800fe8c:	460b      	mov	r3, r1
 800fe8e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d106      	bne.n	800fea4 <pbuf_realloc+0x20>
 800fe96:	4b3a      	ldr	r3, [pc, #232]	; (800ff80 <pbuf_realloc+0xfc>)
 800fe98:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800fe9c:	4939      	ldr	r1, [pc, #228]	; (800ff84 <pbuf_realloc+0x100>)
 800fe9e:	483a      	ldr	r0, [pc, #232]	; (800ff88 <pbuf_realloc+0x104>)
 800fea0:	f00c fc46 	bl	801c730 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	891b      	ldrh	r3, [r3, #8]
 800fea8:	887a      	ldrh	r2, [r7, #2]
 800feaa:	429a      	cmp	r2, r3
 800feac:	d263      	bcs.n	800ff76 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	891a      	ldrh	r2, [r3, #8]
 800feb2:	887b      	ldrh	r3, [r7, #2]
 800feb4:	1ad3      	subs	r3, r2, r3
 800feb6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800feb8:	887b      	ldrh	r3, [r7, #2]
 800feba:	817b      	strh	r3, [r7, #10]
  q = p;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800fec0:	e018      	b.n	800fef4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	895b      	ldrh	r3, [r3, #10]
 800fec6:	897a      	ldrh	r2, [r7, #10]
 800fec8:	1ad3      	subs	r3, r2, r3
 800feca:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	891a      	ldrh	r2, [r3, #8]
 800fed0:	893b      	ldrh	r3, [r7, #8]
 800fed2:	1ad3      	subs	r3, r2, r3
 800fed4:	b29a      	uxth	r2, r3
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d106      	bne.n	800fef4 <pbuf_realloc+0x70>
 800fee6:	4b26      	ldr	r3, [pc, #152]	; (800ff80 <pbuf_realloc+0xfc>)
 800fee8:	f240 12af 	movw	r2, #431	; 0x1af
 800feec:	4927      	ldr	r1, [pc, #156]	; (800ff8c <pbuf_realloc+0x108>)
 800feee:	4826      	ldr	r0, [pc, #152]	; (800ff88 <pbuf_realloc+0x104>)
 800fef0:	f00c fc1e 	bl	801c730 <iprintf>
  while (rem_len > q->len) {
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	895b      	ldrh	r3, [r3, #10]
 800fef8:	897a      	ldrh	r2, [r7, #10]
 800fefa:	429a      	cmp	r2, r3
 800fefc:	d8e1      	bhi.n	800fec2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	7b1b      	ldrb	r3, [r3, #12]
 800ff02:	f003 030f 	and.w	r3, r3, #15
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d121      	bne.n	800ff4e <pbuf_realloc+0xca>
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	895b      	ldrh	r3, [r3, #10]
 800ff0e:	897a      	ldrh	r2, [r7, #10]
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d01c      	beq.n	800ff4e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	7b5b      	ldrb	r3, [r3, #13]
 800ff18:	f003 0302 	and.w	r3, r3, #2
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d116      	bne.n	800ff4e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	685a      	ldr	r2, [r3, #4]
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	1ad3      	subs	r3, r2, r3
 800ff28:	b29a      	uxth	r2, r3
 800ff2a:	897b      	ldrh	r3, [r7, #10]
 800ff2c:	4413      	add	r3, r2
 800ff2e:	b29b      	uxth	r3, r3
 800ff30:	4619      	mov	r1, r3
 800ff32:	68f8      	ldr	r0, [r7, #12]
 800ff34:	f7fe ffae 	bl	800ee94 <mem_trim>
 800ff38:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d106      	bne.n	800ff4e <pbuf_realloc+0xca>
 800ff40:	4b0f      	ldr	r3, [pc, #60]	; (800ff80 <pbuf_realloc+0xfc>)
 800ff42:	f240 12bd 	movw	r2, #445	; 0x1bd
 800ff46:	4912      	ldr	r1, [pc, #72]	; (800ff90 <pbuf_realloc+0x10c>)
 800ff48:	480f      	ldr	r0, [pc, #60]	; (800ff88 <pbuf_realloc+0x104>)
 800ff4a:	f00c fbf1 	bl	801c730 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	897a      	ldrh	r2, [r7, #10]
 800ff52:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	895a      	ldrh	r2, [r3, #10]
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d004      	beq.n	800ff6e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f000 f911 	bl	8010190 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	2200      	movs	r2, #0
 800ff72:	601a      	str	r2, [r3, #0]
 800ff74:	e000      	b.n	800ff78 <pbuf_realloc+0xf4>
    return;
 800ff76:	bf00      	nop

}
 800ff78:	3710      	adds	r7, #16
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}
 800ff7e:	bf00      	nop
 800ff80:	08020c2c 	.word	0x08020c2c
 800ff84:	08020d44 	.word	0x08020d44
 800ff88:	08020c8c 	.word	0x08020c8c
 800ff8c:	08020d5c 	.word	0x08020d5c
 800ff90:	08020d74 	.word	0x08020d74

0800ff94 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b086      	sub	sp, #24
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	60f8      	str	r0, [r7, #12]
 800ff9c:	60b9      	str	r1, [r7, #8]
 800ff9e:	4613      	mov	r3, r2
 800ffa0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d106      	bne.n	800ffb6 <pbuf_add_header_impl+0x22>
 800ffa8:	4b2b      	ldr	r3, [pc, #172]	; (8010058 <pbuf_add_header_impl+0xc4>)
 800ffaa:	f240 12df 	movw	r2, #479	; 0x1df
 800ffae:	492b      	ldr	r1, [pc, #172]	; (801005c <pbuf_add_header_impl+0xc8>)
 800ffb0:	482b      	ldr	r0, [pc, #172]	; (8010060 <pbuf_add_header_impl+0xcc>)
 800ffb2:	f00c fbbd 	bl	801c730 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d003      	beq.n	800ffc4 <pbuf_add_header_impl+0x30>
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ffc2:	d301      	bcc.n	800ffc8 <pbuf_add_header_impl+0x34>
    return 1;
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	e043      	b.n	8010050 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d101      	bne.n	800ffd2 <pbuf_add_header_impl+0x3e>
    return 0;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	e03e      	b.n	8010050 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	891a      	ldrh	r2, [r3, #8]
 800ffda:	8a7b      	ldrh	r3, [r7, #18]
 800ffdc:	4413      	add	r3, r2
 800ffde:	b29b      	uxth	r3, r3
 800ffe0:	8a7a      	ldrh	r2, [r7, #18]
 800ffe2:	429a      	cmp	r2, r3
 800ffe4:	d901      	bls.n	800ffea <pbuf_add_header_impl+0x56>
    return 1;
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	e032      	b.n	8010050 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	7b1b      	ldrb	r3, [r3, #12]
 800ffee:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800fff0:	8a3b      	ldrh	r3, [r7, #16]
 800fff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d00c      	beq.n	8010014 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	685a      	ldr	r2, [r3, #4]
 800fffe:	68bb      	ldr	r3, [r7, #8]
 8010000:	425b      	negs	r3, r3
 8010002:	4413      	add	r3, r2
 8010004:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	3310      	adds	r3, #16
 801000a:	697a      	ldr	r2, [r7, #20]
 801000c:	429a      	cmp	r2, r3
 801000e:	d20d      	bcs.n	801002c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010010:	2301      	movs	r3, #1
 8010012:	e01d      	b.n	8010050 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010014:	79fb      	ldrb	r3, [r7, #7]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d006      	beq.n	8010028 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	685a      	ldr	r2, [r3, #4]
 801001e:	68bb      	ldr	r3, [r7, #8]
 8010020:	425b      	negs	r3, r3
 8010022:	4413      	add	r3, r2
 8010024:	617b      	str	r3, [r7, #20]
 8010026:	e001      	b.n	801002c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010028:	2301      	movs	r3, #1
 801002a:	e011      	b.n	8010050 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	697a      	ldr	r2, [r7, #20]
 8010030:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	895a      	ldrh	r2, [r3, #10]
 8010036:	8a7b      	ldrh	r3, [r7, #18]
 8010038:	4413      	add	r3, r2
 801003a:	b29a      	uxth	r2, r3
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	891a      	ldrh	r2, [r3, #8]
 8010044:	8a7b      	ldrh	r3, [r7, #18]
 8010046:	4413      	add	r3, r2
 8010048:	b29a      	uxth	r2, r3
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	811a      	strh	r2, [r3, #8]


  return 0;
 801004e:	2300      	movs	r3, #0
}
 8010050:	4618      	mov	r0, r3
 8010052:	3718      	adds	r7, #24
 8010054:	46bd      	mov	sp, r7
 8010056:	bd80      	pop	{r7, pc}
 8010058:	08020c2c 	.word	0x08020c2c
 801005c:	08020d90 	.word	0x08020d90
 8010060:	08020c8c 	.word	0x08020c8c

08010064 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b082      	sub	sp, #8
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
 801006c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801006e:	2200      	movs	r2, #0
 8010070:	6839      	ldr	r1, [r7, #0]
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f7ff ff8e 	bl	800ff94 <pbuf_add_header_impl>
 8010078:	4603      	mov	r3, r0
}
 801007a:	4618      	mov	r0, r3
 801007c:	3708      	adds	r7, #8
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
	...

08010084 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b084      	sub	sp, #16
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
 801008c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d106      	bne.n	80100a2 <pbuf_remove_header+0x1e>
 8010094:	4b20      	ldr	r3, [pc, #128]	; (8010118 <pbuf_remove_header+0x94>)
 8010096:	f240 224b 	movw	r2, #587	; 0x24b
 801009a:	4920      	ldr	r1, [pc, #128]	; (801011c <pbuf_remove_header+0x98>)
 801009c:	4820      	ldr	r0, [pc, #128]	; (8010120 <pbuf_remove_header+0x9c>)
 801009e:	f00c fb47 	bl	801c730 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d003      	beq.n	80100b0 <pbuf_remove_header+0x2c>
 80100a8:	683b      	ldr	r3, [r7, #0]
 80100aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80100ae:	d301      	bcc.n	80100b4 <pbuf_remove_header+0x30>
    return 1;
 80100b0:	2301      	movs	r3, #1
 80100b2:	e02c      	b.n	801010e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d101      	bne.n	80100be <pbuf_remove_header+0x3a>
    return 0;
 80100ba:	2300      	movs	r3, #0
 80100bc:	e027      	b.n	801010e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	895b      	ldrh	r3, [r3, #10]
 80100c6:	89fa      	ldrh	r2, [r7, #14]
 80100c8:	429a      	cmp	r2, r3
 80100ca:	d908      	bls.n	80100de <pbuf_remove_header+0x5a>
 80100cc:	4b12      	ldr	r3, [pc, #72]	; (8010118 <pbuf_remove_header+0x94>)
 80100ce:	f240 2255 	movw	r2, #597	; 0x255
 80100d2:	4914      	ldr	r1, [pc, #80]	; (8010124 <pbuf_remove_header+0xa0>)
 80100d4:	4812      	ldr	r0, [pc, #72]	; (8010120 <pbuf_remove_header+0x9c>)
 80100d6:	f00c fb2b 	bl	801c730 <iprintf>
 80100da:	2301      	movs	r3, #1
 80100dc:	e017      	b.n	801010e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	685b      	ldr	r3, [r3, #4]
 80100e2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	685a      	ldr	r2, [r3, #4]
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	441a      	add	r2, r3
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	895a      	ldrh	r2, [r3, #10]
 80100f4:	89fb      	ldrh	r3, [r7, #14]
 80100f6:	1ad3      	subs	r3, r2, r3
 80100f8:	b29a      	uxth	r2, r3
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	891a      	ldrh	r2, [r3, #8]
 8010102:	89fb      	ldrh	r3, [r7, #14]
 8010104:	1ad3      	subs	r3, r2, r3
 8010106:	b29a      	uxth	r2, r3
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801010c:	2300      	movs	r3, #0
}
 801010e:	4618      	mov	r0, r3
 8010110:	3710      	adds	r7, #16
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}
 8010116:	bf00      	nop
 8010118:	08020c2c 	.word	0x08020c2c
 801011c:	08020d90 	.word	0x08020d90
 8010120:	08020c8c 	.word	0x08020c8c
 8010124:	08020d9c 	.word	0x08020d9c

08010128 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b082      	sub	sp, #8
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
 8010130:	460b      	mov	r3, r1
 8010132:	807b      	strh	r3, [r7, #2]
 8010134:	4613      	mov	r3, r2
 8010136:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8010138:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801013c:	2b00      	cmp	r3, #0
 801013e:	da08      	bge.n	8010152 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010140:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010144:	425b      	negs	r3, r3
 8010146:	4619      	mov	r1, r3
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	f7ff ff9b 	bl	8010084 <pbuf_remove_header>
 801014e:	4603      	mov	r3, r0
 8010150:	e007      	b.n	8010162 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8010152:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010156:	787a      	ldrb	r2, [r7, #1]
 8010158:	4619      	mov	r1, r3
 801015a:	6878      	ldr	r0, [r7, #4]
 801015c:	f7ff ff1a 	bl	800ff94 <pbuf_add_header_impl>
 8010160:	4603      	mov	r3, r0
  }
}
 8010162:	4618      	mov	r0, r3
 8010164:	3708      	adds	r7, #8
 8010166:	46bd      	mov	sp, r7
 8010168:	bd80      	pop	{r7, pc}

0801016a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801016a:	b580      	push	{r7, lr}
 801016c:	b082      	sub	sp, #8
 801016e:	af00      	add	r7, sp, #0
 8010170:	6078      	str	r0, [r7, #4]
 8010172:	460b      	mov	r3, r1
 8010174:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8010176:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801017a:	2201      	movs	r2, #1
 801017c:	4619      	mov	r1, r3
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f7ff ffd2 	bl	8010128 <pbuf_header_impl>
 8010184:	4603      	mov	r3, r0
}
 8010186:	4618      	mov	r0, r3
 8010188:	3708      	adds	r7, #8
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}
	...

08010190 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b086      	sub	sp, #24
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d10b      	bne.n	80101b6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d106      	bne.n	80101b2 <pbuf_free+0x22>
 80101a4:	4b38      	ldr	r3, [pc, #224]	; (8010288 <pbuf_free+0xf8>)
 80101a6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80101aa:	4938      	ldr	r1, [pc, #224]	; (801028c <pbuf_free+0xfc>)
 80101ac:	4838      	ldr	r0, [pc, #224]	; (8010290 <pbuf_free+0x100>)
 80101ae:	f00c fabf 	bl	801c730 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80101b2:	2300      	movs	r3, #0
 80101b4:	e063      	b.n	801027e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80101b6:	2300      	movs	r3, #0
 80101b8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80101ba:	e05c      	b.n	8010276 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	7b9b      	ldrb	r3, [r3, #14]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d106      	bne.n	80101d2 <pbuf_free+0x42>
 80101c4:	4b30      	ldr	r3, [pc, #192]	; (8010288 <pbuf_free+0xf8>)
 80101c6:	f240 22f1 	movw	r2, #753	; 0x2f1
 80101ca:	4932      	ldr	r1, [pc, #200]	; (8010294 <pbuf_free+0x104>)
 80101cc:	4830      	ldr	r0, [pc, #192]	; (8010290 <pbuf_free+0x100>)
 80101ce:	f00c faaf 	bl	801c730 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	7b9b      	ldrb	r3, [r3, #14]
 80101d6:	3b01      	subs	r3, #1
 80101d8:	b2da      	uxtb	r2, r3
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	739a      	strb	r2, [r3, #14]
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	7b9b      	ldrb	r3, [r3, #14]
 80101e2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80101e4:	7dbb      	ldrb	r3, [r7, #22]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d143      	bne.n	8010272 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	7b1b      	ldrb	r3, [r3, #12]
 80101f4:	f003 030f 	and.w	r3, r3, #15
 80101f8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	7b5b      	ldrb	r3, [r3, #13]
 80101fe:	f003 0302 	and.w	r3, r3, #2
 8010202:	2b00      	cmp	r3, #0
 8010204:	d011      	beq.n	801022a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801020a:	68bb      	ldr	r3, [r7, #8]
 801020c:	691b      	ldr	r3, [r3, #16]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d106      	bne.n	8010220 <pbuf_free+0x90>
 8010212:	4b1d      	ldr	r3, [pc, #116]	; (8010288 <pbuf_free+0xf8>)
 8010214:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010218:	491f      	ldr	r1, [pc, #124]	; (8010298 <pbuf_free+0x108>)
 801021a:	481d      	ldr	r0, [pc, #116]	; (8010290 <pbuf_free+0x100>)
 801021c:	f00c fa88 	bl	801c730 <iprintf>
        pc->custom_free_function(p);
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	691b      	ldr	r3, [r3, #16]
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	4798      	blx	r3
 8010228:	e01d      	b.n	8010266 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801022a:	7bfb      	ldrb	r3, [r7, #15]
 801022c:	2b02      	cmp	r3, #2
 801022e:	d104      	bne.n	801023a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8010230:	6879      	ldr	r1, [r7, #4]
 8010232:	2008      	movs	r0, #8
 8010234:	f7ff f97a 	bl	800f52c <memp_free>
 8010238:	e015      	b.n	8010266 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801023a:	7bfb      	ldrb	r3, [r7, #15]
 801023c:	2b01      	cmp	r3, #1
 801023e:	d104      	bne.n	801024a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8010240:	6879      	ldr	r1, [r7, #4]
 8010242:	2007      	movs	r0, #7
 8010244:	f7ff f972 	bl	800f52c <memp_free>
 8010248:	e00d      	b.n	8010266 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801024a:	7bfb      	ldrb	r3, [r7, #15]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d103      	bne.n	8010258 <pbuf_free+0xc8>
          mem_free(p);
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	f7fe fd81 	bl	800ed58 <mem_free>
 8010256:	e006      	b.n	8010266 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010258:	4b0b      	ldr	r3, [pc, #44]	; (8010288 <pbuf_free+0xf8>)
 801025a:	f240 320f 	movw	r2, #783	; 0x30f
 801025e:	490f      	ldr	r1, [pc, #60]	; (801029c <pbuf_free+0x10c>)
 8010260:	480b      	ldr	r0, [pc, #44]	; (8010290 <pbuf_free+0x100>)
 8010262:	f00c fa65 	bl	801c730 <iprintf>
        }
      }
      count++;
 8010266:	7dfb      	ldrb	r3, [r7, #23]
 8010268:	3301      	adds	r3, #1
 801026a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 801026c:	693b      	ldr	r3, [r7, #16]
 801026e:	607b      	str	r3, [r7, #4]
 8010270:	e001      	b.n	8010276 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8010272:	2300      	movs	r3, #0
 8010274:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d19f      	bne.n	80101bc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801027c:	7dfb      	ldrb	r3, [r7, #23]
}
 801027e:	4618      	mov	r0, r3
 8010280:	3718      	adds	r7, #24
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}
 8010286:	bf00      	nop
 8010288:	08020c2c 	.word	0x08020c2c
 801028c:	08020d90 	.word	0x08020d90
 8010290:	08020c8c 	.word	0x08020c8c
 8010294:	08020dbc 	.word	0x08020dbc
 8010298:	08020dd4 	.word	0x08020dd4
 801029c:	08020df8 	.word	0x08020df8

080102a0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80102a0:	b480      	push	{r7}
 80102a2:	b085      	sub	sp, #20
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80102a8:	2300      	movs	r3, #0
 80102aa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80102ac:	e005      	b.n	80102ba <pbuf_clen+0x1a>
    ++len;
 80102ae:	89fb      	ldrh	r3, [r7, #14]
 80102b0:	3301      	adds	r3, #1
 80102b2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d1f6      	bne.n	80102ae <pbuf_clen+0xe>
  }
  return len;
 80102c0:	89fb      	ldrh	r3, [r7, #14]
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	3714      	adds	r7, #20
 80102c6:	46bd      	mov	sp, r7
 80102c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102cc:	4770      	bx	lr
	...

080102d0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b082      	sub	sp, #8
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d010      	beq.n	8010300 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	7b9b      	ldrb	r3, [r3, #14]
 80102e2:	3301      	adds	r3, #1
 80102e4:	b2da      	uxtb	r2, r3
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	7b9b      	ldrb	r3, [r3, #14]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d106      	bne.n	8010300 <pbuf_ref+0x30>
 80102f2:	4b05      	ldr	r3, [pc, #20]	; (8010308 <pbuf_ref+0x38>)
 80102f4:	f240 3242 	movw	r2, #834	; 0x342
 80102f8:	4904      	ldr	r1, [pc, #16]	; (801030c <pbuf_ref+0x3c>)
 80102fa:	4805      	ldr	r0, [pc, #20]	; (8010310 <pbuf_ref+0x40>)
 80102fc:	f00c fa18 	bl	801c730 <iprintf>
  }
}
 8010300:	bf00      	nop
 8010302:	3708      	adds	r7, #8
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}
 8010308:	08020c2c 	.word	0x08020c2c
 801030c:	08020e0c 	.word	0x08020e0c
 8010310:	08020c8c 	.word	0x08020c8c

08010314 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b084      	sub	sp, #16
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
 801031c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d002      	beq.n	801032a <pbuf_cat+0x16>
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d107      	bne.n	801033a <pbuf_cat+0x26>
 801032a:	4b20      	ldr	r3, [pc, #128]	; (80103ac <pbuf_cat+0x98>)
 801032c:	f240 3259 	movw	r2, #857	; 0x359
 8010330:	491f      	ldr	r1, [pc, #124]	; (80103b0 <pbuf_cat+0x9c>)
 8010332:	4820      	ldr	r0, [pc, #128]	; (80103b4 <pbuf_cat+0xa0>)
 8010334:	f00c f9fc 	bl	801c730 <iprintf>
 8010338:	e034      	b.n	80103a4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	60fb      	str	r3, [r7, #12]
 801033e:	e00a      	b.n	8010356 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	891a      	ldrh	r2, [r3, #8]
 8010344:	683b      	ldr	r3, [r7, #0]
 8010346:	891b      	ldrh	r3, [r3, #8]
 8010348:	4413      	add	r3, r2
 801034a:	b29a      	uxth	r2, r3
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	60fb      	str	r3, [r7, #12]
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d1f0      	bne.n	8010340 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	891a      	ldrh	r2, [r3, #8]
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	895b      	ldrh	r3, [r3, #10]
 8010366:	429a      	cmp	r2, r3
 8010368:	d006      	beq.n	8010378 <pbuf_cat+0x64>
 801036a:	4b10      	ldr	r3, [pc, #64]	; (80103ac <pbuf_cat+0x98>)
 801036c:	f240 3262 	movw	r2, #866	; 0x362
 8010370:	4911      	ldr	r1, [pc, #68]	; (80103b8 <pbuf_cat+0xa4>)
 8010372:	4810      	ldr	r0, [pc, #64]	; (80103b4 <pbuf_cat+0xa0>)
 8010374:	f00c f9dc 	bl	801c730 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d006      	beq.n	801038e <pbuf_cat+0x7a>
 8010380:	4b0a      	ldr	r3, [pc, #40]	; (80103ac <pbuf_cat+0x98>)
 8010382:	f240 3263 	movw	r2, #867	; 0x363
 8010386:	490d      	ldr	r1, [pc, #52]	; (80103bc <pbuf_cat+0xa8>)
 8010388:	480a      	ldr	r0, [pc, #40]	; (80103b4 <pbuf_cat+0xa0>)
 801038a:	f00c f9d1 	bl	801c730 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	891a      	ldrh	r2, [r3, #8]
 8010392:	683b      	ldr	r3, [r7, #0]
 8010394:	891b      	ldrh	r3, [r3, #8]
 8010396:	4413      	add	r3, r2
 8010398:	b29a      	uxth	r2, r3
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	683a      	ldr	r2, [r7, #0]
 80103a2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80103a4:	3710      	adds	r7, #16
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}
 80103aa:	bf00      	nop
 80103ac:	08020c2c 	.word	0x08020c2c
 80103b0:	08020e20 	.word	0x08020e20
 80103b4:	08020c8c 	.word	0x08020c8c
 80103b8:	08020e58 	.word	0x08020e58
 80103bc:	08020e88 	.word	0x08020e88

080103c0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b082      	sub	sp, #8
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
 80103c8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80103ca:	6839      	ldr	r1, [r7, #0]
 80103cc:	6878      	ldr	r0, [r7, #4]
 80103ce:	f7ff ffa1 	bl	8010314 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80103d2:	6838      	ldr	r0, [r7, #0]
 80103d4:	f7ff ff7c 	bl	80102d0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80103d8:	bf00      	nop
 80103da:	3708      	adds	r7, #8
 80103dc:	46bd      	mov	sp, r7
 80103de:	bd80      	pop	{r7, pc}

080103e0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b086      	sub	sp, #24
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
 80103e8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80103ea:	2300      	movs	r3, #0
 80103ec:	617b      	str	r3, [r7, #20]
 80103ee:	2300      	movs	r3, #0
 80103f0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d008      	beq.n	801040a <pbuf_copy+0x2a>
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d005      	beq.n	801040a <pbuf_copy+0x2a>
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	891a      	ldrh	r2, [r3, #8]
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	891b      	ldrh	r3, [r3, #8]
 8010406:	429a      	cmp	r2, r3
 8010408:	d209      	bcs.n	801041e <pbuf_copy+0x3e>
 801040a:	4b57      	ldr	r3, [pc, #348]	; (8010568 <pbuf_copy+0x188>)
 801040c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8010410:	4956      	ldr	r1, [pc, #344]	; (801056c <pbuf_copy+0x18c>)
 8010412:	4857      	ldr	r0, [pc, #348]	; (8010570 <pbuf_copy+0x190>)
 8010414:	f00c f98c 	bl	801c730 <iprintf>
 8010418:	f06f 030f 	mvn.w	r3, #15
 801041c:	e09f      	b.n	801055e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	895b      	ldrh	r3, [r3, #10]
 8010422:	461a      	mov	r2, r3
 8010424:	697b      	ldr	r3, [r7, #20]
 8010426:	1ad2      	subs	r2, r2, r3
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	895b      	ldrh	r3, [r3, #10]
 801042c:	4619      	mov	r1, r3
 801042e:	693b      	ldr	r3, [r7, #16]
 8010430:	1acb      	subs	r3, r1, r3
 8010432:	429a      	cmp	r2, r3
 8010434:	d306      	bcc.n	8010444 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	895b      	ldrh	r3, [r3, #10]
 801043a:	461a      	mov	r2, r3
 801043c:	693b      	ldr	r3, [r7, #16]
 801043e:	1ad3      	subs	r3, r2, r3
 8010440:	60fb      	str	r3, [r7, #12]
 8010442:	e005      	b.n	8010450 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	895b      	ldrh	r3, [r3, #10]
 8010448:	461a      	mov	r2, r3
 801044a:	697b      	ldr	r3, [r7, #20]
 801044c:	1ad3      	subs	r3, r2, r3
 801044e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	685a      	ldr	r2, [r3, #4]
 8010454:	697b      	ldr	r3, [r7, #20]
 8010456:	18d0      	adds	r0, r2, r3
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	685a      	ldr	r2, [r3, #4]
 801045c:	693b      	ldr	r3, [r7, #16]
 801045e:	4413      	add	r3, r2
 8010460:	68fa      	ldr	r2, [r7, #12]
 8010462:	4619      	mov	r1, r3
 8010464:	f00b f9f6 	bl	801b854 <memcpy>
    offset_to += len;
 8010468:	697a      	ldr	r2, [r7, #20]
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	4413      	add	r3, r2
 801046e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8010470:	693a      	ldr	r2, [r7, #16]
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	4413      	add	r3, r2
 8010476:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	895b      	ldrh	r3, [r3, #10]
 801047c:	461a      	mov	r2, r3
 801047e:	697b      	ldr	r3, [r7, #20]
 8010480:	4293      	cmp	r3, r2
 8010482:	d906      	bls.n	8010492 <pbuf_copy+0xb2>
 8010484:	4b38      	ldr	r3, [pc, #224]	; (8010568 <pbuf_copy+0x188>)
 8010486:	f240 32d9 	movw	r2, #985	; 0x3d9
 801048a:	493a      	ldr	r1, [pc, #232]	; (8010574 <pbuf_copy+0x194>)
 801048c:	4838      	ldr	r0, [pc, #224]	; (8010570 <pbuf_copy+0x190>)
 801048e:	f00c f94f 	bl	801c730 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010492:	683b      	ldr	r3, [r7, #0]
 8010494:	895b      	ldrh	r3, [r3, #10]
 8010496:	461a      	mov	r2, r3
 8010498:	693b      	ldr	r3, [r7, #16]
 801049a:	4293      	cmp	r3, r2
 801049c:	d906      	bls.n	80104ac <pbuf_copy+0xcc>
 801049e:	4b32      	ldr	r3, [pc, #200]	; (8010568 <pbuf_copy+0x188>)
 80104a0:	f240 32da 	movw	r2, #986	; 0x3da
 80104a4:	4934      	ldr	r1, [pc, #208]	; (8010578 <pbuf_copy+0x198>)
 80104a6:	4832      	ldr	r0, [pc, #200]	; (8010570 <pbuf_copy+0x190>)
 80104a8:	f00c f942 	bl	801c730 <iprintf>
    if (offset_from >= p_from->len) {
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	895b      	ldrh	r3, [r3, #10]
 80104b0:	461a      	mov	r2, r3
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	4293      	cmp	r3, r2
 80104b6:	d304      	bcc.n	80104c2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80104b8:	2300      	movs	r3, #0
 80104ba:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80104bc:	683b      	ldr	r3, [r7, #0]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	895b      	ldrh	r3, [r3, #10]
 80104c6:	461a      	mov	r2, r3
 80104c8:	697b      	ldr	r3, [r7, #20]
 80104ca:	4293      	cmp	r3, r2
 80104cc:	d114      	bne.n	80104f8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80104ce:	2300      	movs	r3, #0
 80104d0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d10c      	bne.n	80104f8 <pbuf_copy+0x118>
 80104de:	683b      	ldr	r3, [r7, #0]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d009      	beq.n	80104f8 <pbuf_copy+0x118>
 80104e4:	4b20      	ldr	r3, [pc, #128]	; (8010568 <pbuf_copy+0x188>)
 80104e6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80104ea:	4924      	ldr	r1, [pc, #144]	; (801057c <pbuf_copy+0x19c>)
 80104ec:	4820      	ldr	r0, [pc, #128]	; (8010570 <pbuf_copy+0x190>)
 80104ee:	f00c f91f 	bl	801c730 <iprintf>
 80104f2:	f06f 030f 	mvn.w	r3, #15
 80104f6:	e032      	b.n	801055e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d013      	beq.n	8010526 <pbuf_copy+0x146>
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	895a      	ldrh	r2, [r3, #10]
 8010502:	683b      	ldr	r3, [r7, #0]
 8010504:	891b      	ldrh	r3, [r3, #8]
 8010506:	429a      	cmp	r2, r3
 8010508:	d10d      	bne.n	8010526 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d009      	beq.n	8010526 <pbuf_copy+0x146>
 8010512:	4b15      	ldr	r3, [pc, #84]	; (8010568 <pbuf_copy+0x188>)
 8010514:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8010518:	4919      	ldr	r1, [pc, #100]	; (8010580 <pbuf_copy+0x1a0>)
 801051a:	4815      	ldr	r0, [pc, #84]	; (8010570 <pbuf_copy+0x190>)
 801051c:	f00c f908 	bl	801c730 <iprintf>
 8010520:	f06f 0305 	mvn.w	r3, #5
 8010524:	e01b      	b.n	801055e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d013      	beq.n	8010554 <pbuf_copy+0x174>
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	895a      	ldrh	r2, [r3, #10]
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	891b      	ldrh	r3, [r3, #8]
 8010534:	429a      	cmp	r2, r3
 8010536:	d10d      	bne.n	8010554 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d009      	beq.n	8010554 <pbuf_copy+0x174>
 8010540:	4b09      	ldr	r3, [pc, #36]	; (8010568 <pbuf_copy+0x188>)
 8010542:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8010546:	490e      	ldr	r1, [pc, #56]	; (8010580 <pbuf_copy+0x1a0>)
 8010548:	4809      	ldr	r0, [pc, #36]	; (8010570 <pbuf_copy+0x190>)
 801054a:	f00c f8f1 	bl	801c730 <iprintf>
 801054e:	f06f 0305 	mvn.w	r3, #5
 8010552:	e004      	b.n	801055e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	2b00      	cmp	r3, #0
 8010558:	f47f af61 	bne.w	801041e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801055c:	2300      	movs	r3, #0
}
 801055e:	4618      	mov	r0, r3
 8010560:	3718      	adds	r7, #24
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}
 8010566:	bf00      	nop
 8010568:	08020c2c 	.word	0x08020c2c
 801056c:	08020ed4 	.word	0x08020ed4
 8010570:	08020c8c 	.word	0x08020c8c
 8010574:	08020f04 	.word	0x08020f04
 8010578:	08020f1c 	.word	0x08020f1c
 801057c:	08020f38 	.word	0x08020f38
 8010580:	08020f48 	.word	0x08020f48

08010584 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b088      	sub	sp, #32
 8010588:	af00      	add	r7, sp, #0
 801058a:	60f8      	str	r0, [r7, #12]
 801058c:	60b9      	str	r1, [r7, #8]
 801058e:	4611      	mov	r1, r2
 8010590:	461a      	mov	r2, r3
 8010592:	460b      	mov	r3, r1
 8010594:	80fb      	strh	r3, [r7, #6]
 8010596:	4613      	mov	r3, r2
 8010598:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801059a:	2300      	movs	r3, #0
 801059c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801059e:	2300      	movs	r3, #0
 80105a0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d108      	bne.n	80105ba <pbuf_copy_partial+0x36>
 80105a8:	4b2b      	ldr	r3, [pc, #172]	; (8010658 <pbuf_copy_partial+0xd4>)
 80105aa:	f240 420a 	movw	r2, #1034	; 0x40a
 80105ae:	492b      	ldr	r1, [pc, #172]	; (801065c <pbuf_copy_partial+0xd8>)
 80105b0:	482b      	ldr	r0, [pc, #172]	; (8010660 <pbuf_copy_partial+0xdc>)
 80105b2:	f00c f8bd 	bl	801c730 <iprintf>
 80105b6:	2300      	movs	r3, #0
 80105b8:	e04a      	b.n	8010650 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d108      	bne.n	80105d2 <pbuf_copy_partial+0x4e>
 80105c0:	4b25      	ldr	r3, [pc, #148]	; (8010658 <pbuf_copy_partial+0xd4>)
 80105c2:	f240 420b 	movw	r2, #1035	; 0x40b
 80105c6:	4927      	ldr	r1, [pc, #156]	; (8010664 <pbuf_copy_partial+0xe0>)
 80105c8:	4825      	ldr	r0, [pc, #148]	; (8010660 <pbuf_copy_partial+0xdc>)
 80105ca:	f00c f8b1 	bl	801c730 <iprintf>
 80105ce:	2300      	movs	r3, #0
 80105d0:	e03e      	b.n	8010650 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	61fb      	str	r3, [r7, #28]
 80105d6:	e034      	b.n	8010642 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80105d8:	88bb      	ldrh	r3, [r7, #4]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d00a      	beq.n	80105f4 <pbuf_copy_partial+0x70>
 80105de:	69fb      	ldr	r3, [r7, #28]
 80105e0:	895b      	ldrh	r3, [r3, #10]
 80105e2:	88ba      	ldrh	r2, [r7, #4]
 80105e4:	429a      	cmp	r2, r3
 80105e6:	d305      	bcc.n	80105f4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80105e8:	69fb      	ldr	r3, [r7, #28]
 80105ea:	895b      	ldrh	r3, [r3, #10]
 80105ec:	88ba      	ldrh	r2, [r7, #4]
 80105ee:	1ad3      	subs	r3, r2, r3
 80105f0:	80bb      	strh	r3, [r7, #4]
 80105f2:	e023      	b.n	801063c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80105f4:	69fb      	ldr	r3, [r7, #28]
 80105f6:	895a      	ldrh	r2, [r3, #10]
 80105f8:	88bb      	ldrh	r3, [r7, #4]
 80105fa:	1ad3      	subs	r3, r2, r3
 80105fc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80105fe:	8b3a      	ldrh	r2, [r7, #24]
 8010600:	88fb      	ldrh	r3, [r7, #6]
 8010602:	429a      	cmp	r2, r3
 8010604:	d901      	bls.n	801060a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8010606:	88fb      	ldrh	r3, [r7, #6]
 8010608:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801060a:	8b7b      	ldrh	r3, [r7, #26]
 801060c:	68ba      	ldr	r2, [r7, #8]
 801060e:	18d0      	adds	r0, r2, r3
 8010610:	69fb      	ldr	r3, [r7, #28]
 8010612:	685a      	ldr	r2, [r3, #4]
 8010614:	88bb      	ldrh	r3, [r7, #4]
 8010616:	4413      	add	r3, r2
 8010618:	8b3a      	ldrh	r2, [r7, #24]
 801061a:	4619      	mov	r1, r3
 801061c:	f00b f91a 	bl	801b854 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8010620:	8afa      	ldrh	r2, [r7, #22]
 8010622:	8b3b      	ldrh	r3, [r7, #24]
 8010624:	4413      	add	r3, r2
 8010626:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8010628:	8b7a      	ldrh	r2, [r7, #26]
 801062a:	8b3b      	ldrh	r3, [r7, #24]
 801062c:	4413      	add	r3, r2
 801062e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8010630:	88fa      	ldrh	r2, [r7, #6]
 8010632:	8b3b      	ldrh	r3, [r7, #24]
 8010634:	1ad3      	subs	r3, r2, r3
 8010636:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010638:	2300      	movs	r3, #0
 801063a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801063c:	69fb      	ldr	r3, [r7, #28]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	61fb      	str	r3, [r7, #28]
 8010642:	88fb      	ldrh	r3, [r7, #6]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d002      	beq.n	801064e <pbuf_copy_partial+0xca>
 8010648:	69fb      	ldr	r3, [r7, #28]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d1c4      	bne.n	80105d8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801064e:	8afb      	ldrh	r3, [r7, #22]
}
 8010650:	4618      	mov	r0, r3
 8010652:	3720      	adds	r7, #32
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}
 8010658:	08020c2c 	.word	0x08020c2c
 801065c:	08020f74 	.word	0x08020f74
 8010660:	08020c8c 	.word	0x08020c8c
 8010664:	08020f94 	.word	0x08020f94

08010668 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8010668:	b480      	push	{r7}
 801066a:	b087      	sub	sp, #28
 801066c:	af00      	add	r7, sp, #0
 801066e:	60f8      	str	r0, [r7, #12]
 8010670:	460b      	mov	r3, r1
 8010672:	607a      	str	r2, [r7, #4]
 8010674:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8010676:	897b      	ldrh	r3, [r7, #10]
 8010678:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 801067e:	e007      	b.n	8010690 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8010680:	693b      	ldr	r3, [r7, #16]
 8010682:	895b      	ldrh	r3, [r3, #10]
 8010684:	8afa      	ldrh	r2, [r7, #22]
 8010686:	1ad3      	subs	r3, r2, r3
 8010688:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 801068a:	693b      	ldr	r3, [r7, #16]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8010690:	693b      	ldr	r3, [r7, #16]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d004      	beq.n	80106a0 <pbuf_skip_const+0x38>
 8010696:	693b      	ldr	r3, [r7, #16]
 8010698:	895b      	ldrh	r3, [r3, #10]
 801069a:	8afa      	ldrh	r2, [r7, #22]
 801069c:	429a      	cmp	r2, r3
 801069e:	d2ef      	bcs.n	8010680 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d002      	beq.n	80106ac <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	8afa      	ldrh	r2, [r7, #22]
 80106aa:	801a      	strh	r2, [r3, #0]
  }
  return q;
 80106ac:	693b      	ldr	r3, [r7, #16]
}
 80106ae:	4618      	mov	r0, r3
 80106b0:	371c      	adds	r7, #28
 80106b2:	46bd      	mov	sp, r7
 80106b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b8:	4770      	bx	lr

080106ba <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 80106ba:	b580      	push	{r7, lr}
 80106bc:	b086      	sub	sp, #24
 80106be:	af00      	add	r7, sp, #0
 80106c0:	60f8      	str	r0, [r7, #12]
 80106c2:	460b      	mov	r3, r1
 80106c4:	607a      	str	r2, [r7, #4]
 80106c6:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 80106c8:	897b      	ldrh	r3, [r7, #10]
 80106ca:	687a      	ldr	r2, [r7, #4]
 80106cc:	4619      	mov	r1, r3
 80106ce:	68f8      	ldr	r0, [r7, #12]
 80106d0:	f7ff ffca 	bl	8010668 <pbuf_skip_const>
 80106d4:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 80106d6:	697b      	ldr	r3, [r7, #20]
}
 80106d8:	4618      	mov	r0, r3
 80106da:	3718      	adds	r7, #24
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd80      	pop	{r7, pc}

080106e0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b088      	sub	sp, #32
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	60f8      	str	r0, [r7, #12]
 80106e8:	60b9      	str	r1, [r7, #8]
 80106ea:	4613      	mov	r3, r2
 80106ec:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 80106ee:	88fb      	ldrh	r3, [r7, #6]
 80106f0:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 80106f2:	2300      	movs	r3, #0
 80106f4:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d109      	bne.n	8010710 <pbuf_take+0x30>
 80106fc:	4b3a      	ldr	r3, [pc, #232]	; (80107e8 <pbuf_take+0x108>)
 80106fe:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8010702:	493a      	ldr	r1, [pc, #232]	; (80107ec <pbuf_take+0x10c>)
 8010704:	483a      	ldr	r0, [pc, #232]	; (80107f0 <pbuf_take+0x110>)
 8010706:	f00c f813 	bl	801c730 <iprintf>
 801070a:	f06f 030f 	mvn.w	r3, #15
 801070e:	e067      	b.n	80107e0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8010710:	68bb      	ldr	r3, [r7, #8]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d109      	bne.n	801072a <pbuf_take+0x4a>
 8010716:	4b34      	ldr	r3, [pc, #208]	; (80107e8 <pbuf_take+0x108>)
 8010718:	f240 42b4 	movw	r2, #1204	; 0x4b4
 801071c:	4935      	ldr	r1, [pc, #212]	; (80107f4 <pbuf_take+0x114>)
 801071e:	4834      	ldr	r0, [pc, #208]	; (80107f0 <pbuf_take+0x110>)
 8010720:	f00c f806 	bl	801c730 <iprintf>
 8010724:	f06f 030f 	mvn.w	r3, #15
 8010728:	e05a      	b.n	80107e0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	891b      	ldrh	r3, [r3, #8]
 801072e:	88fa      	ldrh	r2, [r7, #6]
 8010730:	429a      	cmp	r2, r3
 8010732:	d909      	bls.n	8010748 <pbuf_take+0x68>
 8010734:	4b2c      	ldr	r3, [pc, #176]	; (80107e8 <pbuf_take+0x108>)
 8010736:	f240 42b5 	movw	r2, #1205	; 0x4b5
 801073a:	492f      	ldr	r1, [pc, #188]	; (80107f8 <pbuf_take+0x118>)
 801073c:	482c      	ldr	r0, [pc, #176]	; (80107f0 <pbuf_take+0x110>)
 801073e:	f00b fff7 	bl	801c730 <iprintf>
 8010742:	f04f 33ff 	mov.w	r3, #4294967295
 8010746:	e04b      	b.n	80107e0 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d007      	beq.n	801075e <pbuf_take+0x7e>
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d004      	beq.n	801075e <pbuf_take+0x7e>
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	891b      	ldrh	r3, [r3, #8]
 8010758:	88fa      	ldrh	r2, [r7, #6]
 801075a:	429a      	cmp	r2, r3
 801075c:	d902      	bls.n	8010764 <pbuf_take+0x84>
    return ERR_ARG;
 801075e:	f06f 030f 	mvn.w	r3, #15
 8010762:	e03d      	b.n	80107e0 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	61fb      	str	r3, [r7, #28]
 8010768:	e028      	b.n	80107bc <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801076a:	69fb      	ldr	r3, [r7, #28]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d106      	bne.n	801077e <pbuf_take+0x9e>
 8010770:	4b1d      	ldr	r3, [pc, #116]	; (80107e8 <pbuf_take+0x108>)
 8010772:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8010776:	4921      	ldr	r1, [pc, #132]	; (80107fc <pbuf_take+0x11c>)
 8010778:	481d      	ldr	r0, [pc, #116]	; (80107f0 <pbuf_take+0x110>)
 801077a:	f00b ffd9 	bl	801c730 <iprintf>
    buf_copy_len = total_copy_len;
 801077e:	697b      	ldr	r3, [r7, #20]
 8010780:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8010782:	69fb      	ldr	r3, [r7, #28]
 8010784:	895b      	ldrh	r3, [r3, #10]
 8010786:	461a      	mov	r2, r3
 8010788:	69bb      	ldr	r3, [r7, #24]
 801078a:	4293      	cmp	r3, r2
 801078c:	d902      	bls.n	8010794 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 801078e:	69fb      	ldr	r3, [r7, #28]
 8010790:	895b      	ldrh	r3, [r3, #10]
 8010792:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8010794:	69fb      	ldr	r3, [r7, #28]
 8010796:	6858      	ldr	r0, [r3, #4]
 8010798:	68ba      	ldr	r2, [r7, #8]
 801079a:	693b      	ldr	r3, [r7, #16]
 801079c:	4413      	add	r3, r2
 801079e:	69ba      	ldr	r2, [r7, #24]
 80107a0:	4619      	mov	r1, r3
 80107a2:	f00b f857 	bl	801b854 <memcpy>
    total_copy_len -= buf_copy_len;
 80107a6:	697a      	ldr	r2, [r7, #20]
 80107a8:	69bb      	ldr	r3, [r7, #24]
 80107aa:	1ad3      	subs	r3, r2, r3
 80107ac:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 80107ae:	693a      	ldr	r2, [r7, #16]
 80107b0:	69bb      	ldr	r3, [r7, #24]
 80107b2:	4413      	add	r3, r2
 80107b4:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80107b6:	69fb      	ldr	r3, [r7, #28]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	61fb      	str	r3, [r7, #28]
 80107bc:	697b      	ldr	r3, [r7, #20]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d1d3      	bne.n	801076a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80107c2:	697b      	ldr	r3, [r7, #20]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d103      	bne.n	80107d0 <pbuf_take+0xf0>
 80107c8:	88fb      	ldrh	r3, [r7, #6]
 80107ca:	693a      	ldr	r2, [r7, #16]
 80107cc:	429a      	cmp	r2, r3
 80107ce:	d006      	beq.n	80107de <pbuf_take+0xfe>
 80107d0:	4b05      	ldr	r3, [pc, #20]	; (80107e8 <pbuf_take+0x108>)
 80107d2:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80107d6:	490a      	ldr	r1, [pc, #40]	; (8010800 <pbuf_take+0x120>)
 80107d8:	4805      	ldr	r0, [pc, #20]	; (80107f0 <pbuf_take+0x110>)
 80107da:	f00b ffa9 	bl	801c730 <iprintf>
  return ERR_OK;
 80107de:	2300      	movs	r3, #0
}
 80107e0:	4618      	mov	r0, r3
 80107e2:	3720      	adds	r7, #32
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bd80      	pop	{r7, pc}
 80107e8:	08020c2c 	.word	0x08020c2c
 80107ec:	08021004 	.word	0x08021004
 80107f0:	08020c8c 	.word	0x08020c8c
 80107f4:	0802101c 	.word	0x0802101c
 80107f8:	08021038 	.word	0x08021038
 80107fc:	08021058 	.word	0x08021058
 8010800:	08021070 	.word	0x08021070

08010804 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b088      	sub	sp, #32
 8010808:	af00      	add	r7, sp, #0
 801080a:	60f8      	str	r0, [r7, #12]
 801080c:	60b9      	str	r1, [r7, #8]
 801080e:	4611      	mov	r1, r2
 8010810:	461a      	mov	r2, r3
 8010812:	460b      	mov	r3, r1
 8010814:	80fb      	strh	r3, [r7, #6]
 8010816:	4613      	mov	r3, r2
 8010818:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 801081a:	f107 0210 	add.w	r2, r7, #16
 801081e:	88bb      	ldrh	r3, [r7, #4]
 8010820:	4619      	mov	r1, r3
 8010822:	68f8      	ldr	r0, [r7, #12]
 8010824:	f7ff ff49 	bl	80106ba <pbuf_skip>
 8010828:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 801082a:	69fb      	ldr	r3, [r7, #28]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d047      	beq.n	80108c0 <pbuf_take_at+0xbc>
 8010830:	69fb      	ldr	r3, [r7, #28]
 8010832:	891b      	ldrh	r3, [r3, #8]
 8010834:	461a      	mov	r2, r3
 8010836:	8a3b      	ldrh	r3, [r7, #16]
 8010838:	4619      	mov	r1, r3
 801083a:	88fb      	ldrh	r3, [r7, #6]
 801083c:	440b      	add	r3, r1
 801083e:	429a      	cmp	r2, r3
 8010840:	db3e      	blt.n	80108c0 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 8010842:	88fb      	ldrh	r3, [r7, #6]
 8010844:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 801084a:	69fb      	ldr	r3, [r7, #28]
 801084c:	895a      	ldrh	r2, [r3, #10]
 801084e:	8a3b      	ldrh	r3, [r7, #16]
 8010850:	429a      	cmp	r2, r3
 8010852:	d806      	bhi.n	8010862 <pbuf_take_at+0x5e>
 8010854:	4b1d      	ldr	r3, [pc, #116]	; (80108cc <pbuf_take_at+0xc8>)
 8010856:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801085a:	491d      	ldr	r1, [pc, #116]	; (80108d0 <pbuf_take_at+0xcc>)
 801085c:	481d      	ldr	r0, [pc, #116]	; (80108d4 <pbuf_take_at+0xd0>)
 801085e:	f00b ff67 	bl	801c730 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8010862:	69fb      	ldr	r3, [r7, #28]
 8010864:	895b      	ldrh	r3, [r3, #10]
 8010866:	461a      	mov	r2, r3
 8010868:	8a3b      	ldrh	r3, [r7, #16]
 801086a:	1ad2      	subs	r2, r2, r3
 801086c:	88fb      	ldrh	r3, [r7, #6]
 801086e:	429a      	cmp	r2, r3
 8010870:	da05      	bge.n	801087e <pbuf_take_at+0x7a>
 8010872:	69fb      	ldr	r3, [r7, #28]
 8010874:	895a      	ldrh	r2, [r3, #10]
 8010876:	8a3b      	ldrh	r3, [r7, #16]
 8010878:	1ad3      	subs	r3, r2, r3
 801087a:	b29b      	uxth	r3, r3
 801087c:	e000      	b.n	8010880 <pbuf_take_at+0x7c>
 801087e:	88fb      	ldrh	r3, [r7, #6]
 8010880:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8010882:	69fb      	ldr	r3, [r7, #28]
 8010884:	685b      	ldr	r3, [r3, #4]
 8010886:	8a3a      	ldrh	r2, [r7, #16]
 8010888:	4413      	add	r3, r2
 801088a:	8a7a      	ldrh	r2, [r7, #18]
 801088c:	68b9      	ldr	r1, [r7, #8]
 801088e:	4618      	mov	r0, r3
 8010890:	f00a ffe0 	bl	801b854 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8010894:	8b7a      	ldrh	r2, [r7, #26]
 8010896:	8a7b      	ldrh	r3, [r7, #18]
 8010898:	1ad3      	subs	r3, r2, r3
 801089a:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 801089c:	8a7b      	ldrh	r3, [r7, #18]
 801089e:	697a      	ldr	r2, [r7, #20]
 80108a0:	4413      	add	r3, r2
 80108a2:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 80108a4:	8b7b      	ldrh	r3, [r7, #26]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d008      	beq.n	80108bc <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 80108aa:	69fb      	ldr	r3, [r7, #28]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	8b7a      	ldrh	r2, [r7, #26]
 80108b0:	6979      	ldr	r1, [r7, #20]
 80108b2:	4618      	mov	r0, r3
 80108b4:	f7ff ff14 	bl	80106e0 <pbuf_take>
 80108b8:	4603      	mov	r3, r0
 80108ba:	e003      	b.n	80108c4 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 80108bc:	2300      	movs	r3, #0
 80108be:	e001      	b.n	80108c4 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 80108c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80108c4:	4618      	mov	r0, r3
 80108c6:	3720      	adds	r7, #32
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}
 80108cc:	08020c2c 	.word	0x08020c2c
 80108d0:	08021088 	.word	0x08021088
 80108d4:	08020c8c 	.word	0x08020c8c

080108d8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b084      	sub	sp, #16
 80108dc:	af00      	add	r7, sp, #0
 80108de:	4603      	mov	r3, r0
 80108e0:	603a      	str	r2, [r7, #0]
 80108e2:	71fb      	strb	r3, [r7, #7]
 80108e4:	460b      	mov	r3, r1
 80108e6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	8919      	ldrh	r1, [r3, #8]
 80108ec:	88ba      	ldrh	r2, [r7, #4]
 80108ee:	79fb      	ldrb	r3, [r7, #7]
 80108f0:	4618      	mov	r0, r3
 80108f2:	f7ff f969 	bl	800fbc8 <pbuf_alloc>
 80108f6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d101      	bne.n	8010902 <pbuf_clone+0x2a>
    return NULL;
 80108fe:	2300      	movs	r3, #0
 8010900:	e011      	b.n	8010926 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8010902:	6839      	ldr	r1, [r7, #0]
 8010904:	68f8      	ldr	r0, [r7, #12]
 8010906:	f7ff fd6b 	bl	80103e0 <pbuf_copy>
 801090a:	4603      	mov	r3, r0
 801090c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801090e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d006      	beq.n	8010924 <pbuf_clone+0x4c>
 8010916:	4b06      	ldr	r3, [pc, #24]	; (8010930 <pbuf_clone+0x58>)
 8010918:	f240 5224 	movw	r2, #1316	; 0x524
 801091c:	4905      	ldr	r1, [pc, #20]	; (8010934 <pbuf_clone+0x5c>)
 801091e:	4806      	ldr	r0, [pc, #24]	; (8010938 <pbuf_clone+0x60>)
 8010920:	f00b ff06 	bl	801c730 <iprintf>
  return q;
 8010924:	68fb      	ldr	r3, [r7, #12]
}
 8010926:	4618      	mov	r0, r3
 8010928:	3710      	adds	r7, #16
 801092a:	46bd      	mov	sp, r7
 801092c:	bd80      	pop	{r7, pc}
 801092e:	bf00      	nop
 8010930:	08020c2c 	.word	0x08020c2c
 8010934:	080210a0 	.word	0x080210a0
 8010938:	08020c8c 	.word	0x08020c8c

0801093c <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b084      	sub	sp, #16
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
 8010944:	460b      	mov	r3, r1
 8010946:	807b      	strh	r3, [r7, #2]
 8010948:	4613      	mov	r3, r2
 801094a:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 801094c:	f107 020a 	add.w	r2, r7, #10
 8010950:	887b      	ldrh	r3, [r7, #2]
 8010952:	4619      	mov	r1, r3
 8010954:	6878      	ldr	r0, [r7, #4]
 8010956:	f7ff feb0 	bl	80106ba <pbuf_skip>
 801095a:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d00a      	beq.n	8010978 <pbuf_put_at+0x3c>
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	895a      	ldrh	r2, [r3, #10]
 8010966:	897b      	ldrh	r3, [r7, #10]
 8010968:	429a      	cmp	r2, r3
 801096a:	d905      	bls.n	8010978 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	685b      	ldr	r3, [r3, #4]
 8010970:	897a      	ldrh	r2, [r7, #10]
 8010972:	4413      	add	r3, r2
 8010974:	787a      	ldrb	r2, [r7, #1]
 8010976:	701a      	strb	r2, [r3, #0]
  }
}
 8010978:	bf00      	nop
 801097a:	3710      	adds	r7, #16
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}

08010980 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 8010980:	b480      	push	{r7}
 8010982:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 8010984:	bf00      	nop
 8010986:	46bd      	mov	sp, r7
 8010988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098c:	4770      	bx	lr
	...

08010990 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010994:	f00b fee4 	bl	801c760 <rand>
 8010998:	4603      	mov	r3, r0
 801099a:	b29b      	uxth	r3, r3
 801099c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80109a0:	b29b      	uxth	r3, r3
 80109a2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80109a6:	b29a      	uxth	r2, r3
 80109a8:	4b01      	ldr	r3, [pc, #4]	; (80109b0 <tcp_init+0x20>)
 80109aa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80109ac:	bf00      	nop
 80109ae:	bd80      	pop	{r7, pc}
 80109b0:	20000058 	.word	0x20000058

080109b4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b082      	sub	sp, #8
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	7d1b      	ldrb	r3, [r3, #20]
 80109c0:	2b01      	cmp	r3, #1
 80109c2:	d105      	bne.n	80109d0 <tcp_free+0x1c>
 80109c4:	4b06      	ldr	r3, [pc, #24]	; (80109e0 <tcp_free+0x2c>)
 80109c6:	22d4      	movs	r2, #212	; 0xd4
 80109c8:	4906      	ldr	r1, [pc, #24]	; (80109e4 <tcp_free+0x30>)
 80109ca:	4807      	ldr	r0, [pc, #28]	; (80109e8 <tcp_free+0x34>)
 80109cc:	f00b feb0 	bl	801c730 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80109d0:	6879      	ldr	r1, [r7, #4]
 80109d2:	2001      	movs	r0, #1
 80109d4:	f7fe fdaa 	bl	800f52c <memp_free>
}
 80109d8:	bf00      	nop
 80109da:	3708      	adds	r7, #8
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}
 80109e0:	0802112c 	.word	0x0802112c
 80109e4:	0802115c 	.word	0x0802115c
 80109e8:	08021170 	.word	0x08021170

080109ec <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b082      	sub	sp, #8
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	7d1b      	ldrb	r3, [r3, #20]
 80109f8:	2b01      	cmp	r3, #1
 80109fa:	d105      	bne.n	8010a08 <tcp_free_listen+0x1c>
 80109fc:	4b06      	ldr	r3, [pc, #24]	; (8010a18 <tcp_free_listen+0x2c>)
 80109fe:	22df      	movs	r2, #223	; 0xdf
 8010a00:	4906      	ldr	r1, [pc, #24]	; (8010a1c <tcp_free_listen+0x30>)
 8010a02:	4807      	ldr	r0, [pc, #28]	; (8010a20 <tcp_free_listen+0x34>)
 8010a04:	f00b fe94 	bl	801c730 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010a08:	6879      	ldr	r1, [r7, #4]
 8010a0a:	2002      	movs	r0, #2
 8010a0c:	f7fe fd8e 	bl	800f52c <memp_free>
}
 8010a10:	bf00      	nop
 8010a12:	3708      	adds	r7, #8
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bd80      	pop	{r7, pc}
 8010a18:	0802112c 	.word	0x0802112c
 8010a1c:	08021198 	.word	0x08021198
 8010a20:	08021170 	.word	0x08021170

08010a24 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010a28:	f000 fec0 	bl	80117ac <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010a2c:	4b07      	ldr	r3, [pc, #28]	; (8010a4c <tcp_tmr+0x28>)
 8010a2e:	781b      	ldrb	r3, [r3, #0]
 8010a30:	3301      	adds	r3, #1
 8010a32:	b2da      	uxtb	r2, r3
 8010a34:	4b05      	ldr	r3, [pc, #20]	; (8010a4c <tcp_tmr+0x28>)
 8010a36:	701a      	strb	r2, [r3, #0]
 8010a38:	4b04      	ldr	r3, [pc, #16]	; (8010a4c <tcp_tmr+0x28>)
 8010a3a:	781b      	ldrb	r3, [r3, #0]
 8010a3c:	f003 0301 	and.w	r3, r3, #1
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d001      	beq.n	8010a48 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010a44:	f000 fb72 	bl	801112c <tcp_slowtmr>
  }
}
 8010a48:	bf00      	nop
 8010a4a:	bd80      	pop	{r7, pc}
 8010a4c:	200073b1 	.word	0x200073b1

08010a50 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b084      	sub	sp, #16
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
 8010a58:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d105      	bne.n	8010a6c <tcp_remove_listener+0x1c>
 8010a60:	4b0d      	ldr	r3, [pc, #52]	; (8010a98 <tcp_remove_listener+0x48>)
 8010a62:	22ff      	movs	r2, #255	; 0xff
 8010a64:	490d      	ldr	r1, [pc, #52]	; (8010a9c <tcp_remove_listener+0x4c>)
 8010a66:	480e      	ldr	r0, [pc, #56]	; (8010aa0 <tcp_remove_listener+0x50>)
 8010a68:	f00b fe62 	bl	801c730 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	60fb      	str	r3, [r7, #12]
 8010a70:	e00a      	b.n	8010a88 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010a76:	683a      	ldr	r2, [r7, #0]
 8010a78:	429a      	cmp	r2, r3
 8010a7a:	d102      	bne.n	8010a82 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	2200      	movs	r2, #0
 8010a80:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	68db      	ldr	r3, [r3, #12]
 8010a86:	60fb      	str	r3, [r7, #12]
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d1f1      	bne.n	8010a72 <tcp_remove_listener+0x22>
    }
  }
}
 8010a8e:	bf00      	nop
 8010a90:	bf00      	nop
 8010a92:	3710      	adds	r7, #16
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}
 8010a98:	0802112c 	.word	0x0802112c
 8010a9c:	080211b4 	.word	0x080211b4
 8010aa0:	08021170 	.word	0x08021170

08010aa4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b084      	sub	sp, #16
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d106      	bne.n	8010ac0 <tcp_listen_closed+0x1c>
 8010ab2:	4b14      	ldr	r3, [pc, #80]	; (8010b04 <tcp_listen_closed+0x60>)
 8010ab4:	f240 1211 	movw	r2, #273	; 0x111
 8010ab8:	4913      	ldr	r1, [pc, #76]	; (8010b08 <tcp_listen_closed+0x64>)
 8010aba:	4814      	ldr	r0, [pc, #80]	; (8010b0c <tcp_listen_closed+0x68>)
 8010abc:	f00b fe38 	bl	801c730 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	7d1b      	ldrb	r3, [r3, #20]
 8010ac4:	2b01      	cmp	r3, #1
 8010ac6:	d006      	beq.n	8010ad6 <tcp_listen_closed+0x32>
 8010ac8:	4b0e      	ldr	r3, [pc, #56]	; (8010b04 <tcp_listen_closed+0x60>)
 8010aca:	f44f 7289 	mov.w	r2, #274	; 0x112
 8010ace:	4910      	ldr	r1, [pc, #64]	; (8010b10 <tcp_listen_closed+0x6c>)
 8010ad0:	480e      	ldr	r0, [pc, #56]	; (8010b0c <tcp_listen_closed+0x68>)
 8010ad2:	f00b fe2d 	bl	801c730 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010ad6:	2301      	movs	r3, #1
 8010ad8:	60fb      	str	r3, [r7, #12]
 8010ada:	e00b      	b.n	8010af4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8010adc:	4a0d      	ldr	r2, [pc, #52]	; (8010b14 <tcp_listen_closed+0x70>)
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	6879      	ldr	r1, [r7, #4]
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f7ff ffb1 	bl	8010a50 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	3301      	adds	r3, #1
 8010af2:	60fb      	str	r3, [r7, #12]
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2b03      	cmp	r3, #3
 8010af8:	d9f0      	bls.n	8010adc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8010afa:	bf00      	nop
 8010afc:	bf00      	nop
 8010afe:	3710      	adds	r7, #16
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bd80      	pop	{r7, pc}
 8010b04:	0802112c 	.word	0x0802112c
 8010b08:	080211dc 	.word	0x080211dc
 8010b0c:	08021170 	.word	0x08021170
 8010b10:	080211e8 	.word	0x080211e8
 8010b14:	080244f8 	.word	0x080244f8

08010b18 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010b18:	b5b0      	push	{r4, r5, r7, lr}
 8010b1a:	b088      	sub	sp, #32
 8010b1c:	af04      	add	r7, sp, #16
 8010b1e:	6078      	str	r0, [r7, #4]
 8010b20:	460b      	mov	r3, r1
 8010b22:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d106      	bne.n	8010b38 <tcp_close_shutdown+0x20>
 8010b2a:	4b66      	ldr	r3, [pc, #408]	; (8010cc4 <tcp_close_shutdown+0x1ac>)
 8010b2c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8010b30:	4965      	ldr	r1, [pc, #404]	; (8010cc8 <tcp_close_shutdown+0x1b0>)
 8010b32:	4866      	ldr	r0, [pc, #408]	; (8010ccc <tcp_close_shutdown+0x1b4>)
 8010b34:	f00b fdfc 	bl	801c730 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010b38:	78fb      	ldrb	r3, [r7, #3]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d066      	beq.n	8010c0c <tcp_close_shutdown+0xf4>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	7d1b      	ldrb	r3, [r3, #20]
 8010b42:	2b04      	cmp	r3, #4
 8010b44:	d003      	beq.n	8010b4e <tcp_close_shutdown+0x36>
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	7d1b      	ldrb	r3, [r3, #20]
 8010b4a:	2b07      	cmp	r3, #7
 8010b4c:	d15e      	bne.n	8010c0c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d104      	bne.n	8010b60 <tcp_close_shutdown+0x48>
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b5a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010b5e:	d055      	beq.n	8010c0c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	8b5b      	ldrh	r3, [r3, #26]
 8010b64:	f003 0310 	and.w	r3, r3, #16
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d106      	bne.n	8010b7a <tcp_close_shutdown+0x62>
 8010b6c:	4b55      	ldr	r3, [pc, #340]	; (8010cc4 <tcp_close_shutdown+0x1ac>)
 8010b6e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8010b72:	4957      	ldr	r1, [pc, #348]	; (8010cd0 <tcp_close_shutdown+0x1b8>)
 8010b74:	4855      	ldr	r0, [pc, #340]	; (8010ccc <tcp_close_shutdown+0x1b4>)
 8010b76:	f00b fddb 	bl	801c730 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010b82:	687d      	ldr	r5, [r7, #4]
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	3304      	adds	r3, #4
 8010b88:	687a      	ldr	r2, [r7, #4]
 8010b8a:	8ad2      	ldrh	r2, [r2, #22]
 8010b8c:	6879      	ldr	r1, [r7, #4]
 8010b8e:	8b09      	ldrh	r1, [r1, #24]
 8010b90:	9102      	str	r1, [sp, #8]
 8010b92:	9201      	str	r2, [sp, #4]
 8010b94:	9300      	str	r3, [sp, #0]
 8010b96:	462b      	mov	r3, r5
 8010b98:	4622      	mov	r2, r4
 8010b9a:	4601      	mov	r1, r0
 8010b9c:	6878      	ldr	r0, [r7, #4]
 8010b9e:	f004 ffa9 	bl	8015af4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	f001 f90e 	bl	8011dc4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010ba8:	4b4a      	ldr	r3, [pc, #296]	; (8010cd4 <tcp_close_shutdown+0x1bc>)
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	687a      	ldr	r2, [r7, #4]
 8010bae:	429a      	cmp	r2, r3
 8010bb0:	d105      	bne.n	8010bbe <tcp_close_shutdown+0xa6>
 8010bb2:	4b48      	ldr	r3, [pc, #288]	; (8010cd4 <tcp_close_shutdown+0x1bc>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	68db      	ldr	r3, [r3, #12]
 8010bb8:	4a46      	ldr	r2, [pc, #280]	; (8010cd4 <tcp_close_shutdown+0x1bc>)
 8010bba:	6013      	str	r3, [r2, #0]
 8010bbc:	e013      	b.n	8010be6 <tcp_close_shutdown+0xce>
 8010bbe:	4b45      	ldr	r3, [pc, #276]	; (8010cd4 <tcp_close_shutdown+0x1bc>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	60fb      	str	r3, [r7, #12]
 8010bc4:	e00c      	b.n	8010be0 <tcp_close_shutdown+0xc8>
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	68db      	ldr	r3, [r3, #12]
 8010bca:	687a      	ldr	r2, [r7, #4]
 8010bcc:	429a      	cmp	r2, r3
 8010bce:	d104      	bne.n	8010bda <tcp_close_shutdown+0xc2>
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	68da      	ldr	r2, [r3, #12]
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	60da      	str	r2, [r3, #12]
 8010bd8:	e005      	b.n	8010be6 <tcp_close_shutdown+0xce>
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	68db      	ldr	r3, [r3, #12]
 8010bde:	60fb      	str	r3, [r7, #12]
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d1ef      	bne.n	8010bc6 <tcp_close_shutdown+0xae>
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	2200      	movs	r2, #0
 8010bea:	60da      	str	r2, [r3, #12]
 8010bec:	4b3a      	ldr	r3, [pc, #232]	; (8010cd8 <tcp_close_shutdown+0x1c0>)
 8010bee:	2201      	movs	r2, #1
 8010bf0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8010bf2:	4b3a      	ldr	r3, [pc, #232]	; (8010cdc <tcp_close_shutdown+0x1c4>)
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	687a      	ldr	r2, [r7, #4]
 8010bf8:	429a      	cmp	r2, r3
 8010bfa:	d102      	bne.n	8010c02 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8010bfc:	f003 fe28 	bl	8014850 <tcp_trigger_input_pcb_close>
 8010c00:	e002      	b.n	8010c08 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	f7ff fed6 	bl	80109b4 <tcp_free>
      }
      return ERR_OK;
 8010c08:	2300      	movs	r3, #0
 8010c0a:	e057      	b.n	8010cbc <tcp_close_shutdown+0x1a4>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	7d1b      	ldrb	r3, [r3, #20]
 8010c10:	2b02      	cmp	r3, #2
 8010c12:	d03b      	beq.n	8010c8c <tcp_close_shutdown+0x174>
 8010c14:	2b02      	cmp	r3, #2
 8010c16:	dc4b      	bgt.n	8010cb0 <tcp_close_shutdown+0x198>
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d002      	beq.n	8010c22 <tcp_close_shutdown+0x10a>
 8010c1c:	2b01      	cmp	r3, #1
 8010c1e:	d02a      	beq.n	8010c76 <tcp_close_shutdown+0x15e>
 8010c20:	e046      	b.n	8010cb0 <tcp_close_shutdown+0x198>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	8adb      	ldrh	r3, [r3, #22]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d021      	beq.n	8010c6e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010c2a:	4b2d      	ldr	r3, [pc, #180]	; (8010ce0 <tcp_close_shutdown+0x1c8>)
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	687a      	ldr	r2, [r7, #4]
 8010c30:	429a      	cmp	r2, r3
 8010c32:	d105      	bne.n	8010c40 <tcp_close_shutdown+0x128>
 8010c34:	4b2a      	ldr	r3, [pc, #168]	; (8010ce0 <tcp_close_shutdown+0x1c8>)
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	68db      	ldr	r3, [r3, #12]
 8010c3a:	4a29      	ldr	r2, [pc, #164]	; (8010ce0 <tcp_close_shutdown+0x1c8>)
 8010c3c:	6013      	str	r3, [r2, #0]
 8010c3e:	e013      	b.n	8010c68 <tcp_close_shutdown+0x150>
 8010c40:	4b27      	ldr	r3, [pc, #156]	; (8010ce0 <tcp_close_shutdown+0x1c8>)
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	60bb      	str	r3, [r7, #8]
 8010c46:	e00c      	b.n	8010c62 <tcp_close_shutdown+0x14a>
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	68db      	ldr	r3, [r3, #12]
 8010c4c:	687a      	ldr	r2, [r7, #4]
 8010c4e:	429a      	cmp	r2, r3
 8010c50:	d104      	bne.n	8010c5c <tcp_close_shutdown+0x144>
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	68da      	ldr	r2, [r3, #12]
 8010c56:	68bb      	ldr	r3, [r7, #8]
 8010c58:	60da      	str	r2, [r3, #12]
 8010c5a:	e005      	b.n	8010c68 <tcp_close_shutdown+0x150>
 8010c5c:	68bb      	ldr	r3, [r7, #8]
 8010c5e:	68db      	ldr	r3, [r3, #12]
 8010c60:	60bb      	str	r3, [r7, #8]
 8010c62:	68bb      	ldr	r3, [r7, #8]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d1ef      	bne.n	8010c48 <tcp_close_shutdown+0x130>
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8010c6e:	6878      	ldr	r0, [r7, #4]
 8010c70:	f7ff fea0 	bl	80109b4 <tcp_free>
      break;
 8010c74:	e021      	b.n	8010cba <tcp_close_shutdown+0x1a2>
    case LISTEN:
      tcp_listen_closed(pcb);
 8010c76:	6878      	ldr	r0, [r7, #4]
 8010c78:	f7ff ff14 	bl	8010aa4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8010c7c:	6879      	ldr	r1, [r7, #4]
 8010c7e:	4819      	ldr	r0, [pc, #100]	; (8010ce4 <tcp_close_shutdown+0x1cc>)
 8010c80:	f001 f8f0 	bl	8011e64 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8010c84:	6878      	ldr	r0, [r7, #4]
 8010c86:	f7ff feb1 	bl	80109ec <tcp_free_listen>
      break;
 8010c8a:	e016      	b.n	8010cba <tcp_close_shutdown+0x1a2>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010c8c:	6879      	ldr	r1, [r7, #4]
 8010c8e:	4811      	ldr	r0, [pc, #68]	; (8010cd4 <tcp_close_shutdown+0x1bc>)
 8010c90:	f001 f8e8 	bl	8011e64 <tcp_pcb_remove>
 8010c94:	4b10      	ldr	r3, [pc, #64]	; (8010cd8 <tcp_close_shutdown+0x1c0>)
 8010c96:	2201      	movs	r2, #1
 8010c98:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8010c9a:	6878      	ldr	r0, [r7, #4]
 8010c9c:	f7ff fe8a 	bl	80109b4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
 8010ca0:	4b11      	ldr	r3, [pc, #68]	; (8010ce8 <tcp_close_shutdown+0x1d0>)
 8010ca2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8010ca6:	3301      	adds	r3, #1
 8010ca8:	4a0f      	ldr	r2, [pc, #60]	; (8010ce8 <tcp_close_shutdown+0x1d0>)
 8010caa:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
      break;
 8010cae:	e004      	b.n	8010cba <tcp_close_shutdown+0x1a2>
    default:
      return tcp_close_shutdown_fin(pcb);
 8010cb0:	6878      	ldr	r0, [r7, #4]
 8010cb2:	f000 f81b 	bl	8010cec <tcp_close_shutdown_fin>
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	e000      	b.n	8010cbc <tcp_close_shutdown+0x1a4>
  }
  return ERR_OK;
 8010cba:	2300      	movs	r3, #0
}
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	3710      	adds	r7, #16
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8010cc4:	0802112c 	.word	0x0802112c
 8010cc8:	08021200 	.word	0x08021200
 8010ccc:	08021170 	.word	0x08021170
 8010cd0:	08021220 	.word	0x08021220
 8010cd4:	200073a8 	.word	0x200073a8
 8010cd8:	200073b0 	.word	0x200073b0
 8010cdc:	200073e8 	.word	0x200073e8
 8010ce0:	200073a0 	.word	0x200073a0
 8010ce4:	200073a4 	.word	0x200073a4
 8010ce8:	20007204 	.word	0x20007204

08010cec <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b084      	sub	sp, #16
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d106      	bne.n	8010d08 <tcp_close_shutdown_fin+0x1c>
 8010cfa:	4b38      	ldr	r3, [pc, #224]	; (8010ddc <tcp_close_shutdown_fin+0xf0>)
 8010cfc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8010d00:	4937      	ldr	r1, [pc, #220]	; (8010de0 <tcp_close_shutdown_fin+0xf4>)
 8010d02:	4838      	ldr	r0, [pc, #224]	; (8010de4 <tcp_close_shutdown_fin+0xf8>)
 8010d04:	f00b fd14 	bl	801c730 <iprintf>

  switch (pcb->state) {
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	7d1b      	ldrb	r3, [r3, #20]
 8010d0c:	2b07      	cmp	r3, #7
 8010d0e:	d02e      	beq.n	8010d6e <tcp_close_shutdown_fin+0x82>
 8010d10:	2b07      	cmp	r3, #7
 8010d12:	dc40      	bgt.n	8010d96 <tcp_close_shutdown_fin+0xaa>
 8010d14:	2b03      	cmp	r3, #3
 8010d16:	d002      	beq.n	8010d1e <tcp_close_shutdown_fin+0x32>
 8010d18:	2b04      	cmp	r3, #4
 8010d1a:	d014      	beq.n	8010d46 <tcp_close_shutdown_fin+0x5a>
 8010d1c:	e03b      	b.n	8010d96 <tcp_close_shutdown_fin+0xaa>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8010d1e:	6878      	ldr	r0, [r7, #4]
 8010d20:	f003 ffbc 	bl	8014c9c <tcp_send_fin>
 8010d24:	4603      	mov	r3, r0
 8010d26:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d134      	bne.n	8010d9a <tcp_close_shutdown_fin+0xae>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
 8010d30:	4b2d      	ldr	r3, [pc, #180]	; (8010de8 <tcp_close_shutdown_fin+0xfc>)
 8010d32:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8010d36:	3301      	adds	r3, #1
 8010d38:	4a2b      	ldr	r2, [pc, #172]	; (8010de8 <tcp_close_shutdown_fin+0xfc>)
 8010d3a:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
        pcb->state = FIN_WAIT_1;
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	2205      	movs	r2, #5
 8010d42:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010d44:	e029      	b.n	8010d9a <tcp_close_shutdown_fin+0xae>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8010d46:	6878      	ldr	r0, [r7, #4]
 8010d48:	f003 ffa8 	bl	8014c9c <tcp_send_fin>
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d122      	bne.n	8010d9e <tcp_close_shutdown_fin+0xb2>
        MIB2_STATS_INC(mib2.tcpestabresets);
 8010d58:	4b23      	ldr	r3, [pc, #140]	; (8010de8 <tcp_close_shutdown_fin+0xfc>)
 8010d5a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8010d5e:	3301      	adds	r3, #1
 8010d60:	4a21      	ldr	r2, [pc, #132]	; (8010de8 <tcp_close_shutdown_fin+0xfc>)
 8010d62:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
        pcb->state = FIN_WAIT_1;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	2205      	movs	r2, #5
 8010d6a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010d6c:	e017      	b.n	8010d9e <tcp_close_shutdown_fin+0xb2>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f003 ff94 	bl	8014c9c <tcp_send_fin>
 8010d74:	4603      	mov	r3, r0
 8010d76:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d110      	bne.n	8010da2 <tcp_close_shutdown_fin+0xb6>
        MIB2_STATS_INC(mib2.tcpestabresets);
 8010d80:	4b19      	ldr	r3, [pc, #100]	; (8010de8 <tcp_close_shutdown_fin+0xfc>)
 8010d82:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8010d86:	3301      	adds	r3, #1
 8010d88:	4a17      	ldr	r2, [pc, #92]	; (8010de8 <tcp_close_shutdown_fin+0xfc>)
 8010d8a:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
        pcb->state = LAST_ACK;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	2209      	movs	r2, #9
 8010d92:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010d94:	e005      	b.n	8010da2 <tcp_close_shutdown_fin+0xb6>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8010d96:	2300      	movs	r3, #0
 8010d98:	e01c      	b.n	8010dd4 <tcp_close_shutdown_fin+0xe8>
      break;
 8010d9a:	bf00      	nop
 8010d9c:	e002      	b.n	8010da4 <tcp_close_shutdown_fin+0xb8>
      break;
 8010d9e:	bf00      	nop
 8010da0:	e000      	b.n	8010da4 <tcp_close_shutdown_fin+0xb8>
      break;
 8010da2:	bf00      	nop
  }

  if (err == ERR_OK) {
 8010da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d103      	bne.n	8010db4 <tcp_close_shutdown_fin+0xc8>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010dac:	6878      	ldr	r0, [r7, #4]
 8010dae:	f004 f8c5 	bl	8014f3c <tcp_output>
 8010db2:	e00d      	b.n	8010dd0 <tcp_close_shutdown_fin+0xe4>
  } else if (err == ERR_MEM) {
 8010db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dbc:	d108      	bne.n	8010dd0 <tcp_close_shutdown_fin+0xe4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	8b5b      	ldrh	r3, [r3, #26]
 8010dc2:	f043 0308 	orr.w	r3, r3, #8
 8010dc6:	b29a      	uxth	r2, r3
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010dcc:	2300      	movs	r3, #0
 8010dce:	e001      	b.n	8010dd4 <tcp_close_shutdown_fin+0xe8>
  }
  return err;
 8010dd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	3710      	adds	r7, #16
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	bd80      	pop	{r7, pc}
 8010ddc:	0802112c 	.word	0x0802112c
 8010de0:	080211dc 	.word	0x080211dc
 8010de4:	08021170 	.word	0x08021170
 8010de8:	20007204 	.word	0x20007204

08010dec <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b082      	sub	sp, #8
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d109      	bne.n	8010e0e <tcp_close+0x22>
 8010dfa:	4b0f      	ldr	r3, [pc, #60]	; (8010e38 <tcp_close+0x4c>)
 8010dfc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8010e00:	490e      	ldr	r1, [pc, #56]	; (8010e3c <tcp_close+0x50>)
 8010e02:	480f      	ldr	r0, [pc, #60]	; (8010e40 <tcp_close+0x54>)
 8010e04:	f00b fc94 	bl	801c730 <iprintf>
 8010e08:	f06f 030f 	mvn.w	r3, #15
 8010e0c:	e00f      	b.n	8010e2e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	7d1b      	ldrb	r3, [r3, #20]
 8010e12:	2b01      	cmp	r3, #1
 8010e14:	d006      	beq.n	8010e24 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	8b5b      	ldrh	r3, [r3, #26]
 8010e1a:	f043 0310 	orr.w	r3, r3, #16
 8010e1e:	b29a      	uxth	r2, r3
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010e24:	2101      	movs	r1, #1
 8010e26:	6878      	ldr	r0, [r7, #4]
 8010e28:	f7ff fe76 	bl	8010b18 <tcp_close_shutdown>
 8010e2c:	4603      	mov	r3, r0
}
 8010e2e:	4618      	mov	r0, r3
 8010e30:	3708      	adds	r7, #8
 8010e32:	46bd      	mov	sp, r7
 8010e34:	bd80      	pop	{r7, pc}
 8010e36:	bf00      	nop
 8010e38:	0802112c 	.word	0x0802112c
 8010e3c:	0802123c 	.word	0x0802123c
 8010e40:	08021170 	.word	0x08021170

08010e44 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b08e      	sub	sp, #56	; 0x38
 8010e48:	af04      	add	r7, sp, #16
 8010e4a:	6078      	str	r0, [r7, #4]
 8010e4c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d107      	bne.n	8010e64 <tcp_abandon+0x20>
 8010e54:	4b52      	ldr	r3, [pc, #328]	; (8010fa0 <tcp_abandon+0x15c>)
 8010e56:	f240 223d 	movw	r2, #573	; 0x23d
 8010e5a:	4952      	ldr	r1, [pc, #328]	; (8010fa4 <tcp_abandon+0x160>)
 8010e5c:	4852      	ldr	r0, [pc, #328]	; (8010fa8 <tcp_abandon+0x164>)
 8010e5e:	f00b fc67 	bl	801c730 <iprintf>
 8010e62:	e099      	b.n	8010f98 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	7d1b      	ldrb	r3, [r3, #20]
 8010e68:	2b01      	cmp	r3, #1
 8010e6a:	d106      	bne.n	8010e7a <tcp_abandon+0x36>
 8010e6c:	4b4c      	ldr	r3, [pc, #304]	; (8010fa0 <tcp_abandon+0x15c>)
 8010e6e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8010e72:	494e      	ldr	r1, [pc, #312]	; (8010fac <tcp_abandon+0x168>)
 8010e74:	484c      	ldr	r0, [pc, #304]	; (8010fa8 <tcp_abandon+0x164>)
 8010e76:	f00b fc5b 	bl	801c730 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	7d1b      	ldrb	r3, [r3, #20]
 8010e7e:	2b0a      	cmp	r3, #10
 8010e80:	d107      	bne.n	8010e92 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8010e82:	6879      	ldr	r1, [r7, #4]
 8010e84:	484a      	ldr	r0, [pc, #296]	; (8010fb0 <tcp_abandon+0x16c>)
 8010e86:	f000 ffed 	bl	8011e64 <tcp_pcb_remove>
    tcp_free(pcb);
 8010e8a:	6878      	ldr	r0, [r7, #4]
 8010e8c:	f7ff fd92 	bl	80109b4 <tcp_free>
 8010e90:	e082      	b.n	8010f98 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8010e92:	2300      	movs	r3, #0
 8010e94:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8010e96:	2300      	movs	r3, #0
 8010e98:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e9e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ea4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010eac:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	691b      	ldr	r3, [r3, #16]
 8010eb2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	7d1b      	ldrb	r3, [r3, #20]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d126      	bne.n	8010f0a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	8adb      	ldrh	r3, [r3, #22]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d02e      	beq.n	8010f22 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010ec4:	4b3b      	ldr	r3, [pc, #236]	; (8010fb4 <tcp_abandon+0x170>)
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	687a      	ldr	r2, [r7, #4]
 8010eca:	429a      	cmp	r2, r3
 8010ecc:	d105      	bne.n	8010eda <tcp_abandon+0x96>
 8010ece:	4b39      	ldr	r3, [pc, #228]	; (8010fb4 <tcp_abandon+0x170>)
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	68db      	ldr	r3, [r3, #12]
 8010ed4:	4a37      	ldr	r2, [pc, #220]	; (8010fb4 <tcp_abandon+0x170>)
 8010ed6:	6013      	str	r3, [r2, #0]
 8010ed8:	e013      	b.n	8010f02 <tcp_abandon+0xbe>
 8010eda:	4b36      	ldr	r3, [pc, #216]	; (8010fb4 <tcp_abandon+0x170>)
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	61fb      	str	r3, [r7, #28]
 8010ee0:	e00c      	b.n	8010efc <tcp_abandon+0xb8>
 8010ee2:	69fb      	ldr	r3, [r7, #28]
 8010ee4:	68db      	ldr	r3, [r3, #12]
 8010ee6:	687a      	ldr	r2, [r7, #4]
 8010ee8:	429a      	cmp	r2, r3
 8010eea:	d104      	bne.n	8010ef6 <tcp_abandon+0xb2>
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	68da      	ldr	r2, [r3, #12]
 8010ef0:	69fb      	ldr	r3, [r7, #28]
 8010ef2:	60da      	str	r2, [r3, #12]
 8010ef4:	e005      	b.n	8010f02 <tcp_abandon+0xbe>
 8010ef6:	69fb      	ldr	r3, [r7, #28]
 8010ef8:	68db      	ldr	r3, [r3, #12]
 8010efa:	61fb      	str	r3, [r7, #28]
 8010efc:	69fb      	ldr	r3, [r7, #28]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d1ef      	bne.n	8010ee2 <tcp_abandon+0x9e>
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	2200      	movs	r2, #0
 8010f06:	60da      	str	r2, [r3, #12]
 8010f08:	e00b      	b.n	8010f22 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8010f0a:	683b      	ldr	r3, [r7, #0]
 8010f0c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	8adb      	ldrh	r3, [r3, #22]
 8010f12:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010f14:	6879      	ldr	r1, [r7, #4]
 8010f16:	4828      	ldr	r0, [pc, #160]	; (8010fb8 <tcp_abandon+0x174>)
 8010f18:	f000 ffa4 	bl	8011e64 <tcp_pcb_remove>
 8010f1c:	4b27      	ldr	r3, [pc, #156]	; (8010fbc <tcp_abandon+0x178>)
 8010f1e:	2201      	movs	r2, #1
 8010f20:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d004      	beq.n	8010f34 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f2e:	4618      	mov	r0, r3
 8010f30:	f000 fd1c 	bl	801196c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d004      	beq.n	8010f46 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f40:	4618      	mov	r0, r3
 8010f42:	f000 fd13 	bl	801196c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d004      	beq.n	8010f58 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f52:	4618      	mov	r0, r3
 8010f54:	f000 fd0a 	bl	801196c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8010f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d00e      	beq.n	8010f7c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010f5e:	6879      	ldr	r1, [r7, #4]
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	3304      	adds	r3, #4
 8010f64:	687a      	ldr	r2, [r7, #4]
 8010f66:	8b12      	ldrh	r2, [r2, #24]
 8010f68:	9202      	str	r2, [sp, #8]
 8010f6a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010f6c:	9201      	str	r2, [sp, #4]
 8010f6e:	9300      	str	r3, [sp, #0]
 8010f70:	460b      	mov	r3, r1
 8010f72:	697a      	ldr	r2, [r7, #20]
 8010f74:	69b9      	ldr	r1, [r7, #24]
 8010f76:	6878      	ldr	r0, [r7, #4]
 8010f78:	f004 fdbc 	bl	8015af4 <tcp_rst>
    }
    last_state = pcb->state;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	7d1b      	ldrb	r3, [r3, #20]
 8010f80:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8010f82:	6878      	ldr	r0, [r7, #4]
 8010f84:	f7ff fd16 	bl	80109b4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010f88:	693b      	ldr	r3, [r7, #16]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d004      	beq.n	8010f98 <tcp_abandon+0x154>
 8010f8e:	693b      	ldr	r3, [r7, #16]
 8010f90:	f06f 010c 	mvn.w	r1, #12
 8010f94:	68f8      	ldr	r0, [r7, #12]
 8010f96:	4798      	blx	r3
  }
}
 8010f98:	3728      	adds	r7, #40	; 0x28
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	bd80      	pop	{r7, pc}
 8010f9e:	bf00      	nop
 8010fa0:	0802112c 	.word	0x0802112c
 8010fa4:	08021270 	.word	0x08021270
 8010fa8:	08021170 	.word	0x08021170
 8010fac:	0802128c 	.word	0x0802128c
 8010fb0:	200073ac 	.word	0x200073ac
 8010fb4:	200073a0 	.word	0x200073a0
 8010fb8:	200073a8 	.word	0x200073a8
 8010fbc:	200073b0 	.word	0x200073b0

08010fc0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b082      	sub	sp, #8
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010fc8:	2101      	movs	r1, #1
 8010fca:	6878      	ldr	r0, [r7, #4]
 8010fcc:	f7ff ff3a 	bl	8010e44 <tcp_abandon>
}
 8010fd0:	bf00      	nop
 8010fd2:	3708      	adds	r7, #8
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd80      	pop	{r7, pc}

08010fd8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b084      	sub	sp, #16
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d106      	bne.n	8010ff4 <tcp_update_rcv_ann_wnd+0x1c>
 8010fe6:	4b25      	ldr	r3, [pc, #148]	; (801107c <tcp_update_rcv_ann_wnd+0xa4>)
 8010fe8:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010fec:	4924      	ldr	r1, [pc, #144]	; (8011080 <tcp_update_rcv_ann_wnd+0xa8>)
 8010fee:	4825      	ldr	r0, [pc, #148]	; (8011084 <tcp_update_rcv_ann_wnd+0xac>)
 8010ff0:	f00b fb9e 	bl	801c730 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ff8:	687a      	ldr	r2, [r7, #4]
 8010ffa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010ffc:	4413      	add	r3, r2
 8010ffe:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011004:	687a      	ldr	r2, [r7, #4]
 8011006:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8011008:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 801100c:	bf28      	it	cs
 801100e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8011012:	b292      	uxth	r2, r2
 8011014:	4413      	add	r3, r2
 8011016:	68fa      	ldr	r2, [r7, #12]
 8011018:	1ad3      	subs	r3, r2, r3
 801101a:	2b00      	cmp	r3, #0
 801101c:	db08      	blt.n	8011030 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801102a:	68fa      	ldr	r2, [r7, #12]
 801102c:	1ad3      	subs	r3, r2, r3
 801102e:	e020      	b.n	8011072 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011038:	1ad3      	subs	r3, r2, r3
 801103a:	2b00      	cmp	r3, #0
 801103c:	dd03      	ble.n	8011046 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	2200      	movs	r2, #0
 8011042:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011044:	e014      	b.n	8011070 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801104e:	1ad3      	subs	r3, r2, r3
 8011050:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8011052:	68bb      	ldr	r3, [r7, #8]
 8011054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011058:	d306      	bcc.n	8011068 <tcp_update_rcv_ann_wnd+0x90>
 801105a:	4b08      	ldr	r3, [pc, #32]	; (801107c <tcp_update_rcv_ann_wnd+0xa4>)
 801105c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8011060:	4909      	ldr	r1, [pc, #36]	; (8011088 <tcp_update_rcv_ann_wnd+0xb0>)
 8011062:	4808      	ldr	r0, [pc, #32]	; (8011084 <tcp_update_rcv_ann_wnd+0xac>)
 8011064:	f00b fb64 	bl	801c730 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8011068:	68bb      	ldr	r3, [r7, #8]
 801106a:	b29a      	uxth	r2, r3
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8011070:	2300      	movs	r3, #0
  }
}
 8011072:	4618      	mov	r0, r3
 8011074:	3710      	adds	r7, #16
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}
 801107a:	bf00      	nop
 801107c:	0802112c 	.word	0x0802112c
 8011080:	08021388 	.word	0x08021388
 8011084:	08021170 	.word	0x08021170
 8011088:	080213ac 	.word	0x080213ac

0801108c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b084      	sub	sp, #16
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
 8011094:	460b      	mov	r3, r1
 8011096:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d107      	bne.n	80110ae <tcp_recved+0x22>
 801109e:	4b1f      	ldr	r3, [pc, #124]	; (801111c <tcp_recved+0x90>)
 80110a0:	f240 32cf 	movw	r2, #975	; 0x3cf
 80110a4:	491e      	ldr	r1, [pc, #120]	; (8011120 <tcp_recved+0x94>)
 80110a6:	481f      	ldr	r0, [pc, #124]	; (8011124 <tcp_recved+0x98>)
 80110a8:	f00b fb42 	bl	801c730 <iprintf>
 80110ac:	e032      	b.n	8011114 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	7d1b      	ldrb	r3, [r3, #20]
 80110b2:	2b01      	cmp	r3, #1
 80110b4:	d106      	bne.n	80110c4 <tcp_recved+0x38>
 80110b6:	4b19      	ldr	r3, [pc, #100]	; (801111c <tcp_recved+0x90>)
 80110b8:	f240 32d2 	movw	r2, #978	; 0x3d2
 80110bc:	491a      	ldr	r1, [pc, #104]	; (8011128 <tcp_recved+0x9c>)
 80110be:	4819      	ldr	r0, [pc, #100]	; (8011124 <tcp_recved+0x98>)
 80110c0:	f00b fb36 	bl	801c730 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80110c8:	887b      	ldrh	r3, [r7, #2]
 80110ca:	4413      	add	r3, r2
 80110cc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80110ce:	89fb      	ldrh	r3, [r7, #14]
 80110d0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80110d4:	d804      	bhi.n	80110e0 <tcp_recved+0x54>
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80110da:	89fa      	ldrh	r2, [r7, #14]
 80110dc:	429a      	cmp	r2, r3
 80110de:	d204      	bcs.n	80110ea <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80110e6:	851a      	strh	r2, [r3, #40]	; 0x28
 80110e8:	e002      	b.n	80110f0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	89fa      	ldrh	r2, [r7, #14]
 80110ee:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80110f0:	6878      	ldr	r0, [r7, #4]
 80110f2:	f7ff ff71 	bl	8010fd8 <tcp_update_rcv_ann_wnd>
 80110f6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80110f8:	68bb      	ldr	r3, [r7, #8]
 80110fa:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80110fe:	d309      	bcc.n	8011114 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	8b5b      	ldrh	r3, [r3, #26]
 8011104:	f043 0302 	orr.w	r3, r3, #2
 8011108:	b29a      	uxth	r2, r3
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801110e:	6878      	ldr	r0, [r7, #4]
 8011110:	f003 ff14 	bl	8014f3c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011114:	3710      	adds	r7, #16
 8011116:	46bd      	mov	sp, r7
 8011118:	bd80      	pop	{r7, pc}
 801111a:	bf00      	nop
 801111c:	0802112c 	.word	0x0802112c
 8011120:	080213c8 	.word	0x080213c8
 8011124:	08021170 	.word	0x08021170
 8011128:	080213e0 	.word	0x080213e0

0801112c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801112c:	b5b0      	push	{r4, r5, r7, lr}
 801112e:	b090      	sub	sp, #64	; 0x40
 8011130:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8011132:	2300      	movs	r3, #0
 8011134:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8011138:	4b94      	ldr	r3, [pc, #592]	; (801138c <tcp_slowtmr+0x260>)
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	3301      	adds	r3, #1
 801113e:	4a93      	ldr	r2, [pc, #588]	; (801138c <tcp_slowtmr+0x260>)
 8011140:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8011142:	4b93      	ldr	r3, [pc, #588]	; (8011390 <tcp_slowtmr+0x264>)
 8011144:	781b      	ldrb	r3, [r3, #0]
 8011146:	3301      	adds	r3, #1
 8011148:	b2da      	uxtb	r2, r3
 801114a:	4b91      	ldr	r3, [pc, #580]	; (8011390 <tcp_slowtmr+0x264>)
 801114c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801114e:	2300      	movs	r3, #0
 8011150:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8011152:	4b90      	ldr	r3, [pc, #576]	; (8011394 <tcp_slowtmr+0x268>)
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8011158:	e29d      	b.n	8011696 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801115a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801115c:	7d1b      	ldrb	r3, [r3, #20]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d106      	bne.n	8011170 <tcp_slowtmr+0x44>
 8011162:	4b8d      	ldr	r3, [pc, #564]	; (8011398 <tcp_slowtmr+0x26c>)
 8011164:	f240 42be 	movw	r2, #1214	; 0x4be
 8011168:	498c      	ldr	r1, [pc, #560]	; (801139c <tcp_slowtmr+0x270>)
 801116a:	488d      	ldr	r0, [pc, #564]	; (80113a0 <tcp_slowtmr+0x274>)
 801116c:	f00b fae0 	bl	801c730 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011172:	7d1b      	ldrb	r3, [r3, #20]
 8011174:	2b01      	cmp	r3, #1
 8011176:	d106      	bne.n	8011186 <tcp_slowtmr+0x5a>
 8011178:	4b87      	ldr	r3, [pc, #540]	; (8011398 <tcp_slowtmr+0x26c>)
 801117a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801117e:	4989      	ldr	r1, [pc, #548]	; (80113a4 <tcp_slowtmr+0x278>)
 8011180:	4887      	ldr	r0, [pc, #540]	; (80113a0 <tcp_slowtmr+0x274>)
 8011182:	f00b fad5 	bl	801c730 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011188:	7d1b      	ldrb	r3, [r3, #20]
 801118a:	2b0a      	cmp	r3, #10
 801118c:	d106      	bne.n	801119c <tcp_slowtmr+0x70>
 801118e:	4b82      	ldr	r3, [pc, #520]	; (8011398 <tcp_slowtmr+0x26c>)
 8011190:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8011194:	4984      	ldr	r1, [pc, #528]	; (80113a8 <tcp_slowtmr+0x27c>)
 8011196:	4882      	ldr	r0, [pc, #520]	; (80113a0 <tcp_slowtmr+0x274>)
 8011198:	f00b faca 	bl	801c730 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801119c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801119e:	7f9a      	ldrb	r2, [r3, #30]
 80111a0:	4b7b      	ldr	r3, [pc, #492]	; (8011390 <tcp_slowtmr+0x264>)
 80111a2:	781b      	ldrb	r3, [r3, #0]
 80111a4:	429a      	cmp	r2, r3
 80111a6:	d105      	bne.n	80111b4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80111a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111aa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80111ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ae:	68db      	ldr	r3, [r3, #12]
 80111b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80111b2:	e270      	b.n	8011696 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80111b4:	4b76      	ldr	r3, [pc, #472]	; (8011390 <tcp_slowtmr+0x264>)
 80111b6:	781a      	ldrb	r2, [r3, #0]
 80111b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ba:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80111bc:	2300      	movs	r3, #0
 80111be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80111c2:	2300      	movs	r3, #0
 80111c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80111c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ca:	7d1b      	ldrb	r3, [r3, #20]
 80111cc:	2b02      	cmp	r3, #2
 80111ce:	d10a      	bne.n	80111e6 <tcp_slowtmr+0xba>
 80111d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80111d6:	2b05      	cmp	r3, #5
 80111d8:	d905      	bls.n	80111e6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80111da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111de:	3301      	adds	r3, #1
 80111e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80111e4:	e11e      	b.n	8011424 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80111e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80111ec:	2b0b      	cmp	r3, #11
 80111ee:	d905      	bls.n	80111fc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80111f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80111f4:	3301      	adds	r3, #1
 80111f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80111fa:	e113      	b.n	8011424 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80111fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111fe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011202:	2b00      	cmp	r3, #0
 8011204:	d075      	beq.n	80112f2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801120a:	2b00      	cmp	r3, #0
 801120c:	d006      	beq.n	801121c <tcp_slowtmr+0xf0>
 801120e:	4b62      	ldr	r3, [pc, #392]	; (8011398 <tcp_slowtmr+0x26c>)
 8011210:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8011214:	4965      	ldr	r1, [pc, #404]	; (80113ac <tcp_slowtmr+0x280>)
 8011216:	4862      	ldr	r0, [pc, #392]	; (80113a0 <tcp_slowtmr+0x274>)
 8011218:	f00b fa8a 	bl	801c730 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801121c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801121e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011220:	2b00      	cmp	r3, #0
 8011222:	d106      	bne.n	8011232 <tcp_slowtmr+0x106>
 8011224:	4b5c      	ldr	r3, [pc, #368]	; (8011398 <tcp_slowtmr+0x26c>)
 8011226:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801122a:	4961      	ldr	r1, [pc, #388]	; (80113b0 <tcp_slowtmr+0x284>)
 801122c:	485c      	ldr	r0, [pc, #368]	; (80113a0 <tcp_slowtmr+0x274>)
 801122e:	f00b fa7f 	bl	801c730 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8011232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011234:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011238:	2b0b      	cmp	r3, #11
 801123a:	d905      	bls.n	8011248 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 801123c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011240:	3301      	adds	r3, #1
 8011242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011246:	e0ed      	b.n	8011424 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801124a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801124e:	3b01      	subs	r3, #1
 8011250:	4a58      	ldr	r2, [pc, #352]	; (80113b4 <tcp_slowtmr+0x288>)
 8011252:	5cd3      	ldrb	r3, [r2, r3]
 8011254:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8011256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011258:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801125c:	7c7a      	ldrb	r2, [r7, #17]
 801125e:	429a      	cmp	r2, r3
 8011260:	d907      	bls.n	8011272 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8011262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011264:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011268:	3301      	adds	r3, #1
 801126a:	b2da      	uxtb	r2, r3
 801126c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801126e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8011272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011274:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011278:	7c7a      	ldrb	r2, [r7, #17]
 801127a:	429a      	cmp	r2, r3
 801127c:	f200 80d2 	bhi.w	8011424 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011280:	2301      	movs	r3, #1
 8011282:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8011284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011286:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801128a:	2b00      	cmp	r3, #0
 801128c:	d108      	bne.n	80112a0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801128e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011290:	f004 fd2c 	bl	8015cec <tcp_zero_window_probe>
 8011294:	4603      	mov	r3, r0
 8011296:	2b00      	cmp	r3, #0
 8011298:	d014      	beq.n	80112c4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801129a:	2300      	movs	r3, #0
 801129c:	623b      	str	r3, [r7, #32]
 801129e:	e011      	b.n	80112c4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80112a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80112a6:	4619      	mov	r1, r3
 80112a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112aa:	f003 fba5 	bl	80149f8 <tcp_split_unsent_seg>
 80112ae:	4603      	mov	r3, r0
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d107      	bne.n	80112c4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80112b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80112b6:	f003 fe41 	bl	8014f3c <tcp_output>
 80112ba:	4603      	mov	r3, r0
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d101      	bne.n	80112c4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80112c0:	2300      	movs	r3, #0
 80112c2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80112c4:	6a3b      	ldr	r3, [r7, #32]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	f000 80ac 	beq.w	8011424 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80112cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ce:	2200      	movs	r2, #0
 80112d0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80112d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112d6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80112da:	2b06      	cmp	r3, #6
 80112dc:	f200 80a2 	bhi.w	8011424 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80112e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112e2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80112e6:	3301      	adds	r3, #1
 80112e8:	b2da      	uxtb	r2, r3
 80112ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ec:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80112f0:	e098      	b.n	8011424 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80112f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	db0f      	blt.n	801131c <tcp_slowtmr+0x1f0>
 80112fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112fe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011302:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011306:	4293      	cmp	r3, r2
 8011308:	d008      	beq.n	801131c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801130a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801130c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011310:	b29b      	uxth	r3, r3
 8011312:	3301      	adds	r3, #1
 8011314:	b29b      	uxth	r3, r3
 8011316:	b21a      	sxth	r2, r3
 8011318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801131a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801131c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801131e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011324:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011328:	429a      	cmp	r2, r3
 801132a:	db7b      	blt.n	8011424 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801132c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801132e:	f004 f90b 	bl	8015548 <tcp_rexmit_rto_prepare>
 8011332:	4603      	mov	r3, r0
 8011334:	2b00      	cmp	r3, #0
 8011336:	d007      	beq.n	8011348 <tcp_slowtmr+0x21c>
 8011338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801133a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801133c:	2b00      	cmp	r3, #0
 801133e:	d171      	bne.n	8011424 <tcp_slowtmr+0x2f8>
 8011340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011344:	2b00      	cmp	r3, #0
 8011346:	d06d      	beq.n	8011424 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8011348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801134a:	7d1b      	ldrb	r3, [r3, #20]
 801134c:	2b02      	cmp	r3, #2
 801134e:	d03a      	beq.n	80113c6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011352:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011356:	2b0c      	cmp	r3, #12
 8011358:	bf28      	it	cs
 801135a:	230c      	movcs	r3, #12
 801135c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801135e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011360:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011364:	10db      	asrs	r3, r3, #3
 8011366:	b21b      	sxth	r3, r3
 8011368:	461a      	mov	r2, r3
 801136a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801136c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011370:	4413      	add	r3, r2
 8011372:	7efa      	ldrb	r2, [r7, #27]
 8011374:	4910      	ldr	r1, [pc, #64]	; (80113b8 <tcp_slowtmr+0x28c>)
 8011376:	5c8a      	ldrb	r2, [r1, r2]
 8011378:	4093      	lsls	r3, r2
 801137a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801137c:	697b      	ldr	r3, [r7, #20]
 801137e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8011382:	4293      	cmp	r3, r2
 8011384:	dc1a      	bgt.n	80113bc <tcp_slowtmr+0x290>
 8011386:	697b      	ldr	r3, [r7, #20]
 8011388:	b21a      	sxth	r2, r3
 801138a:	e019      	b.n	80113c0 <tcp_slowtmr+0x294>
 801138c:	2000739c 	.word	0x2000739c
 8011390:	200073b2 	.word	0x200073b2
 8011394:	200073a8 	.word	0x200073a8
 8011398:	0802112c 	.word	0x0802112c
 801139c:	08021470 	.word	0x08021470
 80113a0:	08021170 	.word	0x08021170
 80113a4:	0802149c 	.word	0x0802149c
 80113a8:	080214c8 	.word	0x080214c8
 80113ac:	080214f8 	.word	0x080214f8
 80113b0:	0802152c 	.word	0x0802152c
 80113b4:	080244f0 	.word	0x080244f0
 80113b8:	080244e0 	.word	0x080244e0
 80113bc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80113c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80113c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113c8:	2200      	movs	r2, #0
 80113ca:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80113cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80113d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80113d8:	4293      	cmp	r3, r2
 80113da:	bf28      	it	cs
 80113dc:	4613      	movcs	r3, r2
 80113de:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80113e0:	8a7b      	ldrh	r3, [r7, #18]
 80113e2:	085b      	lsrs	r3, r3, #1
 80113e4:	b29a      	uxth	r2, r3
 80113e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113e8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80113ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80113f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80113f6:	005b      	lsls	r3, r3, #1
 80113f8:	b29b      	uxth	r3, r3
 80113fa:	429a      	cmp	r2, r3
 80113fc:	d206      	bcs.n	801140c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80113fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011400:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011402:	005b      	lsls	r3, r3, #1
 8011404:	b29a      	uxth	r2, r3
 8011406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011408:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801140c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801140e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011412:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8011416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011418:	2200      	movs	r2, #0
 801141a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801141e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011420:	f004 f902 	bl	8015628 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011426:	7d1b      	ldrb	r3, [r3, #20]
 8011428:	2b06      	cmp	r3, #6
 801142a:	d111      	bne.n	8011450 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801142c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801142e:	8b5b      	ldrh	r3, [r3, #26]
 8011430:	f003 0310 	and.w	r3, r3, #16
 8011434:	2b00      	cmp	r3, #0
 8011436:	d00b      	beq.n	8011450 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011438:	4b9c      	ldr	r3, [pc, #624]	; (80116ac <tcp_slowtmr+0x580>)
 801143a:	681a      	ldr	r2, [r3, #0]
 801143c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801143e:	6a1b      	ldr	r3, [r3, #32]
 8011440:	1ad3      	subs	r3, r2, r3
 8011442:	2b28      	cmp	r3, #40	; 0x28
 8011444:	d904      	bls.n	8011450 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8011446:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801144a:	3301      	adds	r3, #1
 801144c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011452:	7a5b      	ldrb	r3, [r3, #9]
 8011454:	f003 0308 	and.w	r3, r3, #8
 8011458:	2b00      	cmp	r3, #0
 801145a:	d04a      	beq.n	80114f2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 801145c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801145e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011460:	2b04      	cmp	r3, #4
 8011462:	d003      	beq.n	801146c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011466:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011468:	2b07      	cmp	r3, #7
 801146a:	d142      	bne.n	80114f2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801146c:	4b8f      	ldr	r3, [pc, #572]	; (80116ac <tcp_slowtmr+0x580>)
 801146e:	681a      	ldr	r2, [r3, #0]
 8011470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011472:	6a1b      	ldr	r3, [r3, #32]
 8011474:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011478:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801147c:	4b8c      	ldr	r3, [pc, #560]	; (80116b0 <tcp_slowtmr+0x584>)
 801147e:	440b      	add	r3, r1
 8011480:	498c      	ldr	r1, [pc, #560]	; (80116b4 <tcp_slowtmr+0x588>)
 8011482:	fba1 1303 	umull	r1, r3, r1, r3
 8011486:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011488:	429a      	cmp	r2, r3
 801148a:	d90a      	bls.n	80114a2 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801148c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011490:	3301      	adds	r3, #1
 8011492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8011496:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801149a:	3301      	adds	r3, #1
 801149c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80114a0:	e027      	b.n	80114f2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80114a2:	4b82      	ldr	r3, [pc, #520]	; (80116ac <tcp_slowtmr+0x580>)
 80114a4:	681a      	ldr	r2, [r3, #0]
 80114a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a8:	6a1b      	ldr	r3, [r3, #32]
 80114aa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80114ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ae:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80114b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114b4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80114b8:	4618      	mov	r0, r3
 80114ba:	4b7f      	ldr	r3, [pc, #508]	; (80116b8 <tcp_slowtmr+0x58c>)
 80114bc:	fb00 f303 	mul.w	r3, r0, r3
 80114c0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80114c2:	497c      	ldr	r1, [pc, #496]	; (80116b4 <tcp_slowtmr+0x588>)
 80114c4:	fba1 1303 	umull	r1, r3, r1, r3
 80114c8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80114ca:	429a      	cmp	r2, r3
 80114cc:	d911      	bls.n	80114f2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80114ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80114d0:	f004 fbcc 	bl	8015c6c <tcp_keepalive>
 80114d4:	4603      	mov	r3, r0
 80114d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80114da:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d107      	bne.n	80114f2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80114e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114e4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80114e8:	3301      	adds	r3, #1
 80114ea:	b2da      	uxtb	r2, r3
 80114ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ee:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80114f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d011      	beq.n	801151e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80114fa:	4b6c      	ldr	r3, [pc, #432]	; (80116ac <tcp_slowtmr+0x580>)
 80114fc:	681a      	ldr	r2, [r3, #0]
 80114fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011500:	6a1b      	ldr	r3, [r3, #32]
 8011502:	1ad2      	subs	r2, r2, r3
 8011504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011506:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801150a:	4619      	mov	r1, r3
 801150c:	460b      	mov	r3, r1
 801150e:	005b      	lsls	r3, r3, #1
 8011510:	440b      	add	r3, r1
 8011512:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011514:	429a      	cmp	r2, r3
 8011516:	d302      	bcc.n	801151e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8011518:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801151a:	f000 fe07 	bl	801212c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801151e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011520:	7d1b      	ldrb	r3, [r3, #20]
 8011522:	2b03      	cmp	r3, #3
 8011524:	d10b      	bne.n	801153e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011526:	4b61      	ldr	r3, [pc, #388]	; (80116ac <tcp_slowtmr+0x580>)
 8011528:	681a      	ldr	r2, [r3, #0]
 801152a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801152c:	6a1b      	ldr	r3, [r3, #32]
 801152e:	1ad3      	subs	r3, r2, r3
 8011530:	2b28      	cmp	r3, #40	; 0x28
 8011532:	d904      	bls.n	801153e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011538:	3301      	adds	r3, #1
 801153a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801153e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011540:	7d1b      	ldrb	r3, [r3, #20]
 8011542:	2b09      	cmp	r3, #9
 8011544:	d10b      	bne.n	801155e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011546:	4b59      	ldr	r3, [pc, #356]	; (80116ac <tcp_slowtmr+0x580>)
 8011548:	681a      	ldr	r2, [r3, #0]
 801154a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801154c:	6a1b      	ldr	r3, [r3, #32]
 801154e:	1ad3      	subs	r3, r2, r3
 8011550:	2bf0      	cmp	r3, #240	; 0xf0
 8011552:	d904      	bls.n	801155e <tcp_slowtmr+0x432>
        ++pcb_remove;
 8011554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011558:	3301      	adds	r3, #1
 801155a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801155e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011562:	2b00      	cmp	r3, #0
 8011564:	d060      	beq.n	8011628 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801156c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801156e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011570:	f000 fc28 	bl	8011dc4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011576:	2b00      	cmp	r3, #0
 8011578:	d010      	beq.n	801159c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801157a:	4b50      	ldr	r3, [pc, #320]	; (80116bc <tcp_slowtmr+0x590>)
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011580:	429a      	cmp	r2, r3
 8011582:	d106      	bne.n	8011592 <tcp_slowtmr+0x466>
 8011584:	4b4e      	ldr	r3, [pc, #312]	; (80116c0 <tcp_slowtmr+0x594>)
 8011586:	f240 526d 	movw	r2, #1389	; 0x56d
 801158a:	494e      	ldr	r1, [pc, #312]	; (80116c4 <tcp_slowtmr+0x598>)
 801158c:	484e      	ldr	r0, [pc, #312]	; (80116c8 <tcp_slowtmr+0x59c>)
 801158e:	f00b f8cf 	bl	801c730 <iprintf>
        prev->next = pcb->next;
 8011592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011594:	68da      	ldr	r2, [r3, #12]
 8011596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011598:	60da      	str	r2, [r3, #12]
 801159a:	e00f      	b.n	80115bc <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801159c:	4b47      	ldr	r3, [pc, #284]	; (80116bc <tcp_slowtmr+0x590>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80115a2:	429a      	cmp	r2, r3
 80115a4:	d006      	beq.n	80115b4 <tcp_slowtmr+0x488>
 80115a6:	4b46      	ldr	r3, [pc, #280]	; (80116c0 <tcp_slowtmr+0x594>)
 80115a8:	f240 5271 	movw	r2, #1393	; 0x571
 80115ac:	4947      	ldr	r1, [pc, #284]	; (80116cc <tcp_slowtmr+0x5a0>)
 80115ae:	4846      	ldr	r0, [pc, #280]	; (80116c8 <tcp_slowtmr+0x59c>)
 80115b0:	f00b f8be 	bl	801c730 <iprintf>
        tcp_active_pcbs = pcb->next;
 80115b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115b6:	68db      	ldr	r3, [r3, #12]
 80115b8:	4a40      	ldr	r2, [pc, #256]	; (80116bc <tcp_slowtmr+0x590>)
 80115ba:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80115bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d013      	beq.n	80115ec <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80115c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115c6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80115c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ca:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80115cc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80115ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115d0:	3304      	adds	r3, #4
 80115d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80115d4:	8ad2      	ldrh	r2, [r2, #22]
 80115d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80115d8:	8b09      	ldrh	r1, [r1, #24]
 80115da:	9102      	str	r1, [sp, #8]
 80115dc:	9201      	str	r2, [sp, #4]
 80115de:	9300      	str	r3, [sp, #0]
 80115e0:	462b      	mov	r3, r5
 80115e2:	4622      	mov	r2, r4
 80115e4:	4601      	mov	r1, r0
 80115e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80115e8:	f004 fa84 	bl	8015af4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80115ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ee:	691b      	ldr	r3, [r3, #16]
 80115f0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80115f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115f4:	7d1b      	ldrb	r3, [r3, #20]
 80115f6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80115f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115fa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80115fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115fe:	68db      	ldr	r3, [r3, #12]
 8011600:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011602:	6838      	ldr	r0, [r7, #0]
 8011604:	f7ff f9d6 	bl	80109b4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8011608:	4b31      	ldr	r3, [pc, #196]	; (80116d0 <tcp_slowtmr+0x5a4>)
 801160a:	2200      	movs	r2, #0
 801160c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d004      	beq.n	801161e <tcp_slowtmr+0x4f2>
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	f06f 010c 	mvn.w	r1, #12
 801161a:	68b8      	ldr	r0, [r7, #8]
 801161c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801161e:	4b2c      	ldr	r3, [pc, #176]	; (80116d0 <tcp_slowtmr+0x5a4>)
 8011620:	781b      	ldrb	r3, [r3, #0]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d037      	beq.n	8011696 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8011626:	e592      	b.n	801114e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8011628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801162a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801162c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801162e:	68db      	ldr	r3, [r3, #12]
 8011630:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8011632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011634:	7f1b      	ldrb	r3, [r3, #28]
 8011636:	3301      	adds	r3, #1
 8011638:	b2da      	uxtb	r2, r3
 801163a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801163c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801163e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011640:	7f1a      	ldrb	r2, [r3, #28]
 8011642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011644:	7f5b      	ldrb	r3, [r3, #29]
 8011646:	429a      	cmp	r2, r3
 8011648:	d325      	bcc.n	8011696 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801164a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801164c:	2200      	movs	r2, #0
 801164e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011650:	4b1f      	ldr	r3, [pc, #124]	; (80116d0 <tcp_slowtmr+0x5a4>)
 8011652:	2200      	movs	r2, #0
 8011654:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801165c:	2b00      	cmp	r3, #0
 801165e:	d00b      	beq.n	8011678 <tcp_slowtmr+0x54c>
 8011660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011662:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011668:	6912      	ldr	r2, [r2, #16]
 801166a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801166c:	4610      	mov	r0, r2
 801166e:	4798      	blx	r3
 8011670:	4603      	mov	r3, r0
 8011672:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8011676:	e002      	b.n	801167e <tcp_slowtmr+0x552>
 8011678:	2300      	movs	r3, #0
 801167a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801167e:	4b14      	ldr	r3, [pc, #80]	; (80116d0 <tcp_slowtmr+0x5a4>)
 8011680:	781b      	ldrb	r3, [r3, #0]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d000      	beq.n	8011688 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8011686:	e562      	b.n	801114e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011688:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801168c:	2b00      	cmp	r3, #0
 801168e:	d102      	bne.n	8011696 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8011690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011692:	f003 fc53 	bl	8014f3c <tcp_output>
  while (pcb != NULL) {
 8011696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011698:	2b00      	cmp	r3, #0
 801169a:	f47f ad5e 	bne.w	801115a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801169e:	2300      	movs	r3, #0
 80116a0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80116a2:	4b0c      	ldr	r3, [pc, #48]	; (80116d4 <tcp_slowtmr+0x5a8>)
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80116a8:	e069      	b.n	801177e <tcp_slowtmr+0x652>
 80116aa:	bf00      	nop
 80116ac:	2000739c 	.word	0x2000739c
 80116b0:	000a4cb8 	.word	0x000a4cb8
 80116b4:	10624dd3 	.word	0x10624dd3
 80116b8:	000124f8 	.word	0x000124f8
 80116bc:	200073a8 	.word	0x200073a8
 80116c0:	0802112c 	.word	0x0802112c
 80116c4:	08021564 	.word	0x08021564
 80116c8:	08021170 	.word	0x08021170
 80116cc:	08021590 	.word	0x08021590
 80116d0:	200073b0 	.word	0x200073b0
 80116d4:	200073ac 	.word	0x200073ac
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80116d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116da:	7d1b      	ldrb	r3, [r3, #20]
 80116dc:	2b0a      	cmp	r3, #10
 80116de:	d006      	beq.n	80116ee <tcp_slowtmr+0x5c2>
 80116e0:	4b2b      	ldr	r3, [pc, #172]	; (8011790 <tcp_slowtmr+0x664>)
 80116e2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80116e6:	492b      	ldr	r1, [pc, #172]	; (8011794 <tcp_slowtmr+0x668>)
 80116e8:	482b      	ldr	r0, [pc, #172]	; (8011798 <tcp_slowtmr+0x66c>)
 80116ea:	f00b f821 	bl	801c730 <iprintf>
    pcb_remove = 0;
 80116ee:	2300      	movs	r3, #0
 80116f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80116f4:	4b29      	ldr	r3, [pc, #164]	; (801179c <tcp_slowtmr+0x670>)
 80116f6:	681a      	ldr	r2, [r3, #0]
 80116f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116fa:	6a1b      	ldr	r3, [r3, #32]
 80116fc:	1ad3      	subs	r3, r2, r3
 80116fe:	2bf0      	cmp	r3, #240	; 0xf0
 8011700:	d904      	bls.n	801170c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8011702:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011706:	3301      	adds	r3, #1
 8011708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801170c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011710:	2b00      	cmp	r3, #0
 8011712:	d02f      	beq.n	8011774 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011714:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011716:	f000 fb55 	bl	8011dc4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801171a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801171c:	2b00      	cmp	r3, #0
 801171e:	d010      	beq.n	8011742 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011720:	4b1f      	ldr	r3, [pc, #124]	; (80117a0 <tcp_slowtmr+0x674>)
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011726:	429a      	cmp	r2, r3
 8011728:	d106      	bne.n	8011738 <tcp_slowtmr+0x60c>
 801172a:	4b19      	ldr	r3, [pc, #100]	; (8011790 <tcp_slowtmr+0x664>)
 801172c:	f240 52af 	movw	r2, #1455	; 0x5af
 8011730:	491c      	ldr	r1, [pc, #112]	; (80117a4 <tcp_slowtmr+0x678>)
 8011732:	4819      	ldr	r0, [pc, #100]	; (8011798 <tcp_slowtmr+0x66c>)
 8011734:	f00a fffc 	bl	801c730 <iprintf>
        prev->next = pcb->next;
 8011738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801173a:	68da      	ldr	r2, [r3, #12]
 801173c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801173e:	60da      	str	r2, [r3, #12]
 8011740:	e00f      	b.n	8011762 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011742:	4b17      	ldr	r3, [pc, #92]	; (80117a0 <tcp_slowtmr+0x674>)
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011748:	429a      	cmp	r2, r3
 801174a:	d006      	beq.n	801175a <tcp_slowtmr+0x62e>
 801174c:	4b10      	ldr	r3, [pc, #64]	; (8011790 <tcp_slowtmr+0x664>)
 801174e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011752:	4915      	ldr	r1, [pc, #84]	; (80117a8 <tcp_slowtmr+0x67c>)
 8011754:	4810      	ldr	r0, [pc, #64]	; (8011798 <tcp_slowtmr+0x66c>)
 8011756:	f00a ffeb 	bl	801c730 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801175a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801175c:	68db      	ldr	r3, [r3, #12]
 801175e:	4a10      	ldr	r2, [pc, #64]	; (80117a0 <tcp_slowtmr+0x674>)
 8011760:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011764:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8011766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011768:	68db      	ldr	r3, [r3, #12]
 801176a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801176c:	69f8      	ldr	r0, [r7, #28]
 801176e:	f7ff f921 	bl	80109b4 <tcp_free>
 8011772:	e004      	b.n	801177e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8011774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011776:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801177a:	68db      	ldr	r3, [r3, #12]
 801177c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801177e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011780:	2b00      	cmp	r3, #0
 8011782:	d1a9      	bne.n	80116d8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8011784:	bf00      	nop
 8011786:	bf00      	nop
 8011788:	3730      	adds	r7, #48	; 0x30
 801178a:	46bd      	mov	sp, r7
 801178c:	bdb0      	pop	{r4, r5, r7, pc}
 801178e:	bf00      	nop
 8011790:	0802112c 	.word	0x0802112c
 8011794:	080215bc 	.word	0x080215bc
 8011798:	08021170 	.word	0x08021170
 801179c:	2000739c 	.word	0x2000739c
 80117a0:	200073ac 	.word	0x200073ac
 80117a4:	080215ec 	.word	0x080215ec
 80117a8:	08021614 	.word	0x08021614

080117ac <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b082      	sub	sp, #8
 80117b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80117b2:	4b2d      	ldr	r3, [pc, #180]	; (8011868 <tcp_fasttmr+0xbc>)
 80117b4:	781b      	ldrb	r3, [r3, #0]
 80117b6:	3301      	adds	r3, #1
 80117b8:	b2da      	uxtb	r2, r3
 80117ba:	4b2b      	ldr	r3, [pc, #172]	; (8011868 <tcp_fasttmr+0xbc>)
 80117bc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80117be:	4b2b      	ldr	r3, [pc, #172]	; (801186c <tcp_fasttmr+0xc0>)
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80117c4:	e048      	b.n	8011858 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	7f9a      	ldrb	r2, [r3, #30]
 80117ca:	4b27      	ldr	r3, [pc, #156]	; (8011868 <tcp_fasttmr+0xbc>)
 80117cc:	781b      	ldrb	r3, [r3, #0]
 80117ce:	429a      	cmp	r2, r3
 80117d0:	d03f      	beq.n	8011852 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80117d2:	4b25      	ldr	r3, [pc, #148]	; (8011868 <tcp_fasttmr+0xbc>)
 80117d4:	781a      	ldrb	r2, [r3, #0]
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	8b5b      	ldrh	r3, [r3, #26]
 80117de:	f003 0301 	and.w	r3, r3, #1
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d010      	beq.n	8011808 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	8b5b      	ldrh	r3, [r3, #26]
 80117ea:	f043 0302 	orr.w	r3, r3, #2
 80117ee:	b29a      	uxth	r2, r3
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80117f4:	6878      	ldr	r0, [r7, #4]
 80117f6:	f003 fba1 	bl	8014f3c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	8b5b      	ldrh	r3, [r3, #26]
 80117fe:	f023 0303 	bic.w	r3, r3, #3
 8011802:	b29a      	uxth	r2, r3
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	8b5b      	ldrh	r3, [r3, #26]
 801180c:	f003 0308 	and.w	r3, r3, #8
 8011810:	2b00      	cmp	r3, #0
 8011812:	d009      	beq.n	8011828 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	8b5b      	ldrh	r3, [r3, #26]
 8011818:	f023 0308 	bic.w	r3, r3, #8
 801181c:	b29a      	uxth	r2, r3
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011822:	6878      	ldr	r0, [r7, #4]
 8011824:	f7ff fa62 	bl	8010cec <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	68db      	ldr	r3, [r3, #12]
 801182c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011832:	2b00      	cmp	r3, #0
 8011834:	d00a      	beq.n	801184c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011836:	4b0e      	ldr	r3, [pc, #56]	; (8011870 <tcp_fasttmr+0xc4>)
 8011838:	2200      	movs	r2, #0
 801183a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801183c:	6878      	ldr	r0, [r7, #4]
 801183e:	f000 f819 	bl	8011874 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011842:	4b0b      	ldr	r3, [pc, #44]	; (8011870 <tcp_fasttmr+0xc4>)
 8011844:	781b      	ldrb	r3, [r3, #0]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d000      	beq.n	801184c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801184a:	e7b8      	b.n	80117be <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801184c:	683b      	ldr	r3, [r7, #0]
 801184e:	607b      	str	r3, [r7, #4]
 8011850:	e002      	b.n	8011858 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	68db      	ldr	r3, [r3, #12]
 8011856:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d1b3      	bne.n	80117c6 <tcp_fasttmr+0x1a>
    }
  }
}
 801185e:	bf00      	nop
 8011860:	bf00      	nop
 8011862:	3708      	adds	r7, #8
 8011864:	46bd      	mov	sp, r7
 8011866:	bd80      	pop	{r7, pc}
 8011868:	200073b2 	.word	0x200073b2
 801186c:	200073a8 	.word	0x200073a8
 8011870:	200073b0 	.word	0x200073b0

08011874 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011874:	b590      	push	{r4, r7, lr}
 8011876:	b085      	sub	sp, #20
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d109      	bne.n	8011896 <tcp_process_refused_data+0x22>
 8011882:	4b37      	ldr	r3, [pc, #220]	; (8011960 <tcp_process_refused_data+0xec>)
 8011884:	f240 6209 	movw	r2, #1545	; 0x609
 8011888:	4936      	ldr	r1, [pc, #216]	; (8011964 <tcp_process_refused_data+0xf0>)
 801188a:	4837      	ldr	r0, [pc, #220]	; (8011968 <tcp_process_refused_data+0xf4>)
 801188c:	f00a ff50 	bl	801c730 <iprintf>
 8011890:	f06f 030f 	mvn.w	r3, #15
 8011894:	e060      	b.n	8011958 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801189a:	7b5b      	ldrb	r3, [r3, #13]
 801189c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80118a2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	2200      	movs	r2, #0
 80118a8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d00b      	beq.n	80118cc <tcp_process_refused_data+0x58>
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	6918      	ldr	r0, [r3, #16]
 80118be:	2300      	movs	r3, #0
 80118c0:	68ba      	ldr	r2, [r7, #8]
 80118c2:	6879      	ldr	r1, [r7, #4]
 80118c4:	47a0      	blx	r4
 80118c6:	4603      	mov	r3, r0
 80118c8:	73fb      	strb	r3, [r7, #15]
 80118ca:	e007      	b.n	80118dc <tcp_process_refused_data+0x68>
 80118cc:	2300      	movs	r3, #0
 80118ce:	68ba      	ldr	r2, [r7, #8]
 80118d0:	6879      	ldr	r1, [r7, #4]
 80118d2:	2000      	movs	r0, #0
 80118d4:	f000 f8a4 	bl	8011a20 <tcp_recv_null>
 80118d8:	4603      	mov	r3, r0
 80118da:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80118dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d12a      	bne.n	801193a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80118e4:	7bbb      	ldrb	r3, [r7, #14]
 80118e6:	f003 0320 	and.w	r3, r3, #32
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d033      	beq.n	8011956 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80118f2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80118f6:	d005      	beq.n	8011904 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80118fc:	3301      	adds	r3, #1
 80118fe:	b29a      	uxth	r2, r3
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801190a:	2b00      	cmp	r3, #0
 801190c:	d00b      	beq.n	8011926 <tcp_process_refused_data+0xb2>
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	6918      	ldr	r0, [r3, #16]
 8011918:	2300      	movs	r3, #0
 801191a:	2200      	movs	r2, #0
 801191c:	6879      	ldr	r1, [r7, #4]
 801191e:	47a0      	blx	r4
 8011920:	4603      	mov	r3, r0
 8011922:	73fb      	strb	r3, [r7, #15]
 8011924:	e001      	b.n	801192a <tcp_process_refused_data+0xb6>
 8011926:	2300      	movs	r3, #0
 8011928:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801192a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801192e:	f113 0f0d 	cmn.w	r3, #13
 8011932:	d110      	bne.n	8011956 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8011934:	f06f 030c 	mvn.w	r3, #12
 8011938:	e00e      	b.n	8011958 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801193a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801193e:	f113 0f0d 	cmn.w	r3, #13
 8011942:	d102      	bne.n	801194a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011944:	f06f 030c 	mvn.w	r3, #12
 8011948:	e006      	b.n	8011958 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	68ba      	ldr	r2, [r7, #8]
 801194e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8011950:	f06f 0304 	mvn.w	r3, #4
 8011954:	e000      	b.n	8011958 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8011956:	2300      	movs	r3, #0
}
 8011958:	4618      	mov	r0, r3
 801195a:	3714      	adds	r7, #20
 801195c:	46bd      	mov	sp, r7
 801195e:	bd90      	pop	{r4, r7, pc}
 8011960:	0802112c 	.word	0x0802112c
 8011964:	0802163c 	.word	0x0802163c
 8011968:	08021170 	.word	0x08021170

0801196c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801196c:	b580      	push	{r7, lr}
 801196e:	b084      	sub	sp, #16
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011974:	e007      	b.n	8011986 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801197c:	6878      	ldr	r0, [r7, #4]
 801197e:	f000 f80a 	bl	8011996 <tcp_seg_free>
    seg = next;
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d1f4      	bne.n	8011976 <tcp_segs_free+0xa>
  }
}
 801198c:	bf00      	nop
 801198e:	bf00      	nop
 8011990:	3710      	adds	r7, #16
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}

08011996 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011996:	b580      	push	{r7, lr}
 8011998:	b082      	sub	sp, #8
 801199a:	af00      	add	r7, sp, #0
 801199c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d00c      	beq.n	80119be <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	685b      	ldr	r3, [r3, #4]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d004      	beq.n	80119b6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	685b      	ldr	r3, [r3, #4]
 80119b0:	4618      	mov	r0, r3
 80119b2:	f7fe fbed 	bl	8010190 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80119b6:	6879      	ldr	r1, [r7, #4]
 80119b8:	2003      	movs	r0, #3
 80119ba:	f7fd fdb7 	bl	800f52c <memp_free>
  }
}
 80119be:	bf00      	nop
 80119c0:	3708      	adds	r7, #8
 80119c2:	46bd      	mov	sp, r7
 80119c4:	bd80      	pop	{r7, pc}
	...

080119c8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b084      	sub	sp, #16
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d106      	bne.n	80119e4 <tcp_seg_copy+0x1c>
 80119d6:	4b0f      	ldr	r3, [pc, #60]	; (8011a14 <tcp_seg_copy+0x4c>)
 80119d8:	f240 6282 	movw	r2, #1666	; 0x682
 80119dc:	490e      	ldr	r1, [pc, #56]	; (8011a18 <tcp_seg_copy+0x50>)
 80119de:	480f      	ldr	r0, [pc, #60]	; (8011a1c <tcp_seg_copy+0x54>)
 80119e0:	f00a fea6 	bl	801c730 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80119e4:	2003      	movs	r0, #3
 80119e6:	f7fd fd4f 	bl	800f488 <memp_malloc>
 80119ea:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d101      	bne.n	80119f6 <tcp_seg_copy+0x2e>
    return NULL;
 80119f2:	2300      	movs	r3, #0
 80119f4:	e00a      	b.n	8011a0c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80119f6:	2210      	movs	r2, #16
 80119f8:	6879      	ldr	r1, [r7, #4]
 80119fa:	68f8      	ldr	r0, [r7, #12]
 80119fc:	f009 ff2a 	bl	801b854 <memcpy>
  pbuf_ref(cseg->p);
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	685b      	ldr	r3, [r3, #4]
 8011a04:	4618      	mov	r0, r3
 8011a06:	f7fe fc63 	bl	80102d0 <pbuf_ref>
  return cseg;
 8011a0a:	68fb      	ldr	r3, [r7, #12]
}
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	3710      	adds	r7, #16
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}
 8011a14:	0802112c 	.word	0x0802112c
 8011a18:	08021680 	.word	0x08021680
 8011a1c:	08021170 	.word	0x08021170

08011a20 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b084      	sub	sp, #16
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	60f8      	str	r0, [r7, #12]
 8011a28:	60b9      	str	r1, [r7, #8]
 8011a2a:	607a      	str	r2, [r7, #4]
 8011a2c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8011a2e:	68bb      	ldr	r3, [r7, #8]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d109      	bne.n	8011a48 <tcp_recv_null+0x28>
 8011a34:	4b12      	ldr	r3, [pc, #72]	; (8011a80 <tcp_recv_null+0x60>)
 8011a36:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011a3a:	4912      	ldr	r1, [pc, #72]	; (8011a84 <tcp_recv_null+0x64>)
 8011a3c:	4812      	ldr	r0, [pc, #72]	; (8011a88 <tcp_recv_null+0x68>)
 8011a3e:	f00a fe77 	bl	801c730 <iprintf>
 8011a42:	f06f 030f 	mvn.w	r3, #15
 8011a46:	e016      	b.n	8011a76 <tcp_recv_null+0x56>

  if (p != NULL) {
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d009      	beq.n	8011a62 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	891b      	ldrh	r3, [r3, #8]
 8011a52:	4619      	mov	r1, r3
 8011a54:	68b8      	ldr	r0, [r7, #8]
 8011a56:	f7ff fb19 	bl	801108c <tcp_recved>
    pbuf_free(p);
 8011a5a:	6878      	ldr	r0, [r7, #4]
 8011a5c:	f7fe fb98 	bl	8010190 <pbuf_free>
 8011a60:	e008      	b.n	8011a74 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8011a62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d104      	bne.n	8011a74 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8011a6a:	68b8      	ldr	r0, [r7, #8]
 8011a6c:	f7ff f9be 	bl	8010dec <tcp_close>
 8011a70:	4603      	mov	r3, r0
 8011a72:	e000      	b.n	8011a76 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011a74:	2300      	movs	r3, #0
}
 8011a76:	4618      	mov	r0, r3
 8011a78:	3710      	adds	r7, #16
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	bd80      	pop	{r7, pc}
 8011a7e:	bf00      	nop
 8011a80:	0802112c 	.word	0x0802112c
 8011a84:	0802169c 	.word	0x0802169c
 8011a88:	08021170 	.word	0x08021170

08011a8c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b086      	sub	sp, #24
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	4603      	mov	r3, r0
 8011a94:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	db01      	blt.n	8011aa2 <tcp_kill_prio+0x16>
 8011a9e:	79fb      	ldrb	r3, [r7, #7]
 8011aa0:	e000      	b.n	8011aa4 <tcp_kill_prio+0x18>
 8011aa2:	237f      	movs	r3, #127	; 0x7f
 8011aa4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8011aa6:	7afb      	ldrb	r3, [r7, #11]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d034      	beq.n	8011b16 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8011aac:	7afb      	ldrb	r3, [r7, #11]
 8011aae:	3b01      	subs	r3, #1
 8011ab0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011aba:	4b19      	ldr	r3, [pc, #100]	; (8011b20 <tcp_kill_prio+0x94>)
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	617b      	str	r3, [r7, #20]
 8011ac0:	e01f      	b.n	8011b02 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8011ac2:	697b      	ldr	r3, [r7, #20]
 8011ac4:	7d5b      	ldrb	r3, [r3, #21]
 8011ac6:	7afa      	ldrb	r2, [r7, #11]
 8011ac8:	429a      	cmp	r2, r3
 8011aca:	d80c      	bhi.n	8011ae6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011acc:	697b      	ldr	r3, [r7, #20]
 8011ace:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8011ad0:	7afa      	ldrb	r2, [r7, #11]
 8011ad2:	429a      	cmp	r2, r3
 8011ad4:	d112      	bne.n	8011afc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011ad6:	4b13      	ldr	r3, [pc, #76]	; (8011b24 <tcp_kill_prio+0x98>)
 8011ad8:	681a      	ldr	r2, [r3, #0]
 8011ada:	697b      	ldr	r3, [r7, #20]
 8011adc:	6a1b      	ldr	r3, [r3, #32]
 8011ade:	1ad3      	subs	r3, r2, r3
 8011ae0:	68fa      	ldr	r2, [r7, #12]
 8011ae2:	429a      	cmp	r2, r3
 8011ae4:	d80a      	bhi.n	8011afc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8011ae6:	4b0f      	ldr	r3, [pc, #60]	; (8011b24 <tcp_kill_prio+0x98>)
 8011ae8:	681a      	ldr	r2, [r3, #0]
 8011aea:	697b      	ldr	r3, [r7, #20]
 8011aec:	6a1b      	ldr	r3, [r3, #32]
 8011aee:	1ad3      	subs	r3, r2, r3
 8011af0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8011af2:	697b      	ldr	r3, [r7, #20]
 8011af4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8011af6:	697b      	ldr	r3, [r7, #20]
 8011af8:	7d5b      	ldrb	r3, [r3, #21]
 8011afa:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011afc:	697b      	ldr	r3, [r7, #20]
 8011afe:	68db      	ldr	r3, [r3, #12]
 8011b00:	617b      	str	r3, [r7, #20]
 8011b02:	697b      	ldr	r3, [r7, #20]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d1dc      	bne.n	8011ac2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8011b08:	693b      	ldr	r3, [r7, #16]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d004      	beq.n	8011b18 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011b0e:	6938      	ldr	r0, [r7, #16]
 8011b10:	f7ff fa56 	bl	8010fc0 <tcp_abort>
 8011b14:	e000      	b.n	8011b18 <tcp_kill_prio+0x8c>
    return;
 8011b16:	bf00      	nop
  }
}
 8011b18:	3718      	adds	r7, #24
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}
 8011b1e:	bf00      	nop
 8011b20:	200073a8 	.word	0x200073a8
 8011b24:	2000739c 	.word	0x2000739c

08011b28 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b086      	sub	sp, #24
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	4603      	mov	r3, r0
 8011b30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8011b32:	79fb      	ldrb	r3, [r7, #7]
 8011b34:	2b08      	cmp	r3, #8
 8011b36:	d009      	beq.n	8011b4c <tcp_kill_state+0x24>
 8011b38:	79fb      	ldrb	r3, [r7, #7]
 8011b3a:	2b09      	cmp	r3, #9
 8011b3c:	d006      	beq.n	8011b4c <tcp_kill_state+0x24>
 8011b3e:	4b1a      	ldr	r3, [pc, #104]	; (8011ba8 <tcp_kill_state+0x80>)
 8011b40:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8011b44:	4919      	ldr	r1, [pc, #100]	; (8011bac <tcp_kill_state+0x84>)
 8011b46:	481a      	ldr	r0, [pc, #104]	; (8011bb0 <tcp_kill_state+0x88>)
 8011b48:	f00a fdf2 	bl	801c730 <iprintf>

  inactivity = 0;
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011b50:	2300      	movs	r3, #0
 8011b52:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b54:	4b17      	ldr	r3, [pc, #92]	; (8011bb4 <tcp_kill_state+0x8c>)
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	617b      	str	r3, [r7, #20]
 8011b5a:	e017      	b.n	8011b8c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011b5c:	697b      	ldr	r3, [r7, #20]
 8011b5e:	7d1b      	ldrb	r3, [r3, #20]
 8011b60:	79fa      	ldrb	r2, [r7, #7]
 8011b62:	429a      	cmp	r2, r3
 8011b64:	d10f      	bne.n	8011b86 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011b66:	4b14      	ldr	r3, [pc, #80]	; (8011bb8 <tcp_kill_state+0x90>)
 8011b68:	681a      	ldr	r2, [r3, #0]
 8011b6a:	697b      	ldr	r3, [r7, #20]
 8011b6c:	6a1b      	ldr	r3, [r3, #32]
 8011b6e:	1ad3      	subs	r3, r2, r3
 8011b70:	68fa      	ldr	r2, [r7, #12]
 8011b72:	429a      	cmp	r2, r3
 8011b74:	d807      	bhi.n	8011b86 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8011b76:	4b10      	ldr	r3, [pc, #64]	; (8011bb8 <tcp_kill_state+0x90>)
 8011b78:	681a      	ldr	r2, [r3, #0]
 8011b7a:	697b      	ldr	r3, [r7, #20]
 8011b7c:	6a1b      	ldr	r3, [r3, #32]
 8011b7e:	1ad3      	subs	r3, r2, r3
 8011b80:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011b82:	697b      	ldr	r3, [r7, #20]
 8011b84:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b86:	697b      	ldr	r3, [r7, #20]
 8011b88:	68db      	ldr	r3, [r3, #12]
 8011b8a:	617b      	str	r3, [r7, #20]
 8011b8c:	697b      	ldr	r3, [r7, #20]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d1e4      	bne.n	8011b5c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8011b92:	693b      	ldr	r3, [r7, #16]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d003      	beq.n	8011ba0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011b98:	2100      	movs	r1, #0
 8011b9a:	6938      	ldr	r0, [r7, #16]
 8011b9c:	f7ff f952 	bl	8010e44 <tcp_abandon>
  }
}
 8011ba0:	bf00      	nop
 8011ba2:	3718      	adds	r7, #24
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	bd80      	pop	{r7, pc}
 8011ba8:	0802112c 	.word	0x0802112c
 8011bac:	080216b8 	.word	0x080216b8
 8011bb0:	08021170 	.word	0x08021170
 8011bb4:	200073a8 	.word	0x200073a8
 8011bb8:	2000739c 	.word	0x2000739c

08011bbc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b084      	sub	sp, #16
 8011bc0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011bca:	4b12      	ldr	r3, [pc, #72]	; (8011c14 <tcp_kill_timewait+0x58>)
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	60fb      	str	r3, [r7, #12]
 8011bd0:	e012      	b.n	8011bf8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011bd2:	4b11      	ldr	r3, [pc, #68]	; (8011c18 <tcp_kill_timewait+0x5c>)
 8011bd4:	681a      	ldr	r2, [r3, #0]
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	6a1b      	ldr	r3, [r3, #32]
 8011bda:	1ad3      	subs	r3, r2, r3
 8011bdc:	687a      	ldr	r2, [r7, #4]
 8011bde:	429a      	cmp	r2, r3
 8011be0:	d807      	bhi.n	8011bf2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8011be2:	4b0d      	ldr	r3, [pc, #52]	; (8011c18 <tcp_kill_timewait+0x5c>)
 8011be4:	681a      	ldr	r2, [r3, #0]
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	6a1b      	ldr	r3, [r3, #32]
 8011bea:	1ad3      	subs	r3, r2, r3
 8011bec:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	68db      	ldr	r3, [r3, #12]
 8011bf6:	60fb      	str	r3, [r7, #12]
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d1e9      	bne.n	8011bd2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8011bfe:	68bb      	ldr	r3, [r7, #8]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d002      	beq.n	8011c0a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011c04:	68b8      	ldr	r0, [r7, #8]
 8011c06:	f7ff f9db 	bl	8010fc0 <tcp_abort>
  }
}
 8011c0a:	bf00      	nop
 8011c0c:	3710      	adds	r7, #16
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	bd80      	pop	{r7, pc}
 8011c12:	bf00      	nop
 8011c14:	200073ac 	.word	0x200073ac
 8011c18:	2000739c 	.word	0x2000739c

08011c1c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b082      	sub	sp, #8
 8011c20:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8011c22:	4b10      	ldr	r3, [pc, #64]	; (8011c64 <tcp_handle_closepend+0x48>)
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011c28:	e014      	b.n	8011c54 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	68db      	ldr	r3, [r3, #12]
 8011c2e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	8b5b      	ldrh	r3, [r3, #26]
 8011c34:	f003 0308 	and.w	r3, r3, #8
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d009      	beq.n	8011c50 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	8b5b      	ldrh	r3, [r3, #26]
 8011c40:	f023 0308 	bic.w	r3, r3, #8
 8011c44:	b29a      	uxth	r2, r3
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8011c4a:	6878      	ldr	r0, [r7, #4]
 8011c4c:	f7ff f84e 	bl	8010cec <tcp_close_shutdown_fin>
    }
    pcb = next;
 8011c50:	683b      	ldr	r3, [r7, #0]
 8011c52:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d1e7      	bne.n	8011c2a <tcp_handle_closepend+0xe>
  }
}
 8011c5a:	bf00      	nop
 8011c5c:	bf00      	nop
 8011c5e:	3708      	adds	r7, #8
 8011c60:	46bd      	mov	sp, r7
 8011c62:	bd80      	pop	{r7, pc}
 8011c64:	200073a8 	.word	0x200073a8

08011c68 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b084      	sub	sp, #16
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	4603      	mov	r3, r0
 8011c70:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011c72:	2001      	movs	r0, #1
 8011c74:	f7fd fc08 	bl	800f488 <memp_malloc>
 8011c78:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d14e      	bne.n	8011d1e <tcp_alloc+0xb6>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011c80:	f7ff ffcc 	bl	8011c1c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011c84:	f7ff ff9a 	bl	8011bbc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011c88:	2001      	movs	r0, #1
 8011c8a:	f7fd fbfd 	bl	800f488 <memp_malloc>
 8011c8e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d139      	bne.n	8011d0a <tcp_alloc+0xa2>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8011c96:	2009      	movs	r0, #9
 8011c98:	f7ff ff46 	bl	8011b28 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011c9c:	2001      	movs	r0, #1
 8011c9e:	f7fd fbf3 	bl	800f488 <memp_malloc>
 8011ca2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d125      	bne.n	8011cf6 <tcp_alloc+0x8e>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011caa:	2008      	movs	r0, #8
 8011cac:	f7ff ff3c 	bl	8011b28 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011cb0:	2001      	movs	r0, #1
 8011cb2:	f7fd fbe9 	bl	800f488 <memp_malloc>
 8011cb6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d111      	bne.n	8011ce2 <tcp_alloc+0x7a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8011cbe:	79fb      	ldrb	r3, [r7, #7]
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	f7ff fee3 	bl	8011a8c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011cc6:	2001      	movs	r0, #1
 8011cc8:	f7fd fbde 	bl	800f488 <memp_malloc>
 8011ccc:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d006      	beq.n	8011ce2 <tcp_alloc+0x7a>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8011cd4:	4b36      	ldr	r3, [pc, #216]	; (8011db0 <tcp_alloc+0x148>)
 8011cd6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8011cda:	881a      	ldrh	r2, [r3, #0]
 8011cdc:	3a01      	subs	r2, #1
 8011cde:	b292      	uxth	r2, r2
 8011ce0:	801a      	strh	r2, [r3, #0]
          }
        }
        if (pcb != NULL) {
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d006      	beq.n	8011cf6 <tcp_alloc+0x8e>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8011ce8:	4b31      	ldr	r3, [pc, #196]	; (8011db0 <tcp_alloc+0x148>)
 8011cea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8011cee:	881a      	ldrh	r2, [r3, #0]
 8011cf0:	3a01      	subs	r2, #1
 8011cf2:	b292      	uxth	r2, r2
 8011cf4:	801a      	strh	r2, [r3, #0]
        }
      }
      if (pcb != NULL) {
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d006      	beq.n	8011d0a <tcp_alloc+0xa2>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8011cfc:	4b2c      	ldr	r3, [pc, #176]	; (8011db0 <tcp_alloc+0x148>)
 8011cfe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8011d02:	881a      	ldrh	r2, [r3, #0]
 8011d04:	3a01      	subs	r2, #1
 8011d06:	b292      	uxth	r2, r2
 8011d08:	801a      	strh	r2, [r3, #0]
      }
    }
    if (pcb != NULL) {
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d006      	beq.n	8011d1e <tcp_alloc+0xb6>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8011d10:	4b27      	ldr	r3, [pc, #156]	; (8011db0 <tcp_alloc+0x148>)
 8011d12:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8011d16:	881a      	ldrh	r2, [r3, #0]
 8011d18:	3a01      	subs	r2, #1
 8011d1a:	b292      	uxth	r2, r2
 8011d1c:	801a      	strh	r2, [r3, #0]
    }
  }
  if (pcb != NULL) {
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d03f      	beq.n	8011da4 <tcp_alloc+0x13c>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011d24:	229c      	movs	r2, #156	; 0x9c
 8011d26:	2100      	movs	r1, #0
 8011d28:	68f8      	ldr	r0, [r7, #12]
 8011d2a:	f009 fdbb 	bl	801b8a4 <memset>
    pcb->prio = prio;
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	79fa      	ldrb	r2, [r7, #7]
 8011d32:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011d3a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011d44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	22ff      	movs	r2, #255	; 0xff
 8011d52:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011d5a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	2206      	movs	r2, #6
 8011d60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	2206      	movs	r2, #6
 8011d68:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011d70:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	2201      	movs	r2, #1
 8011d76:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8011d7a:	4b0e      	ldr	r3, [pc, #56]	; (8011db4 <tcp_alloc+0x14c>)
 8011d7c:	681a      	ldr	r2, [r3, #0]
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8011d82:	4b0d      	ldr	r3, [pc, #52]	; (8011db8 <tcp_alloc+0x150>)
 8011d84:	781a      	ldrb	r2, [r3, #0]
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011d90:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	4a09      	ldr	r2, [pc, #36]	; (8011dbc <tcp_alloc+0x154>)
 8011d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	4a08      	ldr	r2, [pc, #32]	; (8011dc0 <tcp_alloc+0x158>)
 8011da0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011da4:	68fb      	ldr	r3, [r7, #12]
}
 8011da6:	4618      	mov	r0, r3
 8011da8:	3710      	adds	r7, #16
 8011daa:	46bd      	mov	sp, r7
 8011dac:	bd80      	pop	{r7, pc}
 8011dae:	bf00      	nop
 8011db0:	20007204 	.word	0x20007204
 8011db4:	2000739c 	.word	0x2000739c
 8011db8:	200073b2 	.word	0x200073b2
 8011dbc:	08011a21 	.word	0x08011a21
 8011dc0:	006ddd00 	.word	0x006ddd00

08011dc4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b082      	sub	sp, #8
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d107      	bne.n	8011de2 <tcp_pcb_purge+0x1e>
 8011dd2:	4b21      	ldr	r3, [pc, #132]	; (8011e58 <tcp_pcb_purge+0x94>)
 8011dd4:	f640 0251 	movw	r2, #2129	; 0x851
 8011dd8:	4920      	ldr	r1, [pc, #128]	; (8011e5c <tcp_pcb_purge+0x98>)
 8011dda:	4821      	ldr	r0, [pc, #132]	; (8011e60 <tcp_pcb_purge+0x9c>)
 8011ddc:	f00a fca8 	bl	801c730 <iprintf>
 8011de0:	e037      	b.n	8011e52 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	7d1b      	ldrb	r3, [r3, #20]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d033      	beq.n	8011e52 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011dee:	2b0a      	cmp	r3, #10
 8011df0:	d02f      	beq.n	8011e52 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011df6:	2b01      	cmp	r3, #1
 8011df8:	d02b      	beq.n	8011e52 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d007      	beq.n	8011e12 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011e06:	4618      	mov	r0, r3
 8011e08:	f7fe f9c2 	bl	8010190 <pbuf_free>
      pcb->refused_data = NULL;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	2200      	movs	r2, #0
 8011e10:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d002      	beq.n	8011e20 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011e1a:	6878      	ldr	r0, [r7, #4]
 8011e1c:	f000 f986 	bl	801212c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e26:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e2c:	4618      	mov	r0, r3
 8011e2e:	f7ff fd9d 	bl	801196c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e36:	4618      	mov	r0, r3
 8011e38:	f7ff fd98 	bl	801196c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	2200      	movs	r2, #0
 8011e40:	66da      	str	r2, [r3, #108]	; 0x6c
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	2200      	movs	r2, #0
 8011e4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8011e52:	3708      	adds	r7, #8
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bd80      	pop	{r7, pc}
 8011e58:	0802112c 	.word	0x0802112c
 8011e5c:	08021778 	.word	0x08021778
 8011e60:	08021170 	.word	0x08021170

08011e64 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b084      	sub	sp, #16
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
 8011e6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8011e6e:	683b      	ldr	r3, [r7, #0]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d106      	bne.n	8011e82 <tcp_pcb_remove+0x1e>
 8011e74:	4b3e      	ldr	r3, [pc, #248]	; (8011f70 <tcp_pcb_remove+0x10c>)
 8011e76:	f640 0283 	movw	r2, #2179	; 0x883
 8011e7a:	493e      	ldr	r1, [pc, #248]	; (8011f74 <tcp_pcb_remove+0x110>)
 8011e7c:	483e      	ldr	r0, [pc, #248]	; (8011f78 <tcp_pcb_remove+0x114>)
 8011e7e:	f00a fc57 	bl	801c730 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d106      	bne.n	8011e96 <tcp_pcb_remove+0x32>
 8011e88:	4b39      	ldr	r3, [pc, #228]	; (8011f70 <tcp_pcb_remove+0x10c>)
 8011e8a:	f640 0284 	movw	r2, #2180	; 0x884
 8011e8e:	493b      	ldr	r1, [pc, #236]	; (8011f7c <tcp_pcb_remove+0x118>)
 8011e90:	4839      	ldr	r0, [pc, #228]	; (8011f78 <tcp_pcb_remove+0x114>)
 8011e92:	f00a fc4d 	bl	801c730 <iprintf>

  TCP_RMV(pcblist, pcb);
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	683a      	ldr	r2, [r7, #0]
 8011e9c:	429a      	cmp	r2, r3
 8011e9e:	d105      	bne.n	8011eac <tcp_pcb_remove+0x48>
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	68da      	ldr	r2, [r3, #12]
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	601a      	str	r2, [r3, #0]
 8011eaa:	e013      	b.n	8011ed4 <tcp_pcb_remove+0x70>
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	60fb      	str	r3, [r7, #12]
 8011eb2:	e00c      	b.n	8011ece <tcp_pcb_remove+0x6a>
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	68db      	ldr	r3, [r3, #12]
 8011eb8:	683a      	ldr	r2, [r7, #0]
 8011eba:	429a      	cmp	r2, r3
 8011ebc:	d104      	bne.n	8011ec8 <tcp_pcb_remove+0x64>
 8011ebe:	683b      	ldr	r3, [r7, #0]
 8011ec0:	68da      	ldr	r2, [r3, #12]
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	60da      	str	r2, [r3, #12]
 8011ec6:	e005      	b.n	8011ed4 <tcp_pcb_remove+0x70>
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	68db      	ldr	r3, [r3, #12]
 8011ecc:	60fb      	str	r3, [r7, #12]
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d1ef      	bne.n	8011eb4 <tcp_pcb_remove+0x50>
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011eda:	6838      	ldr	r0, [r7, #0]
 8011edc:	f7ff ff72 	bl	8011dc4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	7d1b      	ldrb	r3, [r3, #20]
 8011ee4:	2b0a      	cmp	r3, #10
 8011ee6:	d013      	beq.n	8011f10 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011ee8:	683b      	ldr	r3, [r7, #0]
 8011eea:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8011eec:	2b01      	cmp	r3, #1
 8011eee:	d00f      	beq.n	8011f10 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8011ef0:	683b      	ldr	r3, [r7, #0]
 8011ef2:	8b5b      	ldrh	r3, [r3, #26]
 8011ef4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d009      	beq.n	8011f10 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8011efc:	683b      	ldr	r3, [r7, #0]
 8011efe:	8b5b      	ldrh	r3, [r3, #26]
 8011f00:	f043 0302 	orr.w	r3, r3, #2
 8011f04:	b29a      	uxth	r2, r3
 8011f06:	683b      	ldr	r3, [r7, #0]
 8011f08:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011f0a:	6838      	ldr	r0, [r7, #0]
 8011f0c:	f003 f816 	bl	8014f3c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8011f10:	683b      	ldr	r3, [r7, #0]
 8011f12:	7d1b      	ldrb	r3, [r3, #20]
 8011f14:	2b01      	cmp	r3, #1
 8011f16:	d020      	beq.n	8011f5a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011f18:	683b      	ldr	r3, [r7, #0]
 8011f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d006      	beq.n	8011f2e <tcp_pcb_remove+0xca>
 8011f20:	4b13      	ldr	r3, [pc, #76]	; (8011f70 <tcp_pcb_remove+0x10c>)
 8011f22:	f640 0293 	movw	r2, #2195	; 0x893
 8011f26:	4916      	ldr	r1, [pc, #88]	; (8011f80 <tcp_pcb_remove+0x11c>)
 8011f28:	4813      	ldr	r0, [pc, #76]	; (8011f78 <tcp_pcb_remove+0x114>)
 8011f2a:	f00a fc01 	bl	801c730 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8011f2e:	683b      	ldr	r3, [r7, #0]
 8011f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d006      	beq.n	8011f44 <tcp_pcb_remove+0xe0>
 8011f36:	4b0e      	ldr	r3, [pc, #56]	; (8011f70 <tcp_pcb_remove+0x10c>)
 8011f38:	f640 0294 	movw	r2, #2196	; 0x894
 8011f3c:	4911      	ldr	r1, [pc, #68]	; (8011f84 <tcp_pcb_remove+0x120>)
 8011f3e:	480e      	ldr	r0, [pc, #56]	; (8011f78 <tcp_pcb_remove+0x114>)
 8011f40:	f00a fbf6 	bl	801c730 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d006      	beq.n	8011f5a <tcp_pcb_remove+0xf6>
 8011f4c:	4b08      	ldr	r3, [pc, #32]	; (8011f70 <tcp_pcb_remove+0x10c>)
 8011f4e:	f640 0296 	movw	r2, #2198	; 0x896
 8011f52:	490d      	ldr	r1, [pc, #52]	; (8011f88 <tcp_pcb_remove+0x124>)
 8011f54:	4808      	ldr	r0, [pc, #32]	; (8011f78 <tcp_pcb_remove+0x114>)
 8011f56:	f00a fbeb 	bl	801c730 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011f5a:	683b      	ldr	r3, [r7, #0]
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8011f60:	683b      	ldr	r3, [r7, #0]
 8011f62:	2200      	movs	r2, #0
 8011f64:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8011f66:	bf00      	nop
 8011f68:	3710      	adds	r7, #16
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	bd80      	pop	{r7, pc}
 8011f6e:	bf00      	nop
 8011f70:	0802112c 	.word	0x0802112c
 8011f74:	08021794 	.word	0x08021794
 8011f78:	08021170 	.word	0x08021170
 8011f7c:	080217b0 	.word	0x080217b0
 8011f80:	080217d0 	.word	0x080217d0
 8011f84:	080217e8 	.word	0x080217e8
 8011f88:	08021804 	.word	0x08021804

08011f8c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b082      	sub	sp, #8
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d106      	bne.n	8011fa8 <tcp_next_iss+0x1c>
 8011f9a:	4b0a      	ldr	r3, [pc, #40]	; (8011fc4 <tcp_next_iss+0x38>)
 8011f9c:	f640 02af 	movw	r2, #2223	; 0x8af
 8011fa0:	4909      	ldr	r1, [pc, #36]	; (8011fc8 <tcp_next_iss+0x3c>)
 8011fa2:	480a      	ldr	r0, [pc, #40]	; (8011fcc <tcp_next_iss+0x40>)
 8011fa4:	f00a fbc4 	bl	801c730 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8011fa8:	4b09      	ldr	r3, [pc, #36]	; (8011fd0 <tcp_next_iss+0x44>)
 8011faa:	681a      	ldr	r2, [r3, #0]
 8011fac:	4b09      	ldr	r3, [pc, #36]	; (8011fd4 <tcp_next_iss+0x48>)
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	4413      	add	r3, r2
 8011fb2:	4a07      	ldr	r2, [pc, #28]	; (8011fd0 <tcp_next_iss+0x44>)
 8011fb4:	6013      	str	r3, [r2, #0]
  return iss;
 8011fb6:	4b06      	ldr	r3, [pc, #24]	; (8011fd0 <tcp_next_iss+0x44>)
 8011fb8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8011fba:	4618      	mov	r0, r3
 8011fbc:	3708      	adds	r7, #8
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}
 8011fc2:	bf00      	nop
 8011fc4:	0802112c 	.word	0x0802112c
 8011fc8:	0802181c 	.word	0x0802181c
 8011fcc:	08021170 	.word	0x08021170
 8011fd0:	2000005c 	.word	0x2000005c
 8011fd4:	2000739c 	.word	0x2000739c

08011fd8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b086      	sub	sp, #24
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	4603      	mov	r3, r0
 8011fe0:	60b9      	str	r1, [r7, #8]
 8011fe2:	607a      	str	r2, [r7, #4]
 8011fe4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d106      	bne.n	8011ffa <tcp_eff_send_mss_netif+0x22>
 8011fec:	4b14      	ldr	r3, [pc, #80]	; (8012040 <tcp_eff_send_mss_netif+0x68>)
 8011fee:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8011ff2:	4914      	ldr	r1, [pc, #80]	; (8012044 <tcp_eff_send_mss_netif+0x6c>)
 8011ff4:	4814      	ldr	r0, [pc, #80]	; (8012048 <tcp_eff_send_mss_netif+0x70>)
 8011ff6:	f00a fb9b 	bl	801c730 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011ffa:	68bb      	ldr	r3, [r7, #8]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d101      	bne.n	8012004 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8012000:	89fb      	ldrh	r3, [r7, #14]
 8012002:	e019      	b.n	8012038 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8012004:	68bb      	ldr	r3, [r7, #8]
 8012006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012008:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801200a:	8afb      	ldrh	r3, [r7, #22]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d012      	beq.n	8012036 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8012010:	2328      	movs	r3, #40	; 0x28
 8012012:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8012014:	8afa      	ldrh	r2, [r7, #22]
 8012016:	8abb      	ldrh	r3, [r7, #20]
 8012018:	429a      	cmp	r2, r3
 801201a:	d904      	bls.n	8012026 <tcp_eff_send_mss_netif+0x4e>
 801201c:	8afa      	ldrh	r2, [r7, #22]
 801201e:	8abb      	ldrh	r3, [r7, #20]
 8012020:	1ad3      	subs	r3, r2, r3
 8012022:	b29b      	uxth	r3, r3
 8012024:	e000      	b.n	8012028 <tcp_eff_send_mss_netif+0x50>
 8012026:	2300      	movs	r3, #0
 8012028:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801202a:	8a7a      	ldrh	r2, [r7, #18]
 801202c:	89fb      	ldrh	r3, [r7, #14]
 801202e:	4293      	cmp	r3, r2
 8012030:	bf28      	it	cs
 8012032:	4613      	movcs	r3, r2
 8012034:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8012036:	89fb      	ldrh	r3, [r7, #14]
}
 8012038:	4618      	mov	r0, r3
 801203a:	3718      	adds	r7, #24
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}
 8012040:	0802112c 	.word	0x0802112c
 8012044:	08021838 	.word	0x08021838
 8012048:	08021170 	.word	0x08021170

0801204c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b084      	sub	sp, #16
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
 8012054:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d119      	bne.n	8012094 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012060:	4b10      	ldr	r3, [pc, #64]	; (80120a4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8012062:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8012066:	4910      	ldr	r1, [pc, #64]	; (80120a8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8012068:	4810      	ldr	r0, [pc, #64]	; (80120ac <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801206a:	f00a fb61 	bl	801c730 <iprintf>

  while (pcb != NULL) {
 801206e:	e011      	b.n	8012094 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	681a      	ldr	r2, [r3, #0]
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	429a      	cmp	r2, r3
 801207a:	d108      	bne.n	801208e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	68db      	ldr	r3, [r3, #12]
 8012080:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8012082:	68f8      	ldr	r0, [r7, #12]
 8012084:	f7fe ff9c 	bl	8010fc0 <tcp_abort>
      pcb = next;
 8012088:	68bb      	ldr	r3, [r7, #8]
 801208a:	60fb      	str	r3, [r7, #12]
 801208c:	e002      	b.n	8012094 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	68db      	ldr	r3, [r3, #12]
 8012092:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d1ea      	bne.n	8012070 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801209a:	bf00      	nop
 801209c:	bf00      	nop
 801209e:	3710      	adds	r7, #16
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}
 80120a4:	0802112c 	.word	0x0802112c
 80120a8:	08021860 	.word	0x08021860
 80120ac:	08021170 	.word	0x08021170

080120b0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b084      	sub	sp, #16
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
 80120b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d02a      	beq.n	8012116 <tcp_netif_ip_addr_changed+0x66>
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d026      	beq.n	8012116 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80120c8:	4b15      	ldr	r3, [pc, #84]	; (8012120 <tcp_netif_ip_addr_changed+0x70>)
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	4619      	mov	r1, r3
 80120ce:	6878      	ldr	r0, [r7, #4]
 80120d0:	f7ff ffbc 	bl	801204c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80120d4:	4b13      	ldr	r3, [pc, #76]	; (8012124 <tcp_netif_ip_addr_changed+0x74>)
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	4619      	mov	r1, r3
 80120da:	6878      	ldr	r0, [r7, #4]
 80120dc:	f7ff ffb6 	bl	801204c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80120e0:	683b      	ldr	r3, [r7, #0]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d017      	beq.n	8012116 <tcp_netif_ip_addr_changed+0x66>
 80120e6:	683b      	ldr	r3, [r7, #0]
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d013      	beq.n	8012116 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80120ee:	4b0e      	ldr	r3, [pc, #56]	; (8012128 <tcp_netif_ip_addr_changed+0x78>)
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	60fb      	str	r3, [r7, #12]
 80120f4:	e00c      	b.n	8012110 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	681a      	ldr	r2, [r3, #0]
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	429a      	cmp	r2, r3
 8012100:	d103      	bne.n	801210a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012102:	683b      	ldr	r3, [r7, #0]
 8012104:	681a      	ldr	r2, [r3, #0]
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	68db      	ldr	r3, [r3, #12]
 801210e:	60fb      	str	r3, [r7, #12]
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d1ef      	bne.n	80120f6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8012116:	bf00      	nop
 8012118:	3710      	adds	r7, #16
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}
 801211e:	bf00      	nop
 8012120:	200073a8 	.word	0x200073a8
 8012124:	200073a0 	.word	0x200073a0
 8012128:	200073a4 	.word	0x200073a4

0801212c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b082      	sub	sp, #8
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012138:	2b00      	cmp	r3, #0
 801213a:	d007      	beq.n	801214c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012140:	4618      	mov	r0, r3
 8012142:	f7ff fc13 	bl	801196c <tcp_segs_free>
    pcb->ooseq = NULL;
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	2200      	movs	r2, #0
 801214a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801214c:	bf00      	nop
 801214e:	3708      	adds	r7, #8
 8012150:	46bd      	mov	sp, r7
 8012152:	bd80      	pop	{r7, pc}

08012154 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012154:	b590      	push	{r4, r7, lr}
 8012156:	b08d      	sub	sp, #52	; 0x34
 8012158:	af04      	add	r7, sp, #16
 801215a:	6078      	str	r0, [r7, #4]
 801215c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d105      	bne.n	8012170 <tcp_input+0x1c>
 8012164:	4b9c      	ldr	r3, [pc, #624]	; (80123d8 <tcp_input+0x284>)
 8012166:	2283      	movs	r2, #131	; 0x83
 8012168:	499c      	ldr	r1, [pc, #624]	; (80123dc <tcp_input+0x288>)
 801216a:	489d      	ldr	r0, [pc, #628]	; (80123e0 <tcp_input+0x28c>)
 801216c:	f00a fae0 	bl	801c730 <iprintf>

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 8012170:	4b9c      	ldr	r3, [pc, #624]	; (80123e4 <tcp_input+0x290>)
 8012172:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 8012176:	3301      	adds	r3, #1
 8012178:	b29a      	uxth	r2, r3
 801217a:	4b9a      	ldr	r3, [pc, #616]	; (80123e4 <tcp_input+0x290>)
 801217c:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);
 8012180:	4b98      	ldr	r3, [pc, #608]	; (80123e4 <tcp_input+0x290>)
 8012182:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8012186:	3301      	adds	r3, #1
 8012188:	4a96      	ldr	r2, [pc, #600]	; (80123e4 <tcp_input+0x290>)
 801218a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  tcphdr = (struct tcp_hdr *)p->payload;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	685b      	ldr	r3, [r3, #4]
 8012192:	4a95      	ldr	r2, [pc, #596]	; (80123e8 <tcp_input+0x294>)
 8012194:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	895b      	ldrh	r3, [r3, #10]
 801219a:	2b13      	cmp	r3, #19
 801219c:	d809      	bhi.n	80121b2 <tcp_input+0x5e>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 801219e:	4b91      	ldr	r3, [pc, #580]	; (80123e4 <tcp_input+0x290>)
 80121a0:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 80121a4:	3301      	adds	r3, #1
 80121a6:	b29a      	uxth	r2, r3
 80121a8:	4b8e      	ldr	r3, [pc, #568]	; (80123e4 <tcp_input+0x290>)
 80121aa:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 80121ae:	f000 bc23 	b.w	80129f8 <tcp_input+0x8a4>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80121b2:	4b8e      	ldr	r3, [pc, #568]	; (80123ec <tcp_input+0x298>)
 80121b4:	695b      	ldr	r3, [r3, #20]
 80121b6:	4a8d      	ldr	r2, [pc, #564]	; (80123ec <tcp_input+0x298>)
 80121b8:	6812      	ldr	r2, [r2, #0]
 80121ba:	4611      	mov	r1, r2
 80121bc:	4618      	mov	r0, r3
 80121be:	f008 f9fd 	bl	801a5bc <ip4_addr_isbroadcast_u32>
 80121c2:	4603      	mov	r3, r0
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d105      	bne.n	80121d4 <tcp_input+0x80>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80121c8:	4b88      	ldr	r3, [pc, #544]	; (80123ec <tcp_input+0x298>)
 80121ca:	695b      	ldr	r3, [r3, #20]
 80121cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80121d0:	2be0      	cmp	r3, #224	; 0xe0
 80121d2:	d109      	bne.n	80121e8 <tcp_input+0x94>
    TCP_STATS_INC(tcp.proterr);
 80121d4:	4b83      	ldr	r3, [pc, #524]	; (80123e4 <tcp_input+0x290>)
 80121d6:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80121da:	3301      	adds	r3, #1
 80121dc:	b29a      	uxth	r2, r3
 80121de:	4b81      	ldr	r3, [pc, #516]	; (80123e4 <tcp_input+0x290>)
 80121e0:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    goto dropped;
 80121e4:	f000 bc08 	b.w	80129f8 <tcp_input+0x8a4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80121e8:	4b7f      	ldr	r3, [pc, #508]	; (80123e8 <tcp_input+0x294>)
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	899b      	ldrh	r3, [r3, #12]
 80121ee:	b29b      	uxth	r3, r3
 80121f0:	4618      	mov	r0, r3
 80121f2:	f7fc f937 	bl	800e464 <lwip_htons>
 80121f6:	4603      	mov	r3, r0
 80121f8:	0b1b      	lsrs	r3, r3, #12
 80121fa:	b29b      	uxth	r3, r3
 80121fc:	b2db      	uxtb	r3, r3
 80121fe:	009b      	lsls	r3, r3, #2
 8012200:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012202:	7cbb      	ldrb	r3, [r7, #18]
 8012204:	2b13      	cmp	r3, #19
 8012206:	d905      	bls.n	8012214 <tcp_input+0xc0>
 8012208:	7cbb      	ldrb	r3, [r7, #18]
 801220a:	b29a      	uxth	r2, r3
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	891b      	ldrh	r3, [r3, #8]
 8012210:	429a      	cmp	r2, r3
 8012212:	d908      	bls.n	8012226 <tcp_input+0xd2>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 8012214:	4b73      	ldr	r3, [pc, #460]	; (80123e4 <tcp_input+0x290>)
 8012216:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 801221a:	3301      	adds	r3, #1
 801221c:	b29a      	uxth	r2, r3
 801221e:	4b71      	ldr	r3, [pc, #452]	; (80123e4 <tcp_input+0x290>)
 8012220:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    goto dropped;
 8012224:	e3e8      	b.n	80129f8 <tcp_input+0x8a4>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012226:	7cbb      	ldrb	r3, [r7, #18]
 8012228:	b29b      	uxth	r3, r3
 801222a:	3b14      	subs	r3, #20
 801222c:	b29a      	uxth	r2, r3
 801222e:	4b70      	ldr	r3, [pc, #448]	; (80123f0 <tcp_input+0x29c>)
 8012230:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012232:	4b70      	ldr	r3, [pc, #448]	; (80123f4 <tcp_input+0x2a0>)
 8012234:	2200      	movs	r2, #0
 8012236:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	895a      	ldrh	r2, [r3, #10]
 801223c:	7cbb      	ldrb	r3, [r7, #18]
 801223e:	b29b      	uxth	r3, r3
 8012240:	429a      	cmp	r2, r3
 8012242:	d309      	bcc.n	8012258 <tcp_input+0x104>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8012244:	4b6a      	ldr	r3, [pc, #424]	; (80123f0 <tcp_input+0x29c>)
 8012246:	881a      	ldrh	r2, [r3, #0]
 8012248:	4b6b      	ldr	r3, [pc, #428]	; (80123f8 <tcp_input+0x2a4>)
 801224a:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801224c:	7cbb      	ldrb	r3, [r7, #18]
 801224e:	4619      	mov	r1, r3
 8012250:	6878      	ldr	r0, [r7, #4]
 8012252:	f7fd ff17 	bl	8010084 <pbuf_remove_header>
 8012256:	e056      	b.n	8012306 <tcp_input+0x1b2>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d105      	bne.n	801226c <tcp_input+0x118>
 8012260:	4b5d      	ldr	r3, [pc, #372]	; (80123d8 <tcp_input+0x284>)
 8012262:	22c2      	movs	r2, #194	; 0xc2
 8012264:	4965      	ldr	r1, [pc, #404]	; (80123fc <tcp_input+0x2a8>)
 8012266:	485e      	ldr	r0, [pc, #376]	; (80123e0 <tcp_input+0x28c>)
 8012268:	f00a fa62 	bl	801c730 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801226c:	2114      	movs	r1, #20
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	f7fd ff08 	bl	8010084 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	895a      	ldrh	r2, [r3, #10]
 8012278:	4b5f      	ldr	r3, [pc, #380]	; (80123f8 <tcp_input+0x2a4>)
 801227a:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801227c:	4b5c      	ldr	r3, [pc, #368]	; (80123f0 <tcp_input+0x29c>)
 801227e:	881a      	ldrh	r2, [r3, #0]
 8012280:	4b5d      	ldr	r3, [pc, #372]	; (80123f8 <tcp_input+0x2a4>)
 8012282:	881b      	ldrh	r3, [r3, #0]
 8012284:	1ad3      	subs	r3, r2, r3
 8012286:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012288:	4b5b      	ldr	r3, [pc, #364]	; (80123f8 <tcp_input+0x2a4>)
 801228a:	881b      	ldrh	r3, [r3, #0]
 801228c:	4619      	mov	r1, r3
 801228e:	6878      	ldr	r0, [r7, #4]
 8012290:	f7fd fef8 	bl	8010084 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	895b      	ldrh	r3, [r3, #10]
 801229a:	8a3a      	ldrh	r2, [r7, #16]
 801229c:	429a      	cmp	r2, r3
 801229e:	d908      	bls.n	80122b2 <tcp_input+0x15e>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 80122a0:	4b50      	ldr	r3, [pc, #320]	; (80123e4 <tcp_input+0x290>)
 80122a2:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 80122a6:	3301      	adds	r3, #1
 80122a8:	b29a      	uxth	r2, r3
 80122aa:	4b4e      	ldr	r3, [pc, #312]	; (80123e4 <tcp_input+0x290>)
 80122ac:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 80122b0:	e3a2      	b.n	80129f8 <tcp_input+0x8a4>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	685b      	ldr	r3, [r3, #4]
 80122b8:	4a4e      	ldr	r2, [pc, #312]	; (80123f4 <tcp_input+0x2a0>)
 80122ba:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	8a3a      	ldrh	r2, [r7, #16]
 80122c2:	4611      	mov	r1, r2
 80122c4:	4618      	mov	r0, r3
 80122c6:	f7fd fedd 	bl	8010084 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	891a      	ldrh	r2, [r3, #8]
 80122ce:	8a3b      	ldrh	r3, [r7, #16]
 80122d0:	1ad3      	subs	r3, r2, r3
 80122d2:	b29a      	uxth	r2, r3
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	895b      	ldrh	r3, [r3, #10]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d005      	beq.n	80122ec <tcp_input+0x198>
 80122e0:	4b3d      	ldr	r3, [pc, #244]	; (80123d8 <tcp_input+0x284>)
 80122e2:	22df      	movs	r2, #223	; 0xdf
 80122e4:	4946      	ldr	r1, [pc, #280]	; (8012400 <tcp_input+0x2ac>)
 80122e6:	483e      	ldr	r0, [pc, #248]	; (80123e0 <tcp_input+0x28c>)
 80122e8:	f00a fa22 	bl	801c730 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	891a      	ldrh	r2, [r3, #8]
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	891b      	ldrh	r3, [r3, #8]
 80122f6:	429a      	cmp	r2, r3
 80122f8:	d005      	beq.n	8012306 <tcp_input+0x1b2>
 80122fa:	4b37      	ldr	r3, [pc, #220]	; (80123d8 <tcp_input+0x284>)
 80122fc:	22e0      	movs	r2, #224	; 0xe0
 80122fe:	4941      	ldr	r1, [pc, #260]	; (8012404 <tcp_input+0x2b0>)
 8012300:	4837      	ldr	r0, [pc, #220]	; (80123e0 <tcp_input+0x28c>)
 8012302:	f00a fa15 	bl	801c730 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012306:	4b38      	ldr	r3, [pc, #224]	; (80123e8 <tcp_input+0x294>)
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	881b      	ldrh	r3, [r3, #0]
 801230c:	b29b      	uxth	r3, r3
 801230e:	4a36      	ldr	r2, [pc, #216]	; (80123e8 <tcp_input+0x294>)
 8012310:	6814      	ldr	r4, [r2, #0]
 8012312:	4618      	mov	r0, r3
 8012314:	f7fc f8a6 	bl	800e464 <lwip_htons>
 8012318:	4603      	mov	r3, r0
 801231a:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801231c:	4b32      	ldr	r3, [pc, #200]	; (80123e8 <tcp_input+0x294>)
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	885b      	ldrh	r3, [r3, #2]
 8012322:	b29b      	uxth	r3, r3
 8012324:	4a30      	ldr	r2, [pc, #192]	; (80123e8 <tcp_input+0x294>)
 8012326:	6814      	ldr	r4, [r2, #0]
 8012328:	4618      	mov	r0, r3
 801232a:	f7fc f89b 	bl	800e464 <lwip_htons>
 801232e:	4603      	mov	r3, r0
 8012330:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012332:	4b2d      	ldr	r3, [pc, #180]	; (80123e8 <tcp_input+0x294>)
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	685b      	ldr	r3, [r3, #4]
 8012338:	4a2b      	ldr	r2, [pc, #172]	; (80123e8 <tcp_input+0x294>)
 801233a:	6814      	ldr	r4, [r2, #0]
 801233c:	4618      	mov	r0, r3
 801233e:	f7fc f8a6 	bl	800e48e <lwip_htonl>
 8012342:	4603      	mov	r3, r0
 8012344:	6063      	str	r3, [r4, #4]
 8012346:	6863      	ldr	r3, [r4, #4]
 8012348:	4a2f      	ldr	r2, [pc, #188]	; (8012408 <tcp_input+0x2b4>)
 801234a:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801234c:	4b26      	ldr	r3, [pc, #152]	; (80123e8 <tcp_input+0x294>)
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	689b      	ldr	r3, [r3, #8]
 8012352:	4a25      	ldr	r2, [pc, #148]	; (80123e8 <tcp_input+0x294>)
 8012354:	6814      	ldr	r4, [r2, #0]
 8012356:	4618      	mov	r0, r3
 8012358:	f7fc f899 	bl	800e48e <lwip_htonl>
 801235c:	4603      	mov	r3, r0
 801235e:	60a3      	str	r3, [r4, #8]
 8012360:	68a3      	ldr	r3, [r4, #8]
 8012362:	4a2a      	ldr	r2, [pc, #168]	; (801240c <tcp_input+0x2b8>)
 8012364:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012366:	4b20      	ldr	r3, [pc, #128]	; (80123e8 <tcp_input+0x294>)
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	89db      	ldrh	r3, [r3, #14]
 801236c:	b29b      	uxth	r3, r3
 801236e:	4a1e      	ldr	r2, [pc, #120]	; (80123e8 <tcp_input+0x294>)
 8012370:	6814      	ldr	r4, [r2, #0]
 8012372:	4618      	mov	r0, r3
 8012374:	f7fc f876 	bl	800e464 <lwip_htons>
 8012378:	4603      	mov	r3, r0
 801237a:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801237c:	4b1a      	ldr	r3, [pc, #104]	; (80123e8 <tcp_input+0x294>)
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	899b      	ldrh	r3, [r3, #12]
 8012382:	b29b      	uxth	r3, r3
 8012384:	4618      	mov	r0, r3
 8012386:	f7fc f86d 	bl	800e464 <lwip_htons>
 801238a:	4603      	mov	r3, r0
 801238c:	b2db      	uxtb	r3, r3
 801238e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012392:	b2da      	uxtb	r2, r3
 8012394:	4b1e      	ldr	r3, [pc, #120]	; (8012410 <tcp_input+0x2bc>)
 8012396:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	891a      	ldrh	r2, [r3, #8]
 801239c:	4b1d      	ldr	r3, [pc, #116]	; (8012414 <tcp_input+0x2c0>)
 801239e:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80123a0:	4b1b      	ldr	r3, [pc, #108]	; (8012410 <tcp_input+0x2bc>)
 80123a2:	781b      	ldrb	r3, [r3, #0]
 80123a4:	f003 0303 	and.w	r3, r3, #3
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d035      	beq.n	8012418 <tcp_input+0x2c4>
    tcplen++;
 80123ac:	4b19      	ldr	r3, [pc, #100]	; (8012414 <tcp_input+0x2c0>)
 80123ae:	881b      	ldrh	r3, [r3, #0]
 80123b0:	3301      	adds	r3, #1
 80123b2:	b29a      	uxth	r2, r3
 80123b4:	4b17      	ldr	r3, [pc, #92]	; (8012414 <tcp_input+0x2c0>)
 80123b6:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	891a      	ldrh	r2, [r3, #8]
 80123bc:	4b15      	ldr	r3, [pc, #84]	; (8012414 <tcp_input+0x2c0>)
 80123be:	881b      	ldrh	r3, [r3, #0]
 80123c0:	429a      	cmp	r2, r3
 80123c2:	d929      	bls.n	8012418 <tcp_input+0x2c4>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 80123c4:	4b07      	ldr	r3, [pc, #28]	; (80123e4 <tcp_input+0x290>)
 80123c6:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 80123ca:	3301      	adds	r3, #1
 80123cc:	b29a      	uxth	r2, r3
 80123ce:	4b05      	ldr	r3, [pc, #20]	; (80123e4 <tcp_input+0x290>)
 80123d0:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
      goto dropped;
 80123d4:	e310      	b.n	80129f8 <tcp_input+0x8a4>
 80123d6:	bf00      	nop
 80123d8:	08021894 	.word	0x08021894
 80123dc:	080218c8 	.word	0x080218c8
 80123e0:	080218e0 	.word	0x080218e0
 80123e4:	20007204 	.word	0x20007204
 80123e8:	200073c4 	.word	0x200073c4
 80123ec:	20003be8 	.word	0x20003be8
 80123f0:	200073c8 	.word	0x200073c8
 80123f4:	200073cc 	.word	0x200073cc
 80123f8:	200073ca 	.word	0x200073ca
 80123fc:	08021908 	.word	0x08021908
 8012400:	08021918 	.word	0x08021918
 8012404:	08021924 	.word	0x08021924
 8012408:	200073d4 	.word	0x200073d4
 801240c:	200073d8 	.word	0x200073d8
 8012410:	200073e0 	.word	0x200073e0
 8012414:	200073de 	.word	0x200073de
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012418:	2300      	movs	r3, #0
 801241a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801241c:	4b84      	ldr	r3, [pc, #528]	; (8012630 <tcp_input+0x4dc>)
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	61fb      	str	r3, [r7, #28]
 8012422:	e07f      	b.n	8012524 <tcp_input+0x3d0>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012424:	69fb      	ldr	r3, [r7, #28]
 8012426:	7d1b      	ldrb	r3, [r3, #20]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d105      	bne.n	8012438 <tcp_input+0x2e4>
 801242c:	4b81      	ldr	r3, [pc, #516]	; (8012634 <tcp_input+0x4e0>)
 801242e:	22fb      	movs	r2, #251	; 0xfb
 8012430:	4981      	ldr	r1, [pc, #516]	; (8012638 <tcp_input+0x4e4>)
 8012432:	4882      	ldr	r0, [pc, #520]	; (801263c <tcp_input+0x4e8>)
 8012434:	f00a f97c 	bl	801c730 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012438:	69fb      	ldr	r3, [r7, #28]
 801243a:	7d1b      	ldrb	r3, [r3, #20]
 801243c:	2b0a      	cmp	r3, #10
 801243e:	d105      	bne.n	801244c <tcp_input+0x2f8>
 8012440:	4b7c      	ldr	r3, [pc, #496]	; (8012634 <tcp_input+0x4e0>)
 8012442:	22fc      	movs	r2, #252	; 0xfc
 8012444:	497e      	ldr	r1, [pc, #504]	; (8012640 <tcp_input+0x4ec>)
 8012446:	487d      	ldr	r0, [pc, #500]	; (801263c <tcp_input+0x4e8>)
 8012448:	f00a f972 	bl	801c730 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801244c:	69fb      	ldr	r3, [r7, #28]
 801244e:	7d1b      	ldrb	r3, [r3, #20]
 8012450:	2b01      	cmp	r3, #1
 8012452:	d105      	bne.n	8012460 <tcp_input+0x30c>
 8012454:	4b77      	ldr	r3, [pc, #476]	; (8012634 <tcp_input+0x4e0>)
 8012456:	22fd      	movs	r2, #253	; 0xfd
 8012458:	497a      	ldr	r1, [pc, #488]	; (8012644 <tcp_input+0x4f0>)
 801245a:	4878      	ldr	r0, [pc, #480]	; (801263c <tcp_input+0x4e8>)
 801245c:	f00a f968 	bl	801c730 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012460:	69fb      	ldr	r3, [r7, #28]
 8012462:	7a1b      	ldrb	r3, [r3, #8]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d00c      	beq.n	8012482 <tcp_input+0x32e>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012468:	69fb      	ldr	r3, [r7, #28]
 801246a:	7a1a      	ldrb	r2, [r3, #8]
 801246c:	4b76      	ldr	r3, [pc, #472]	; (8012648 <tcp_input+0x4f4>)
 801246e:	685b      	ldr	r3, [r3, #4]
 8012470:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012474:	3301      	adds	r3, #1
 8012476:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012478:	429a      	cmp	r2, r3
 801247a:	d002      	beq.n	8012482 <tcp_input+0x32e>
      prev = pcb;
 801247c:	69fb      	ldr	r3, [r7, #28]
 801247e:	61bb      	str	r3, [r7, #24]
      continue;
 8012480:	e04d      	b.n	801251e <tcp_input+0x3ca>
    }

    if (pcb->remote_port == tcphdr->src &&
 8012482:	69fb      	ldr	r3, [r7, #28]
 8012484:	8b1a      	ldrh	r2, [r3, #24]
 8012486:	4b71      	ldr	r3, [pc, #452]	; (801264c <tcp_input+0x4f8>)
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	881b      	ldrh	r3, [r3, #0]
 801248c:	b29b      	uxth	r3, r3
 801248e:	429a      	cmp	r2, r3
 8012490:	d143      	bne.n	801251a <tcp_input+0x3c6>
        pcb->local_port == tcphdr->dest &&
 8012492:	69fb      	ldr	r3, [r7, #28]
 8012494:	8ada      	ldrh	r2, [r3, #22]
 8012496:	4b6d      	ldr	r3, [pc, #436]	; (801264c <tcp_input+0x4f8>)
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	885b      	ldrh	r3, [r3, #2]
 801249c:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801249e:	429a      	cmp	r2, r3
 80124a0:	d13b      	bne.n	801251a <tcp_input+0x3c6>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80124a2:	69fb      	ldr	r3, [r7, #28]
 80124a4:	685a      	ldr	r2, [r3, #4]
 80124a6:	4b68      	ldr	r3, [pc, #416]	; (8012648 <tcp_input+0x4f4>)
 80124a8:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80124aa:	429a      	cmp	r2, r3
 80124ac:	d135      	bne.n	801251a <tcp_input+0x3c6>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80124ae:	69fb      	ldr	r3, [r7, #28]
 80124b0:	681a      	ldr	r2, [r3, #0]
 80124b2:	4b65      	ldr	r3, [pc, #404]	; (8012648 <tcp_input+0x4f4>)
 80124b4:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80124b6:	429a      	cmp	r2, r3
 80124b8:	d12f      	bne.n	801251a <tcp_input+0x3c6>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80124ba:	69fb      	ldr	r3, [r7, #28]
 80124bc:	68db      	ldr	r3, [r3, #12]
 80124be:	69fa      	ldr	r2, [r7, #28]
 80124c0:	429a      	cmp	r2, r3
 80124c2:	d106      	bne.n	80124d2 <tcp_input+0x37e>
 80124c4:	4b5b      	ldr	r3, [pc, #364]	; (8012634 <tcp_input+0x4e0>)
 80124c6:	f240 120d 	movw	r2, #269	; 0x10d
 80124ca:	4961      	ldr	r1, [pc, #388]	; (8012650 <tcp_input+0x4fc>)
 80124cc:	485b      	ldr	r0, [pc, #364]	; (801263c <tcp_input+0x4e8>)
 80124ce:	f00a f92f 	bl	801c730 <iprintf>
      if (prev != NULL) {
 80124d2:	69bb      	ldr	r3, [r7, #24]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d00b      	beq.n	80124f0 <tcp_input+0x39c>
        prev->next = pcb->next;
 80124d8:	69fb      	ldr	r3, [r7, #28]
 80124da:	68da      	ldr	r2, [r3, #12]
 80124dc:	69bb      	ldr	r3, [r7, #24]
 80124de:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80124e0:	4b53      	ldr	r3, [pc, #332]	; (8012630 <tcp_input+0x4dc>)
 80124e2:	681a      	ldr	r2, [r3, #0]
 80124e4:	69fb      	ldr	r3, [r7, #28]
 80124e6:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80124e8:	4a51      	ldr	r2, [pc, #324]	; (8012630 <tcp_input+0x4dc>)
 80124ea:	69fb      	ldr	r3, [r7, #28]
 80124ec:	6013      	str	r3, [r2, #0]
 80124ee:	e007      	b.n	8012500 <tcp_input+0x3ac>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 80124f0:	4b58      	ldr	r3, [pc, #352]	; (8012654 <tcp_input+0x500>)
 80124f2:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 80124f6:	3301      	adds	r3, #1
 80124f8:	b29a      	uxth	r2, r3
 80124fa:	4b56      	ldr	r3, [pc, #344]	; (8012654 <tcp_input+0x500>)
 80124fc:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012500:	69fb      	ldr	r3, [r7, #28]
 8012502:	68db      	ldr	r3, [r3, #12]
 8012504:	69fa      	ldr	r2, [r7, #28]
 8012506:	429a      	cmp	r2, r3
 8012508:	d111      	bne.n	801252e <tcp_input+0x3da>
 801250a:	4b4a      	ldr	r3, [pc, #296]	; (8012634 <tcp_input+0x4e0>)
 801250c:	f240 1215 	movw	r2, #277	; 0x115
 8012510:	4951      	ldr	r1, [pc, #324]	; (8012658 <tcp_input+0x504>)
 8012512:	484a      	ldr	r0, [pc, #296]	; (801263c <tcp_input+0x4e8>)
 8012514:	f00a f90c 	bl	801c730 <iprintf>
      break;
 8012518:	e009      	b.n	801252e <tcp_input+0x3da>
    }
    prev = pcb;
 801251a:	69fb      	ldr	r3, [r7, #28]
 801251c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801251e:	69fb      	ldr	r3, [r7, #28]
 8012520:	68db      	ldr	r3, [r3, #12]
 8012522:	61fb      	str	r3, [r7, #28]
 8012524:	69fb      	ldr	r3, [r7, #28]
 8012526:	2b00      	cmp	r3, #0
 8012528:	f47f af7c 	bne.w	8012424 <tcp_input+0x2d0>
 801252c:	e000      	b.n	8012530 <tcp_input+0x3dc>
      break;
 801252e:	bf00      	nop
  }

  if (pcb == NULL) {
 8012530:	69fb      	ldr	r3, [r7, #28]
 8012532:	2b00      	cmp	r3, #0
 8012534:	f040 80ba 	bne.w	80126ac <tcp_input+0x558>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012538:	4b48      	ldr	r3, [pc, #288]	; (801265c <tcp_input+0x508>)
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	61fb      	str	r3, [r7, #28]
 801253e:	e03f      	b.n	80125c0 <tcp_input+0x46c>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012540:	69fb      	ldr	r3, [r7, #28]
 8012542:	7d1b      	ldrb	r3, [r3, #20]
 8012544:	2b0a      	cmp	r3, #10
 8012546:	d006      	beq.n	8012556 <tcp_input+0x402>
 8012548:	4b3a      	ldr	r3, [pc, #232]	; (8012634 <tcp_input+0x4e0>)
 801254a:	f240 121f 	movw	r2, #287	; 0x11f
 801254e:	4944      	ldr	r1, [pc, #272]	; (8012660 <tcp_input+0x50c>)
 8012550:	483a      	ldr	r0, [pc, #232]	; (801263c <tcp_input+0x4e8>)
 8012552:	f00a f8ed 	bl	801c730 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012556:	69fb      	ldr	r3, [r7, #28]
 8012558:	7a1b      	ldrb	r3, [r3, #8]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d009      	beq.n	8012572 <tcp_input+0x41e>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801255e:	69fb      	ldr	r3, [r7, #28]
 8012560:	7a1a      	ldrb	r2, [r3, #8]
 8012562:	4b39      	ldr	r3, [pc, #228]	; (8012648 <tcp_input+0x4f4>)
 8012564:	685b      	ldr	r3, [r3, #4]
 8012566:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801256a:	3301      	adds	r3, #1
 801256c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801256e:	429a      	cmp	r2, r3
 8012570:	d122      	bne.n	80125b8 <tcp_input+0x464>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8012572:	69fb      	ldr	r3, [r7, #28]
 8012574:	8b1a      	ldrh	r2, [r3, #24]
 8012576:	4b35      	ldr	r3, [pc, #212]	; (801264c <tcp_input+0x4f8>)
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	881b      	ldrh	r3, [r3, #0]
 801257c:	b29b      	uxth	r3, r3
 801257e:	429a      	cmp	r2, r3
 8012580:	d11b      	bne.n	80125ba <tcp_input+0x466>
          pcb->local_port == tcphdr->dest &&
 8012582:	69fb      	ldr	r3, [r7, #28]
 8012584:	8ada      	ldrh	r2, [r3, #22]
 8012586:	4b31      	ldr	r3, [pc, #196]	; (801264c <tcp_input+0x4f8>)
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	885b      	ldrh	r3, [r3, #2]
 801258c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801258e:	429a      	cmp	r2, r3
 8012590:	d113      	bne.n	80125ba <tcp_input+0x466>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012592:	69fb      	ldr	r3, [r7, #28]
 8012594:	685a      	ldr	r2, [r3, #4]
 8012596:	4b2c      	ldr	r3, [pc, #176]	; (8012648 <tcp_input+0x4f4>)
 8012598:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801259a:	429a      	cmp	r2, r3
 801259c:	d10d      	bne.n	80125ba <tcp_input+0x466>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801259e:	69fb      	ldr	r3, [r7, #28]
 80125a0:	681a      	ldr	r2, [r3, #0]
 80125a2:	4b29      	ldr	r3, [pc, #164]	; (8012648 <tcp_input+0x4f4>)
 80125a4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80125a6:	429a      	cmp	r2, r3
 80125a8:	d107      	bne.n	80125ba <tcp_input+0x466>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80125aa:	69f8      	ldr	r0, [r7, #28]
 80125ac:	f000 fb9e 	bl	8012cec <tcp_timewait_input>
        }
        pbuf_free(p);
 80125b0:	6878      	ldr	r0, [r7, #4]
 80125b2:	f7fd fded 	bl	8010190 <pbuf_free>
        return;
 80125b6:	e233      	b.n	8012a20 <tcp_input+0x8cc>
        continue;
 80125b8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80125ba:	69fb      	ldr	r3, [r7, #28]
 80125bc:	68db      	ldr	r3, [r3, #12]
 80125be:	61fb      	str	r3, [r7, #28]
 80125c0:	69fb      	ldr	r3, [r7, #28]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d1bc      	bne.n	8012540 <tcp_input+0x3ec>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80125c6:	2300      	movs	r3, #0
 80125c8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80125ca:	4b26      	ldr	r3, [pc, #152]	; (8012664 <tcp_input+0x510>)
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	617b      	str	r3, [r7, #20]
 80125d0:	e02a      	b.n	8012628 <tcp_input+0x4d4>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80125d2:	697b      	ldr	r3, [r7, #20]
 80125d4:	7a1b      	ldrb	r3, [r3, #8]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d00c      	beq.n	80125f4 <tcp_input+0x4a0>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80125da:	697b      	ldr	r3, [r7, #20]
 80125dc:	7a1a      	ldrb	r2, [r3, #8]
 80125de:	4b1a      	ldr	r3, [pc, #104]	; (8012648 <tcp_input+0x4f4>)
 80125e0:	685b      	ldr	r3, [r3, #4]
 80125e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80125e6:	3301      	adds	r3, #1
 80125e8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80125ea:	429a      	cmp	r2, r3
 80125ec:	d002      	beq.n	80125f4 <tcp_input+0x4a0>
        prev = (struct tcp_pcb *)lpcb;
 80125ee:	697b      	ldr	r3, [r7, #20]
 80125f0:	61bb      	str	r3, [r7, #24]
        continue;
 80125f2:	e016      	b.n	8012622 <tcp_input+0x4ce>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80125f4:	697b      	ldr	r3, [r7, #20]
 80125f6:	8ada      	ldrh	r2, [r3, #22]
 80125f8:	4b14      	ldr	r3, [pc, #80]	; (801264c <tcp_input+0x4f8>)
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	885b      	ldrh	r3, [r3, #2]
 80125fe:	b29b      	uxth	r3, r3
 8012600:	429a      	cmp	r2, r3
 8012602:	d10c      	bne.n	801261e <tcp_input+0x4ca>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012604:	697b      	ldr	r3, [r7, #20]
 8012606:	681a      	ldr	r2, [r3, #0]
 8012608:	4b0f      	ldr	r3, [pc, #60]	; (8012648 <tcp_input+0x4f4>)
 801260a:	695b      	ldr	r3, [r3, #20]
 801260c:	429a      	cmp	r2, r3
 801260e:	d02b      	beq.n	8012668 <tcp_input+0x514>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012610:	697b      	ldr	r3, [r7, #20]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d029      	beq.n	801266a <tcp_input+0x516>
 8012616:	697b      	ldr	r3, [r7, #20]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d025      	beq.n	801266a <tcp_input+0x516>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801261e:	697b      	ldr	r3, [r7, #20]
 8012620:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012622:	697b      	ldr	r3, [r7, #20]
 8012624:	68db      	ldr	r3, [r3, #12]
 8012626:	617b      	str	r3, [r7, #20]
 8012628:	697b      	ldr	r3, [r7, #20]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d1d1      	bne.n	80125d2 <tcp_input+0x47e>
 801262e:	e01c      	b.n	801266a <tcp_input+0x516>
 8012630:	200073a8 	.word	0x200073a8
 8012634:	08021894 	.word	0x08021894
 8012638:	08021944 	.word	0x08021944
 801263c:	080218e0 	.word	0x080218e0
 8012640:	0802196c 	.word	0x0802196c
 8012644:	08021998 	.word	0x08021998
 8012648:	20003be8 	.word	0x20003be8
 801264c:	200073c4 	.word	0x200073c4
 8012650:	080219c0 	.word	0x080219c0
 8012654:	20007204 	.word	0x20007204
 8012658:	080219ec 	.word	0x080219ec
 801265c:	200073ac 	.word	0x200073ac
 8012660:	08021a18 	.word	0x08021a18
 8012664:	200073a4 	.word	0x200073a4
            break;
 8012668:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801266a:	697b      	ldr	r3, [r7, #20]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d01d      	beq.n	80126ac <tcp_input+0x558>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012670:	69bb      	ldr	r3, [r7, #24]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d00b      	beq.n	801268e <tcp_input+0x53a>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012676:	697b      	ldr	r3, [r7, #20]
 8012678:	68da      	ldr	r2, [r3, #12]
 801267a:	69bb      	ldr	r3, [r7, #24]
 801267c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801267e:	4b9a      	ldr	r3, [pc, #616]	; (80128e8 <tcp_input+0x794>)
 8012680:	681a      	ldr	r2, [r3, #0]
 8012682:	697b      	ldr	r3, [r7, #20]
 8012684:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012686:	4a98      	ldr	r2, [pc, #608]	; (80128e8 <tcp_input+0x794>)
 8012688:	697b      	ldr	r3, [r7, #20]
 801268a:	6013      	str	r3, [r2, #0]
 801268c:	e007      	b.n	801269e <tcp_input+0x54a>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 801268e:	4b97      	ldr	r3, [pc, #604]	; (80128ec <tcp_input+0x798>)
 8012690:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8012694:	3301      	adds	r3, #1
 8012696:	b29a      	uxth	r2, r3
 8012698:	4b94      	ldr	r3, [pc, #592]	; (80128ec <tcp_input+0x798>)
 801269a:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801269e:	6978      	ldr	r0, [r7, #20]
 80126a0:	f000 fa16 	bl	8012ad0 <tcp_listen_input>
      }
      pbuf_free(p);
 80126a4:	6878      	ldr	r0, [r7, #4]
 80126a6:	f7fd fd73 	bl	8010190 <pbuf_free>
      return;
 80126aa:	e1b9      	b.n	8012a20 <tcp_input+0x8cc>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80126ac:	69fb      	ldr	r3, [r7, #28]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	f000 8168 	beq.w	8012984 <tcp_input+0x830>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80126b4:	4b8e      	ldr	r3, [pc, #568]	; (80128f0 <tcp_input+0x79c>)
 80126b6:	2200      	movs	r2, #0
 80126b8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	891a      	ldrh	r2, [r3, #8]
 80126be:	4b8c      	ldr	r3, [pc, #560]	; (80128f0 <tcp_input+0x79c>)
 80126c0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80126c2:	4a8b      	ldr	r2, [pc, #556]	; (80128f0 <tcp_input+0x79c>)
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80126c8:	4b8a      	ldr	r3, [pc, #552]	; (80128f4 <tcp_input+0x7a0>)
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	4a88      	ldr	r2, [pc, #544]	; (80128f0 <tcp_input+0x79c>)
 80126ce:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80126d0:	4b89      	ldr	r3, [pc, #548]	; (80128f8 <tcp_input+0x7a4>)
 80126d2:	2200      	movs	r2, #0
 80126d4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80126d6:	4b89      	ldr	r3, [pc, #548]	; (80128fc <tcp_input+0x7a8>)
 80126d8:	2200      	movs	r2, #0
 80126da:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80126dc:	4b88      	ldr	r3, [pc, #544]	; (8012900 <tcp_input+0x7ac>)
 80126de:	2200      	movs	r2, #0
 80126e0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80126e2:	4b88      	ldr	r3, [pc, #544]	; (8012904 <tcp_input+0x7b0>)
 80126e4:	781b      	ldrb	r3, [r3, #0]
 80126e6:	f003 0308 	and.w	r3, r3, #8
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d006      	beq.n	80126fc <tcp_input+0x5a8>
      p->flags |= PBUF_FLAG_PUSH;
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	7b5b      	ldrb	r3, [r3, #13]
 80126f2:	f043 0301 	orr.w	r3, r3, #1
 80126f6:	b2da      	uxtb	r2, r3
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80126fc:	69fb      	ldr	r3, [r7, #28]
 80126fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012700:	2b00      	cmp	r3, #0
 8012702:	d025      	beq.n	8012750 <tcp_input+0x5fc>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012704:	69f8      	ldr	r0, [r7, #28]
 8012706:	f7ff f8b5 	bl	8011874 <tcp_process_refused_data>
 801270a:	4603      	mov	r3, r0
 801270c:	f113 0f0d 	cmn.w	r3, #13
 8012710:	d007      	beq.n	8012722 <tcp_input+0x5ce>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012712:	69fb      	ldr	r3, [r7, #28]
 8012714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012716:	2b00      	cmp	r3, #0
 8012718:	d01a      	beq.n	8012750 <tcp_input+0x5fc>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801271a:	4b7b      	ldr	r3, [pc, #492]	; (8012908 <tcp_input+0x7b4>)
 801271c:	881b      	ldrh	r3, [r3, #0]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d016      	beq.n	8012750 <tcp_input+0x5fc>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012722:	69fb      	ldr	r3, [r7, #28]
 8012724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012726:	2b00      	cmp	r3, #0
 8012728:	d102      	bne.n	8012730 <tcp_input+0x5dc>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801272a:	69f8      	ldr	r0, [r7, #28]
 801272c:	f003 fa3c 	bl	8015ba8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 8012730:	4b6e      	ldr	r3, [pc, #440]	; (80128ec <tcp_input+0x798>)
 8012732:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 8012736:	3301      	adds	r3, #1
 8012738:	b29a      	uxth	r2, r3
 801273a:	4b6c      	ldr	r3, [pc, #432]	; (80128ec <tcp_input+0x798>)
 801273c:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
 8012740:	4b6a      	ldr	r3, [pc, #424]	; (80128ec <tcp_input+0x798>)
 8012742:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8012746:	3301      	adds	r3, #1
 8012748:	4a68      	ldr	r2, [pc, #416]	; (80128ec <tcp_input+0x798>)
 801274a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
        goto aborted;
 801274e:	e106      	b.n	801295e <tcp_input+0x80a>
      }
    }
    tcp_input_pcb = pcb;
 8012750:	4a6e      	ldr	r2, [pc, #440]	; (801290c <tcp_input+0x7b8>)
 8012752:	69fb      	ldr	r3, [r7, #28]
 8012754:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012756:	69f8      	ldr	r0, [r7, #28]
 8012758:	f000 fb42 	bl	8012de0 <tcp_process>
 801275c:	4603      	mov	r3, r0
 801275e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012760:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012764:	f113 0f0d 	cmn.w	r3, #13
 8012768:	f000 80ee 	beq.w	8012948 <tcp_input+0x7f4>
      if (recv_flags & TF_RESET) {
 801276c:	4b63      	ldr	r3, [pc, #396]	; (80128fc <tcp_input+0x7a8>)
 801276e:	781b      	ldrb	r3, [r3, #0]
 8012770:	f003 0308 	and.w	r3, r3, #8
 8012774:	2b00      	cmp	r3, #0
 8012776:	d015      	beq.n	80127a4 <tcp_input+0x650>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012778:	69fb      	ldr	r3, [r7, #28]
 801277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801277e:	2b00      	cmp	r3, #0
 8012780:	d008      	beq.n	8012794 <tcp_input+0x640>
 8012782:	69fb      	ldr	r3, [r7, #28]
 8012784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012788:	69fa      	ldr	r2, [r7, #28]
 801278a:	6912      	ldr	r2, [r2, #16]
 801278c:	f06f 010d 	mvn.w	r1, #13
 8012790:	4610      	mov	r0, r2
 8012792:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012794:	69f9      	ldr	r1, [r7, #28]
 8012796:	485e      	ldr	r0, [pc, #376]	; (8012910 <tcp_input+0x7bc>)
 8012798:	f7ff fb64 	bl	8011e64 <tcp_pcb_remove>
        tcp_free(pcb);
 801279c:	69f8      	ldr	r0, [r7, #28]
 801279e:	f7fe f909 	bl	80109b4 <tcp_free>
 80127a2:	e0dc      	b.n	801295e <tcp_input+0x80a>
      } else {
        err = ERR_OK;
 80127a4:	2300      	movs	r3, #0
 80127a6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80127a8:	4b55      	ldr	r3, [pc, #340]	; (8012900 <tcp_input+0x7ac>)
 80127aa:	881b      	ldrh	r3, [r3, #0]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d01d      	beq.n	80127ec <tcp_input+0x698>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80127b0:	4b53      	ldr	r3, [pc, #332]	; (8012900 <tcp_input+0x7ac>)
 80127b2:	881b      	ldrh	r3, [r3, #0]
 80127b4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80127b6:	69fb      	ldr	r3, [r7, #28]
 80127b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d00a      	beq.n	80127d6 <tcp_input+0x682>
 80127c0:	69fb      	ldr	r3, [r7, #28]
 80127c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80127c6:	69fa      	ldr	r2, [r7, #28]
 80127c8:	6910      	ldr	r0, [r2, #16]
 80127ca:	89fa      	ldrh	r2, [r7, #14]
 80127cc:	69f9      	ldr	r1, [r7, #28]
 80127ce:	4798      	blx	r3
 80127d0:	4603      	mov	r3, r0
 80127d2:	74fb      	strb	r3, [r7, #19]
 80127d4:	e001      	b.n	80127da <tcp_input+0x686>
 80127d6:	2300      	movs	r3, #0
 80127d8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80127da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80127de:	f113 0f0d 	cmn.w	r3, #13
 80127e2:	f000 80b3 	beq.w	801294c <tcp_input+0x7f8>
              goto aborted;
            }
          }
          recv_acked = 0;
 80127e6:	4b46      	ldr	r3, [pc, #280]	; (8012900 <tcp_input+0x7ac>)
 80127e8:	2200      	movs	r2, #0
 80127ea:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80127ec:	69f8      	ldr	r0, [r7, #28]
 80127ee:	f000 f92f 	bl	8012a50 <tcp_input_delayed_close>
 80127f2:	4603      	mov	r3, r0
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	f040 80ab 	bne.w	8012950 <tcp_input+0x7fc>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80127fa:	4b3f      	ldr	r3, [pc, #252]	; (80128f8 <tcp_input+0x7a4>)
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d041      	beq.n	8012886 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012802:	69fb      	ldr	r3, [r7, #28]
 8012804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012806:	2b00      	cmp	r3, #0
 8012808:	d006      	beq.n	8012818 <tcp_input+0x6c4>
 801280a:	4b42      	ldr	r3, [pc, #264]	; (8012914 <tcp_input+0x7c0>)
 801280c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012810:	4941      	ldr	r1, [pc, #260]	; (8012918 <tcp_input+0x7c4>)
 8012812:	4842      	ldr	r0, [pc, #264]	; (801291c <tcp_input+0x7c8>)
 8012814:	f009 ff8c 	bl	801c730 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012818:	69fb      	ldr	r3, [r7, #28]
 801281a:	8b5b      	ldrh	r3, [r3, #26]
 801281c:	f003 0310 	and.w	r3, r3, #16
 8012820:	2b00      	cmp	r3, #0
 8012822:	d008      	beq.n	8012836 <tcp_input+0x6e2>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012824:	4b34      	ldr	r3, [pc, #208]	; (80128f8 <tcp_input+0x7a4>)
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	4618      	mov	r0, r3
 801282a:	f7fd fcb1 	bl	8010190 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801282e:	69f8      	ldr	r0, [r7, #28]
 8012830:	f7fe fbc6 	bl	8010fc0 <tcp_abort>
            goto aborted;
 8012834:	e093      	b.n	801295e <tcp_input+0x80a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012836:	69fb      	ldr	r3, [r7, #28]
 8012838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801283c:	2b00      	cmp	r3, #0
 801283e:	d00c      	beq.n	801285a <tcp_input+0x706>
 8012840:	69fb      	ldr	r3, [r7, #28]
 8012842:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012846:	69fb      	ldr	r3, [r7, #28]
 8012848:	6918      	ldr	r0, [r3, #16]
 801284a:	4b2b      	ldr	r3, [pc, #172]	; (80128f8 <tcp_input+0x7a4>)
 801284c:	681a      	ldr	r2, [r3, #0]
 801284e:	2300      	movs	r3, #0
 8012850:	69f9      	ldr	r1, [r7, #28]
 8012852:	47a0      	blx	r4
 8012854:	4603      	mov	r3, r0
 8012856:	74fb      	strb	r3, [r7, #19]
 8012858:	e008      	b.n	801286c <tcp_input+0x718>
 801285a:	4b27      	ldr	r3, [pc, #156]	; (80128f8 <tcp_input+0x7a4>)
 801285c:	681a      	ldr	r2, [r3, #0]
 801285e:	2300      	movs	r3, #0
 8012860:	69f9      	ldr	r1, [r7, #28]
 8012862:	2000      	movs	r0, #0
 8012864:	f7ff f8dc 	bl	8011a20 <tcp_recv_null>
 8012868:	4603      	mov	r3, r0
 801286a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801286c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012870:	f113 0f0d 	cmn.w	r3, #13
 8012874:	d06e      	beq.n	8012954 <tcp_input+0x800>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012876:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d003      	beq.n	8012886 <tcp_input+0x732>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801287e:	4b1e      	ldr	r3, [pc, #120]	; (80128f8 <tcp_input+0x7a4>)
 8012880:	681a      	ldr	r2, [r3, #0]
 8012882:	69fb      	ldr	r3, [r7, #28]
 8012884:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012886:	4b1d      	ldr	r3, [pc, #116]	; (80128fc <tcp_input+0x7a8>)
 8012888:	781b      	ldrb	r3, [r3, #0]
 801288a:	f003 0320 	and.w	r3, r3, #32
 801288e:	2b00      	cmp	r3, #0
 8012890:	d04d      	beq.n	801292e <tcp_input+0x7da>
          if (pcb->refused_data != NULL) {
 8012892:	69fb      	ldr	r3, [r7, #28]
 8012894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012896:	2b00      	cmp	r3, #0
 8012898:	d009      	beq.n	80128ae <tcp_input+0x75a>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801289a:	69fb      	ldr	r3, [r7, #28]
 801289c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801289e:	7b5a      	ldrb	r2, [r3, #13]
 80128a0:	69fb      	ldr	r3, [r7, #28]
 80128a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80128a4:	f042 0220 	orr.w	r2, r2, #32
 80128a8:	b2d2      	uxtb	r2, r2
 80128aa:	735a      	strb	r2, [r3, #13]
 80128ac:	e03f      	b.n	801292e <tcp_input+0x7da>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80128ae:	69fb      	ldr	r3, [r7, #28]
 80128b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80128b2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80128b6:	d005      	beq.n	80128c4 <tcp_input+0x770>
              pcb->rcv_wnd++;
 80128b8:	69fb      	ldr	r3, [r7, #28]
 80128ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80128bc:	3301      	adds	r3, #1
 80128be:	b29a      	uxth	r2, r3
 80128c0:	69fb      	ldr	r3, [r7, #28]
 80128c2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80128c4:	69fb      	ldr	r3, [r7, #28]
 80128c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d028      	beq.n	8012920 <tcp_input+0x7cc>
 80128ce:	69fb      	ldr	r3, [r7, #28]
 80128d0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80128d4:	69fb      	ldr	r3, [r7, #28]
 80128d6:	6918      	ldr	r0, [r3, #16]
 80128d8:	2300      	movs	r3, #0
 80128da:	2200      	movs	r2, #0
 80128dc:	69f9      	ldr	r1, [r7, #28]
 80128de:	47a0      	blx	r4
 80128e0:	4603      	mov	r3, r0
 80128e2:	74fb      	strb	r3, [r7, #19]
 80128e4:	e01e      	b.n	8012924 <tcp_input+0x7d0>
 80128e6:	bf00      	nop
 80128e8:	200073a4 	.word	0x200073a4
 80128ec:	20007204 	.word	0x20007204
 80128f0:	200073b4 	.word	0x200073b4
 80128f4:	200073c4 	.word	0x200073c4
 80128f8:	200073e4 	.word	0x200073e4
 80128fc:	200073e1 	.word	0x200073e1
 8012900:	200073dc 	.word	0x200073dc
 8012904:	200073e0 	.word	0x200073e0
 8012908:	200073de 	.word	0x200073de
 801290c:	200073e8 	.word	0x200073e8
 8012910:	200073a8 	.word	0x200073a8
 8012914:	08021894 	.word	0x08021894
 8012918:	08021a48 	.word	0x08021a48
 801291c:	080218e0 	.word	0x080218e0
 8012920:	2300      	movs	r3, #0
 8012922:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012924:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012928:	f113 0f0d 	cmn.w	r3, #13
 801292c:	d014      	beq.n	8012958 <tcp_input+0x804>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801292e:	4b3e      	ldr	r3, [pc, #248]	; (8012a28 <tcp_input+0x8d4>)
 8012930:	2200      	movs	r2, #0
 8012932:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012934:	69f8      	ldr	r0, [r7, #28]
 8012936:	f000 f88b 	bl	8012a50 <tcp_input_delayed_close>
 801293a:	4603      	mov	r3, r0
 801293c:	2b00      	cmp	r3, #0
 801293e:	d10d      	bne.n	801295c <tcp_input+0x808>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012940:	69f8      	ldr	r0, [r7, #28]
 8012942:	f002 fafb 	bl	8014f3c <tcp_output>
 8012946:	e00a      	b.n	801295e <tcp_input+0x80a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012948:	bf00      	nop
 801294a:	e008      	b.n	801295e <tcp_input+0x80a>
              goto aborted;
 801294c:	bf00      	nop
 801294e:	e006      	b.n	801295e <tcp_input+0x80a>
          goto aborted;
 8012950:	bf00      	nop
 8012952:	e004      	b.n	801295e <tcp_input+0x80a>
            goto aborted;
 8012954:	bf00      	nop
 8012956:	e002      	b.n	801295e <tcp_input+0x80a>
              goto aborted;
 8012958:	bf00      	nop
 801295a:	e000      	b.n	801295e <tcp_input+0x80a>
          goto aborted;
 801295c:	bf00      	nop
    tcp_input_pcb = NULL;
 801295e:	4b32      	ldr	r3, [pc, #200]	; (8012a28 <tcp_input+0x8d4>)
 8012960:	2200      	movs	r2, #0
 8012962:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012964:	4b31      	ldr	r3, [pc, #196]	; (8012a2c <tcp_input+0x8d8>)
 8012966:	2200      	movs	r2, #0
 8012968:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801296a:	4b31      	ldr	r3, [pc, #196]	; (8012a30 <tcp_input+0x8dc>)
 801296c:	685b      	ldr	r3, [r3, #4]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d055      	beq.n	8012a1e <tcp_input+0x8ca>
      pbuf_free(inseg.p);
 8012972:	4b2f      	ldr	r3, [pc, #188]	; (8012a30 <tcp_input+0x8dc>)
 8012974:	685b      	ldr	r3, [r3, #4]
 8012976:	4618      	mov	r0, r3
 8012978:	f7fd fc0a 	bl	8010190 <pbuf_free>
      inseg.p = NULL;
 801297c:	4b2c      	ldr	r3, [pc, #176]	; (8012a30 <tcp_input+0x8dc>)
 801297e:	2200      	movs	r2, #0
 8012980:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8012982:	e04c      	b.n	8012a1e <tcp_input+0x8ca>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012984:	4b2b      	ldr	r3, [pc, #172]	; (8012a34 <tcp_input+0x8e0>)
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	899b      	ldrh	r3, [r3, #12]
 801298a:	b29b      	uxth	r3, r3
 801298c:	4618      	mov	r0, r3
 801298e:	f7fb fd69 	bl	800e464 <lwip_htons>
 8012992:	4603      	mov	r3, r0
 8012994:	b2db      	uxtb	r3, r3
 8012996:	f003 0304 	and.w	r3, r3, #4
 801299a:	2b00      	cmp	r3, #0
 801299c:	d128      	bne.n	80129f0 <tcp_input+0x89c>
      TCP_STATS_INC(tcp.proterr);
 801299e:	4b26      	ldr	r3, [pc, #152]	; (8012a38 <tcp_input+0x8e4>)
 80129a0:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80129a4:	3301      	adds	r3, #1
 80129a6:	b29a      	uxth	r2, r3
 80129a8:	4b23      	ldr	r3, [pc, #140]	; (8012a38 <tcp_input+0x8e4>)
 80129aa:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
 80129ae:	4b22      	ldr	r3, [pc, #136]	; (8012a38 <tcp_input+0x8e4>)
 80129b0:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 80129b4:	3301      	adds	r3, #1
 80129b6:	b29a      	uxth	r2, r3
 80129b8:	4b1f      	ldr	r3, [pc, #124]	; (8012a38 <tcp_input+0x8e4>)
 80129ba:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80129be:	4b1f      	ldr	r3, [pc, #124]	; (8012a3c <tcp_input+0x8e8>)
 80129c0:	6819      	ldr	r1, [r3, #0]
 80129c2:	4b1f      	ldr	r3, [pc, #124]	; (8012a40 <tcp_input+0x8ec>)
 80129c4:	881b      	ldrh	r3, [r3, #0]
 80129c6:	461a      	mov	r2, r3
 80129c8:	4b1e      	ldr	r3, [pc, #120]	; (8012a44 <tcp_input+0x8f0>)
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80129ce:	4b19      	ldr	r3, [pc, #100]	; (8012a34 <tcp_input+0x8e0>)
 80129d0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80129d2:	885b      	ldrh	r3, [r3, #2]
 80129d4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80129d6:	4a17      	ldr	r2, [pc, #92]	; (8012a34 <tcp_input+0x8e0>)
 80129d8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80129da:	8812      	ldrh	r2, [r2, #0]
 80129dc:	b292      	uxth	r2, r2
 80129de:	9202      	str	r2, [sp, #8]
 80129e0:	9301      	str	r3, [sp, #4]
 80129e2:	4b19      	ldr	r3, [pc, #100]	; (8012a48 <tcp_input+0x8f4>)
 80129e4:	9300      	str	r3, [sp, #0]
 80129e6:	4b19      	ldr	r3, [pc, #100]	; (8012a4c <tcp_input+0x8f8>)
 80129e8:	4602      	mov	r2, r0
 80129ea:	2000      	movs	r0, #0
 80129ec:	f003 f882 	bl	8015af4 <tcp_rst>
    pbuf_free(p);
 80129f0:	6878      	ldr	r0, [r7, #4]
 80129f2:	f7fd fbcd 	bl	8010190 <pbuf_free>
  return;
 80129f6:	e012      	b.n	8012a1e <tcp_input+0x8ca>
dropped:
  TCP_STATS_INC(tcp.drop);
 80129f8:	4b0f      	ldr	r3, [pc, #60]	; (8012a38 <tcp_input+0x8e4>)
 80129fa:	f8b3 3096 	ldrh.w	r3, [r3, #150]	; 0x96
 80129fe:	3301      	adds	r3, #1
 8012a00:	b29a      	uxth	r2, r3
 8012a02:	4b0d      	ldr	r3, [pc, #52]	; (8012a38 <tcp_input+0x8e4>)
 8012a04:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
 8012a08:	4b0b      	ldr	r3, [pc, #44]	; (8012a38 <tcp_input+0x8e4>)
 8012a0a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8012a0e:	3301      	adds	r3, #1
 8012a10:	4a09      	ldr	r2, [pc, #36]	; (8012a38 <tcp_input+0x8e4>)
 8012a12:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
  pbuf_free(p);
 8012a16:	6878      	ldr	r0, [r7, #4]
 8012a18:	f7fd fbba 	bl	8010190 <pbuf_free>
 8012a1c:	e000      	b.n	8012a20 <tcp_input+0x8cc>
  return;
 8012a1e:	bf00      	nop
}
 8012a20:	3724      	adds	r7, #36	; 0x24
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd90      	pop	{r4, r7, pc}
 8012a26:	bf00      	nop
 8012a28:	200073e8 	.word	0x200073e8
 8012a2c:	200073e4 	.word	0x200073e4
 8012a30:	200073b4 	.word	0x200073b4
 8012a34:	200073c4 	.word	0x200073c4
 8012a38:	20007204 	.word	0x20007204
 8012a3c:	200073d8 	.word	0x200073d8
 8012a40:	200073de 	.word	0x200073de
 8012a44:	200073d4 	.word	0x200073d4
 8012a48:	20003bf8 	.word	0x20003bf8
 8012a4c:	20003bfc 	.word	0x20003bfc

08012a50 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b082      	sub	sp, #8
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d106      	bne.n	8012a6c <tcp_input_delayed_close+0x1c>
 8012a5e:	4b17      	ldr	r3, [pc, #92]	; (8012abc <tcp_input_delayed_close+0x6c>)
 8012a60:	f240 225a 	movw	r2, #602	; 0x25a
 8012a64:	4916      	ldr	r1, [pc, #88]	; (8012ac0 <tcp_input_delayed_close+0x70>)
 8012a66:	4817      	ldr	r0, [pc, #92]	; (8012ac4 <tcp_input_delayed_close+0x74>)
 8012a68:	f009 fe62 	bl	801c730 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012a6c:	4b16      	ldr	r3, [pc, #88]	; (8012ac8 <tcp_input_delayed_close+0x78>)
 8012a6e:	781b      	ldrb	r3, [r3, #0]
 8012a70:	f003 0310 	and.w	r3, r3, #16
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d01c      	beq.n	8012ab2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	8b5b      	ldrh	r3, [r3, #26]
 8012a7c:	f003 0310 	and.w	r3, r3, #16
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d10d      	bne.n	8012aa0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d008      	beq.n	8012aa0 <tcp_input_delayed_close+0x50>
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a94:	687a      	ldr	r2, [r7, #4]
 8012a96:	6912      	ldr	r2, [r2, #16]
 8012a98:	f06f 010e 	mvn.w	r1, #14
 8012a9c:	4610      	mov	r0, r2
 8012a9e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012aa0:	6879      	ldr	r1, [r7, #4]
 8012aa2:	480a      	ldr	r0, [pc, #40]	; (8012acc <tcp_input_delayed_close+0x7c>)
 8012aa4:	f7ff f9de 	bl	8011e64 <tcp_pcb_remove>
    tcp_free(pcb);
 8012aa8:	6878      	ldr	r0, [r7, #4]
 8012aaa:	f7fd ff83 	bl	80109b4 <tcp_free>
    return 1;
 8012aae:	2301      	movs	r3, #1
 8012ab0:	e000      	b.n	8012ab4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8012ab2:	2300      	movs	r3, #0
}
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	3708      	adds	r7, #8
 8012ab8:	46bd      	mov	sp, r7
 8012aba:	bd80      	pop	{r7, pc}
 8012abc:	08021894 	.word	0x08021894
 8012ac0:	08021a64 	.word	0x08021a64
 8012ac4:	080218e0 	.word	0x080218e0
 8012ac8:	200073e1 	.word	0x200073e1
 8012acc:	200073a8 	.word	0x200073a8

08012ad0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012ad0:	b590      	push	{r4, r7, lr}
 8012ad2:	b08b      	sub	sp, #44	; 0x2c
 8012ad4:	af04      	add	r7, sp, #16
 8012ad6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012ad8:	4b76      	ldr	r3, [pc, #472]	; (8012cb4 <tcp_listen_input+0x1e4>)
 8012ada:	781b      	ldrb	r3, [r3, #0]
 8012adc:	f003 0304 	and.w	r3, r3, #4
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	f040 80e1 	bne.w	8012ca8 <tcp_listen_input+0x1d8>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d106      	bne.n	8012afa <tcp_listen_input+0x2a>
 8012aec:	4b72      	ldr	r3, [pc, #456]	; (8012cb8 <tcp_listen_input+0x1e8>)
 8012aee:	f240 2281 	movw	r2, #641	; 0x281
 8012af2:	4972      	ldr	r1, [pc, #456]	; (8012cbc <tcp_listen_input+0x1ec>)
 8012af4:	4872      	ldr	r0, [pc, #456]	; (8012cc0 <tcp_listen_input+0x1f0>)
 8012af6:	f009 fe1b 	bl	801c730 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012afa:	4b6e      	ldr	r3, [pc, #440]	; (8012cb4 <tcp_listen_input+0x1e4>)
 8012afc:	781b      	ldrb	r3, [r3, #0]
 8012afe:	f003 0310 	and.w	r3, r3, #16
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d019      	beq.n	8012b3a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b06:	4b6f      	ldr	r3, [pc, #444]	; (8012cc4 <tcp_listen_input+0x1f4>)
 8012b08:	6819      	ldr	r1, [r3, #0]
 8012b0a:	4b6f      	ldr	r3, [pc, #444]	; (8012cc8 <tcp_listen_input+0x1f8>)
 8012b0c:	881b      	ldrh	r3, [r3, #0]
 8012b0e:	461a      	mov	r2, r3
 8012b10:	4b6e      	ldr	r3, [pc, #440]	; (8012ccc <tcp_listen_input+0x1fc>)
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012b16:	4b6e      	ldr	r3, [pc, #440]	; (8012cd0 <tcp_listen_input+0x200>)
 8012b18:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b1a:	885b      	ldrh	r3, [r3, #2]
 8012b1c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012b1e:	4a6c      	ldr	r2, [pc, #432]	; (8012cd0 <tcp_listen_input+0x200>)
 8012b20:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b22:	8812      	ldrh	r2, [r2, #0]
 8012b24:	b292      	uxth	r2, r2
 8012b26:	9202      	str	r2, [sp, #8]
 8012b28:	9301      	str	r3, [sp, #4]
 8012b2a:	4b6a      	ldr	r3, [pc, #424]	; (8012cd4 <tcp_listen_input+0x204>)
 8012b2c:	9300      	str	r3, [sp, #0]
 8012b2e:	4b6a      	ldr	r3, [pc, #424]	; (8012cd8 <tcp_listen_input+0x208>)
 8012b30:	4602      	mov	r2, r0
 8012b32:	6878      	ldr	r0, [r7, #4]
 8012b34:	f002 ffde 	bl	8015af4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8012b38:	e0b8      	b.n	8012cac <tcp_listen_input+0x1dc>
  } else if (flags & TCP_SYN) {
 8012b3a:	4b5e      	ldr	r3, [pc, #376]	; (8012cb4 <tcp_listen_input+0x1e4>)
 8012b3c:	781b      	ldrb	r3, [r3, #0]
 8012b3e:	f003 0302 	and.w	r3, r3, #2
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	f000 80b2 	beq.w	8012cac <tcp_listen_input+0x1dc>
    npcb = tcp_alloc(pcb->prio);
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	7d5b      	ldrb	r3, [r3, #21]
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	f7ff f88b 	bl	8011c68 <tcp_alloc>
 8012b52:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012b54:	697b      	ldr	r3, [r7, #20]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d119      	bne.n	8012b8e <tcp_listen_input+0xbe>
      TCP_STATS_INC(tcp.memerr);
 8012b5a:	4b60      	ldr	r3, [pc, #384]	; (8012cdc <tcp_listen_input+0x20c>)
 8012b5c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8012b60:	3301      	adds	r3, #1
 8012b62:	b29a      	uxth	r2, r3
 8012b64:	4b5d      	ldr	r3, [pc, #372]	; (8012cdc <tcp_listen_input+0x20c>)
 8012b66:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	699b      	ldr	r3, [r3, #24]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d00a      	beq.n	8012b88 <tcp_listen_input+0xb8>
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	699b      	ldr	r3, [r3, #24]
 8012b76:	687a      	ldr	r2, [r7, #4]
 8012b78:	6910      	ldr	r0, [r2, #16]
 8012b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8012b7e:	2100      	movs	r1, #0
 8012b80:	4798      	blx	r3
 8012b82:	4603      	mov	r3, r0
 8012b84:	73bb      	strb	r3, [r7, #14]
      return;
 8012b86:	e092      	b.n	8012cae <tcp_listen_input+0x1de>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012b88:	23f0      	movs	r3, #240	; 0xf0
 8012b8a:	73bb      	strb	r3, [r7, #14]
      return;
 8012b8c:	e08f      	b.n	8012cae <tcp_listen_input+0x1de>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012b8e:	4b54      	ldr	r3, [pc, #336]	; (8012ce0 <tcp_listen_input+0x210>)
 8012b90:	695a      	ldr	r2, [r3, #20]
 8012b92:	697b      	ldr	r3, [r7, #20]
 8012b94:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8012b96:	4b52      	ldr	r3, [pc, #328]	; (8012ce0 <tcp_listen_input+0x210>)
 8012b98:	691a      	ldr	r2, [r3, #16]
 8012b9a:	697b      	ldr	r3, [r7, #20]
 8012b9c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	8ada      	ldrh	r2, [r3, #22]
 8012ba2:	697b      	ldr	r3, [r7, #20]
 8012ba4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8012ba6:	4b4a      	ldr	r3, [pc, #296]	; (8012cd0 <tcp_listen_input+0x200>)
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	881b      	ldrh	r3, [r3, #0]
 8012bac:	b29a      	uxth	r2, r3
 8012bae:	697b      	ldr	r3, [r7, #20]
 8012bb0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8012bb2:	697b      	ldr	r3, [r7, #20]
 8012bb4:	2203      	movs	r2, #3
 8012bb6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012bb8:	4b44      	ldr	r3, [pc, #272]	; (8012ccc <tcp_listen_input+0x1fc>)
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	1c5a      	adds	r2, r3, #1
 8012bbe:	697b      	ldr	r3, [r7, #20]
 8012bc0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8012bc2:	697b      	ldr	r3, [r7, #20]
 8012bc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012bc6:	697b      	ldr	r3, [r7, #20]
 8012bc8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8012bca:	6978      	ldr	r0, [r7, #20]
 8012bcc:	f7ff f9de 	bl	8011f8c <tcp_next_iss>
 8012bd0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8012bd2:	697b      	ldr	r3, [r7, #20]
 8012bd4:	693a      	ldr	r2, [r7, #16]
 8012bd6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8012bd8:	697b      	ldr	r3, [r7, #20]
 8012bda:	693a      	ldr	r2, [r7, #16]
 8012bdc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8012bde:	697b      	ldr	r3, [r7, #20]
 8012be0:	693a      	ldr	r2, [r7, #16]
 8012be2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8012be4:	697b      	ldr	r3, [r7, #20]
 8012be6:	693a      	ldr	r2, [r7, #16]
 8012be8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012bea:	4b38      	ldr	r3, [pc, #224]	; (8012ccc <tcp_listen_input+0x1fc>)
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	1e5a      	subs	r2, r3, #1
 8012bf0:	697b      	ldr	r3, [r7, #20]
 8012bf2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	691a      	ldr	r2, [r3, #16]
 8012bf8:	697b      	ldr	r3, [r7, #20]
 8012bfa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012bfc:	697b      	ldr	r3, [r7, #20]
 8012bfe:	687a      	ldr	r2, [r7, #4]
 8012c00:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	7a5b      	ldrb	r3, [r3, #9]
 8012c06:	f003 030c 	and.w	r3, r3, #12
 8012c0a:	b2da      	uxtb	r2, r3
 8012c0c:	697b      	ldr	r3, [r7, #20]
 8012c0e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	7a1a      	ldrb	r2, [r3, #8]
 8012c14:	697b      	ldr	r3, [r7, #20]
 8012c16:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012c18:	4b32      	ldr	r3, [pc, #200]	; (8012ce4 <tcp_listen_input+0x214>)
 8012c1a:	681a      	ldr	r2, [r3, #0]
 8012c1c:	697b      	ldr	r3, [r7, #20]
 8012c1e:	60da      	str	r2, [r3, #12]
 8012c20:	4a30      	ldr	r2, [pc, #192]	; (8012ce4 <tcp_listen_input+0x214>)
 8012c22:	697b      	ldr	r3, [r7, #20]
 8012c24:	6013      	str	r3, [r2, #0]
 8012c26:	f003 f92f 	bl	8015e88 <tcp_timer_needed>
 8012c2a:	4b2f      	ldr	r3, [pc, #188]	; (8012ce8 <tcp_listen_input+0x218>)
 8012c2c:	2201      	movs	r2, #1
 8012c2e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012c30:	6978      	ldr	r0, [r7, #20]
 8012c32:	f001 fd97 	bl	8014764 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8012c36:	4b26      	ldr	r3, [pc, #152]	; (8012cd0 <tcp_listen_input+0x200>)
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	89db      	ldrh	r3, [r3, #14]
 8012c3c:	b29a      	uxth	r2, r3
 8012c3e:	697b      	ldr	r3, [r7, #20]
 8012c40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012c44:	697b      	ldr	r3, [r7, #20]
 8012c46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012c4a:	697b      	ldr	r3, [r7, #20]
 8012c4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012c50:	697b      	ldr	r3, [r7, #20]
 8012c52:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012c54:	697b      	ldr	r3, [r7, #20]
 8012c56:	3304      	adds	r3, #4
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f007 f91f 	bl	8019e9c <ip4_route>
 8012c5e:	4601      	mov	r1, r0
 8012c60:	697b      	ldr	r3, [r7, #20]
 8012c62:	3304      	adds	r3, #4
 8012c64:	461a      	mov	r2, r3
 8012c66:	4620      	mov	r0, r4
 8012c68:	f7ff f9b6 	bl	8011fd8 <tcp_eff_send_mss_netif>
 8012c6c:	4603      	mov	r3, r0
 8012c6e:	461a      	mov	r2, r3
 8012c70:	697b      	ldr	r3, [r7, #20]
 8012c72:	865a      	strh	r2, [r3, #50]	; 0x32
    MIB2_STATS_INC(mib2.tcppassiveopens);
 8012c74:	4b19      	ldr	r3, [pc, #100]	; (8012cdc <tcp_listen_input+0x20c>)
 8012c76:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8012c7a:	3301      	adds	r3, #1
 8012c7c:	4a17      	ldr	r2, [pc, #92]	; (8012cdc <tcp_listen_input+0x20c>)
 8012c7e:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012c82:	2112      	movs	r1, #18
 8012c84:	6978      	ldr	r0, [r7, #20]
 8012c86:	f002 f859 	bl	8014d3c <tcp_enqueue_flags>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d004      	beq.n	8012ca0 <tcp_listen_input+0x1d0>
      tcp_abandon(npcb, 0);
 8012c96:	2100      	movs	r1, #0
 8012c98:	6978      	ldr	r0, [r7, #20]
 8012c9a:	f7fe f8d3 	bl	8010e44 <tcp_abandon>
      return;
 8012c9e:	e006      	b.n	8012cae <tcp_listen_input+0x1de>
    tcp_output(npcb);
 8012ca0:	6978      	ldr	r0, [r7, #20]
 8012ca2:	f002 f94b 	bl	8014f3c <tcp_output>
  return;
 8012ca6:	e001      	b.n	8012cac <tcp_listen_input+0x1dc>
    return;
 8012ca8:	bf00      	nop
 8012caa:	e000      	b.n	8012cae <tcp_listen_input+0x1de>
  return;
 8012cac:	bf00      	nop
}
 8012cae:	371c      	adds	r7, #28
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	bd90      	pop	{r4, r7, pc}
 8012cb4:	200073e0 	.word	0x200073e0
 8012cb8:	08021894 	.word	0x08021894
 8012cbc:	08021a8c 	.word	0x08021a8c
 8012cc0:	080218e0 	.word	0x080218e0
 8012cc4:	200073d8 	.word	0x200073d8
 8012cc8:	200073de 	.word	0x200073de
 8012ccc:	200073d4 	.word	0x200073d4
 8012cd0:	200073c4 	.word	0x200073c4
 8012cd4:	20003bf8 	.word	0x20003bf8
 8012cd8:	20003bfc 	.word	0x20003bfc
 8012cdc:	20007204 	.word	0x20007204
 8012ce0:	20003be8 	.word	0x20003be8
 8012ce4:	200073a8 	.word	0x200073a8
 8012ce8:	200073b0 	.word	0x200073b0

08012cec <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b086      	sub	sp, #24
 8012cf0:	af04      	add	r7, sp, #16
 8012cf2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8012cf4:	4b2f      	ldr	r3, [pc, #188]	; (8012db4 <tcp_timewait_input+0xc8>)
 8012cf6:	781b      	ldrb	r3, [r3, #0]
 8012cf8:	f003 0304 	and.w	r3, r3, #4
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d153      	bne.n	8012da8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d106      	bne.n	8012d14 <tcp_timewait_input+0x28>
 8012d06:	4b2c      	ldr	r3, [pc, #176]	; (8012db8 <tcp_timewait_input+0xcc>)
 8012d08:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012d0c:	492b      	ldr	r1, [pc, #172]	; (8012dbc <tcp_timewait_input+0xd0>)
 8012d0e:	482c      	ldr	r0, [pc, #176]	; (8012dc0 <tcp_timewait_input+0xd4>)
 8012d10:	f009 fd0e 	bl	801c730 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8012d14:	4b27      	ldr	r3, [pc, #156]	; (8012db4 <tcp_timewait_input+0xc8>)
 8012d16:	781b      	ldrb	r3, [r3, #0]
 8012d18:	f003 0302 	and.w	r3, r3, #2
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d02a      	beq.n	8012d76 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012d20:	4b28      	ldr	r3, [pc, #160]	; (8012dc4 <tcp_timewait_input+0xd8>)
 8012d22:	681a      	ldr	r2, [r3, #0]
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d28:	1ad3      	subs	r3, r2, r3
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	db2d      	blt.n	8012d8a <tcp_timewait_input+0x9e>
 8012d2e:	4b25      	ldr	r3, [pc, #148]	; (8012dc4 <tcp_timewait_input+0xd8>)
 8012d30:	681a      	ldr	r2, [r3, #0]
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d36:	6879      	ldr	r1, [r7, #4]
 8012d38:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012d3a:	440b      	add	r3, r1
 8012d3c:	1ad3      	subs	r3, r2, r3
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	dc23      	bgt.n	8012d8a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d42:	4b21      	ldr	r3, [pc, #132]	; (8012dc8 <tcp_timewait_input+0xdc>)
 8012d44:	6819      	ldr	r1, [r3, #0]
 8012d46:	4b21      	ldr	r3, [pc, #132]	; (8012dcc <tcp_timewait_input+0xe0>)
 8012d48:	881b      	ldrh	r3, [r3, #0]
 8012d4a:	461a      	mov	r2, r3
 8012d4c:	4b1d      	ldr	r3, [pc, #116]	; (8012dc4 <tcp_timewait_input+0xd8>)
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012d52:	4b1f      	ldr	r3, [pc, #124]	; (8012dd0 <tcp_timewait_input+0xe4>)
 8012d54:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d56:	885b      	ldrh	r3, [r3, #2]
 8012d58:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012d5a:	4a1d      	ldr	r2, [pc, #116]	; (8012dd0 <tcp_timewait_input+0xe4>)
 8012d5c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012d5e:	8812      	ldrh	r2, [r2, #0]
 8012d60:	b292      	uxth	r2, r2
 8012d62:	9202      	str	r2, [sp, #8]
 8012d64:	9301      	str	r3, [sp, #4]
 8012d66:	4b1b      	ldr	r3, [pc, #108]	; (8012dd4 <tcp_timewait_input+0xe8>)
 8012d68:	9300      	str	r3, [sp, #0]
 8012d6a:	4b1b      	ldr	r3, [pc, #108]	; (8012dd8 <tcp_timewait_input+0xec>)
 8012d6c:	4602      	mov	r2, r0
 8012d6e:	6878      	ldr	r0, [r7, #4]
 8012d70:	f002 fec0 	bl	8015af4 <tcp_rst>
      return;
 8012d74:	e01b      	b.n	8012dae <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8012d76:	4b0f      	ldr	r3, [pc, #60]	; (8012db4 <tcp_timewait_input+0xc8>)
 8012d78:	781b      	ldrb	r3, [r3, #0]
 8012d7a:	f003 0301 	and.w	r3, r3, #1
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d003      	beq.n	8012d8a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8012d82:	4b16      	ldr	r3, [pc, #88]	; (8012ddc <tcp_timewait_input+0xf0>)
 8012d84:	681a      	ldr	r2, [r3, #0]
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8012d8a:	4b10      	ldr	r3, [pc, #64]	; (8012dcc <tcp_timewait_input+0xe0>)
 8012d8c:	881b      	ldrh	r3, [r3, #0]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d00c      	beq.n	8012dac <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	8b5b      	ldrh	r3, [r3, #26]
 8012d96:	f043 0302 	orr.w	r3, r3, #2
 8012d9a:	b29a      	uxth	r2, r3
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012da0:	6878      	ldr	r0, [r7, #4]
 8012da2:	f002 f8cb 	bl	8014f3c <tcp_output>
  }
  return;
 8012da6:	e001      	b.n	8012dac <tcp_timewait_input+0xc0>
    return;
 8012da8:	bf00      	nop
 8012daa:	e000      	b.n	8012dae <tcp_timewait_input+0xc2>
  return;
 8012dac:	bf00      	nop
}
 8012dae:	3708      	adds	r7, #8
 8012db0:	46bd      	mov	sp, r7
 8012db2:	bd80      	pop	{r7, pc}
 8012db4:	200073e0 	.word	0x200073e0
 8012db8:	08021894 	.word	0x08021894
 8012dbc:	08021aac 	.word	0x08021aac
 8012dc0:	080218e0 	.word	0x080218e0
 8012dc4:	200073d4 	.word	0x200073d4
 8012dc8:	200073d8 	.word	0x200073d8
 8012dcc:	200073de 	.word	0x200073de
 8012dd0:	200073c4 	.word	0x200073c4
 8012dd4:	20003bf8 	.word	0x20003bf8
 8012dd8:	20003bfc 	.word	0x20003bfc
 8012ddc:	2000739c 	.word	0x2000739c

08012de0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012de0:	b590      	push	{r4, r7, lr}
 8012de2:	b08d      	sub	sp, #52	; 0x34
 8012de4:	af04      	add	r7, sp, #16
 8012de6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012de8:	2300      	movs	r3, #0
 8012dea:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012dec:	2300      	movs	r3, #0
 8012dee:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d106      	bne.n	8012e04 <tcp_process+0x24>
 8012df6:	4b9d      	ldr	r3, [pc, #628]	; (801306c <tcp_process+0x28c>)
 8012df8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8012dfc:	499c      	ldr	r1, [pc, #624]	; (8013070 <tcp_process+0x290>)
 8012dfe:	489d      	ldr	r0, [pc, #628]	; (8013074 <tcp_process+0x294>)
 8012e00:	f009 fc96 	bl	801c730 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8012e04:	4b9c      	ldr	r3, [pc, #624]	; (8013078 <tcp_process+0x298>)
 8012e06:	781b      	ldrb	r3, [r3, #0]
 8012e08:	f003 0304 	and.w	r3, r3, #4
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d04e      	beq.n	8012eae <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	7d1b      	ldrb	r3, [r3, #20]
 8012e14:	2b02      	cmp	r3, #2
 8012e16:	d108      	bne.n	8012e2a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012e1c:	4b97      	ldr	r3, [pc, #604]	; (801307c <tcp_process+0x29c>)
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	429a      	cmp	r2, r3
 8012e22:	d123      	bne.n	8012e6c <tcp_process+0x8c>
        acceptable = 1;
 8012e24:	2301      	movs	r3, #1
 8012e26:	76fb      	strb	r3, [r7, #27]
 8012e28:	e020      	b.n	8012e6c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012e2e:	4b94      	ldr	r3, [pc, #592]	; (8013080 <tcp_process+0x2a0>)
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	429a      	cmp	r2, r3
 8012e34:	d102      	bne.n	8012e3c <tcp_process+0x5c>
        acceptable = 1;
 8012e36:	2301      	movs	r3, #1
 8012e38:	76fb      	strb	r3, [r7, #27]
 8012e3a:	e017      	b.n	8012e6c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012e3c:	4b90      	ldr	r3, [pc, #576]	; (8013080 <tcp_process+0x2a0>)
 8012e3e:	681a      	ldr	r2, [r3, #0]
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e44:	1ad3      	subs	r3, r2, r3
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	db10      	blt.n	8012e6c <tcp_process+0x8c>
 8012e4a:	4b8d      	ldr	r3, [pc, #564]	; (8013080 <tcp_process+0x2a0>)
 8012e4c:	681a      	ldr	r2, [r3, #0]
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e52:	6879      	ldr	r1, [r7, #4]
 8012e54:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012e56:	440b      	add	r3, r1
 8012e58:	1ad3      	subs	r3, r2, r3
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	dc06      	bgt.n	8012e6c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	8b5b      	ldrh	r3, [r3, #26]
 8012e62:	f043 0302 	orr.w	r3, r3, #2
 8012e66:	b29a      	uxth	r2, r3
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8012e6c:	7efb      	ldrb	r3, [r7, #27]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d01b      	beq.n	8012eaa <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	7d1b      	ldrb	r3, [r3, #20]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d106      	bne.n	8012e88 <tcp_process+0xa8>
 8012e7a:	4b7c      	ldr	r3, [pc, #496]	; (801306c <tcp_process+0x28c>)
 8012e7c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8012e80:	4980      	ldr	r1, [pc, #512]	; (8013084 <tcp_process+0x2a4>)
 8012e82:	487c      	ldr	r0, [pc, #496]	; (8013074 <tcp_process+0x294>)
 8012e84:	f009 fc54 	bl	801c730 <iprintf>
      recv_flags |= TF_RESET;
 8012e88:	4b7f      	ldr	r3, [pc, #508]	; (8013088 <tcp_process+0x2a8>)
 8012e8a:	781b      	ldrb	r3, [r3, #0]
 8012e8c:	f043 0308 	orr.w	r3, r3, #8
 8012e90:	b2da      	uxtb	r2, r3
 8012e92:	4b7d      	ldr	r3, [pc, #500]	; (8013088 <tcp_process+0x2a8>)
 8012e94:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	8b5b      	ldrh	r3, [r3, #26]
 8012e9a:	f023 0301 	bic.w	r3, r3, #1
 8012e9e:	b29a      	uxth	r2, r3
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8012ea4:	f06f 030d 	mvn.w	r3, #13
 8012ea8:	e37a      	b.n	80135a0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8012eaa:	2300      	movs	r3, #0
 8012eac:	e378      	b.n	80135a0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8012eae:	4b72      	ldr	r3, [pc, #456]	; (8013078 <tcp_process+0x298>)
 8012eb0:	781b      	ldrb	r3, [r3, #0]
 8012eb2:	f003 0302 	and.w	r3, r3, #2
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d010      	beq.n	8012edc <tcp_process+0xfc>
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	7d1b      	ldrb	r3, [r3, #20]
 8012ebe:	2b02      	cmp	r3, #2
 8012ec0:	d00c      	beq.n	8012edc <tcp_process+0xfc>
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	7d1b      	ldrb	r3, [r3, #20]
 8012ec6:	2b03      	cmp	r3, #3
 8012ec8:	d008      	beq.n	8012edc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	8b5b      	ldrh	r3, [r3, #26]
 8012ece:	f043 0302 	orr.w	r3, r3, #2
 8012ed2:	b29a      	uxth	r2, r3
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8012ed8:	2300      	movs	r3, #0
 8012eda:	e361      	b.n	80135a0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	8b5b      	ldrh	r3, [r3, #26]
 8012ee0:	f003 0310 	and.w	r3, r3, #16
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d103      	bne.n	8012ef0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012ee8:	4b68      	ldr	r3, [pc, #416]	; (801308c <tcp_process+0x2ac>)
 8012eea:	681a      	ldr	r2, [r3, #0]
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	2200      	movs	r2, #0
 8012efc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8012f00:	6878      	ldr	r0, [r7, #4]
 8012f02:	f001 fc2f 	bl	8014764 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	7d1b      	ldrb	r3, [r3, #20]
 8012f0a:	3b02      	subs	r3, #2
 8012f0c:	2b07      	cmp	r3, #7
 8012f0e:	f200 8337 	bhi.w	8013580 <tcp_process+0x7a0>
 8012f12:	a201      	add	r2, pc, #4	; (adr r2, 8012f18 <tcp_process+0x138>)
 8012f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f18:	08012f39 	.word	0x08012f39
 8012f1c:	08013169 	.word	0x08013169
 8012f20:	080132e1 	.word	0x080132e1
 8012f24:	0801330b 	.word	0x0801330b
 8012f28:	0801342f 	.word	0x0801342f
 8012f2c:	080132e1 	.word	0x080132e1
 8012f30:	080134bb 	.word	0x080134bb
 8012f34:	0801354b 	.word	0x0801354b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012f38:	4b4f      	ldr	r3, [pc, #316]	; (8013078 <tcp_process+0x298>)
 8012f3a:	781b      	ldrb	r3, [r3, #0]
 8012f3c:	f003 0310 	and.w	r3, r3, #16
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	f000 80e4 	beq.w	801310e <tcp_process+0x32e>
 8012f46:	4b4c      	ldr	r3, [pc, #304]	; (8013078 <tcp_process+0x298>)
 8012f48:	781b      	ldrb	r3, [r3, #0]
 8012f4a:	f003 0302 	and.w	r3, r3, #2
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	f000 80dd 	beq.w	801310e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f58:	1c5a      	adds	r2, r3, #1
 8012f5a:	4b48      	ldr	r3, [pc, #288]	; (801307c <tcp_process+0x29c>)
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	429a      	cmp	r2, r3
 8012f60:	f040 80d5 	bne.w	801310e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8012f64:	4b46      	ldr	r3, [pc, #280]	; (8013080 <tcp_process+0x2a0>)
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	1c5a      	adds	r2, r3, #1
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8012f76:	4b41      	ldr	r3, [pc, #260]	; (801307c <tcp_process+0x29c>)
 8012f78:	681a      	ldr	r2, [r3, #0]
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8012f7e:	4b44      	ldr	r3, [pc, #272]	; (8013090 <tcp_process+0x2b0>)
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	89db      	ldrh	r3, [r3, #14]
 8012f84:	b29a      	uxth	r2, r3
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012f98:	4b39      	ldr	r3, [pc, #228]	; (8013080 <tcp_process+0x2a0>)
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	1e5a      	subs	r2, r3, #1
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	2204      	movs	r2, #4
 8012fa6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	3304      	adds	r3, #4
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	f006 ff73 	bl	8019e9c <ip4_route>
 8012fb6:	4601      	mov	r1, r0
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	3304      	adds	r3, #4
 8012fbc:	461a      	mov	r2, r3
 8012fbe:	4620      	mov	r0, r4
 8012fc0:	f7ff f80a 	bl	8011fd8 <tcp_eff_send_mss_netif>
 8012fc4:	4603      	mov	r3, r0
 8012fc6:	461a      	mov	r2, r3
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012fd0:	009a      	lsls	r2, r3, #2
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012fd6:	005b      	lsls	r3, r3, #1
 8012fd8:	f241 111c 	movw	r1, #4380	; 0x111c
 8012fdc:	428b      	cmp	r3, r1
 8012fde:	bf38      	it	cc
 8012fe0:	460b      	movcc	r3, r1
 8012fe2:	429a      	cmp	r2, r3
 8012fe4:	d204      	bcs.n	8012ff0 <tcp_process+0x210>
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012fea:	009b      	lsls	r3, r3, #2
 8012fec:	b29b      	uxth	r3, r3
 8012fee:	e00d      	b.n	801300c <tcp_process+0x22c>
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ff4:	005b      	lsls	r3, r3, #1
 8012ff6:	f241 121c 	movw	r2, #4380	; 0x111c
 8012ffa:	4293      	cmp	r3, r2
 8012ffc:	d904      	bls.n	8013008 <tcp_process+0x228>
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013002:	005b      	lsls	r3, r3, #1
 8013004:	b29b      	uxth	r3, r3
 8013006:	e001      	b.n	801300c <tcp_process+0x22c>
 8013008:	f241 131c 	movw	r3, #4380	; 0x111c
 801300c:	687a      	ldr	r2, [r7, #4]
 801300e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013018:	2b00      	cmp	r3, #0
 801301a:	d106      	bne.n	801302a <tcp_process+0x24a>
 801301c:	4b13      	ldr	r3, [pc, #76]	; (801306c <tcp_process+0x28c>)
 801301e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8013022:	491c      	ldr	r1, [pc, #112]	; (8013094 <tcp_process+0x2b4>)
 8013024:	4813      	ldr	r0, [pc, #76]	; (8013074 <tcp_process+0x294>)
 8013026:	f009 fb83 	bl	801c730 <iprintf>
        --pcb->snd_queuelen;
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013030:	3b01      	subs	r3, #1
 8013032:	b29a      	uxth	r2, r3
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801303e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8013040:	69fb      	ldr	r3, [r7, #28]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d12a      	bne.n	801309c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801304a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801304c:	69fb      	ldr	r3, [r7, #28]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d106      	bne.n	8013060 <tcp_process+0x280>
 8013052:	4b06      	ldr	r3, [pc, #24]	; (801306c <tcp_process+0x28c>)
 8013054:	f44f 725d 	mov.w	r2, #884	; 0x374
 8013058:	490f      	ldr	r1, [pc, #60]	; (8013098 <tcp_process+0x2b8>)
 801305a:	4806      	ldr	r0, [pc, #24]	; (8013074 <tcp_process+0x294>)
 801305c:	f009 fb68 	bl	801c730 <iprintf>
          pcb->unsent = rseg->next;
 8013060:	69fb      	ldr	r3, [r7, #28]
 8013062:	681a      	ldr	r2, [r3, #0]
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	66da      	str	r2, [r3, #108]	; 0x6c
 8013068:	e01c      	b.n	80130a4 <tcp_process+0x2c4>
 801306a:	bf00      	nop
 801306c:	08021894 	.word	0x08021894
 8013070:	08021acc 	.word	0x08021acc
 8013074:	080218e0 	.word	0x080218e0
 8013078:	200073e0 	.word	0x200073e0
 801307c:	200073d8 	.word	0x200073d8
 8013080:	200073d4 	.word	0x200073d4
 8013084:	08021ae8 	.word	0x08021ae8
 8013088:	200073e1 	.word	0x200073e1
 801308c:	2000739c 	.word	0x2000739c
 8013090:	200073c4 	.word	0x200073c4
 8013094:	08021b08 	.word	0x08021b08
 8013098:	08021b20 	.word	0x08021b20
        } else {
          pcb->unacked = rseg->next;
 801309c:	69fb      	ldr	r3, [r7, #28]
 801309e:	681a      	ldr	r2, [r3, #0]
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80130a4:	69f8      	ldr	r0, [r7, #28]
 80130a6:	f7fe fc76 	bl	8011996 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d104      	bne.n	80130bc <tcp_process+0x2dc>
          pcb->rtime = -1;
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80130b8:	861a      	strh	r2, [r3, #48]	; 0x30
 80130ba:	e006      	b.n	80130ca <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	2200      	movs	r2, #0
 80130c0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	2200      	movs	r2, #0
 80130c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d00a      	beq.n	80130ea <tcp_process+0x30a>
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80130da:	687a      	ldr	r2, [r7, #4]
 80130dc:	6910      	ldr	r0, [r2, #16]
 80130de:	2200      	movs	r2, #0
 80130e0:	6879      	ldr	r1, [r7, #4]
 80130e2:	4798      	blx	r3
 80130e4:	4603      	mov	r3, r0
 80130e6:	76bb      	strb	r3, [r7, #26]
 80130e8:	e001      	b.n	80130ee <tcp_process+0x30e>
 80130ea:	2300      	movs	r3, #0
 80130ec:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80130ee:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80130f2:	f113 0f0d 	cmn.w	r3, #13
 80130f6:	d102      	bne.n	80130fe <tcp_process+0x31e>
          return ERR_ABRT;
 80130f8:	f06f 030c 	mvn.w	r3, #12
 80130fc:	e250      	b.n	80135a0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	8b5b      	ldrh	r3, [r3, #26]
 8013102:	f043 0302 	orr.w	r3, r3, #2
 8013106:	b29a      	uxth	r2, r3
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801310c:	e23a      	b.n	8013584 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801310e:	4b98      	ldr	r3, [pc, #608]	; (8013370 <tcp_process+0x590>)
 8013110:	781b      	ldrb	r3, [r3, #0]
 8013112:	f003 0310 	and.w	r3, r3, #16
 8013116:	2b00      	cmp	r3, #0
 8013118:	f000 8234 	beq.w	8013584 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801311c:	4b95      	ldr	r3, [pc, #596]	; (8013374 <tcp_process+0x594>)
 801311e:	6819      	ldr	r1, [r3, #0]
 8013120:	4b95      	ldr	r3, [pc, #596]	; (8013378 <tcp_process+0x598>)
 8013122:	881b      	ldrh	r3, [r3, #0]
 8013124:	461a      	mov	r2, r3
 8013126:	4b95      	ldr	r3, [pc, #596]	; (801337c <tcp_process+0x59c>)
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801312c:	4b94      	ldr	r3, [pc, #592]	; (8013380 <tcp_process+0x5a0>)
 801312e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013130:	885b      	ldrh	r3, [r3, #2]
 8013132:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013134:	4a92      	ldr	r2, [pc, #584]	; (8013380 <tcp_process+0x5a0>)
 8013136:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013138:	8812      	ldrh	r2, [r2, #0]
 801313a:	b292      	uxth	r2, r2
 801313c:	9202      	str	r2, [sp, #8]
 801313e:	9301      	str	r3, [sp, #4]
 8013140:	4b90      	ldr	r3, [pc, #576]	; (8013384 <tcp_process+0x5a4>)
 8013142:	9300      	str	r3, [sp, #0]
 8013144:	4b90      	ldr	r3, [pc, #576]	; (8013388 <tcp_process+0x5a8>)
 8013146:	4602      	mov	r2, r0
 8013148:	6878      	ldr	r0, [r7, #4]
 801314a:	f002 fcd3 	bl	8015af4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013154:	2b05      	cmp	r3, #5
 8013156:	f200 8215 	bhi.w	8013584 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	2200      	movs	r2, #0
 801315e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8013160:	6878      	ldr	r0, [r7, #4]
 8013162:	f002 fa89 	bl	8015678 <tcp_rexmit_rto>
      break;
 8013166:	e20d      	b.n	8013584 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8013168:	4b81      	ldr	r3, [pc, #516]	; (8013370 <tcp_process+0x590>)
 801316a:	781b      	ldrb	r3, [r3, #0]
 801316c:	f003 0310 	and.w	r3, r3, #16
 8013170:	2b00      	cmp	r3, #0
 8013172:	f000 80a1 	beq.w	80132b8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013176:	4b7f      	ldr	r3, [pc, #508]	; (8013374 <tcp_process+0x594>)
 8013178:	681a      	ldr	r2, [r3, #0]
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801317e:	1ad3      	subs	r3, r2, r3
 8013180:	3b01      	subs	r3, #1
 8013182:	2b00      	cmp	r3, #0
 8013184:	db7e      	blt.n	8013284 <tcp_process+0x4a4>
 8013186:	4b7b      	ldr	r3, [pc, #492]	; (8013374 <tcp_process+0x594>)
 8013188:	681a      	ldr	r2, [r3, #0]
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801318e:	1ad3      	subs	r3, r2, r3
 8013190:	2b00      	cmp	r3, #0
 8013192:	dc77      	bgt.n	8013284 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	2204      	movs	r2, #4
 8013198:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d102      	bne.n	80131a8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80131a2:	23fa      	movs	r3, #250	; 0xfa
 80131a4:	76bb      	strb	r3, [r7, #26]
 80131a6:	e01d      	b.n	80131e4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80131ac:	699b      	ldr	r3, [r3, #24]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d106      	bne.n	80131c0 <tcp_process+0x3e0>
 80131b2:	4b76      	ldr	r3, [pc, #472]	; (801338c <tcp_process+0x5ac>)
 80131b4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80131b8:	4975      	ldr	r1, [pc, #468]	; (8013390 <tcp_process+0x5b0>)
 80131ba:	4876      	ldr	r0, [pc, #472]	; (8013394 <tcp_process+0x5b4>)
 80131bc:	f009 fab8 	bl	801c730 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80131c4:	699b      	ldr	r3, [r3, #24]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d00a      	beq.n	80131e0 <tcp_process+0x400>
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80131ce:	699b      	ldr	r3, [r3, #24]
 80131d0:	687a      	ldr	r2, [r7, #4]
 80131d2:	6910      	ldr	r0, [r2, #16]
 80131d4:	2200      	movs	r2, #0
 80131d6:	6879      	ldr	r1, [r7, #4]
 80131d8:	4798      	blx	r3
 80131da:	4603      	mov	r3, r0
 80131dc:	76bb      	strb	r3, [r7, #26]
 80131de:	e001      	b.n	80131e4 <tcp_process+0x404>
 80131e0:	23f0      	movs	r3, #240	; 0xf0
 80131e2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80131e4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d00a      	beq.n	8013202 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80131ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80131f0:	f113 0f0d 	cmn.w	r3, #13
 80131f4:	d002      	beq.n	80131fc <tcp_process+0x41c>
              tcp_abort(pcb);
 80131f6:	6878      	ldr	r0, [r7, #4]
 80131f8:	f7fd fee2 	bl	8010fc0 <tcp_abort>
            }
            return ERR_ABRT;
 80131fc:	f06f 030c 	mvn.w	r3, #12
 8013200:	e1ce      	b.n	80135a0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8013202:	6878      	ldr	r0, [r7, #4]
 8013204:	f000 fae0 	bl	80137c8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8013208:	4b63      	ldr	r3, [pc, #396]	; (8013398 <tcp_process+0x5b8>)
 801320a:	881b      	ldrh	r3, [r3, #0]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d005      	beq.n	801321c <tcp_process+0x43c>
            recv_acked--;
 8013210:	4b61      	ldr	r3, [pc, #388]	; (8013398 <tcp_process+0x5b8>)
 8013212:	881b      	ldrh	r3, [r3, #0]
 8013214:	3b01      	subs	r3, #1
 8013216:	b29a      	uxth	r2, r3
 8013218:	4b5f      	ldr	r3, [pc, #380]	; (8013398 <tcp_process+0x5b8>)
 801321a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013220:	009a      	lsls	r2, r3, #2
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013226:	005b      	lsls	r3, r3, #1
 8013228:	f241 111c 	movw	r1, #4380	; 0x111c
 801322c:	428b      	cmp	r3, r1
 801322e:	bf38      	it	cc
 8013230:	460b      	movcc	r3, r1
 8013232:	429a      	cmp	r2, r3
 8013234:	d204      	bcs.n	8013240 <tcp_process+0x460>
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801323a:	009b      	lsls	r3, r3, #2
 801323c:	b29b      	uxth	r3, r3
 801323e:	e00d      	b.n	801325c <tcp_process+0x47c>
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013244:	005b      	lsls	r3, r3, #1
 8013246:	f241 121c 	movw	r2, #4380	; 0x111c
 801324a:	4293      	cmp	r3, r2
 801324c:	d904      	bls.n	8013258 <tcp_process+0x478>
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013252:	005b      	lsls	r3, r3, #1
 8013254:	b29b      	uxth	r3, r3
 8013256:	e001      	b.n	801325c <tcp_process+0x47c>
 8013258:	f241 131c 	movw	r3, #4380	; 0x111c
 801325c:	687a      	ldr	r2, [r7, #4]
 801325e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013262:	4b4e      	ldr	r3, [pc, #312]	; (801339c <tcp_process+0x5bc>)
 8013264:	781b      	ldrb	r3, [r3, #0]
 8013266:	f003 0320 	and.w	r3, r3, #32
 801326a:	2b00      	cmp	r3, #0
 801326c:	d037      	beq.n	80132de <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	8b5b      	ldrh	r3, [r3, #26]
 8013272:	f043 0302 	orr.w	r3, r3, #2
 8013276:	b29a      	uxth	r2, r3
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	2207      	movs	r2, #7
 8013280:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8013282:	e02c      	b.n	80132de <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013284:	4b3b      	ldr	r3, [pc, #236]	; (8013374 <tcp_process+0x594>)
 8013286:	6819      	ldr	r1, [r3, #0]
 8013288:	4b3b      	ldr	r3, [pc, #236]	; (8013378 <tcp_process+0x598>)
 801328a:	881b      	ldrh	r3, [r3, #0]
 801328c:	461a      	mov	r2, r3
 801328e:	4b3b      	ldr	r3, [pc, #236]	; (801337c <tcp_process+0x59c>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013294:	4b3a      	ldr	r3, [pc, #232]	; (8013380 <tcp_process+0x5a0>)
 8013296:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013298:	885b      	ldrh	r3, [r3, #2]
 801329a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801329c:	4a38      	ldr	r2, [pc, #224]	; (8013380 <tcp_process+0x5a0>)
 801329e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132a0:	8812      	ldrh	r2, [r2, #0]
 80132a2:	b292      	uxth	r2, r2
 80132a4:	9202      	str	r2, [sp, #8]
 80132a6:	9301      	str	r3, [sp, #4]
 80132a8:	4b36      	ldr	r3, [pc, #216]	; (8013384 <tcp_process+0x5a4>)
 80132aa:	9300      	str	r3, [sp, #0]
 80132ac:	4b36      	ldr	r3, [pc, #216]	; (8013388 <tcp_process+0x5a8>)
 80132ae:	4602      	mov	r2, r0
 80132b0:	6878      	ldr	r0, [r7, #4]
 80132b2:	f002 fc1f 	bl	8015af4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80132b6:	e167      	b.n	8013588 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80132b8:	4b2d      	ldr	r3, [pc, #180]	; (8013370 <tcp_process+0x590>)
 80132ba:	781b      	ldrb	r3, [r3, #0]
 80132bc:	f003 0302 	and.w	r3, r3, #2
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	f000 8161 	beq.w	8013588 <tcp_process+0x7a8>
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132ca:	1e5a      	subs	r2, r3, #1
 80132cc:	4b2b      	ldr	r3, [pc, #172]	; (801337c <tcp_process+0x59c>)
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	429a      	cmp	r2, r3
 80132d2:	f040 8159 	bne.w	8013588 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80132d6:	6878      	ldr	r0, [r7, #4]
 80132d8:	f002 f9f0 	bl	80156bc <tcp_rexmit>
      break;
 80132dc:	e154      	b.n	8013588 <tcp_process+0x7a8>
 80132de:	e153      	b.n	8013588 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80132e0:	6878      	ldr	r0, [r7, #4]
 80132e2:	f000 fa71 	bl	80137c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80132e6:	4b2d      	ldr	r3, [pc, #180]	; (801339c <tcp_process+0x5bc>)
 80132e8:	781b      	ldrb	r3, [r3, #0]
 80132ea:	f003 0320 	and.w	r3, r3, #32
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	f000 814c 	beq.w	801358c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	8b5b      	ldrh	r3, [r3, #26]
 80132f8:	f043 0302 	orr.w	r3, r3, #2
 80132fc:	b29a      	uxth	r2, r3
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	2207      	movs	r2, #7
 8013306:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013308:	e140      	b.n	801358c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801330a:	6878      	ldr	r0, [r7, #4]
 801330c:	f000 fa5c 	bl	80137c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013310:	4b22      	ldr	r3, [pc, #136]	; (801339c <tcp_process+0x5bc>)
 8013312:	781b      	ldrb	r3, [r3, #0]
 8013314:	f003 0320 	and.w	r3, r3, #32
 8013318:	2b00      	cmp	r3, #0
 801331a:	d071      	beq.n	8013400 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801331c:	4b14      	ldr	r3, [pc, #80]	; (8013370 <tcp_process+0x590>)
 801331e:	781b      	ldrb	r3, [r3, #0]
 8013320:	f003 0310 	and.w	r3, r3, #16
 8013324:	2b00      	cmp	r3, #0
 8013326:	d060      	beq.n	80133ea <tcp_process+0x60a>
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801332c:	4b11      	ldr	r3, [pc, #68]	; (8013374 <tcp_process+0x594>)
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	429a      	cmp	r2, r3
 8013332:	d15a      	bne.n	80133ea <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013338:	2b00      	cmp	r3, #0
 801333a:	d156      	bne.n	80133ea <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	8b5b      	ldrh	r3, [r3, #26]
 8013340:	f043 0302 	orr.w	r3, r3, #2
 8013344:	b29a      	uxth	r2, r3
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801334a:	6878      	ldr	r0, [r7, #4]
 801334c:	f7fe fd3a 	bl	8011dc4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013350:	4b13      	ldr	r3, [pc, #76]	; (80133a0 <tcp_process+0x5c0>)
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	687a      	ldr	r2, [r7, #4]
 8013356:	429a      	cmp	r2, r3
 8013358:	d105      	bne.n	8013366 <tcp_process+0x586>
 801335a:	4b11      	ldr	r3, [pc, #68]	; (80133a0 <tcp_process+0x5c0>)
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	68db      	ldr	r3, [r3, #12]
 8013360:	4a0f      	ldr	r2, [pc, #60]	; (80133a0 <tcp_process+0x5c0>)
 8013362:	6013      	str	r3, [r2, #0]
 8013364:	e02e      	b.n	80133c4 <tcp_process+0x5e4>
 8013366:	4b0e      	ldr	r3, [pc, #56]	; (80133a0 <tcp_process+0x5c0>)
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	617b      	str	r3, [r7, #20]
 801336c:	e027      	b.n	80133be <tcp_process+0x5de>
 801336e:	bf00      	nop
 8013370:	200073e0 	.word	0x200073e0
 8013374:	200073d8 	.word	0x200073d8
 8013378:	200073de 	.word	0x200073de
 801337c:	200073d4 	.word	0x200073d4
 8013380:	200073c4 	.word	0x200073c4
 8013384:	20003bf8 	.word	0x20003bf8
 8013388:	20003bfc 	.word	0x20003bfc
 801338c:	08021894 	.word	0x08021894
 8013390:	08021b34 	.word	0x08021b34
 8013394:	080218e0 	.word	0x080218e0
 8013398:	200073dc 	.word	0x200073dc
 801339c:	200073e1 	.word	0x200073e1
 80133a0:	200073a8 	.word	0x200073a8
 80133a4:	697b      	ldr	r3, [r7, #20]
 80133a6:	68db      	ldr	r3, [r3, #12]
 80133a8:	687a      	ldr	r2, [r7, #4]
 80133aa:	429a      	cmp	r2, r3
 80133ac:	d104      	bne.n	80133b8 <tcp_process+0x5d8>
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	68da      	ldr	r2, [r3, #12]
 80133b2:	697b      	ldr	r3, [r7, #20]
 80133b4:	60da      	str	r2, [r3, #12]
 80133b6:	e005      	b.n	80133c4 <tcp_process+0x5e4>
 80133b8:	697b      	ldr	r3, [r7, #20]
 80133ba:	68db      	ldr	r3, [r3, #12]
 80133bc:	617b      	str	r3, [r7, #20]
 80133be:	697b      	ldr	r3, [r7, #20]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d1ef      	bne.n	80133a4 <tcp_process+0x5c4>
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	2200      	movs	r2, #0
 80133c8:	60da      	str	r2, [r3, #12]
 80133ca:	4b77      	ldr	r3, [pc, #476]	; (80135a8 <tcp_process+0x7c8>)
 80133cc:	2201      	movs	r2, #1
 80133ce:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	220a      	movs	r2, #10
 80133d4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80133d6:	4b75      	ldr	r3, [pc, #468]	; (80135ac <tcp_process+0x7cc>)
 80133d8:	681a      	ldr	r2, [r3, #0]
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	60da      	str	r2, [r3, #12]
 80133de:	4a73      	ldr	r2, [pc, #460]	; (80135ac <tcp_process+0x7cc>)
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	6013      	str	r3, [r2, #0]
 80133e4:	f002 fd50 	bl	8015e88 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80133e8:	e0d2      	b.n	8013590 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	8b5b      	ldrh	r3, [r3, #26]
 80133ee:	f043 0302 	orr.w	r3, r3, #2
 80133f2:	b29a      	uxth	r2, r3
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	2208      	movs	r2, #8
 80133fc:	751a      	strb	r2, [r3, #20]
      break;
 80133fe:	e0c7      	b.n	8013590 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013400:	4b6b      	ldr	r3, [pc, #428]	; (80135b0 <tcp_process+0x7d0>)
 8013402:	781b      	ldrb	r3, [r3, #0]
 8013404:	f003 0310 	and.w	r3, r3, #16
 8013408:	2b00      	cmp	r3, #0
 801340a:	f000 80c1 	beq.w	8013590 <tcp_process+0x7b0>
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013412:	4b68      	ldr	r3, [pc, #416]	; (80135b4 <tcp_process+0x7d4>)
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	429a      	cmp	r2, r3
 8013418:	f040 80ba 	bne.w	8013590 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013420:	2b00      	cmp	r3, #0
 8013422:	f040 80b5 	bne.w	8013590 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	2206      	movs	r2, #6
 801342a:	751a      	strb	r2, [r3, #20]
      break;
 801342c:	e0b0      	b.n	8013590 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801342e:	6878      	ldr	r0, [r7, #4]
 8013430:	f000 f9ca 	bl	80137c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013434:	4b60      	ldr	r3, [pc, #384]	; (80135b8 <tcp_process+0x7d8>)
 8013436:	781b      	ldrb	r3, [r3, #0]
 8013438:	f003 0320 	and.w	r3, r3, #32
 801343c:	2b00      	cmp	r3, #0
 801343e:	f000 80a9 	beq.w	8013594 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	8b5b      	ldrh	r3, [r3, #26]
 8013446:	f043 0302 	orr.w	r3, r3, #2
 801344a:	b29a      	uxth	r2, r3
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013450:	6878      	ldr	r0, [r7, #4]
 8013452:	f7fe fcb7 	bl	8011dc4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013456:	4b59      	ldr	r3, [pc, #356]	; (80135bc <tcp_process+0x7dc>)
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	687a      	ldr	r2, [r7, #4]
 801345c:	429a      	cmp	r2, r3
 801345e:	d105      	bne.n	801346c <tcp_process+0x68c>
 8013460:	4b56      	ldr	r3, [pc, #344]	; (80135bc <tcp_process+0x7dc>)
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	68db      	ldr	r3, [r3, #12]
 8013466:	4a55      	ldr	r2, [pc, #340]	; (80135bc <tcp_process+0x7dc>)
 8013468:	6013      	str	r3, [r2, #0]
 801346a:	e013      	b.n	8013494 <tcp_process+0x6b4>
 801346c:	4b53      	ldr	r3, [pc, #332]	; (80135bc <tcp_process+0x7dc>)
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	613b      	str	r3, [r7, #16]
 8013472:	e00c      	b.n	801348e <tcp_process+0x6ae>
 8013474:	693b      	ldr	r3, [r7, #16]
 8013476:	68db      	ldr	r3, [r3, #12]
 8013478:	687a      	ldr	r2, [r7, #4]
 801347a:	429a      	cmp	r2, r3
 801347c:	d104      	bne.n	8013488 <tcp_process+0x6a8>
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	68da      	ldr	r2, [r3, #12]
 8013482:	693b      	ldr	r3, [r7, #16]
 8013484:	60da      	str	r2, [r3, #12]
 8013486:	e005      	b.n	8013494 <tcp_process+0x6b4>
 8013488:	693b      	ldr	r3, [r7, #16]
 801348a:	68db      	ldr	r3, [r3, #12]
 801348c:	613b      	str	r3, [r7, #16]
 801348e:	693b      	ldr	r3, [r7, #16]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d1ef      	bne.n	8013474 <tcp_process+0x694>
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	2200      	movs	r2, #0
 8013498:	60da      	str	r2, [r3, #12]
 801349a:	4b43      	ldr	r3, [pc, #268]	; (80135a8 <tcp_process+0x7c8>)
 801349c:	2201      	movs	r2, #1
 801349e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	220a      	movs	r2, #10
 80134a4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80134a6:	4b41      	ldr	r3, [pc, #260]	; (80135ac <tcp_process+0x7cc>)
 80134a8:	681a      	ldr	r2, [r3, #0]
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	60da      	str	r2, [r3, #12]
 80134ae:	4a3f      	ldr	r2, [pc, #252]	; (80135ac <tcp_process+0x7cc>)
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	6013      	str	r3, [r2, #0]
 80134b4:	f002 fce8 	bl	8015e88 <tcp_timer_needed>
      }
      break;
 80134b8:	e06c      	b.n	8013594 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80134ba:	6878      	ldr	r0, [r7, #4]
 80134bc:	f000 f984 	bl	80137c8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80134c0:	4b3b      	ldr	r3, [pc, #236]	; (80135b0 <tcp_process+0x7d0>)
 80134c2:	781b      	ldrb	r3, [r3, #0]
 80134c4:	f003 0310 	and.w	r3, r3, #16
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d065      	beq.n	8013598 <tcp_process+0x7b8>
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80134d0:	4b38      	ldr	r3, [pc, #224]	; (80135b4 <tcp_process+0x7d4>)
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	429a      	cmp	r2, r3
 80134d6:	d15f      	bne.n	8013598 <tcp_process+0x7b8>
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d15b      	bne.n	8013598 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80134e0:	6878      	ldr	r0, [r7, #4]
 80134e2:	f7fe fc6f 	bl	8011dc4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80134e6:	4b35      	ldr	r3, [pc, #212]	; (80135bc <tcp_process+0x7dc>)
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	687a      	ldr	r2, [r7, #4]
 80134ec:	429a      	cmp	r2, r3
 80134ee:	d105      	bne.n	80134fc <tcp_process+0x71c>
 80134f0:	4b32      	ldr	r3, [pc, #200]	; (80135bc <tcp_process+0x7dc>)
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	68db      	ldr	r3, [r3, #12]
 80134f6:	4a31      	ldr	r2, [pc, #196]	; (80135bc <tcp_process+0x7dc>)
 80134f8:	6013      	str	r3, [r2, #0]
 80134fa:	e013      	b.n	8013524 <tcp_process+0x744>
 80134fc:	4b2f      	ldr	r3, [pc, #188]	; (80135bc <tcp_process+0x7dc>)
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	60fb      	str	r3, [r7, #12]
 8013502:	e00c      	b.n	801351e <tcp_process+0x73e>
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	68db      	ldr	r3, [r3, #12]
 8013508:	687a      	ldr	r2, [r7, #4]
 801350a:	429a      	cmp	r2, r3
 801350c:	d104      	bne.n	8013518 <tcp_process+0x738>
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	68da      	ldr	r2, [r3, #12]
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	60da      	str	r2, [r3, #12]
 8013516:	e005      	b.n	8013524 <tcp_process+0x744>
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	68db      	ldr	r3, [r3, #12]
 801351c:	60fb      	str	r3, [r7, #12]
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d1ef      	bne.n	8013504 <tcp_process+0x724>
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	2200      	movs	r2, #0
 8013528:	60da      	str	r2, [r3, #12]
 801352a:	4b1f      	ldr	r3, [pc, #124]	; (80135a8 <tcp_process+0x7c8>)
 801352c:	2201      	movs	r2, #1
 801352e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	220a      	movs	r2, #10
 8013534:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013536:	4b1d      	ldr	r3, [pc, #116]	; (80135ac <tcp_process+0x7cc>)
 8013538:	681a      	ldr	r2, [r3, #0]
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	60da      	str	r2, [r3, #12]
 801353e:	4a1b      	ldr	r2, [pc, #108]	; (80135ac <tcp_process+0x7cc>)
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	6013      	str	r3, [r2, #0]
 8013544:	f002 fca0 	bl	8015e88 <tcp_timer_needed>
      }
      break;
 8013548:	e026      	b.n	8013598 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801354a:	6878      	ldr	r0, [r7, #4]
 801354c:	f000 f93c 	bl	80137c8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013550:	4b17      	ldr	r3, [pc, #92]	; (80135b0 <tcp_process+0x7d0>)
 8013552:	781b      	ldrb	r3, [r3, #0]
 8013554:	f003 0310 	and.w	r3, r3, #16
 8013558:	2b00      	cmp	r3, #0
 801355a:	d01f      	beq.n	801359c <tcp_process+0x7bc>
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013560:	4b14      	ldr	r3, [pc, #80]	; (80135b4 <tcp_process+0x7d4>)
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	429a      	cmp	r2, r3
 8013566:	d119      	bne.n	801359c <tcp_process+0x7bc>
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801356c:	2b00      	cmp	r3, #0
 801356e:	d115      	bne.n	801359c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013570:	4b11      	ldr	r3, [pc, #68]	; (80135b8 <tcp_process+0x7d8>)
 8013572:	781b      	ldrb	r3, [r3, #0]
 8013574:	f043 0310 	orr.w	r3, r3, #16
 8013578:	b2da      	uxtb	r2, r3
 801357a:	4b0f      	ldr	r3, [pc, #60]	; (80135b8 <tcp_process+0x7d8>)
 801357c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801357e:	e00d      	b.n	801359c <tcp_process+0x7bc>
    default:
      break;
 8013580:	bf00      	nop
 8013582:	e00c      	b.n	801359e <tcp_process+0x7be>
      break;
 8013584:	bf00      	nop
 8013586:	e00a      	b.n	801359e <tcp_process+0x7be>
      break;
 8013588:	bf00      	nop
 801358a:	e008      	b.n	801359e <tcp_process+0x7be>
      break;
 801358c:	bf00      	nop
 801358e:	e006      	b.n	801359e <tcp_process+0x7be>
      break;
 8013590:	bf00      	nop
 8013592:	e004      	b.n	801359e <tcp_process+0x7be>
      break;
 8013594:	bf00      	nop
 8013596:	e002      	b.n	801359e <tcp_process+0x7be>
      break;
 8013598:	bf00      	nop
 801359a:	e000      	b.n	801359e <tcp_process+0x7be>
      break;
 801359c:	bf00      	nop
  }
  return ERR_OK;
 801359e:	2300      	movs	r3, #0
}
 80135a0:	4618      	mov	r0, r3
 80135a2:	3724      	adds	r7, #36	; 0x24
 80135a4:	46bd      	mov	sp, r7
 80135a6:	bd90      	pop	{r4, r7, pc}
 80135a8:	200073b0 	.word	0x200073b0
 80135ac:	200073ac 	.word	0x200073ac
 80135b0:	200073e0 	.word	0x200073e0
 80135b4:	200073d8 	.word	0x200073d8
 80135b8:	200073e1 	.word	0x200073e1
 80135bc:	200073a8 	.word	0x200073a8

080135c0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80135c0:	b590      	push	{r4, r7, lr}
 80135c2:	b085      	sub	sp, #20
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	6078      	str	r0, [r7, #4]
 80135c8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d106      	bne.n	80135de <tcp_oos_insert_segment+0x1e>
 80135d0:	4b3b      	ldr	r3, [pc, #236]	; (80136c0 <tcp_oos_insert_segment+0x100>)
 80135d2:	f240 421f 	movw	r2, #1055	; 0x41f
 80135d6:	493b      	ldr	r1, [pc, #236]	; (80136c4 <tcp_oos_insert_segment+0x104>)
 80135d8:	483b      	ldr	r0, [pc, #236]	; (80136c8 <tcp_oos_insert_segment+0x108>)
 80135da:	f009 f8a9 	bl	801c730 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	68db      	ldr	r3, [r3, #12]
 80135e2:	899b      	ldrh	r3, [r3, #12]
 80135e4:	b29b      	uxth	r3, r3
 80135e6:	4618      	mov	r0, r3
 80135e8:	f7fa ff3c 	bl	800e464 <lwip_htons>
 80135ec:	4603      	mov	r3, r0
 80135ee:	b2db      	uxtb	r3, r3
 80135f0:	f003 0301 	and.w	r3, r3, #1
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d028      	beq.n	801364a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80135f8:	6838      	ldr	r0, [r7, #0]
 80135fa:	f7fe f9b7 	bl	801196c <tcp_segs_free>
    next = NULL;
 80135fe:	2300      	movs	r3, #0
 8013600:	603b      	str	r3, [r7, #0]
 8013602:	e056      	b.n	80136b2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013604:	683b      	ldr	r3, [r7, #0]
 8013606:	68db      	ldr	r3, [r3, #12]
 8013608:	899b      	ldrh	r3, [r3, #12]
 801360a:	b29b      	uxth	r3, r3
 801360c:	4618      	mov	r0, r3
 801360e:	f7fa ff29 	bl	800e464 <lwip_htons>
 8013612:	4603      	mov	r3, r0
 8013614:	b2db      	uxtb	r3, r3
 8013616:	f003 0301 	and.w	r3, r3, #1
 801361a:	2b00      	cmp	r3, #0
 801361c:	d00d      	beq.n	801363a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	68db      	ldr	r3, [r3, #12]
 8013622:	899b      	ldrh	r3, [r3, #12]
 8013624:	b29c      	uxth	r4, r3
 8013626:	2001      	movs	r0, #1
 8013628:	f7fa ff1c 	bl	800e464 <lwip_htons>
 801362c:	4603      	mov	r3, r0
 801362e:	461a      	mov	r2, r3
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	68db      	ldr	r3, [r3, #12]
 8013634:	4322      	orrs	r2, r4
 8013636:	b292      	uxth	r2, r2
 8013638:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801363a:	683b      	ldr	r3, [r7, #0]
 801363c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801363e:	683b      	ldr	r3, [r7, #0]
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013644:	68f8      	ldr	r0, [r7, #12]
 8013646:	f7fe f9a6 	bl	8011996 <tcp_seg_free>
    while (next &&
 801364a:	683b      	ldr	r3, [r7, #0]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d00e      	beq.n	801366e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	891b      	ldrh	r3, [r3, #8]
 8013654:	461a      	mov	r2, r3
 8013656:	4b1d      	ldr	r3, [pc, #116]	; (80136cc <tcp_oos_insert_segment+0x10c>)
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	441a      	add	r2, r3
 801365c:	683b      	ldr	r3, [r7, #0]
 801365e:	68db      	ldr	r3, [r3, #12]
 8013660:	685b      	ldr	r3, [r3, #4]
 8013662:	6839      	ldr	r1, [r7, #0]
 8013664:	8909      	ldrh	r1, [r1, #8]
 8013666:	440b      	add	r3, r1
 8013668:	1ad3      	subs	r3, r2, r3
    while (next &&
 801366a:	2b00      	cmp	r3, #0
 801366c:	daca      	bge.n	8013604 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801366e:	683b      	ldr	r3, [r7, #0]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d01e      	beq.n	80136b2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	891b      	ldrh	r3, [r3, #8]
 8013678:	461a      	mov	r2, r3
 801367a:	4b14      	ldr	r3, [pc, #80]	; (80136cc <tcp_oos_insert_segment+0x10c>)
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	441a      	add	r2, r3
 8013680:	683b      	ldr	r3, [r7, #0]
 8013682:	68db      	ldr	r3, [r3, #12]
 8013684:	685b      	ldr	r3, [r3, #4]
 8013686:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013688:	2b00      	cmp	r3, #0
 801368a:	dd12      	ble.n	80136b2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801368c:	683b      	ldr	r3, [r7, #0]
 801368e:	68db      	ldr	r3, [r3, #12]
 8013690:	685b      	ldr	r3, [r3, #4]
 8013692:	b29a      	uxth	r2, r3
 8013694:	4b0d      	ldr	r3, [pc, #52]	; (80136cc <tcp_oos_insert_segment+0x10c>)
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	b29b      	uxth	r3, r3
 801369a:	1ad3      	subs	r3, r2, r3
 801369c:	b29a      	uxth	r2, r3
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	685a      	ldr	r2, [r3, #4]
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	891b      	ldrh	r3, [r3, #8]
 80136aa:	4619      	mov	r1, r3
 80136ac:	4610      	mov	r0, r2
 80136ae:	f7fc fbe9 	bl	800fe84 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	683a      	ldr	r2, [r7, #0]
 80136b6:	601a      	str	r2, [r3, #0]
}
 80136b8:	bf00      	nop
 80136ba:	3714      	adds	r7, #20
 80136bc:	46bd      	mov	sp, r7
 80136be:	bd90      	pop	{r4, r7, pc}
 80136c0:	08021894 	.word	0x08021894
 80136c4:	08021b54 	.word	0x08021b54
 80136c8:	080218e0 	.word	0x080218e0
 80136cc:	200073d4 	.word	0x200073d4

080136d0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80136d0:	b5b0      	push	{r4, r5, r7, lr}
 80136d2:	b086      	sub	sp, #24
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	60f8      	str	r0, [r7, #12]
 80136d8:	60b9      	str	r1, [r7, #8]
 80136da:	607a      	str	r2, [r7, #4]
 80136dc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80136de:	e03e      	b.n	801375e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80136e0:	68bb      	ldr	r3, [r7, #8]
 80136e2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80136e4:	68bb      	ldr	r3, [r7, #8]
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80136ea:	697b      	ldr	r3, [r7, #20]
 80136ec:	685b      	ldr	r3, [r3, #4]
 80136ee:	4618      	mov	r0, r3
 80136f0:	f7fc fdd6 	bl	80102a0 <pbuf_clen>
 80136f4:	4603      	mov	r3, r0
 80136f6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80136fe:	8a7a      	ldrh	r2, [r7, #18]
 8013700:	429a      	cmp	r2, r3
 8013702:	d906      	bls.n	8013712 <tcp_free_acked_segments+0x42>
 8013704:	4b2a      	ldr	r3, [pc, #168]	; (80137b0 <tcp_free_acked_segments+0xe0>)
 8013706:	f240 4257 	movw	r2, #1111	; 0x457
 801370a:	492a      	ldr	r1, [pc, #168]	; (80137b4 <tcp_free_acked_segments+0xe4>)
 801370c:	482a      	ldr	r0, [pc, #168]	; (80137b8 <tcp_free_acked_segments+0xe8>)
 801370e:	f009 f80f 	bl	801c730 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8013718:	8a7b      	ldrh	r3, [r7, #18]
 801371a:	1ad3      	subs	r3, r2, r3
 801371c:	b29a      	uxth	r2, r3
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013724:	697b      	ldr	r3, [r7, #20]
 8013726:	891a      	ldrh	r2, [r3, #8]
 8013728:	4b24      	ldr	r3, [pc, #144]	; (80137bc <tcp_free_acked_segments+0xec>)
 801372a:	881b      	ldrh	r3, [r3, #0]
 801372c:	4413      	add	r3, r2
 801372e:	b29a      	uxth	r2, r3
 8013730:	4b22      	ldr	r3, [pc, #136]	; (80137bc <tcp_free_acked_segments+0xec>)
 8013732:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013734:	6978      	ldr	r0, [r7, #20]
 8013736:	f7fe f92e 	bl	8011996 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013740:	2b00      	cmp	r3, #0
 8013742:	d00c      	beq.n	801375e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013744:	68bb      	ldr	r3, [r7, #8]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d109      	bne.n	801375e <tcp_free_acked_segments+0x8e>
 801374a:	683b      	ldr	r3, [r7, #0]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d106      	bne.n	801375e <tcp_free_acked_segments+0x8e>
 8013750:	4b17      	ldr	r3, [pc, #92]	; (80137b0 <tcp_free_acked_segments+0xe0>)
 8013752:	f240 4261 	movw	r2, #1121	; 0x461
 8013756:	491a      	ldr	r1, [pc, #104]	; (80137c0 <tcp_free_acked_segments+0xf0>)
 8013758:	4817      	ldr	r0, [pc, #92]	; (80137b8 <tcp_free_acked_segments+0xe8>)
 801375a:	f008 ffe9 	bl	801c730 <iprintf>
  while (seg_list != NULL &&
 801375e:	68bb      	ldr	r3, [r7, #8]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d020      	beq.n	80137a6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013764:	68bb      	ldr	r3, [r7, #8]
 8013766:	68db      	ldr	r3, [r3, #12]
 8013768:	685b      	ldr	r3, [r3, #4]
 801376a:	4618      	mov	r0, r3
 801376c:	f7fa fe8f 	bl	800e48e <lwip_htonl>
 8013770:	4604      	mov	r4, r0
 8013772:	68bb      	ldr	r3, [r7, #8]
 8013774:	891b      	ldrh	r3, [r3, #8]
 8013776:	461d      	mov	r5, r3
 8013778:	68bb      	ldr	r3, [r7, #8]
 801377a:	68db      	ldr	r3, [r3, #12]
 801377c:	899b      	ldrh	r3, [r3, #12]
 801377e:	b29b      	uxth	r3, r3
 8013780:	4618      	mov	r0, r3
 8013782:	f7fa fe6f 	bl	800e464 <lwip_htons>
 8013786:	4603      	mov	r3, r0
 8013788:	b2db      	uxtb	r3, r3
 801378a:	f003 0303 	and.w	r3, r3, #3
 801378e:	2b00      	cmp	r3, #0
 8013790:	d001      	beq.n	8013796 <tcp_free_acked_segments+0xc6>
 8013792:	2301      	movs	r3, #1
 8013794:	e000      	b.n	8013798 <tcp_free_acked_segments+0xc8>
 8013796:	2300      	movs	r3, #0
 8013798:	442b      	add	r3, r5
 801379a:	18e2      	adds	r2, r4, r3
 801379c:	4b09      	ldr	r3, [pc, #36]	; (80137c4 <tcp_free_acked_segments+0xf4>)
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	dd9c      	ble.n	80136e0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80137a6:	68bb      	ldr	r3, [r7, #8]
}
 80137a8:	4618      	mov	r0, r3
 80137aa:	3718      	adds	r7, #24
 80137ac:	46bd      	mov	sp, r7
 80137ae:	bdb0      	pop	{r4, r5, r7, pc}
 80137b0:	08021894 	.word	0x08021894
 80137b4:	08021b7c 	.word	0x08021b7c
 80137b8:	080218e0 	.word	0x080218e0
 80137bc:	200073dc 	.word	0x200073dc
 80137c0:	08021ba4 	.word	0x08021ba4
 80137c4:	200073d8 	.word	0x200073d8

080137c8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80137c8:	b5b0      	push	{r4, r5, r7, lr}
 80137ca:	b094      	sub	sp, #80	; 0x50
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80137d0:	2300      	movs	r3, #0
 80137d2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d106      	bne.n	80137e8 <tcp_receive+0x20>
 80137da:	4b91      	ldr	r3, [pc, #580]	; (8013a20 <tcp_receive+0x258>)
 80137dc:	f240 427b 	movw	r2, #1147	; 0x47b
 80137e0:	4990      	ldr	r1, [pc, #576]	; (8013a24 <tcp_receive+0x25c>)
 80137e2:	4891      	ldr	r0, [pc, #580]	; (8013a28 <tcp_receive+0x260>)
 80137e4:	f008 ffa4 	bl	801c730 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	7d1b      	ldrb	r3, [r3, #20]
 80137ec:	2b03      	cmp	r3, #3
 80137ee:	d806      	bhi.n	80137fe <tcp_receive+0x36>
 80137f0:	4b8b      	ldr	r3, [pc, #556]	; (8013a20 <tcp_receive+0x258>)
 80137f2:	f240 427c 	movw	r2, #1148	; 0x47c
 80137f6:	498d      	ldr	r1, [pc, #564]	; (8013a2c <tcp_receive+0x264>)
 80137f8:	488b      	ldr	r0, [pc, #556]	; (8013a28 <tcp_receive+0x260>)
 80137fa:	f008 ff99 	bl	801c730 <iprintf>

  if (flags & TCP_ACK) {
 80137fe:	4b8c      	ldr	r3, [pc, #560]	; (8013a30 <tcp_receive+0x268>)
 8013800:	781b      	ldrb	r3, [r3, #0]
 8013802:	f003 0310 	and.w	r3, r3, #16
 8013806:	2b00      	cmp	r3, #0
 8013808:	f000 8264 	beq.w	8013cd4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013812:	461a      	mov	r2, r3
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013818:	4413      	add	r3, r2
 801381a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013820:	4b84      	ldr	r3, [pc, #528]	; (8013a34 <tcp_receive+0x26c>)
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	1ad3      	subs	r3, r2, r3
 8013826:	2b00      	cmp	r3, #0
 8013828:	db1b      	blt.n	8013862 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801382e:	4b81      	ldr	r3, [pc, #516]	; (8013a34 <tcp_receive+0x26c>)
 8013830:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013832:	429a      	cmp	r2, r3
 8013834:	d106      	bne.n	8013844 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801383a:	4b7f      	ldr	r3, [pc, #508]	; (8013a38 <tcp_receive+0x270>)
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	1ad3      	subs	r3, r2, r3
 8013840:	2b00      	cmp	r3, #0
 8013842:	db0e      	blt.n	8013862 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013848:	4b7b      	ldr	r3, [pc, #492]	; (8013a38 <tcp_receive+0x270>)
 801384a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801384c:	429a      	cmp	r2, r3
 801384e:	d125      	bne.n	801389c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013850:	4b7a      	ldr	r3, [pc, #488]	; (8013a3c <tcp_receive+0x274>)
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	89db      	ldrh	r3, [r3, #14]
 8013856:	b29a      	uxth	r2, r3
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801385e:	429a      	cmp	r2, r3
 8013860:	d91c      	bls.n	801389c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013862:	4b76      	ldr	r3, [pc, #472]	; (8013a3c <tcp_receive+0x274>)
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	89db      	ldrh	r3, [r3, #14]
 8013868:	b29a      	uxth	r2, r3
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801387c:	429a      	cmp	r2, r3
 801387e:	d205      	bcs.n	801388c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801388c:	4b69      	ldr	r3, [pc, #420]	; (8013a34 <tcp_receive+0x26c>)
 801388e:	681a      	ldr	r2, [r3, #0]
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8013894:	4b68      	ldr	r3, [pc, #416]	; (8013a38 <tcp_receive+0x270>)
 8013896:	681a      	ldr	r2, [r3, #0]
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801389c:	4b66      	ldr	r3, [pc, #408]	; (8013a38 <tcp_receive+0x270>)
 801389e:	681a      	ldr	r2, [r3, #0]
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80138a4:	1ad3      	subs	r3, r2, r3
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	dc58      	bgt.n	801395c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80138aa:	4b65      	ldr	r3, [pc, #404]	; (8013a40 <tcp_receive+0x278>)
 80138ac:	881b      	ldrh	r3, [r3, #0]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d14b      	bne.n	801394a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80138b6:	687a      	ldr	r2, [r7, #4]
 80138b8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80138bc:	4413      	add	r3, r2
 80138be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138c0:	429a      	cmp	r2, r3
 80138c2:	d142      	bne.n	801394a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	db3d      	blt.n	801394a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80138d2:	4b59      	ldr	r3, [pc, #356]	; (8013a38 <tcp_receive+0x270>)
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	429a      	cmp	r2, r3
 80138d8:	d137      	bne.n	801394a <tcp_receive+0x182>
              found_dupack = 1;
 80138da:	2301      	movs	r3, #1
 80138dc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80138e4:	2bff      	cmp	r3, #255	; 0xff
 80138e6:	d007      	beq.n	80138f8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80138ee:	3301      	adds	r3, #1
 80138f0:	b2da      	uxtb	r2, r3
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80138fe:	2b03      	cmp	r3, #3
 8013900:	d91b      	bls.n	801393a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801390c:	4413      	add	r3, r2
 801390e:	b29a      	uxth	r2, r3
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013916:	429a      	cmp	r2, r3
 8013918:	d30a      	bcc.n	8013930 <tcp_receive+0x168>
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013924:	4413      	add	r3, r2
 8013926:	b29a      	uxth	r2, r3
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801392e:	e004      	b.n	801393a <tcp_receive+0x172>
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013936:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013940:	2b02      	cmp	r3, #2
 8013942:	d902      	bls.n	801394a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013944:	6878      	ldr	r0, [r7, #4]
 8013946:	f001 ff2f 	bl	80157a8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801394a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801394c:	2b00      	cmp	r3, #0
 801394e:	f040 8161 	bne.w	8013c14 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	2200      	movs	r2, #0
 8013956:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801395a:	e15b      	b.n	8013c14 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801395c:	4b36      	ldr	r3, [pc, #216]	; (8013a38 <tcp_receive+0x270>)
 801395e:	681a      	ldr	r2, [r3, #0]
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013964:	1ad3      	subs	r3, r2, r3
 8013966:	3b01      	subs	r3, #1
 8013968:	2b00      	cmp	r3, #0
 801396a:	f2c0 814e 	blt.w	8013c0a <tcp_receive+0x442>
 801396e:	4b32      	ldr	r3, [pc, #200]	; (8013a38 <tcp_receive+0x270>)
 8013970:	681a      	ldr	r2, [r3, #0]
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013976:	1ad3      	subs	r3, r2, r3
 8013978:	2b00      	cmp	r3, #0
 801397a:	f300 8146 	bgt.w	8013c0a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	8b5b      	ldrh	r3, [r3, #26]
 8013982:	f003 0304 	and.w	r3, r3, #4
 8013986:	2b00      	cmp	r3, #0
 8013988:	d010      	beq.n	80139ac <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	8b5b      	ldrh	r3, [r3, #26]
 801398e:	f023 0304 	bic.w	r3, r3, #4
 8013992:	b29a      	uxth	r2, r3
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	2200      	movs	r2, #0
 80139a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	2200      	movs	r2, #0
 80139b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80139ba:	10db      	asrs	r3, r3, #3
 80139bc:	b21b      	sxth	r3, r3
 80139be:	b29a      	uxth	r2, r3
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80139c6:	b29b      	uxth	r3, r3
 80139c8:	4413      	add	r3, r2
 80139ca:	b29b      	uxth	r3, r3
 80139cc:	b21a      	sxth	r2, r3
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80139d4:	4b18      	ldr	r3, [pc, #96]	; (8013a38 <tcp_receive+0x270>)
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	b29a      	uxth	r2, r3
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139de:	b29b      	uxth	r3, r3
 80139e0:	1ad3      	subs	r3, r2, r3
 80139e2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	2200      	movs	r2, #0
 80139e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80139ec:	4b12      	ldr	r3, [pc, #72]	; (8013a38 <tcp_receive+0x270>)
 80139ee:	681a      	ldr	r2, [r3, #0]
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	7d1b      	ldrb	r3, [r3, #20]
 80139f8:	2b03      	cmp	r3, #3
 80139fa:	f240 8097 	bls.w	8013b2c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013a0a:	429a      	cmp	r2, r3
 8013a0c:	d245      	bcs.n	8013a9a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	8b5b      	ldrh	r3, [r3, #26]
 8013a12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d014      	beq.n	8013a44 <tcp_receive+0x27c>
 8013a1a:	2301      	movs	r3, #1
 8013a1c:	e013      	b.n	8013a46 <tcp_receive+0x27e>
 8013a1e:	bf00      	nop
 8013a20:	08021894 	.word	0x08021894
 8013a24:	08021bc4 	.word	0x08021bc4
 8013a28:	080218e0 	.word	0x080218e0
 8013a2c:	08021be0 	.word	0x08021be0
 8013a30:	200073e0 	.word	0x200073e0
 8013a34:	200073d4 	.word	0x200073d4
 8013a38:	200073d8 	.word	0x200073d8
 8013a3c:	200073c4 	.word	0x200073c4
 8013a40:	200073de 	.word	0x200073de
 8013a44:	2302      	movs	r3, #2
 8013a46:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013a4a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013a4e:	b29a      	uxth	r2, r3
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013a54:	fb12 f303 	smulbb	r3, r2, r3
 8013a58:	b29b      	uxth	r3, r3
 8013a5a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013a5c:	4293      	cmp	r3, r2
 8013a5e:	bf28      	it	cs
 8013a60:	4613      	movcs	r3, r2
 8013a62:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013a6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013a6c:	4413      	add	r3, r2
 8013a6e:	b29a      	uxth	r2, r3
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013a76:	429a      	cmp	r2, r3
 8013a78:	d309      	bcc.n	8013a8e <tcp_receive+0x2c6>
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013a80:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013a82:	4413      	add	r3, r2
 8013a84:	b29a      	uxth	r2, r3
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013a8c:	e04e      	b.n	8013b2c <tcp_receive+0x364>
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013a94:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013a98:	e048      	b.n	8013b2c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013aa0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013aa2:	4413      	add	r3, r2
 8013aa4:	b29a      	uxth	r2, r3
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013aac:	429a      	cmp	r2, r3
 8013aae:	d309      	bcc.n	8013ac4 <tcp_receive+0x2fc>
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013ab6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013ab8:	4413      	add	r3, r2
 8013aba:	b29a      	uxth	r2, r3
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8013ac2:	e004      	b.n	8013ace <tcp_receive+0x306>
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013aca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013ada:	429a      	cmp	r2, r3
 8013adc:	d326      	bcc.n	8013b2c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013aea:	1ad3      	subs	r3, r2, r3
 8013aec:	b29a      	uxth	r2, r3
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013afe:	4413      	add	r3, r2
 8013b00:	b29a      	uxth	r2, r3
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013b08:	429a      	cmp	r2, r3
 8013b0a:	d30a      	bcc.n	8013b22 <tcp_receive+0x35a>
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b16:	4413      	add	r3, r2
 8013b18:	b29a      	uxth	r2, r3
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013b20:	e004      	b.n	8013b2c <tcp_receive+0x364>
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b28:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b34:	4a98      	ldr	r2, [pc, #608]	; (8013d98 <tcp_receive+0x5d0>)
 8013b36:	6878      	ldr	r0, [r7, #4]
 8013b38:	f7ff fdca 	bl	80136d0 <tcp_free_acked_segments>
 8013b3c:	4602      	mov	r2, r0
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b4a:	4a94      	ldr	r2, [pc, #592]	; (8013d9c <tcp_receive+0x5d4>)
 8013b4c:	6878      	ldr	r0, [r7, #4]
 8013b4e:	f7ff fdbf 	bl	80136d0 <tcp_free_acked_segments>
 8013b52:	4602      	mov	r2, r0
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d104      	bne.n	8013b6a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b66:	861a      	strh	r2, [r3, #48]	; 0x30
 8013b68:	e002      	b.n	8013b70 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	2200      	movs	r2, #0
 8013b74:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d103      	bne.n	8013b86 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	2200      	movs	r2, #0
 8013b82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013b8c:	4b84      	ldr	r3, [pc, #528]	; (8013da0 <tcp_receive+0x5d8>)
 8013b8e:	881b      	ldrh	r3, [r3, #0]
 8013b90:	4413      	add	r3, r2
 8013b92:	b29a      	uxth	r2, r3
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	8b5b      	ldrh	r3, [r3, #26]
 8013b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d035      	beq.n	8013c12 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d118      	bne.n	8013be0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d00c      	beq.n	8013bd0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013bbe:	68db      	ldr	r3, [r3, #12]
 8013bc0:	685b      	ldr	r3, [r3, #4]
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	f7fa fc63 	bl	800e48e <lwip_htonl>
 8013bc8:	4603      	mov	r3, r0
 8013bca:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	dc20      	bgt.n	8013c12 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	8b5b      	ldrh	r3, [r3, #26]
 8013bd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013bd8:	b29a      	uxth	r2, r3
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013bde:	e018      	b.n	8013c12 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013be8:	68db      	ldr	r3, [r3, #12]
 8013bea:	685b      	ldr	r3, [r3, #4]
 8013bec:	4618      	mov	r0, r3
 8013bee:	f7fa fc4e 	bl	800e48e <lwip_htonl>
 8013bf2:	4603      	mov	r3, r0
 8013bf4:	1ae3      	subs	r3, r4, r3
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	dc0b      	bgt.n	8013c12 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	8b5b      	ldrh	r3, [r3, #26]
 8013bfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013c02:	b29a      	uxth	r2, r3
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013c08:	e003      	b.n	8013c12 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013c0a:	6878      	ldr	r0, [r7, #4]
 8013c0c:	f001 ffcc 	bl	8015ba8 <tcp_send_empty_ack>
 8013c10:	e000      	b.n	8013c14 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013c12:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d05b      	beq.n	8013cd4 <tcp_receive+0x50c>
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013c20:	4b60      	ldr	r3, [pc, #384]	; (8013da4 <tcp_receive+0x5dc>)
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	1ad3      	subs	r3, r2, r3
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	da54      	bge.n	8013cd4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013c2a:	4b5f      	ldr	r3, [pc, #380]	; (8013da8 <tcp_receive+0x5e0>)
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	b29a      	uxth	r2, r3
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c34:	b29b      	uxth	r3, r3
 8013c36:	1ad3      	subs	r3, r2, r3
 8013c38:	b29b      	uxth	r3, r3
 8013c3a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8013c3e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013c48:	10db      	asrs	r3, r3, #3
 8013c4a:	b21b      	sxth	r3, r3
 8013c4c:	b29b      	uxth	r3, r3
 8013c4e:	1ad3      	subs	r3, r2, r3
 8013c50:	b29b      	uxth	r3, r3
 8013c52:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013c5c:	b29a      	uxth	r2, r3
 8013c5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013c62:	4413      	add	r3, r2
 8013c64:	b29b      	uxth	r3, r3
 8013c66:	b21a      	sxth	r2, r3
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8013c6c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	da05      	bge.n	8013c80 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8013c74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013c78:	425b      	negs	r3, r3
 8013c7a:	b29b      	uxth	r3, r3
 8013c7c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8013c80:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013c8a:	109b      	asrs	r3, r3, #2
 8013c8c:	b21b      	sxth	r3, r3
 8013c8e:	b29b      	uxth	r3, r3
 8013c90:	1ad3      	subs	r3, r2, r3
 8013c92:	b29b      	uxth	r3, r3
 8013c94:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013c9e:	b29a      	uxth	r2, r3
 8013ca0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013ca4:	4413      	add	r3, r2
 8013ca6:	b29b      	uxth	r3, r3
 8013ca8:	b21a      	sxth	r2, r3
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013cb4:	10db      	asrs	r3, r3, #3
 8013cb6:	b21b      	sxth	r3, r3
 8013cb8:	b29a      	uxth	r2, r3
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013cc0:	b29b      	uxth	r3, r3
 8013cc2:	4413      	add	r3, r2
 8013cc4:	b29b      	uxth	r3, r3
 8013cc6:	b21a      	sxth	r2, r3
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8013cd4:	4b35      	ldr	r3, [pc, #212]	; (8013dac <tcp_receive+0x5e4>)
 8013cd6:	881b      	ldrh	r3, [r3, #0]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	f000 84e2 	beq.w	80146a2 <tcp_receive+0xeda>
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	7d1b      	ldrb	r3, [r3, #20]
 8013ce2:	2b06      	cmp	r3, #6
 8013ce4:	f200 84dd 	bhi.w	80146a2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013cec:	4b30      	ldr	r3, [pc, #192]	; (8013db0 <tcp_receive+0x5e8>)
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	1ad3      	subs	r3, r2, r3
 8013cf2:	3b01      	subs	r3, #1
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	f2c0 808f 	blt.w	8013e18 <tcp_receive+0x650>
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013cfe:	4b2b      	ldr	r3, [pc, #172]	; (8013dac <tcp_receive+0x5e4>)
 8013d00:	881b      	ldrh	r3, [r3, #0]
 8013d02:	4619      	mov	r1, r3
 8013d04:	4b2a      	ldr	r3, [pc, #168]	; (8013db0 <tcp_receive+0x5e8>)
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	440b      	add	r3, r1
 8013d0a:	1ad3      	subs	r3, r2, r3
 8013d0c:	3301      	adds	r3, #1
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	f300 8082 	bgt.w	8013e18 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8013d14:	4b27      	ldr	r3, [pc, #156]	; (8013db4 <tcp_receive+0x5ec>)
 8013d16:	685b      	ldr	r3, [r3, #4]
 8013d18:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013d1e:	4b24      	ldr	r3, [pc, #144]	; (8013db0 <tcp_receive+0x5e8>)
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	1ad3      	subs	r3, r2, r3
 8013d24:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8013d26:	4b23      	ldr	r3, [pc, #140]	; (8013db4 <tcp_receive+0x5ec>)
 8013d28:	685b      	ldr	r3, [r3, #4]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d106      	bne.n	8013d3c <tcp_receive+0x574>
 8013d2e:	4b22      	ldr	r3, [pc, #136]	; (8013db8 <tcp_receive+0x5f0>)
 8013d30:	f240 5294 	movw	r2, #1428	; 0x594
 8013d34:	4921      	ldr	r1, [pc, #132]	; (8013dbc <tcp_receive+0x5f4>)
 8013d36:	4822      	ldr	r0, [pc, #136]	; (8013dc0 <tcp_receive+0x5f8>)
 8013d38:	f008 fcfa 	bl	801c730 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8013d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d3e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013d42:	4293      	cmp	r3, r2
 8013d44:	d906      	bls.n	8013d54 <tcp_receive+0x58c>
 8013d46:	4b1c      	ldr	r3, [pc, #112]	; (8013db8 <tcp_receive+0x5f0>)
 8013d48:	f240 5295 	movw	r2, #1429	; 0x595
 8013d4c:	491d      	ldr	r1, [pc, #116]	; (8013dc4 <tcp_receive+0x5fc>)
 8013d4e:	481c      	ldr	r0, [pc, #112]	; (8013dc0 <tcp_receive+0x5f8>)
 8013d50:	f008 fcee 	bl	801c730 <iprintf>
      off = (u16_t)off32;
 8013d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d56:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013d5a:	4b16      	ldr	r3, [pc, #88]	; (8013db4 <tcp_receive+0x5ec>)
 8013d5c:	685b      	ldr	r3, [r3, #4]
 8013d5e:	891b      	ldrh	r3, [r3, #8]
 8013d60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013d64:	429a      	cmp	r2, r3
 8013d66:	d906      	bls.n	8013d76 <tcp_receive+0x5ae>
 8013d68:	4b13      	ldr	r3, [pc, #76]	; (8013db8 <tcp_receive+0x5f0>)
 8013d6a:	f240 5297 	movw	r2, #1431	; 0x597
 8013d6e:	4916      	ldr	r1, [pc, #88]	; (8013dc8 <tcp_receive+0x600>)
 8013d70:	4813      	ldr	r0, [pc, #76]	; (8013dc0 <tcp_receive+0x5f8>)
 8013d72:	f008 fcdd 	bl	801c730 <iprintf>
      inseg.len -= off;
 8013d76:	4b0f      	ldr	r3, [pc, #60]	; (8013db4 <tcp_receive+0x5ec>)
 8013d78:	891a      	ldrh	r2, [r3, #8]
 8013d7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013d7e:	1ad3      	subs	r3, r2, r3
 8013d80:	b29a      	uxth	r2, r3
 8013d82:	4b0c      	ldr	r3, [pc, #48]	; (8013db4 <tcp_receive+0x5ec>)
 8013d84:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8013d86:	4b0b      	ldr	r3, [pc, #44]	; (8013db4 <tcp_receive+0x5ec>)
 8013d88:	685b      	ldr	r3, [r3, #4]
 8013d8a:	891a      	ldrh	r2, [r3, #8]
 8013d8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013d90:	1ad3      	subs	r3, r2, r3
 8013d92:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8013d94:	e02a      	b.n	8013dec <tcp_receive+0x624>
 8013d96:	bf00      	nop
 8013d98:	08021bfc 	.word	0x08021bfc
 8013d9c:	08021c04 	.word	0x08021c04
 8013da0:	200073dc 	.word	0x200073dc
 8013da4:	200073d8 	.word	0x200073d8
 8013da8:	2000739c 	.word	0x2000739c
 8013dac:	200073de 	.word	0x200073de
 8013db0:	200073d4 	.word	0x200073d4
 8013db4:	200073b4 	.word	0x200073b4
 8013db8:	08021894 	.word	0x08021894
 8013dbc:	08021c0c 	.word	0x08021c0c
 8013dc0:	080218e0 	.word	0x080218e0
 8013dc4:	08021c1c 	.word	0x08021c1c
 8013dc8:	08021c2c 	.word	0x08021c2c
        off -= p->len;
 8013dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013dce:	895b      	ldrh	r3, [r3, #10]
 8013dd0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013dd4:	1ad3      	subs	r3, r2, r3
 8013dd6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8013dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ddc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013dde:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8013de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013de2:	2200      	movs	r2, #0
 8013de4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8013de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8013dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013dee:	895b      	ldrh	r3, [r3, #10]
 8013df0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013df4:	429a      	cmp	r2, r3
 8013df6:	d8e9      	bhi.n	8013dcc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013df8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013dfc:	4619      	mov	r1, r3
 8013dfe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013e00:	f7fc f940 	bl	8010084 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e08:	4a91      	ldr	r2, [pc, #580]	; (8014050 <tcp_receive+0x888>)
 8013e0a:	6013      	str	r3, [r2, #0]
 8013e0c:	4b91      	ldr	r3, [pc, #580]	; (8014054 <tcp_receive+0x88c>)
 8013e0e:	68db      	ldr	r3, [r3, #12]
 8013e10:	4a8f      	ldr	r2, [pc, #572]	; (8014050 <tcp_receive+0x888>)
 8013e12:	6812      	ldr	r2, [r2, #0]
 8013e14:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013e16:	e00d      	b.n	8013e34 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013e18:	4b8d      	ldr	r3, [pc, #564]	; (8014050 <tcp_receive+0x888>)
 8013e1a:	681a      	ldr	r2, [r3, #0]
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e20:	1ad3      	subs	r3, r2, r3
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	da06      	bge.n	8013e34 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	8b5b      	ldrh	r3, [r3, #26]
 8013e2a:	f043 0302 	orr.w	r3, r3, #2
 8013e2e:	b29a      	uxth	r2, r3
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013e34:	4b86      	ldr	r3, [pc, #536]	; (8014050 <tcp_receive+0x888>)
 8013e36:	681a      	ldr	r2, [r3, #0]
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e3c:	1ad3      	subs	r3, r2, r3
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	f2c0 842a 	blt.w	8014698 <tcp_receive+0xed0>
 8013e44:	4b82      	ldr	r3, [pc, #520]	; (8014050 <tcp_receive+0x888>)
 8013e46:	681a      	ldr	r2, [r3, #0]
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e4c:	6879      	ldr	r1, [r7, #4]
 8013e4e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013e50:	440b      	add	r3, r1
 8013e52:	1ad3      	subs	r3, r2, r3
 8013e54:	3301      	adds	r3, #1
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	f300 841e 	bgt.w	8014698 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013e60:	4b7b      	ldr	r3, [pc, #492]	; (8014050 <tcp_receive+0x888>)
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	429a      	cmp	r2, r3
 8013e66:	f040 829a 	bne.w	801439e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8013e6a:	4b7a      	ldr	r3, [pc, #488]	; (8014054 <tcp_receive+0x88c>)
 8013e6c:	891c      	ldrh	r4, [r3, #8]
 8013e6e:	4b79      	ldr	r3, [pc, #484]	; (8014054 <tcp_receive+0x88c>)
 8013e70:	68db      	ldr	r3, [r3, #12]
 8013e72:	899b      	ldrh	r3, [r3, #12]
 8013e74:	b29b      	uxth	r3, r3
 8013e76:	4618      	mov	r0, r3
 8013e78:	f7fa faf4 	bl	800e464 <lwip_htons>
 8013e7c:	4603      	mov	r3, r0
 8013e7e:	b2db      	uxtb	r3, r3
 8013e80:	f003 0303 	and.w	r3, r3, #3
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d001      	beq.n	8013e8c <tcp_receive+0x6c4>
 8013e88:	2301      	movs	r3, #1
 8013e8a:	e000      	b.n	8013e8e <tcp_receive+0x6c6>
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	4423      	add	r3, r4
 8013e90:	b29a      	uxth	r2, r3
 8013e92:	4b71      	ldr	r3, [pc, #452]	; (8014058 <tcp_receive+0x890>)
 8013e94:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013e9a:	4b6f      	ldr	r3, [pc, #444]	; (8014058 <tcp_receive+0x890>)
 8013e9c:	881b      	ldrh	r3, [r3, #0]
 8013e9e:	429a      	cmp	r2, r3
 8013ea0:	d275      	bcs.n	8013f8e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013ea2:	4b6c      	ldr	r3, [pc, #432]	; (8014054 <tcp_receive+0x88c>)
 8013ea4:	68db      	ldr	r3, [r3, #12]
 8013ea6:	899b      	ldrh	r3, [r3, #12]
 8013ea8:	b29b      	uxth	r3, r3
 8013eaa:	4618      	mov	r0, r3
 8013eac:	f7fa fada 	bl	800e464 <lwip_htons>
 8013eb0:	4603      	mov	r3, r0
 8013eb2:	b2db      	uxtb	r3, r3
 8013eb4:	f003 0301 	and.w	r3, r3, #1
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d01f      	beq.n	8013efc <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8013ebc:	4b65      	ldr	r3, [pc, #404]	; (8014054 <tcp_receive+0x88c>)
 8013ebe:	68db      	ldr	r3, [r3, #12]
 8013ec0:	899b      	ldrh	r3, [r3, #12]
 8013ec2:	b29b      	uxth	r3, r3
 8013ec4:	b21b      	sxth	r3, r3
 8013ec6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013eca:	b21c      	sxth	r4, r3
 8013ecc:	4b61      	ldr	r3, [pc, #388]	; (8014054 <tcp_receive+0x88c>)
 8013ece:	68db      	ldr	r3, [r3, #12]
 8013ed0:	899b      	ldrh	r3, [r3, #12]
 8013ed2:	b29b      	uxth	r3, r3
 8013ed4:	4618      	mov	r0, r3
 8013ed6:	f7fa fac5 	bl	800e464 <lwip_htons>
 8013eda:	4603      	mov	r3, r0
 8013edc:	b2db      	uxtb	r3, r3
 8013ede:	b29b      	uxth	r3, r3
 8013ee0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013ee4:	b29b      	uxth	r3, r3
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	f7fa fabc 	bl	800e464 <lwip_htons>
 8013eec:	4603      	mov	r3, r0
 8013eee:	b21b      	sxth	r3, r3
 8013ef0:	4323      	orrs	r3, r4
 8013ef2:	b21a      	sxth	r2, r3
 8013ef4:	4b57      	ldr	r3, [pc, #348]	; (8014054 <tcp_receive+0x88c>)
 8013ef6:	68db      	ldr	r3, [r3, #12]
 8013ef8:	b292      	uxth	r2, r2
 8013efa:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013f00:	4b54      	ldr	r3, [pc, #336]	; (8014054 <tcp_receive+0x88c>)
 8013f02:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013f04:	4b53      	ldr	r3, [pc, #332]	; (8014054 <tcp_receive+0x88c>)
 8013f06:	68db      	ldr	r3, [r3, #12]
 8013f08:	899b      	ldrh	r3, [r3, #12]
 8013f0a:	b29b      	uxth	r3, r3
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	f7fa faa9 	bl	800e464 <lwip_htons>
 8013f12:	4603      	mov	r3, r0
 8013f14:	b2db      	uxtb	r3, r3
 8013f16:	f003 0302 	and.w	r3, r3, #2
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d005      	beq.n	8013f2a <tcp_receive+0x762>
            inseg.len -= 1;
 8013f1e:	4b4d      	ldr	r3, [pc, #308]	; (8014054 <tcp_receive+0x88c>)
 8013f20:	891b      	ldrh	r3, [r3, #8]
 8013f22:	3b01      	subs	r3, #1
 8013f24:	b29a      	uxth	r2, r3
 8013f26:	4b4b      	ldr	r3, [pc, #300]	; (8014054 <tcp_receive+0x88c>)
 8013f28:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8013f2a:	4b4a      	ldr	r3, [pc, #296]	; (8014054 <tcp_receive+0x88c>)
 8013f2c:	685b      	ldr	r3, [r3, #4]
 8013f2e:	4a49      	ldr	r2, [pc, #292]	; (8014054 <tcp_receive+0x88c>)
 8013f30:	8912      	ldrh	r2, [r2, #8]
 8013f32:	4611      	mov	r1, r2
 8013f34:	4618      	mov	r0, r3
 8013f36:	f7fb ffa5 	bl	800fe84 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8013f3a:	4b46      	ldr	r3, [pc, #280]	; (8014054 <tcp_receive+0x88c>)
 8013f3c:	891c      	ldrh	r4, [r3, #8]
 8013f3e:	4b45      	ldr	r3, [pc, #276]	; (8014054 <tcp_receive+0x88c>)
 8013f40:	68db      	ldr	r3, [r3, #12]
 8013f42:	899b      	ldrh	r3, [r3, #12]
 8013f44:	b29b      	uxth	r3, r3
 8013f46:	4618      	mov	r0, r3
 8013f48:	f7fa fa8c 	bl	800e464 <lwip_htons>
 8013f4c:	4603      	mov	r3, r0
 8013f4e:	b2db      	uxtb	r3, r3
 8013f50:	f003 0303 	and.w	r3, r3, #3
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d001      	beq.n	8013f5c <tcp_receive+0x794>
 8013f58:	2301      	movs	r3, #1
 8013f5a:	e000      	b.n	8013f5e <tcp_receive+0x796>
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	4423      	add	r3, r4
 8013f60:	b29a      	uxth	r2, r3
 8013f62:	4b3d      	ldr	r3, [pc, #244]	; (8014058 <tcp_receive+0x890>)
 8013f64:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013f66:	4b3c      	ldr	r3, [pc, #240]	; (8014058 <tcp_receive+0x890>)
 8013f68:	881b      	ldrh	r3, [r3, #0]
 8013f6a:	461a      	mov	r2, r3
 8013f6c:	4b38      	ldr	r3, [pc, #224]	; (8014050 <tcp_receive+0x888>)
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	441a      	add	r2, r3
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f76:	6879      	ldr	r1, [r7, #4]
 8013f78:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013f7a:	440b      	add	r3, r1
 8013f7c:	429a      	cmp	r2, r3
 8013f7e:	d006      	beq.n	8013f8e <tcp_receive+0x7c6>
 8013f80:	4b36      	ldr	r3, [pc, #216]	; (801405c <tcp_receive+0x894>)
 8013f82:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8013f86:	4936      	ldr	r1, [pc, #216]	; (8014060 <tcp_receive+0x898>)
 8013f88:	4836      	ldr	r0, [pc, #216]	; (8014064 <tcp_receive+0x89c>)
 8013f8a:	f008 fbd1 	bl	801c730 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	f000 80e7 	beq.w	8014166 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013f98:	4b2e      	ldr	r3, [pc, #184]	; (8014054 <tcp_receive+0x88c>)
 8013f9a:	68db      	ldr	r3, [r3, #12]
 8013f9c:	899b      	ldrh	r3, [r3, #12]
 8013f9e:	b29b      	uxth	r3, r3
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	f7fa fa5f 	bl	800e464 <lwip_htons>
 8013fa6:	4603      	mov	r3, r0
 8013fa8:	b2db      	uxtb	r3, r3
 8013faa:	f003 0301 	and.w	r3, r3, #1
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d010      	beq.n	8013fd4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013fb2:	e00a      	b.n	8013fca <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013fb8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013fbe:	681a      	ldr	r2, [r3, #0]
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8013fc4:	68f8      	ldr	r0, [r7, #12]
 8013fc6:	f7fd fce6 	bl	8011996 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d1f0      	bne.n	8013fb4 <tcp_receive+0x7ec>
 8013fd2:	e0c8      	b.n	8014166 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013fda:	e052      	b.n	8014082 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013fde:	68db      	ldr	r3, [r3, #12]
 8013fe0:	899b      	ldrh	r3, [r3, #12]
 8013fe2:	b29b      	uxth	r3, r3
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	f7fa fa3d 	bl	800e464 <lwip_htons>
 8013fea:	4603      	mov	r3, r0
 8013fec:	b2db      	uxtb	r3, r3
 8013fee:	f003 0301 	and.w	r3, r3, #1
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d03d      	beq.n	8014072 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8013ff6:	4b17      	ldr	r3, [pc, #92]	; (8014054 <tcp_receive+0x88c>)
 8013ff8:	68db      	ldr	r3, [r3, #12]
 8013ffa:	899b      	ldrh	r3, [r3, #12]
 8013ffc:	b29b      	uxth	r3, r3
 8013ffe:	4618      	mov	r0, r3
 8014000:	f7fa fa30 	bl	800e464 <lwip_htons>
 8014004:	4603      	mov	r3, r0
 8014006:	b2db      	uxtb	r3, r3
 8014008:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801400c:	2b00      	cmp	r3, #0
 801400e:	d130      	bne.n	8014072 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8014010:	4b10      	ldr	r3, [pc, #64]	; (8014054 <tcp_receive+0x88c>)
 8014012:	68db      	ldr	r3, [r3, #12]
 8014014:	899b      	ldrh	r3, [r3, #12]
 8014016:	b29c      	uxth	r4, r3
 8014018:	2001      	movs	r0, #1
 801401a:	f7fa fa23 	bl	800e464 <lwip_htons>
 801401e:	4603      	mov	r3, r0
 8014020:	461a      	mov	r2, r3
 8014022:	4b0c      	ldr	r3, [pc, #48]	; (8014054 <tcp_receive+0x88c>)
 8014024:	68db      	ldr	r3, [r3, #12]
 8014026:	4322      	orrs	r2, r4
 8014028:	b292      	uxth	r2, r2
 801402a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801402c:	4b09      	ldr	r3, [pc, #36]	; (8014054 <tcp_receive+0x88c>)
 801402e:	891c      	ldrh	r4, [r3, #8]
 8014030:	4b08      	ldr	r3, [pc, #32]	; (8014054 <tcp_receive+0x88c>)
 8014032:	68db      	ldr	r3, [r3, #12]
 8014034:	899b      	ldrh	r3, [r3, #12]
 8014036:	b29b      	uxth	r3, r3
 8014038:	4618      	mov	r0, r3
 801403a:	f7fa fa13 	bl	800e464 <lwip_htons>
 801403e:	4603      	mov	r3, r0
 8014040:	b2db      	uxtb	r3, r3
 8014042:	f003 0303 	and.w	r3, r3, #3
 8014046:	2b00      	cmp	r3, #0
 8014048:	d00e      	beq.n	8014068 <tcp_receive+0x8a0>
 801404a:	2301      	movs	r3, #1
 801404c:	e00d      	b.n	801406a <tcp_receive+0x8a2>
 801404e:	bf00      	nop
 8014050:	200073d4 	.word	0x200073d4
 8014054:	200073b4 	.word	0x200073b4
 8014058:	200073de 	.word	0x200073de
 801405c:	08021894 	.word	0x08021894
 8014060:	08021c3c 	.word	0x08021c3c
 8014064:	080218e0 	.word	0x080218e0
 8014068:	2300      	movs	r3, #0
 801406a:	4423      	add	r3, r4
 801406c:	b29a      	uxth	r2, r3
 801406e:	4b98      	ldr	r3, [pc, #608]	; (80142d0 <tcp_receive+0xb08>)
 8014070:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8014072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014074:	613b      	str	r3, [r7, #16]
              next = next->next;
 8014076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801407c:	6938      	ldr	r0, [r7, #16]
 801407e:	f7fd fc8a 	bl	8011996 <tcp_seg_free>
            while (next &&
 8014082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014084:	2b00      	cmp	r3, #0
 8014086:	d00e      	beq.n	80140a6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014088:	4b91      	ldr	r3, [pc, #580]	; (80142d0 <tcp_receive+0xb08>)
 801408a:	881b      	ldrh	r3, [r3, #0]
 801408c:	461a      	mov	r2, r3
 801408e:	4b91      	ldr	r3, [pc, #580]	; (80142d4 <tcp_receive+0xb0c>)
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	441a      	add	r2, r3
 8014094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014096:	68db      	ldr	r3, [r3, #12]
 8014098:	685b      	ldr	r3, [r3, #4]
 801409a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801409c:	8909      	ldrh	r1, [r1, #8]
 801409e:	440b      	add	r3, r1
 80140a0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	da9a      	bge.n	8013fdc <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80140a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d059      	beq.n	8014160 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80140ac:	4b88      	ldr	r3, [pc, #544]	; (80142d0 <tcp_receive+0xb08>)
 80140ae:	881b      	ldrh	r3, [r3, #0]
 80140b0:	461a      	mov	r2, r3
 80140b2:	4b88      	ldr	r3, [pc, #544]	; (80142d4 <tcp_receive+0xb0c>)
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	441a      	add	r2, r3
 80140b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80140ba:	68db      	ldr	r3, [r3, #12]
 80140bc:	685b      	ldr	r3, [r3, #4]
 80140be:	1ad3      	subs	r3, r2, r3
            if (next &&
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	dd4d      	ble.n	8014160 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80140c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80140c6:	68db      	ldr	r3, [r3, #12]
 80140c8:	685b      	ldr	r3, [r3, #4]
 80140ca:	b29a      	uxth	r2, r3
 80140cc:	4b81      	ldr	r3, [pc, #516]	; (80142d4 <tcp_receive+0xb0c>)
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	b29b      	uxth	r3, r3
 80140d2:	1ad3      	subs	r3, r2, r3
 80140d4:	b29a      	uxth	r2, r3
 80140d6:	4b80      	ldr	r3, [pc, #512]	; (80142d8 <tcp_receive+0xb10>)
 80140d8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80140da:	4b7f      	ldr	r3, [pc, #508]	; (80142d8 <tcp_receive+0xb10>)
 80140dc:	68db      	ldr	r3, [r3, #12]
 80140de:	899b      	ldrh	r3, [r3, #12]
 80140e0:	b29b      	uxth	r3, r3
 80140e2:	4618      	mov	r0, r3
 80140e4:	f7fa f9be 	bl	800e464 <lwip_htons>
 80140e8:	4603      	mov	r3, r0
 80140ea:	b2db      	uxtb	r3, r3
 80140ec:	f003 0302 	and.w	r3, r3, #2
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d005      	beq.n	8014100 <tcp_receive+0x938>
                inseg.len -= 1;
 80140f4:	4b78      	ldr	r3, [pc, #480]	; (80142d8 <tcp_receive+0xb10>)
 80140f6:	891b      	ldrh	r3, [r3, #8]
 80140f8:	3b01      	subs	r3, #1
 80140fa:	b29a      	uxth	r2, r3
 80140fc:	4b76      	ldr	r3, [pc, #472]	; (80142d8 <tcp_receive+0xb10>)
 80140fe:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8014100:	4b75      	ldr	r3, [pc, #468]	; (80142d8 <tcp_receive+0xb10>)
 8014102:	685b      	ldr	r3, [r3, #4]
 8014104:	4a74      	ldr	r2, [pc, #464]	; (80142d8 <tcp_receive+0xb10>)
 8014106:	8912      	ldrh	r2, [r2, #8]
 8014108:	4611      	mov	r1, r2
 801410a:	4618      	mov	r0, r3
 801410c:	f7fb feba 	bl	800fe84 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8014110:	4b71      	ldr	r3, [pc, #452]	; (80142d8 <tcp_receive+0xb10>)
 8014112:	891c      	ldrh	r4, [r3, #8]
 8014114:	4b70      	ldr	r3, [pc, #448]	; (80142d8 <tcp_receive+0xb10>)
 8014116:	68db      	ldr	r3, [r3, #12]
 8014118:	899b      	ldrh	r3, [r3, #12]
 801411a:	b29b      	uxth	r3, r3
 801411c:	4618      	mov	r0, r3
 801411e:	f7fa f9a1 	bl	800e464 <lwip_htons>
 8014122:	4603      	mov	r3, r0
 8014124:	b2db      	uxtb	r3, r3
 8014126:	f003 0303 	and.w	r3, r3, #3
 801412a:	2b00      	cmp	r3, #0
 801412c:	d001      	beq.n	8014132 <tcp_receive+0x96a>
 801412e:	2301      	movs	r3, #1
 8014130:	e000      	b.n	8014134 <tcp_receive+0x96c>
 8014132:	2300      	movs	r3, #0
 8014134:	4423      	add	r3, r4
 8014136:	b29a      	uxth	r2, r3
 8014138:	4b65      	ldr	r3, [pc, #404]	; (80142d0 <tcp_receive+0xb08>)
 801413a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801413c:	4b64      	ldr	r3, [pc, #400]	; (80142d0 <tcp_receive+0xb08>)
 801413e:	881b      	ldrh	r3, [r3, #0]
 8014140:	461a      	mov	r2, r3
 8014142:	4b64      	ldr	r3, [pc, #400]	; (80142d4 <tcp_receive+0xb0c>)
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	441a      	add	r2, r3
 8014148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801414a:	68db      	ldr	r3, [r3, #12]
 801414c:	685b      	ldr	r3, [r3, #4]
 801414e:	429a      	cmp	r2, r3
 8014150:	d006      	beq.n	8014160 <tcp_receive+0x998>
 8014152:	4b62      	ldr	r3, [pc, #392]	; (80142dc <tcp_receive+0xb14>)
 8014154:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8014158:	4961      	ldr	r1, [pc, #388]	; (80142e0 <tcp_receive+0xb18>)
 801415a:	4862      	ldr	r0, [pc, #392]	; (80142e4 <tcp_receive+0xb1c>)
 801415c:	f008 fae8 	bl	801c730 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014164:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014166:	4b5a      	ldr	r3, [pc, #360]	; (80142d0 <tcp_receive+0xb08>)
 8014168:	881b      	ldrh	r3, [r3, #0]
 801416a:	461a      	mov	r2, r3
 801416c:	4b59      	ldr	r3, [pc, #356]	; (80142d4 <tcp_receive+0xb0c>)
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	441a      	add	r2, r3
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801417a:	4b55      	ldr	r3, [pc, #340]	; (80142d0 <tcp_receive+0xb08>)
 801417c:	881b      	ldrh	r3, [r3, #0]
 801417e:	429a      	cmp	r2, r3
 8014180:	d206      	bcs.n	8014190 <tcp_receive+0x9c8>
 8014182:	4b56      	ldr	r3, [pc, #344]	; (80142dc <tcp_receive+0xb14>)
 8014184:	f240 6207 	movw	r2, #1543	; 0x607
 8014188:	4957      	ldr	r1, [pc, #348]	; (80142e8 <tcp_receive+0xb20>)
 801418a:	4856      	ldr	r0, [pc, #344]	; (80142e4 <tcp_receive+0xb1c>)
 801418c:	f008 fad0 	bl	801c730 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014194:	4b4e      	ldr	r3, [pc, #312]	; (80142d0 <tcp_receive+0xb08>)
 8014196:	881b      	ldrh	r3, [r3, #0]
 8014198:	1ad3      	subs	r3, r2, r3
 801419a:	b29a      	uxth	r2, r3
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80141a0:	6878      	ldr	r0, [r7, #4]
 80141a2:	f7fc ff19 	bl	8010fd8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80141a6:	4b4c      	ldr	r3, [pc, #304]	; (80142d8 <tcp_receive+0xb10>)
 80141a8:	685b      	ldr	r3, [r3, #4]
 80141aa:	891b      	ldrh	r3, [r3, #8]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d006      	beq.n	80141be <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80141b0:	4b49      	ldr	r3, [pc, #292]	; (80142d8 <tcp_receive+0xb10>)
 80141b2:	685b      	ldr	r3, [r3, #4]
 80141b4:	4a4d      	ldr	r2, [pc, #308]	; (80142ec <tcp_receive+0xb24>)
 80141b6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80141b8:	4b47      	ldr	r3, [pc, #284]	; (80142d8 <tcp_receive+0xb10>)
 80141ba:	2200      	movs	r2, #0
 80141bc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80141be:	4b46      	ldr	r3, [pc, #280]	; (80142d8 <tcp_receive+0xb10>)
 80141c0:	68db      	ldr	r3, [r3, #12]
 80141c2:	899b      	ldrh	r3, [r3, #12]
 80141c4:	b29b      	uxth	r3, r3
 80141c6:	4618      	mov	r0, r3
 80141c8:	f7fa f94c 	bl	800e464 <lwip_htons>
 80141cc:	4603      	mov	r3, r0
 80141ce:	b2db      	uxtb	r3, r3
 80141d0:	f003 0301 	and.w	r3, r3, #1
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	f000 80b8 	beq.w	801434a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80141da:	4b45      	ldr	r3, [pc, #276]	; (80142f0 <tcp_receive+0xb28>)
 80141dc:	781b      	ldrb	r3, [r3, #0]
 80141de:	f043 0320 	orr.w	r3, r3, #32
 80141e2:	b2da      	uxtb	r2, r3
 80141e4:	4b42      	ldr	r3, [pc, #264]	; (80142f0 <tcp_receive+0xb28>)
 80141e6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80141e8:	e0af      	b.n	801434a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80141ee:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80141f4:	68db      	ldr	r3, [r3, #12]
 80141f6:	685b      	ldr	r3, [r3, #4]
 80141f8:	4a36      	ldr	r2, [pc, #216]	; (80142d4 <tcp_receive+0xb0c>)
 80141fa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80141fc:	68bb      	ldr	r3, [r7, #8]
 80141fe:	891b      	ldrh	r3, [r3, #8]
 8014200:	461c      	mov	r4, r3
 8014202:	68bb      	ldr	r3, [r7, #8]
 8014204:	68db      	ldr	r3, [r3, #12]
 8014206:	899b      	ldrh	r3, [r3, #12]
 8014208:	b29b      	uxth	r3, r3
 801420a:	4618      	mov	r0, r3
 801420c:	f7fa f92a 	bl	800e464 <lwip_htons>
 8014210:	4603      	mov	r3, r0
 8014212:	b2db      	uxtb	r3, r3
 8014214:	f003 0303 	and.w	r3, r3, #3
 8014218:	2b00      	cmp	r3, #0
 801421a:	d001      	beq.n	8014220 <tcp_receive+0xa58>
 801421c:	2301      	movs	r3, #1
 801421e:	e000      	b.n	8014222 <tcp_receive+0xa5a>
 8014220:	2300      	movs	r3, #0
 8014222:	191a      	adds	r2, r3, r4
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014228:	441a      	add	r2, r3
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014232:	461c      	mov	r4, r3
 8014234:	68bb      	ldr	r3, [r7, #8]
 8014236:	891b      	ldrh	r3, [r3, #8]
 8014238:	461d      	mov	r5, r3
 801423a:	68bb      	ldr	r3, [r7, #8]
 801423c:	68db      	ldr	r3, [r3, #12]
 801423e:	899b      	ldrh	r3, [r3, #12]
 8014240:	b29b      	uxth	r3, r3
 8014242:	4618      	mov	r0, r3
 8014244:	f7fa f90e 	bl	800e464 <lwip_htons>
 8014248:	4603      	mov	r3, r0
 801424a:	b2db      	uxtb	r3, r3
 801424c:	f003 0303 	and.w	r3, r3, #3
 8014250:	2b00      	cmp	r3, #0
 8014252:	d001      	beq.n	8014258 <tcp_receive+0xa90>
 8014254:	2301      	movs	r3, #1
 8014256:	e000      	b.n	801425a <tcp_receive+0xa92>
 8014258:	2300      	movs	r3, #0
 801425a:	442b      	add	r3, r5
 801425c:	429c      	cmp	r4, r3
 801425e:	d206      	bcs.n	801426e <tcp_receive+0xaa6>
 8014260:	4b1e      	ldr	r3, [pc, #120]	; (80142dc <tcp_receive+0xb14>)
 8014262:	f240 622b 	movw	r2, #1579	; 0x62b
 8014266:	4923      	ldr	r1, [pc, #140]	; (80142f4 <tcp_receive+0xb2c>)
 8014268:	481e      	ldr	r0, [pc, #120]	; (80142e4 <tcp_receive+0xb1c>)
 801426a:	f008 fa61 	bl	801c730 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801426e:	68bb      	ldr	r3, [r7, #8]
 8014270:	891b      	ldrh	r3, [r3, #8]
 8014272:	461c      	mov	r4, r3
 8014274:	68bb      	ldr	r3, [r7, #8]
 8014276:	68db      	ldr	r3, [r3, #12]
 8014278:	899b      	ldrh	r3, [r3, #12]
 801427a:	b29b      	uxth	r3, r3
 801427c:	4618      	mov	r0, r3
 801427e:	f7fa f8f1 	bl	800e464 <lwip_htons>
 8014282:	4603      	mov	r3, r0
 8014284:	b2db      	uxtb	r3, r3
 8014286:	f003 0303 	and.w	r3, r3, #3
 801428a:	2b00      	cmp	r3, #0
 801428c:	d001      	beq.n	8014292 <tcp_receive+0xaca>
 801428e:	2301      	movs	r3, #1
 8014290:	e000      	b.n	8014294 <tcp_receive+0xacc>
 8014292:	2300      	movs	r3, #0
 8014294:	1919      	adds	r1, r3, r4
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801429a:	b28b      	uxth	r3, r1
 801429c:	1ad3      	subs	r3, r2, r3
 801429e:	b29a      	uxth	r2, r3
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80142a4:	6878      	ldr	r0, [r7, #4]
 80142a6:	f7fc fe97 	bl	8010fd8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80142aa:	68bb      	ldr	r3, [r7, #8]
 80142ac:	685b      	ldr	r3, [r3, #4]
 80142ae:	891b      	ldrh	r3, [r3, #8]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d028      	beq.n	8014306 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80142b4:	4b0d      	ldr	r3, [pc, #52]	; (80142ec <tcp_receive+0xb24>)
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d01d      	beq.n	80142f8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80142bc:	4b0b      	ldr	r3, [pc, #44]	; (80142ec <tcp_receive+0xb24>)
 80142be:	681a      	ldr	r2, [r3, #0]
 80142c0:	68bb      	ldr	r3, [r7, #8]
 80142c2:	685b      	ldr	r3, [r3, #4]
 80142c4:	4619      	mov	r1, r3
 80142c6:	4610      	mov	r0, r2
 80142c8:	f7fc f824 	bl	8010314 <pbuf_cat>
 80142cc:	e018      	b.n	8014300 <tcp_receive+0xb38>
 80142ce:	bf00      	nop
 80142d0:	200073de 	.word	0x200073de
 80142d4:	200073d4 	.word	0x200073d4
 80142d8:	200073b4 	.word	0x200073b4
 80142dc:	08021894 	.word	0x08021894
 80142e0:	08021c74 	.word	0x08021c74
 80142e4:	080218e0 	.word	0x080218e0
 80142e8:	08021cb0 	.word	0x08021cb0
 80142ec:	200073e4 	.word	0x200073e4
 80142f0:	200073e1 	.word	0x200073e1
 80142f4:	08021cd0 	.word	0x08021cd0
            } else {
              recv_data = cseg->p;
 80142f8:	68bb      	ldr	r3, [r7, #8]
 80142fa:	685b      	ldr	r3, [r3, #4]
 80142fc:	4a70      	ldr	r2, [pc, #448]	; (80144c0 <tcp_receive+0xcf8>)
 80142fe:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014300:	68bb      	ldr	r3, [r7, #8]
 8014302:	2200      	movs	r2, #0
 8014304:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014306:	68bb      	ldr	r3, [r7, #8]
 8014308:	68db      	ldr	r3, [r3, #12]
 801430a:	899b      	ldrh	r3, [r3, #12]
 801430c:	b29b      	uxth	r3, r3
 801430e:	4618      	mov	r0, r3
 8014310:	f7fa f8a8 	bl	800e464 <lwip_htons>
 8014314:	4603      	mov	r3, r0
 8014316:	b2db      	uxtb	r3, r3
 8014318:	f003 0301 	and.w	r3, r3, #1
 801431c:	2b00      	cmp	r3, #0
 801431e:	d00d      	beq.n	801433c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014320:	4b68      	ldr	r3, [pc, #416]	; (80144c4 <tcp_receive+0xcfc>)
 8014322:	781b      	ldrb	r3, [r3, #0]
 8014324:	f043 0320 	orr.w	r3, r3, #32
 8014328:	b2da      	uxtb	r2, r3
 801432a:	4b66      	ldr	r3, [pc, #408]	; (80144c4 <tcp_receive+0xcfc>)
 801432c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	7d1b      	ldrb	r3, [r3, #20]
 8014332:	2b04      	cmp	r3, #4
 8014334:	d102      	bne.n	801433c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	2207      	movs	r2, #7
 801433a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801433c:	68bb      	ldr	r3, [r7, #8]
 801433e:	681a      	ldr	r2, [r3, #0]
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8014344:	68b8      	ldr	r0, [r7, #8]
 8014346:	f7fd fb26 	bl	8011996 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801434e:	2b00      	cmp	r3, #0
 8014350:	d008      	beq.n	8014364 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014356:	68db      	ldr	r3, [r3, #12]
 8014358:	685a      	ldr	r2, [r3, #4]
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801435e:	429a      	cmp	r2, r3
 8014360:	f43f af43 	beq.w	80141ea <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	8b5b      	ldrh	r3, [r3, #26]
 8014368:	f003 0301 	and.w	r3, r3, #1
 801436c:	2b00      	cmp	r3, #0
 801436e:	d00e      	beq.n	801438e <tcp_receive+0xbc6>
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	8b5b      	ldrh	r3, [r3, #26]
 8014374:	f023 0301 	bic.w	r3, r3, #1
 8014378:	b29a      	uxth	r2, r3
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	835a      	strh	r2, [r3, #26]
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	8b5b      	ldrh	r3, [r3, #26]
 8014382:	f043 0302 	orr.w	r3, r3, #2
 8014386:	b29a      	uxth	r2, r3
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801438c:	e188      	b.n	80146a0 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	8b5b      	ldrh	r3, [r3, #26]
 8014392:	f043 0301 	orr.w	r3, r3, #1
 8014396:	b29a      	uxth	r2, r3
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801439c:	e180      	b.n	80146a0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d106      	bne.n	80143b4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80143a6:	4848      	ldr	r0, [pc, #288]	; (80144c8 <tcp_receive+0xd00>)
 80143a8:	f7fd fb0e 	bl	80119c8 <tcp_seg_copy>
 80143ac:	4602      	mov	r2, r0
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	675a      	str	r2, [r3, #116]	; 0x74
 80143b2:	e16d      	b.n	8014690 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80143b4:	2300      	movs	r3, #0
 80143b6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80143bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80143be:	e157      	b.n	8014670 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80143c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143c2:	68db      	ldr	r3, [r3, #12]
 80143c4:	685a      	ldr	r2, [r3, #4]
 80143c6:	4b41      	ldr	r3, [pc, #260]	; (80144cc <tcp_receive+0xd04>)
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	429a      	cmp	r2, r3
 80143cc:	d11d      	bne.n	801440a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80143ce:	4b3e      	ldr	r3, [pc, #248]	; (80144c8 <tcp_receive+0xd00>)
 80143d0:	891a      	ldrh	r2, [r3, #8]
 80143d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143d4:	891b      	ldrh	r3, [r3, #8]
 80143d6:	429a      	cmp	r2, r3
 80143d8:	f240 814f 	bls.w	801467a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80143dc:	483a      	ldr	r0, [pc, #232]	; (80144c8 <tcp_receive+0xd00>)
 80143de:	f7fd faf3 	bl	80119c8 <tcp_seg_copy>
 80143e2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80143e4:	697b      	ldr	r3, [r7, #20]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	f000 8149 	beq.w	801467e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80143ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d003      	beq.n	80143fa <tcp_receive+0xc32>
                    prev->next = cseg;
 80143f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143f4:	697a      	ldr	r2, [r7, #20]
 80143f6:	601a      	str	r2, [r3, #0]
 80143f8:	e002      	b.n	8014400 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	697a      	ldr	r2, [r7, #20]
 80143fe:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014400:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014402:	6978      	ldr	r0, [r7, #20]
 8014404:	f7ff f8dc 	bl	80135c0 <tcp_oos_insert_segment>
                }
                break;
 8014408:	e139      	b.n	801467e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801440a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801440c:	2b00      	cmp	r3, #0
 801440e:	d117      	bne.n	8014440 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014410:	4b2e      	ldr	r3, [pc, #184]	; (80144cc <tcp_receive+0xd04>)
 8014412:	681a      	ldr	r2, [r3, #0]
 8014414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014416:	68db      	ldr	r3, [r3, #12]
 8014418:	685b      	ldr	r3, [r3, #4]
 801441a:	1ad3      	subs	r3, r2, r3
 801441c:	2b00      	cmp	r3, #0
 801441e:	da57      	bge.n	80144d0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014420:	4829      	ldr	r0, [pc, #164]	; (80144c8 <tcp_receive+0xd00>)
 8014422:	f7fd fad1 	bl	80119c8 <tcp_seg_copy>
 8014426:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014428:	69bb      	ldr	r3, [r7, #24]
 801442a:	2b00      	cmp	r3, #0
 801442c:	f000 8129 	beq.w	8014682 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	69ba      	ldr	r2, [r7, #24]
 8014434:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014436:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014438:	69b8      	ldr	r0, [r7, #24]
 801443a:	f7ff f8c1 	bl	80135c0 <tcp_oos_insert_segment>
                  }
                  break;
 801443e:	e120      	b.n	8014682 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014440:	4b22      	ldr	r3, [pc, #136]	; (80144cc <tcp_receive+0xd04>)
 8014442:	681a      	ldr	r2, [r3, #0]
 8014444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014446:	68db      	ldr	r3, [r3, #12]
 8014448:	685b      	ldr	r3, [r3, #4]
 801444a:	1ad3      	subs	r3, r2, r3
 801444c:	3b01      	subs	r3, #1
 801444e:	2b00      	cmp	r3, #0
 8014450:	db3e      	blt.n	80144d0 <tcp_receive+0xd08>
 8014452:	4b1e      	ldr	r3, [pc, #120]	; (80144cc <tcp_receive+0xd04>)
 8014454:	681a      	ldr	r2, [r3, #0]
 8014456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014458:	68db      	ldr	r3, [r3, #12]
 801445a:	685b      	ldr	r3, [r3, #4]
 801445c:	1ad3      	subs	r3, r2, r3
 801445e:	3301      	adds	r3, #1
 8014460:	2b00      	cmp	r3, #0
 8014462:	dc35      	bgt.n	80144d0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014464:	4818      	ldr	r0, [pc, #96]	; (80144c8 <tcp_receive+0xd00>)
 8014466:	f7fd faaf 	bl	80119c8 <tcp_seg_copy>
 801446a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801446c:	69fb      	ldr	r3, [r7, #28]
 801446e:	2b00      	cmp	r3, #0
 8014470:	f000 8109 	beq.w	8014686 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014476:	68db      	ldr	r3, [r3, #12]
 8014478:	685b      	ldr	r3, [r3, #4]
 801447a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801447c:	8912      	ldrh	r2, [r2, #8]
 801447e:	441a      	add	r2, r3
 8014480:	4b12      	ldr	r3, [pc, #72]	; (80144cc <tcp_receive+0xd04>)
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	1ad3      	subs	r3, r2, r3
 8014486:	2b00      	cmp	r3, #0
 8014488:	dd12      	ble.n	80144b0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801448a:	4b10      	ldr	r3, [pc, #64]	; (80144cc <tcp_receive+0xd04>)
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	b29a      	uxth	r2, r3
 8014490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014492:	68db      	ldr	r3, [r3, #12]
 8014494:	685b      	ldr	r3, [r3, #4]
 8014496:	b29b      	uxth	r3, r3
 8014498:	1ad3      	subs	r3, r2, r3
 801449a:	b29a      	uxth	r2, r3
 801449c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801449e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80144a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144a2:	685a      	ldr	r2, [r3, #4]
 80144a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144a6:	891b      	ldrh	r3, [r3, #8]
 80144a8:	4619      	mov	r1, r3
 80144aa:	4610      	mov	r0, r2
 80144ac:	f7fb fcea 	bl	800fe84 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80144b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144b2:	69fa      	ldr	r2, [r7, #28]
 80144b4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80144b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80144b8:	69f8      	ldr	r0, [r7, #28]
 80144ba:	f7ff f881 	bl	80135c0 <tcp_oos_insert_segment>
                  }
                  break;
 80144be:	e0e2      	b.n	8014686 <tcp_receive+0xebe>
 80144c0:	200073e4 	.word	0x200073e4
 80144c4:	200073e1 	.word	0x200073e1
 80144c8:	200073b4 	.word	0x200073b4
 80144cc:	200073d4 	.word	0x200073d4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80144d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144d2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80144d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	f040 80c6 	bne.w	801466a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80144de:	4b80      	ldr	r3, [pc, #512]	; (80146e0 <tcp_receive+0xf18>)
 80144e0:	681a      	ldr	r2, [r3, #0]
 80144e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144e4:	68db      	ldr	r3, [r3, #12]
 80144e6:	685b      	ldr	r3, [r3, #4]
 80144e8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	f340 80bd 	ble.w	801466a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80144f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144f2:	68db      	ldr	r3, [r3, #12]
 80144f4:	899b      	ldrh	r3, [r3, #12]
 80144f6:	b29b      	uxth	r3, r3
 80144f8:	4618      	mov	r0, r3
 80144fa:	f7f9 ffb3 	bl	800e464 <lwip_htons>
 80144fe:	4603      	mov	r3, r0
 8014500:	b2db      	uxtb	r3, r3
 8014502:	f003 0301 	and.w	r3, r3, #1
 8014506:	2b00      	cmp	r3, #0
 8014508:	f040 80bf 	bne.w	801468a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801450c:	4875      	ldr	r0, [pc, #468]	; (80146e4 <tcp_receive+0xf1c>)
 801450e:	f7fd fa5b 	bl	80119c8 <tcp_seg_copy>
 8014512:	4602      	mov	r2, r0
 8014514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014516:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	2b00      	cmp	r3, #0
 801451e:	f000 80b6 	beq.w	801468e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014524:	68db      	ldr	r3, [r3, #12]
 8014526:	685b      	ldr	r3, [r3, #4]
 8014528:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801452a:	8912      	ldrh	r2, [r2, #8]
 801452c:	441a      	add	r2, r3
 801452e:	4b6c      	ldr	r3, [pc, #432]	; (80146e0 <tcp_receive+0xf18>)
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	1ad3      	subs	r3, r2, r3
 8014534:	2b00      	cmp	r3, #0
 8014536:	dd12      	ble.n	801455e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014538:	4b69      	ldr	r3, [pc, #420]	; (80146e0 <tcp_receive+0xf18>)
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	b29a      	uxth	r2, r3
 801453e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014540:	68db      	ldr	r3, [r3, #12]
 8014542:	685b      	ldr	r3, [r3, #4]
 8014544:	b29b      	uxth	r3, r3
 8014546:	1ad3      	subs	r3, r2, r3
 8014548:	b29a      	uxth	r2, r3
 801454a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801454c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801454e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014550:	685a      	ldr	r2, [r3, #4]
 8014552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014554:	891b      	ldrh	r3, [r3, #8]
 8014556:	4619      	mov	r1, r3
 8014558:	4610      	mov	r0, r2
 801455a:	f7fb fc93 	bl	800fe84 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801455e:	4b62      	ldr	r3, [pc, #392]	; (80146e8 <tcp_receive+0xf20>)
 8014560:	881b      	ldrh	r3, [r3, #0]
 8014562:	461a      	mov	r2, r3
 8014564:	4b5e      	ldr	r3, [pc, #376]	; (80146e0 <tcp_receive+0xf18>)
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	441a      	add	r2, r3
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801456e:	6879      	ldr	r1, [r7, #4]
 8014570:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014572:	440b      	add	r3, r1
 8014574:	1ad3      	subs	r3, r2, r3
 8014576:	2b00      	cmp	r3, #0
 8014578:	f340 8089 	ble.w	801468e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801457c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	68db      	ldr	r3, [r3, #12]
 8014582:	899b      	ldrh	r3, [r3, #12]
 8014584:	b29b      	uxth	r3, r3
 8014586:	4618      	mov	r0, r3
 8014588:	f7f9 ff6c 	bl	800e464 <lwip_htons>
 801458c:	4603      	mov	r3, r0
 801458e:	b2db      	uxtb	r3, r3
 8014590:	f003 0301 	and.w	r3, r3, #1
 8014594:	2b00      	cmp	r3, #0
 8014596:	d022      	beq.n	80145de <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	68db      	ldr	r3, [r3, #12]
 801459e:	899b      	ldrh	r3, [r3, #12]
 80145a0:	b29b      	uxth	r3, r3
 80145a2:	b21b      	sxth	r3, r3
 80145a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80145a8:	b21c      	sxth	r4, r3
 80145aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	68db      	ldr	r3, [r3, #12]
 80145b0:	899b      	ldrh	r3, [r3, #12]
 80145b2:	b29b      	uxth	r3, r3
 80145b4:	4618      	mov	r0, r3
 80145b6:	f7f9 ff55 	bl	800e464 <lwip_htons>
 80145ba:	4603      	mov	r3, r0
 80145bc:	b2db      	uxtb	r3, r3
 80145be:	b29b      	uxth	r3, r3
 80145c0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80145c4:	b29b      	uxth	r3, r3
 80145c6:	4618      	mov	r0, r3
 80145c8:	f7f9 ff4c 	bl	800e464 <lwip_htons>
 80145cc:	4603      	mov	r3, r0
 80145ce:	b21b      	sxth	r3, r3
 80145d0:	4323      	orrs	r3, r4
 80145d2:	b21a      	sxth	r2, r3
 80145d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	68db      	ldr	r3, [r3, #12]
 80145da:	b292      	uxth	r2, r2
 80145dc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145e2:	b29a      	uxth	r2, r3
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80145e8:	4413      	add	r3, r2
 80145ea:	b299      	uxth	r1, r3
 80145ec:	4b3c      	ldr	r3, [pc, #240]	; (80146e0 <tcp_receive+0xf18>)
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	b29a      	uxth	r2, r3
 80145f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	1a8a      	subs	r2, r1, r2
 80145f8:	b292      	uxth	r2, r2
 80145fa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80145fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	685a      	ldr	r2, [r3, #4]
 8014602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	891b      	ldrh	r3, [r3, #8]
 8014608:	4619      	mov	r1, r3
 801460a:	4610      	mov	r0, r2
 801460c:	f7fb fc3a 	bl	800fe84 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	891c      	ldrh	r4, [r3, #8]
 8014616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	68db      	ldr	r3, [r3, #12]
 801461c:	899b      	ldrh	r3, [r3, #12]
 801461e:	b29b      	uxth	r3, r3
 8014620:	4618      	mov	r0, r3
 8014622:	f7f9 ff1f 	bl	800e464 <lwip_htons>
 8014626:	4603      	mov	r3, r0
 8014628:	b2db      	uxtb	r3, r3
 801462a:	f003 0303 	and.w	r3, r3, #3
 801462e:	2b00      	cmp	r3, #0
 8014630:	d001      	beq.n	8014636 <tcp_receive+0xe6e>
 8014632:	2301      	movs	r3, #1
 8014634:	e000      	b.n	8014638 <tcp_receive+0xe70>
 8014636:	2300      	movs	r3, #0
 8014638:	4423      	add	r3, r4
 801463a:	b29a      	uxth	r2, r3
 801463c:	4b2a      	ldr	r3, [pc, #168]	; (80146e8 <tcp_receive+0xf20>)
 801463e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014640:	4b29      	ldr	r3, [pc, #164]	; (80146e8 <tcp_receive+0xf20>)
 8014642:	881b      	ldrh	r3, [r3, #0]
 8014644:	461a      	mov	r2, r3
 8014646:	4b26      	ldr	r3, [pc, #152]	; (80146e0 <tcp_receive+0xf18>)
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	441a      	add	r2, r3
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014650:	6879      	ldr	r1, [r7, #4]
 8014652:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014654:	440b      	add	r3, r1
 8014656:	429a      	cmp	r2, r3
 8014658:	d019      	beq.n	801468e <tcp_receive+0xec6>
 801465a:	4b24      	ldr	r3, [pc, #144]	; (80146ec <tcp_receive+0xf24>)
 801465c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8014660:	4923      	ldr	r1, [pc, #140]	; (80146f0 <tcp_receive+0xf28>)
 8014662:	4824      	ldr	r0, [pc, #144]	; (80146f4 <tcp_receive+0xf2c>)
 8014664:	f008 f864 	bl	801c730 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014668:	e011      	b.n	801468e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801466a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	63bb      	str	r3, [r7, #56]	; 0x38
 8014670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014672:	2b00      	cmp	r3, #0
 8014674:	f47f aea4 	bne.w	80143c0 <tcp_receive+0xbf8>
 8014678:	e00a      	b.n	8014690 <tcp_receive+0xec8>
                break;
 801467a:	bf00      	nop
 801467c:	e008      	b.n	8014690 <tcp_receive+0xec8>
                break;
 801467e:	bf00      	nop
 8014680:	e006      	b.n	8014690 <tcp_receive+0xec8>
                  break;
 8014682:	bf00      	nop
 8014684:	e004      	b.n	8014690 <tcp_receive+0xec8>
                  break;
 8014686:	bf00      	nop
 8014688:	e002      	b.n	8014690 <tcp_receive+0xec8>
                  break;
 801468a:	bf00      	nop
 801468c:	e000      	b.n	8014690 <tcp_receive+0xec8>
                break;
 801468e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014690:	6878      	ldr	r0, [r7, #4]
 8014692:	f001 fa89 	bl	8015ba8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014696:	e003      	b.n	80146a0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014698:	6878      	ldr	r0, [r7, #4]
 801469a:	f001 fa85 	bl	8015ba8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801469e:	e01a      	b.n	80146d6 <tcp_receive+0xf0e>
 80146a0:	e019      	b.n	80146d6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80146a2:	4b0f      	ldr	r3, [pc, #60]	; (80146e0 <tcp_receive+0xf18>)
 80146a4:	681a      	ldr	r2, [r3, #0]
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146aa:	1ad3      	subs	r3, r2, r3
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	db0a      	blt.n	80146c6 <tcp_receive+0xefe>
 80146b0:	4b0b      	ldr	r3, [pc, #44]	; (80146e0 <tcp_receive+0xf18>)
 80146b2:	681a      	ldr	r2, [r3, #0]
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146b8:	6879      	ldr	r1, [r7, #4]
 80146ba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80146bc:	440b      	add	r3, r1
 80146be:	1ad3      	subs	r3, r2, r3
 80146c0:	3301      	adds	r3, #1
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	dd07      	ble.n	80146d6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	8b5b      	ldrh	r3, [r3, #26]
 80146ca:	f043 0302 	orr.w	r3, r3, #2
 80146ce:	b29a      	uxth	r2, r3
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80146d4:	e7ff      	b.n	80146d6 <tcp_receive+0xf0e>
 80146d6:	bf00      	nop
 80146d8:	3750      	adds	r7, #80	; 0x50
 80146da:	46bd      	mov	sp, r7
 80146dc:	bdb0      	pop	{r4, r5, r7, pc}
 80146de:	bf00      	nop
 80146e0:	200073d4 	.word	0x200073d4
 80146e4:	200073b4 	.word	0x200073b4
 80146e8:	200073de 	.word	0x200073de
 80146ec:	08021894 	.word	0x08021894
 80146f0:	08021c3c 	.word	0x08021c3c
 80146f4:	080218e0 	.word	0x080218e0

080146f8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80146f8:	b480      	push	{r7}
 80146fa:	b083      	sub	sp, #12
 80146fc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80146fe:	4b15      	ldr	r3, [pc, #84]	; (8014754 <tcp_get_next_optbyte+0x5c>)
 8014700:	881b      	ldrh	r3, [r3, #0]
 8014702:	1c5a      	adds	r2, r3, #1
 8014704:	b291      	uxth	r1, r2
 8014706:	4a13      	ldr	r2, [pc, #76]	; (8014754 <tcp_get_next_optbyte+0x5c>)
 8014708:	8011      	strh	r1, [r2, #0]
 801470a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801470c:	4b12      	ldr	r3, [pc, #72]	; (8014758 <tcp_get_next_optbyte+0x60>)
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	2b00      	cmp	r3, #0
 8014712:	d004      	beq.n	801471e <tcp_get_next_optbyte+0x26>
 8014714:	4b11      	ldr	r3, [pc, #68]	; (801475c <tcp_get_next_optbyte+0x64>)
 8014716:	881b      	ldrh	r3, [r3, #0]
 8014718:	88fa      	ldrh	r2, [r7, #6]
 801471a:	429a      	cmp	r2, r3
 801471c:	d208      	bcs.n	8014730 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801471e:	4b10      	ldr	r3, [pc, #64]	; (8014760 <tcp_get_next_optbyte+0x68>)
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	3314      	adds	r3, #20
 8014724:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8014726:	88fb      	ldrh	r3, [r7, #6]
 8014728:	683a      	ldr	r2, [r7, #0]
 801472a:	4413      	add	r3, r2
 801472c:	781b      	ldrb	r3, [r3, #0]
 801472e:	e00b      	b.n	8014748 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014730:	88fb      	ldrh	r3, [r7, #6]
 8014732:	b2da      	uxtb	r2, r3
 8014734:	4b09      	ldr	r3, [pc, #36]	; (801475c <tcp_get_next_optbyte+0x64>)
 8014736:	881b      	ldrh	r3, [r3, #0]
 8014738:	b2db      	uxtb	r3, r3
 801473a:	1ad3      	subs	r3, r2, r3
 801473c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801473e:	4b06      	ldr	r3, [pc, #24]	; (8014758 <tcp_get_next_optbyte+0x60>)
 8014740:	681a      	ldr	r2, [r3, #0]
 8014742:	797b      	ldrb	r3, [r7, #5]
 8014744:	4413      	add	r3, r2
 8014746:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014748:	4618      	mov	r0, r3
 801474a:	370c      	adds	r7, #12
 801474c:	46bd      	mov	sp, r7
 801474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014752:	4770      	bx	lr
 8014754:	200073d0 	.word	0x200073d0
 8014758:	200073cc 	.word	0x200073cc
 801475c:	200073ca 	.word	0x200073ca
 8014760:	200073c4 	.word	0x200073c4

08014764 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014764:	b580      	push	{r7, lr}
 8014766:	b084      	sub	sp, #16
 8014768:	af00      	add	r7, sp, #0
 801476a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d106      	bne.n	8014780 <tcp_parseopt+0x1c>
 8014772:	4b32      	ldr	r3, [pc, #200]	; (801483c <tcp_parseopt+0xd8>)
 8014774:	f240 727d 	movw	r2, #1917	; 0x77d
 8014778:	4931      	ldr	r1, [pc, #196]	; (8014840 <tcp_parseopt+0xdc>)
 801477a:	4832      	ldr	r0, [pc, #200]	; (8014844 <tcp_parseopt+0xe0>)
 801477c:	f007 ffd8 	bl	801c730 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014780:	4b31      	ldr	r3, [pc, #196]	; (8014848 <tcp_parseopt+0xe4>)
 8014782:	881b      	ldrh	r3, [r3, #0]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d055      	beq.n	8014834 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014788:	4b30      	ldr	r3, [pc, #192]	; (801484c <tcp_parseopt+0xe8>)
 801478a:	2200      	movs	r2, #0
 801478c:	801a      	strh	r2, [r3, #0]
 801478e:	e045      	b.n	801481c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8014790:	f7ff ffb2 	bl	80146f8 <tcp_get_next_optbyte>
 8014794:	4603      	mov	r3, r0
 8014796:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014798:	7bfb      	ldrb	r3, [r7, #15]
 801479a:	2b02      	cmp	r3, #2
 801479c:	d006      	beq.n	80147ac <tcp_parseopt+0x48>
 801479e:	2b02      	cmp	r3, #2
 80147a0:	dc2b      	bgt.n	80147fa <tcp_parseopt+0x96>
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d041      	beq.n	801482a <tcp_parseopt+0xc6>
 80147a6:	2b01      	cmp	r3, #1
 80147a8:	d127      	bne.n	80147fa <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80147aa:	e037      	b.n	801481c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80147ac:	f7ff ffa4 	bl	80146f8 <tcp_get_next_optbyte>
 80147b0:	4603      	mov	r3, r0
 80147b2:	2b04      	cmp	r3, #4
 80147b4:	d13b      	bne.n	801482e <tcp_parseopt+0xca>
 80147b6:	4b25      	ldr	r3, [pc, #148]	; (801484c <tcp_parseopt+0xe8>)
 80147b8:	881b      	ldrh	r3, [r3, #0]
 80147ba:	3301      	adds	r3, #1
 80147bc:	4a22      	ldr	r2, [pc, #136]	; (8014848 <tcp_parseopt+0xe4>)
 80147be:	8812      	ldrh	r2, [r2, #0]
 80147c0:	4293      	cmp	r3, r2
 80147c2:	da34      	bge.n	801482e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80147c4:	f7ff ff98 	bl	80146f8 <tcp_get_next_optbyte>
 80147c8:	4603      	mov	r3, r0
 80147ca:	b29b      	uxth	r3, r3
 80147cc:	021b      	lsls	r3, r3, #8
 80147ce:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80147d0:	f7ff ff92 	bl	80146f8 <tcp_get_next_optbyte>
 80147d4:	4603      	mov	r3, r0
 80147d6:	b29a      	uxth	r2, r3
 80147d8:	89bb      	ldrh	r3, [r7, #12]
 80147da:	4313      	orrs	r3, r2
 80147dc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80147de:	89bb      	ldrh	r3, [r7, #12]
 80147e0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80147e4:	d804      	bhi.n	80147f0 <tcp_parseopt+0x8c>
 80147e6:	89bb      	ldrh	r3, [r7, #12]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d001      	beq.n	80147f0 <tcp_parseopt+0x8c>
 80147ec:	89ba      	ldrh	r2, [r7, #12]
 80147ee:	e001      	b.n	80147f4 <tcp_parseopt+0x90>
 80147f0:	f44f 7206 	mov.w	r2, #536	; 0x218
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80147f8:	e010      	b.n	801481c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80147fa:	f7ff ff7d 	bl	80146f8 <tcp_get_next_optbyte>
 80147fe:	4603      	mov	r3, r0
 8014800:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014802:	7afb      	ldrb	r3, [r7, #11]
 8014804:	2b01      	cmp	r3, #1
 8014806:	d914      	bls.n	8014832 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8014808:	7afb      	ldrb	r3, [r7, #11]
 801480a:	b29a      	uxth	r2, r3
 801480c:	4b0f      	ldr	r3, [pc, #60]	; (801484c <tcp_parseopt+0xe8>)
 801480e:	881b      	ldrh	r3, [r3, #0]
 8014810:	4413      	add	r3, r2
 8014812:	b29b      	uxth	r3, r3
 8014814:	3b02      	subs	r3, #2
 8014816:	b29a      	uxth	r2, r3
 8014818:	4b0c      	ldr	r3, [pc, #48]	; (801484c <tcp_parseopt+0xe8>)
 801481a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801481c:	4b0b      	ldr	r3, [pc, #44]	; (801484c <tcp_parseopt+0xe8>)
 801481e:	881a      	ldrh	r2, [r3, #0]
 8014820:	4b09      	ldr	r3, [pc, #36]	; (8014848 <tcp_parseopt+0xe4>)
 8014822:	881b      	ldrh	r3, [r3, #0]
 8014824:	429a      	cmp	r2, r3
 8014826:	d3b3      	bcc.n	8014790 <tcp_parseopt+0x2c>
 8014828:	e004      	b.n	8014834 <tcp_parseopt+0xd0>
          return;
 801482a:	bf00      	nop
 801482c:	e002      	b.n	8014834 <tcp_parseopt+0xd0>
            return;
 801482e:	bf00      	nop
 8014830:	e000      	b.n	8014834 <tcp_parseopt+0xd0>
            return;
 8014832:	bf00      	nop
      }
    }
  }
}
 8014834:	3710      	adds	r7, #16
 8014836:	46bd      	mov	sp, r7
 8014838:	bd80      	pop	{r7, pc}
 801483a:	bf00      	nop
 801483c:	08021894 	.word	0x08021894
 8014840:	08021cf8 	.word	0x08021cf8
 8014844:	080218e0 	.word	0x080218e0
 8014848:	200073c8 	.word	0x200073c8
 801484c:	200073d0 	.word	0x200073d0

08014850 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014850:	b480      	push	{r7}
 8014852:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014854:	4b05      	ldr	r3, [pc, #20]	; (801486c <tcp_trigger_input_pcb_close+0x1c>)
 8014856:	781b      	ldrb	r3, [r3, #0]
 8014858:	f043 0310 	orr.w	r3, r3, #16
 801485c:	b2da      	uxtb	r2, r3
 801485e:	4b03      	ldr	r3, [pc, #12]	; (801486c <tcp_trigger_input_pcb_close+0x1c>)
 8014860:	701a      	strb	r2, [r3, #0]
}
 8014862:	bf00      	nop
 8014864:	46bd      	mov	sp, r7
 8014866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486a:	4770      	bx	lr
 801486c:	200073e1 	.word	0x200073e1

08014870 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014870:	b580      	push	{r7, lr}
 8014872:	b084      	sub	sp, #16
 8014874:	af00      	add	r7, sp, #0
 8014876:	60f8      	str	r0, [r7, #12]
 8014878:	60b9      	str	r1, [r7, #8]
 801487a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d00a      	beq.n	8014898 <tcp_route+0x28>
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	7a1b      	ldrb	r3, [r3, #8]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d006      	beq.n	8014898 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	7a1b      	ldrb	r3, [r3, #8]
 801488e:	4618      	mov	r0, r3
 8014890:	f7fb f91e 	bl	800fad0 <netif_get_by_index>
 8014894:	4603      	mov	r3, r0
 8014896:	e003      	b.n	80148a0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8014898:	6878      	ldr	r0, [r7, #4]
 801489a:	f005 faff 	bl	8019e9c <ip4_route>
 801489e:	4603      	mov	r3, r0
  }
}
 80148a0:	4618      	mov	r0, r3
 80148a2:	3710      	adds	r7, #16
 80148a4:	46bd      	mov	sp, r7
 80148a6:	bd80      	pop	{r7, pc}

080148a8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80148a8:	b590      	push	{r4, r7, lr}
 80148aa:	b087      	sub	sp, #28
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	60f8      	str	r0, [r7, #12]
 80148b0:	60b9      	str	r1, [r7, #8]
 80148b2:	603b      	str	r3, [r7, #0]
 80148b4:	4613      	mov	r3, r2
 80148b6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d105      	bne.n	80148ca <tcp_create_segment+0x22>
 80148be:	4b48      	ldr	r3, [pc, #288]	; (80149e0 <tcp_create_segment+0x138>)
 80148c0:	22a3      	movs	r2, #163	; 0xa3
 80148c2:	4948      	ldr	r1, [pc, #288]	; (80149e4 <tcp_create_segment+0x13c>)
 80148c4:	4848      	ldr	r0, [pc, #288]	; (80149e8 <tcp_create_segment+0x140>)
 80148c6:	f007 ff33 	bl	801c730 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80148ca:	68bb      	ldr	r3, [r7, #8]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d105      	bne.n	80148dc <tcp_create_segment+0x34>
 80148d0:	4b43      	ldr	r3, [pc, #268]	; (80149e0 <tcp_create_segment+0x138>)
 80148d2:	22a4      	movs	r2, #164	; 0xa4
 80148d4:	4945      	ldr	r1, [pc, #276]	; (80149ec <tcp_create_segment+0x144>)
 80148d6:	4844      	ldr	r0, [pc, #272]	; (80149e8 <tcp_create_segment+0x140>)
 80148d8:	f007 ff2a 	bl	801c730 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80148dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80148e0:	009b      	lsls	r3, r3, #2
 80148e2:	b2db      	uxtb	r3, r3
 80148e4:	f003 0304 	and.w	r3, r3, #4
 80148e8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80148ea:	2003      	movs	r0, #3
 80148ec:	f7fa fdcc 	bl	800f488 <memp_malloc>
 80148f0:	6138      	str	r0, [r7, #16]
 80148f2:	693b      	ldr	r3, [r7, #16]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d104      	bne.n	8014902 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80148f8:	68b8      	ldr	r0, [r7, #8]
 80148fa:	f7fb fc49 	bl	8010190 <pbuf_free>
    return NULL;
 80148fe:	2300      	movs	r3, #0
 8014900:	e069      	b.n	80149d6 <tcp_create_segment+0x12e>
  }
  seg->flags = optflags;
 8014902:	693b      	ldr	r3, [r7, #16]
 8014904:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014908:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801490a:	693b      	ldr	r3, [r7, #16]
 801490c:	2200      	movs	r2, #0
 801490e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014910:	693b      	ldr	r3, [r7, #16]
 8014912:	68ba      	ldr	r2, [r7, #8]
 8014914:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8014916:	68bb      	ldr	r3, [r7, #8]
 8014918:	891a      	ldrh	r2, [r3, #8]
 801491a:	7dfb      	ldrb	r3, [r7, #23]
 801491c:	b29b      	uxth	r3, r3
 801491e:	429a      	cmp	r2, r3
 8014920:	d205      	bcs.n	801492e <tcp_create_segment+0x86>
 8014922:	4b2f      	ldr	r3, [pc, #188]	; (80149e0 <tcp_create_segment+0x138>)
 8014924:	22b0      	movs	r2, #176	; 0xb0
 8014926:	4932      	ldr	r1, [pc, #200]	; (80149f0 <tcp_create_segment+0x148>)
 8014928:	482f      	ldr	r0, [pc, #188]	; (80149e8 <tcp_create_segment+0x140>)
 801492a:	f007 ff01 	bl	801c730 <iprintf>
  seg->len = p->tot_len - optlen;
 801492e:	68bb      	ldr	r3, [r7, #8]
 8014930:	891a      	ldrh	r2, [r3, #8]
 8014932:	7dfb      	ldrb	r3, [r7, #23]
 8014934:	b29b      	uxth	r3, r3
 8014936:	1ad3      	subs	r3, r2, r3
 8014938:	b29a      	uxth	r2, r3
 801493a:	693b      	ldr	r3, [r7, #16]
 801493c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801493e:	2114      	movs	r1, #20
 8014940:	68b8      	ldr	r0, [r7, #8]
 8014942:	f7fb fb8f 	bl	8010064 <pbuf_add_header>
 8014946:	4603      	mov	r3, r0
 8014948:	2b00      	cmp	r3, #0
 801494a:	d00c      	beq.n	8014966 <tcp_create_segment+0xbe>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 801494c:	4b29      	ldr	r3, [pc, #164]	; (80149f4 <tcp_create_segment+0x14c>)
 801494e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8014952:	3301      	adds	r3, #1
 8014954:	b29a      	uxth	r2, r3
 8014956:	4b27      	ldr	r3, [pc, #156]	; (80149f4 <tcp_create_segment+0x14c>)
 8014958:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
    tcp_seg_free(seg);
 801495c:	6938      	ldr	r0, [r7, #16]
 801495e:	f7fd f81a 	bl	8011996 <tcp_seg_free>
    return NULL;
 8014962:	2300      	movs	r3, #0
 8014964:	e037      	b.n	80149d6 <tcp_create_segment+0x12e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014966:	693b      	ldr	r3, [r7, #16]
 8014968:	685b      	ldr	r3, [r3, #4]
 801496a:	685a      	ldr	r2, [r3, #4]
 801496c:	693b      	ldr	r3, [r7, #16]
 801496e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	8ada      	ldrh	r2, [r3, #22]
 8014974:	693b      	ldr	r3, [r7, #16]
 8014976:	68dc      	ldr	r4, [r3, #12]
 8014978:	4610      	mov	r0, r2
 801497a:	f7f9 fd73 	bl	800e464 <lwip_htons>
 801497e:	4603      	mov	r3, r0
 8014980:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	8b1a      	ldrh	r2, [r3, #24]
 8014986:	693b      	ldr	r3, [r7, #16]
 8014988:	68dc      	ldr	r4, [r3, #12]
 801498a:	4610      	mov	r0, r2
 801498c:	f7f9 fd6a 	bl	800e464 <lwip_htons>
 8014990:	4603      	mov	r3, r0
 8014992:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014994:	693b      	ldr	r3, [r7, #16]
 8014996:	68dc      	ldr	r4, [r3, #12]
 8014998:	6838      	ldr	r0, [r7, #0]
 801499a:	f7f9 fd78 	bl	800e48e <lwip_htonl>
 801499e:	4603      	mov	r3, r0
 80149a0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80149a2:	7dfb      	ldrb	r3, [r7, #23]
 80149a4:	089b      	lsrs	r3, r3, #2
 80149a6:	b2db      	uxtb	r3, r3
 80149a8:	b29b      	uxth	r3, r3
 80149aa:	3305      	adds	r3, #5
 80149ac:	b29b      	uxth	r3, r3
 80149ae:	031b      	lsls	r3, r3, #12
 80149b0:	b29a      	uxth	r2, r3
 80149b2:	79fb      	ldrb	r3, [r7, #7]
 80149b4:	b29b      	uxth	r3, r3
 80149b6:	4313      	orrs	r3, r2
 80149b8:	b29a      	uxth	r2, r3
 80149ba:	693b      	ldr	r3, [r7, #16]
 80149bc:	68dc      	ldr	r4, [r3, #12]
 80149be:	4610      	mov	r0, r2
 80149c0:	f7f9 fd50 	bl	800e464 <lwip_htons>
 80149c4:	4603      	mov	r3, r0
 80149c6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80149c8:	693b      	ldr	r3, [r7, #16]
 80149ca:	68db      	ldr	r3, [r3, #12]
 80149cc:	2200      	movs	r2, #0
 80149ce:	749a      	strb	r2, [r3, #18]
 80149d0:	2200      	movs	r2, #0
 80149d2:	74da      	strb	r2, [r3, #19]
  return seg;
 80149d4:	693b      	ldr	r3, [r7, #16]
}
 80149d6:	4618      	mov	r0, r3
 80149d8:	371c      	adds	r7, #28
 80149da:	46bd      	mov	sp, r7
 80149dc:	bd90      	pop	{r4, r7, pc}
 80149de:	bf00      	nop
 80149e0:	08021d14 	.word	0x08021d14
 80149e4:	08021d48 	.word	0x08021d48
 80149e8:	08021d68 	.word	0x08021d68
 80149ec:	08021d90 	.word	0x08021d90
 80149f0:	08021db4 	.word	0x08021db4
 80149f4:	20007204 	.word	0x20007204

080149f8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80149f8:	b590      	push	{r4, r7, lr}
 80149fa:	b08b      	sub	sp, #44	; 0x2c
 80149fc:	af02      	add	r7, sp, #8
 80149fe:	6078      	str	r0, [r7, #4]
 8014a00:	460b      	mov	r3, r1
 8014a02:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8014a04:	2300      	movs	r3, #0
 8014a06:	61fb      	str	r3, [r7, #28]
 8014a08:	2300      	movs	r3, #0
 8014a0a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8014a0c:	2300      	movs	r3, #0
 8014a0e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d106      	bne.n	8014a24 <tcp_split_unsent_seg+0x2c>
 8014a16:	4b99      	ldr	r3, [pc, #612]	; (8014c7c <tcp_split_unsent_seg+0x284>)
 8014a18:	f240 324b 	movw	r2, #843	; 0x34b
 8014a1c:	4998      	ldr	r1, [pc, #608]	; (8014c80 <tcp_split_unsent_seg+0x288>)
 8014a1e:	4899      	ldr	r0, [pc, #612]	; (8014c84 <tcp_split_unsent_seg+0x28c>)
 8014a20:	f007 fe86 	bl	801c730 <iprintf>

  useg = pcb->unsent;
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a28:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8014a2a:	697b      	ldr	r3, [r7, #20]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d102      	bne.n	8014a36 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8014a30:	f04f 33ff 	mov.w	r3, #4294967295
 8014a34:	e11e      	b.n	8014c74 <tcp_split_unsent_seg+0x27c>
  }

  if (split == 0) {
 8014a36:	887b      	ldrh	r3, [r7, #2]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d109      	bne.n	8014a50 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014a3c:	4b8f      	ldr	r3, [pc, #572]	; (8014c7c <tcp_split_unsent_seg+0x284>)
 8014a3e:	f240 3253 	movw	r2, #851	; 0x353
 8014a42:	4991      	ldr	r1, [pc, #580]	; (8014c88 <tcp_split_unsent_seg+0x290>)
 8014a44:	488f      	ldr	r0, [pc, #572]	; (8014c84 <tcp_split_unsent_seg+0x28c>)
 8014a46:	f007 fe73 	bl	801c730 <iprintf>
    return ERR_VAL;
 8014a4a:	f06f 0305 	mvn.w	r3, #5
 8014a4e:	e111      	b.n	8014c74 <tcp_split_unsent_seg+0x27c>
  }

  if (useg->len <= split) {
 8014a50:	697b      	ldr	r3, [r7, #20]
 8014a52:	891b      	ldrh	r3, [r3, #8]
 8014a54:	887a      	ldrh	r2, [r7, #2]
 8014a56:	429a      	cmp	r2, r3
 8014a58:	d301      	bcc.n	8014a5e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	e10a      	b.n	8014c74 <tcp_split_unsent_seg+0x27c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014a62:	887a      	ldrh	r2, [r7, #2]
 8014a64:	429a      	cmp	r2, r3
 8014a66:	d906      	bls.n	8014a76 <tcp_split_unsent_seg+0x7e>
 8014a68:	4b84      	ldr	r3, [pc, #528]	; (8014c7c <tcp_split_unsent_seg+0x284>)
 8014a6a:	f240 325b 	movw	r2, #859	; 0x35b
 8014a6e:	4987      	ldr	r1, [pc, #540]	; (8014c8c <tcp_split_unsent_seg+0x294>)
 8014a70:	4884      	ldr	r0, [pc, #528]	; (8014c84 <tcp_split_unsent_seg+0x28c>)
 8014a72:	f007 fe5d 	bl	801c730 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8014a76:	697b      	ldr	r3, [r7, #20]
 8014a78:	891b      	ldrh	r3, [r3, #8]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d106      	bne.n	8014a8c <tcp_split_unsent_seg+0x94>
 8014a7e:	4b7f      	ldr	r3, [pc, #508]	; (8014c7c <tcp_split_unsent_seg+0x284>)
 8014a80:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8014a84:	4982      	ldr	r1, [pc, #520]	; (8014c90 <tcp_split_unsent_seg+0x298>)
 8014a86:	487f      	ldr	r0, [pc, #508]	; (8014c84 <tcp_split_unsent_seg+0x28c>)
 8014a88:	f007 fe52 	bl	801c730 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014a8c:	697b      	ldr	r3, [r7, #20]
 8014a8e:	7a9b      	ldrb	r3, [r3, #10]
 8014a90:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014a92:	7bfb      	ldrb	r3, [r7, #15]
 8014a94:	009b      	lsls	r3, r3, #2
 8014a96:	b2db      	uxtb	r3, r3
 8014a98:	f003 0304 	and.w	r3, r3, #4
 8014a9c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014a9e:	697b      	ldr	r3, [r7, #20]
 8014aa0:	891a      	ldrh	r2, [r3, #8]
 8014aa2:	887b      	ldrh	r3, [r7, #2]
 8014aa4:	1ad3      	subs	r3, r2, r3
 8014aa6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014aa8:	7bbb      	ldrb	r3, [r7, #14]
 8014aaa:	b29a      	uxth	r2, r3
 8014aac:	89bb      	ldrh	r3, [r7, #12]
 8014aae:	4413      	add	r3, r2
 8014ab0:	b29b      	uxth	r3, r3
 8014ab2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014ab6:	4619      	mov	r1, r3
 8014ab8:	2036      	movs	r0, #54	; 0x36
 8014aba:	f7fb f885 	bl	800fbc8 <pbuf_alloc>
 8014abe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014ac0:	693b      	ldr	r3, [r7, #16]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	f000 80b7 	beq.w	8014c36 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014ac8:	697b      	ldr	r3, [r7, #20]
 8014aca:	685b      	ldr	r3, [r3, #4]
 8014acc:	891a      	ldrh	r2, [r3, #8]
 8014ace:	697b      	ldr	r3, [r7, #20]
 8014ad0:	891b      	ldrh	r3, [r3, #8]
 8014ad2:	1ad3      	subs	r3, r2, r3
 8014ad4:	b29a      	uxth	r2, r3
 8014ad6:	887b      	ldrh	r3, [r7, #2]
 8014ad8:	4413      	add	r3, r2
 8014ada:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014adc:	697b      	ldr	r3, [r7, #20]
 8014ade:	6858      	ldr	r0, [r3, #4]
 8014ae0:	693b      	ldr	r3, [r7, #16]
 8014ae2:	685a      	ldr	r2, [r3, #4]
 8014ae4:	7bbb      	ldrb	r3, [r7, #14]
 8014ae6:	18d1      	adds	r1, r2, r3
 8014ae8:	897b      	ldrh	r3, [r7, #10]
 8014aea:	89ba      	ldrh	r2, [r7, #12]
 8014aec:	f7fb fd4a 	bl	8010584 <pbuf_copy_partial>
 8014af0:	4603      	mov	r3, r0
 8014af2:	461a      	mov	r2, r3
 8014af4:	89bb      	ldrh	r3, [r7, #12]
 8014af6:	4293      	cmp	r3, r2
 8014af8:	f040 809f 	bne.w	8014c3a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014afc:	697b      	ldr	r3, [r7, #20]
 8014afe:	68db      	ldr	r3, [r3, #12]
 8014b00:	899b      	ldrh	r3, [r3, #12]
 8014b02:	b29b      	uxth	r3, r3
 8014b04:	4618      	mov	r0, r3
 8014b06:	f7f9 fcad 	bl	800e464 <lwip_htons>
 8014b0a:	4603      	mov	r3, r0
 8014b0c:	b2db      	uxtb	r3, r3
 8014b0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014b12:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8014b14:	2300      	movs	r3, #0
 8014b16:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8014b18:	7efb      	ldrb	r3, [r7, #27]
 8014b1a:	f003 0308 	and.w	r3, r3, #8
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d007      	beq.n	8014b32 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8014b22:	7efb      	ldrb	r3, [r7, #27]
 8014b24:	f023 0308 	bic.w	r3, r3, #8
 8014b28:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8014b2a:	7ebb      	ldrb	r3, [r7, #26]
 8014b2c:	f043 0308 	orr.w	r3, r3, #8
 8014b30:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8014b32:	7efb      	ldrb	r3, [r7, #27]
 8014b34:	f003 0301 	and.w	r3, r3, #1
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d007      	beq.n	8014b4c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014b3c:	7efb      	ldrb	r3, [r7, #27]
 8014b3e:	f023 0301 	bic.w	r3, r3, #1
 8014b42:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8014b44:	7ebb      	ldrb	r3, [r7, #26]
 8014b46:	f043 0301 	orr.w	r3, r3, #1
 8014b4a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014b4c:	697b      	ldr	r3, [r7, #20]
 8014b4e:	68db      	ldr	r3, [r3, #12]
 8014b50:	685b      	ldr	r3, [r3, #4]
 8014b52:	4618      	mov	r0, r3
 8014b54:	f7f9 fc9b 	bl	800e48e <lwip_htonl>
 8014b58:	4602      	mov	r2, r0
 8014b5a:	887b      	ldrh	r3, [r7, #2]
 8014b5c:	18d1      	adds	r1, r2, r3
 8014b5e:	7eba      	ldrb	r2, [r7, #26]
 8014b60:	7bfb      	ldrb	r3, [r7, #15]
 8014b62:	9300      	str	r3, [sp, #0]
 8014b64:	460b      	mov	r3, r1
 8014b66:	6939      	ldr	r1, [r7, #16]
 8014b68:	6878      	ldr	r0, [r7, #4]
 8014b6a:	f7ff fe9d 	bl	80148a8 <tcp_create_segment>
 8014b6e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014b70:	69fb      	ldr	r3, [r7, #28]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d063      	beq.n	8014c3e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8014b76:	697b      	ldr	r3, [r7, #20]
 8014b78:	685b      	ldr	r3, [r3, #4]
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	f7fb fb90 	bl	80102a0 <pbuf_clen>
 8014b80:	4603      	mov	r3, r0
 8014b82:	461a      	mov	r2, r3
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014b8a:	1a9b      	subs	r3, r3, r2
 8014b8c:	b29a      	uxth	r2, r3
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8014b94:	697b      	ldr	r3, [r7, #20]
 8014b96:	6858      	ldr	r0, [r3, #4]
 8014b98:	697b      	ldr	r3, [r7, #20]
 8014b9a:	685b      	ldr	r3, [r3, #4]
 8014b9c:	891a      	ldrh	r2, [r3, #8]
 8014b9e:	89bb      	ldrh	r3, [r7, #12]
 8014ba0:	1ad3      	subs	r3, r2, r3
 8014ba2:	b29b      	uxth	r3, r3
 8014ba4:	4619      	mov	r1, r3
 8014ba6:	f7fb f96d 	bl	800fe84 <pbuf_realloc>
  useg->len -= remainder;
 8014baa:	697b      	ldr	r3, [r7, #20]
 8014bac:	891a      	ldrh	r2, [r3, #8]
 8014bae:	89bb      	ldrh	r3, [r7, #12]
 8014bb0:	1ad3      	subs	r3, r2, r3
 8014bb2:	b29a      	uxth	r2, r3
 8014bb4:	697b      	ldr	r3, [r7, #20]
 8014bb6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014bb8:	697b      	ldr	r3, [r7, #20]
 8014bba:	68db      	ldr	r3, [r3, #12]
 8014bbc:	899b      	ldrh	r3, [r3, #12]
 8014bbe:	b29c      	uxth	r4, r3
 8014bc0:	7efb      	ldrb	r3, [r7, #27]
 8014bc2:	b29b      	uxth	r3, r3
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	f7f9 fc4d 	bl	800e464 <lwip_htons>
 8014bca:	4603      	mov	r3, r0
 8014bcc:	461a      	mov	r2, r3
 8014bce:	697b      	ldr	r3, [r7, #20]
 8014bd0:	68db      	ldr	r3, [r3, #12]
 8014bd2:	4322      	orrs	r2, r4
 8014bd4:	b292      	uxth	r2, r2
 8014bd6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014bd8:	697b      	ldr	r3, [r7, #20]
 8014bda:	685b      	ldr	r3, [r3, #4]
 8014bdc:	4618      	mov	r0, r3
 8014bde:	f7fb fb5f 	bl	80102a0 <pbuf_clen>
 8014be2:	4603      	mov	r3, r0
 8014be4:	461a      	mov	r2, r3
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014bec:	4413      	add	r3, r2
 8014bee:	b29a      	uxth	r2, r3
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014bf6:	69fb      	ldr	r3, [r7, #28]
 8014bf8:	685b      	ldr	r3, [r3, #4]
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	f7fb fb50 	bl	80102a0 <pbuf_clen>
 8014c00:	4603      	mov	r3, r0
 8014c02:	461a      	mov	r2, r3
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014c0a:	4413      	add	r3, r2
 8014c0c:	b29a      	uxth	r2, r3
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8014c14:	697b      	ldr	r3, [r7, #20]
 8014c16:	681a      	ldr	r2, [r3, #0]
 8014c18:	69fb      	ldr	r3, [r7, #28]
 8014c1a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014c1c:	697b      	ldr	r3, [r7, #20]
 8014c1e:	69fa      	ldr	r2, [r7, #28]
 8014c20:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8014c22:	69fb      	ldr	r3, [r7, #28]
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d103      	bne.n	8014c32 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8014c32:	2300      	movs	r3, #0
 8014c34:	e01e      	b.n	8014c74 <tcp_split_unsent_seg+0x27c>
    goto memerr;
 8014c36:	bf00      	nop
 8014c38:	e002      	b.n	8014c40 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014c3a:	bf00      	nop
 8014c3c:	e000      	b.n	8014c40 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014c3e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 8014c40:	4b14      	ldr	r3, [pc, #80]	; (8014c94 <tcp_split_unsent_seg+0x29c>)
 8014c42:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8014c46:	3301      	adds	r3, #1
 8014c48:	b29a      	uxth	r2, r3
 8014c4a:	4b12      	ldr	r3, [pc, #72]	; (8014c94 <tcp_split_unsent_seg+0x29c>)
 8014c4c:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8014c50:	69fb      	ldr	r3, [r7, #28]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d006      	beq.n	8014c64 <tcp_split_unsent_seg+0x26c>
 8014c56:	4b09      	ldr	r3, [pc, #36]	; (8014c7c <tcp_split_unsent_seg+0x284>)
 8014c58:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8014c5c:	490e      	ldr	r1, [pc, #56]	; (8014c98 <tcp_split_unsent_seg+0x2a0>)
 8014c5e:	4809      	ldr	r0, [pc, #36]	; (8014c84 <tcp_split_unsent_seg+0x28c>)
 8014c60:	f007 fd66 	bl	801c730 <iprintf>
  if (p != NULL) {
 8014c64:	693b      	ldr	r3, [r7, #16]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d002      	beq.n	8014c70 <tcp_split_unsent_seg+0x278>
    pbuf_free(p);
 8014c6a:	6938      	ldr	r0, [r7, #16]
 8014c6c:	f7fb fa90 	bl	8010190 <pbuf_free>
  }

  return ERR_MEM;
 8014c70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014c74:	4618      	mov	r0, r3
 8014c76:	3724      	adds	r7, #36	; 0x24
 8014c78:	46bd      	mov	sp, r7
 8014c7a:	bd90      	pop	{r4, r7, pc}
 8014c7c:	08021d14 	.word	0x08021d14
 8014c80:	080220a8 	.word	0x080220a8
 8014c84:	08021d68 	.word	0x08021d68
 8014c88:	080220cc 	.word	0x080220cc
 8014c8c:	080220f0 	.word	0x080220f0
 8014c90:	08022100 	.word	0x08022100
 8014c94:	20007204 	.word	0x20007204
 8014c98:	08022110 	.word	0x08022110

08014c9c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014c9c:	b590      	push	{r4, r7, lr}
 8014c9e:	b085      	sub	sp, #20
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d106      	bne.n	8014cb8 <tcp_send_fin+0x1c>
 8014caa:	4b21      	ldr	r3, [pc, #132]	; (8014d30 <tcp_send_fin+0x94>)
 8014cac:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8014cb0:	4920      	ldr	r1, [pc, #128]	; (8014d34 <tcp_send_fin+0x98>)
 8014cb2:	4821      	ldr	r0, [pc, #132]	; (8014d38 <tcp_send_fin+0x9c>)
 8014cb4:	f007 fd3c 	bl	801c730 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d02e      	beq.n	8014d1e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014cc4:	60fb      	str	r3, [r7, #12]
 8014cc6:	e002      	b.n	8014cce <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d1f8      	bne.n	8014cc8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014cd6:	68fb      	ldr	r3, [r7, #12]
 8014cd8:	68db      	ldr	r3, [r3, #12]
 8014cda:	899b      	ldrh	r3, [r3, #12]
 8014cdc:	b29b      	uxth	r3, r3
 8014cde:	4618      	mov	r0, r3
 8014ce0:	f7f9 fbc0 	bl	800e464 <lwip_htons>
 8014ce4:	4603      	mov	r3, r0
 8014ce6:	b2db      	uxtb	r3, r3
 8014ce8:	f003 0307 	and.w	r3, r3, #7
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d116      	bne.n	8014d1e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	68db      	ldr	r3, [r3, #12]
 8014cf4:	899b      	ldrh	r3, [r3, #12]
 8014cf6:	b29c      	uxth	r4, r3
 8014cf8:	2001      	movs	r0, #1
 8014cfa:	f7f9 fbb3 	bl	800e464 <lwip_htons>
 8014cfe:	4603      	mov	r3, r0
 8014d00:	461a      	mov	r2, r3
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	68db      	ldr	r3, [r3, #12]
 8014d06:	4322      	orrs	r2, r4
 8014d08:	b292      	uxth	r2, r2
 8014d0a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	8b5b      	ldrh	r3, [r3, #26]
 8014d10:	f043 0320 	orr.w	r3, r3, #32
 8014d14:	b29a      	uxth	r2, r3
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	e004      	b.n	8014d28 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014d1e:	2101      	movs	r1, #1
 8014d20:	6878      	ldr	r0, [r7, #4]
 8014d22:	f000 f80b 	bl	8014d3c <tcp_enqueue_flags>
 8014d26:	4603      	mov	r3, r0
}
 8014d28:	4618      	mov	r0, r3
 8014d2a:	3714      	adds	r7, #20
 8014d2c:	46bd      	mov	sp, r7
 8014d2e:	bd90      	pop	{r4, r7, pc}
 8014d30:	08021d14 	.word	0x08021d14
 8014d34:	0802211c 	.word	0x0802211c
 8014d38:	08021d68 	.word	0x08021d68

08014d3c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b08a      	sub	sp, #40	; 0x28
 8014d40:	af02      	add	r7, sp, #8
 8014d42:	6078      	str	r0, [r7, #4]
 8014d44:	460b      	mov	r3, r1
 8014d46:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8014d48:	2300      	movs	r3, #0
 8014d4a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8014d4c:	2300      	movs	r3, #0
 8014d4e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014d50:	78fb      	ldrb	r3, [r7, #3]
 8014d52:	f003 0303 	and.w	r3, r3, #3
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d106      	bne.n	8014d68 <tcp_enqueue_flags+0x2c>
 8014d5a:	4b6f      	ldr	r3, [pc, #444]	; (8014f18 <tcp_enqueue_flags+0x1dc>)
 8014d5c:	f240 4211 	movw	r2, #1041	; 0x411
 8014d60:	496e      	ldr	r1, [pc, #440]	; (8014f1c <tcp_enqueue_flags+0x1e0>)
 8014d62:	486f      	ldr	r0, [pc, #444]	; (8014f20 <tcp_enqueue_flags+0x1e4>)
 8014d64:	f007 fce4 	bl	801c730 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d106      	bne.n	8014d7c <tcp_enqueue_flags+0x40>
 8014d6e:	4b6a      	ldr	r3, [pc, #424]	; (8014f18 <tcp_enqueue_flags+0x1dc>)
 8014d70:	f240 4213 	movw	r2, #1043	; 0x413
 8014d74:	496b      	ldr	r1, [pc, #428]	; (8014f24 <tcp_enqueue_flags+0x1e8>)
 8014d76:	486a      	ldr	r0, [pc, #424]	; (8014f20 <tcp_enqueue_flags+0x1e4>)
 8014d78:	f007 fcda 	bl	801c730 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014d7c:	78fb      	ldrb	r3, [r7, #3]
 8014d7e:	f003 0302 	and.w	r3, r3, #2
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d001      	beq.n	8014d8a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8014d86:	2301      	movs	r3, #1
 8014d88:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014d8a:	7ffb      	ldrb	r3, [r7, #31]
 8014d8c:	009b      	lsls	r3, r3, #2
 8014d8e:	b2db      	uxtb	r3, r3
 8014d90:	f003 0304 	and.w	r3, r3, #4
 8014d94:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014d96:	7dfb      	ldrb	r3, [r7, #23]
 8014d98:	b29b      	uxth	r3, r3
 8014d9a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014d9e:	4619      	mov	r1, r3
 8014da0:	2036      	movs	r0, #54	; 0x36
 8014da2:	f7fa ff11 	bl	800fbc8 <pbuf_alloc>
 8014da6:	6138      	str	r0, [r7, #16]
 8014da8:	693b      	ldr	r3, [r7, #16]
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d111      	bne.n	8014dd2 <tcp_enqueue_flags+0x96>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	8b5b      	ldrh	r3, [r3, #26]
 8014db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014db6:	b29a      	uxth	r2, r3
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 8014dbc:	4b5a      	ldr	r3, [pc, #360]	; (8014f28 <tcp_enqueue_flags+0x1ec>)
 8014dbe:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8014dc2:	3301      	adds	r3, #1
 8014dc4:	b29a      	uxth	r2, r3
 8014dc6:	4b58      	ldr	r3, [pc, #352]	; (8014f28 <tcp_enqueue_flags+0x1ec>)
 8014dc8:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 8014dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8014dd0:	e09d      	b.n	8014f0e <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014dd2:	693b      	ldr	r3, [r7, #16]
 8014dd4:	895a      	ldrh	r2, [r3, #10]
 8014dd6:	7dfb      	ldrb	r3, [r7, #23]
 8014dd8:	b29b      	uxth	r3, r3
 8014dda:	429a      	cmp	r2, r3
 8014ddc:	d206      	bcs.n	8014dec <tcp_enqueue_flags+0xb0>
 8014dde:	4b4e      	ldr	r3, [pc, #312]	; (8014f18 <tcp_enqueue_flags+0x1dc>)
 8014de0:	f240 4239 	movw	r2, #1081	; 0x439
 8014de4:	4951      	ldr	r1, [pc, #324]	; (8014f2c <tcp_enqueue_flags+0x1f0>)
 8014de6:	484e      	ldr	r0, [pc, #312]	; (8014f20 <tcp_enqueue_flags+0x1e4>)
 8014de8:	f007 fca2 	bl	801c730 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8014df0:	78fa      	ldrb	r2, [r7, #3]
 8014df2:	7ffb      	ldrb	r3, [r7, #31]
 8014df4:	9300      	str	r3, [sp, #0]
 8014df6:	460b      	mov	r3, r1
 8014df8:	6939      	ldr	r1, [r7, #16]
 8014dfa:	6878      	ldr	r0, [r7, #4]
 8014dfc:	f7ff fd54 	bl	80148a8 <tcp_create_segment>
 8014e00:	60f8      	str	r0, [r7, #12]
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d111      	bne.n	8014e2c <tcp_enqueue_flags+0xf0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	8b5b      	ldrh	r3, [r3, #26]
 8014e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014e10:	b29a      	uxth	r2, r3
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 8014e16:	4b44      	ldr	r3, [pc, #272]	; (8014f28 <tcp_enqueue_flags+0x1ec>)
 8014e18:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8014e1c:	3301      	adds	r3, #1
 8014e1e:	b29a      	uxth	r2, r3
 8014e20:	4b41      	ldr	r3, [pc, #260]	; (8014f28 <tcp_enqueue_flags+0x1ec>)
 8014e22:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
    return ERR_MEM;
 8014e26:	f04f 33ff 	mov.w	r3, #4294967295
 8014e2a:	e070      	b.n	8014f0e <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	68db      	ldr	r3, [r3, #12]
 8014e30:	f003 0303 	and.w	r3, r3, #3
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d006      	beq.n	8014e46 <tcp_enqueue_flags+0x10a>
 8014e38:	4b37      	ldr	r3, [pc, #220]	; (8014f18 <tcp_enqueue_flags+0x1dc>)
 8014e3a:	f240 4242 	movw	r2, #1090	; 0x442
 8014e3e:	493c      	ldr	r1, [pc, #240]	; (8014f30 <tcp_enqueue_flags+0x1f4>)
 8014e40:	4837      	ldr	r0, [pc, #220]	; (8014f20 <tcp_enqueue_flags+0x1e4>)
 8014e42:	f007 fc75 	bl	801c730 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	891b      	ldrh	r3, [r3, #8]
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d006      	beq.n	8014e5c <tcp_enqueue_flags+0x120>
 8014e4e:	4b32      	ldr	r3, [pc, #200]	; (8014f18 <tcp_enqueue_flags+0x1dc>)
 8014e50:	f240 4243 	movw	r2, #1091	; 0x443
 8014e54:	4937      	ldr	r1, [pc, #220]	; (8014f34 <tcp_enqueue_flags+0x1f8>)
 8014e56:	4832      	ldr	r0, [pc, #200]	; (8014f20 <tcp_enqueue_flags+0x1e4>)
 8014e58:	f007 fc6a 	bl	801c730 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d103      	bne.n	8014e6c <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	68fa      	ldr	r2, [r7, #12]
 8014e68:	66da      	str	r2, [r3, #108]	; 0x6c
 8014e6a:	e00d      	b.n	8014e88 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e70:	61bb      	str	r3, [r7, #24]
 8014e72:	e002      	b.n	8014e7a <tcp_enqueue_flags+0x13e>
 8014e74:	69bb      	ldr	r3, [r7, #24]
 8014e76:	681b      	ldr	r3, [r3, #0]
 8014e78:	61bb      	str	r3, [r7, #24]
 8014e7a:	69bb      	ldr	r3, [r7, #24]
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d1f8      	bne.n	8014e74 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8014e82:	69bb      	ldr	r3, [r7, #24]
 8014e84:	68fa      	ldr	r2, [r7, #12]
 8014e86:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	2200      	movs	r2, #0
 8014e8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014e90:	78fb      	ldrb	r3, [r7, #3]
 8014e92:	f003 0302 	and.w	r3, r3, #2
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d104      	bne.n	8014ea4 <tcp_enqueue_flags+0x168>
 8014e9a:	78fb      	ldrb	r3, [r7, #3]
 8014e9c:	f003 0301 	and.w	r3, r3, #1
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d004      	beq.n	8014eae <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014ea8:	1c5a      	adds	r2, r3, #1
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014eae:	78fb      	ldrb	r3, [r7, #3]
 8014eb0:	f003 0301 	and.w	r3, r3, #1
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d006      	beq.n	8014ec6 <tcp_enqueue_flags+0x18a>
    tcp_set_flags(pcb, TF_FIN);
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	8b5b      	ldrh	r3, [r3, #26]
 8014ebc:	f043 0320 	orr.w	r3, r3, #32
 8014ec0:	b29a      	uxth	r2, r3
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	685b      	ldr	r3, [r3, #4]
 8014eca:	4618      	mov	r0, r3
 8014ecc:	f7fb f9e8 	bl	80102a0 <pbuf_clen>
 8014ed0:	4603      	mov	r3, r0
 8014ed2:	461a      	mov	r2, r3
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014eda:	4413      	add	r3, r2
 8014edc:	b29a      	uxth	r2, r3
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d00e      	beq.n	8014f0c <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d10a      	bne.n	8014f0c <tcp_enqueue_flags+0x1d0>
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d106      	bne.n	8014f0c <tcp_enqueue_flags+0x1d0>
 8014efe:	4b06      	ldr	r3, [pc, #24]	; (8014f18 <tcp_enqueue_flags+0x1dc>)
 8014f00:	f240 4265 	movw	r2, #1125	; 0x465
 8014f04:	490c      	ldr	r1, [pc, #48]	; (8014f38 <tcp_enqueue_flags+0x1fc>)
 8014f06:	4806      	ldr	r0, [pc, #24]	; (8014f20 <tcp_enqueue_flags+0x1e4>)
 8014f08:	f007 fc12 	bl	801c730 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014f0c:	2300      	movs	r3, #0
}
 8014f0e:	4618      	mov	r0, r3
 8014f10:	3720      	adds	r7, #32
 8014f12:	46bd      	mov	sp, r7
 8014f14:	bd80      	pop	{r7, pc}
 8014f16:	bf00      	nop
 8014f18:	08021d14 	.word	0x08021d14
 8014f1c:	08022138 	.word	0x08022138
 8014f20:	08021d68 	.word	0x08021d68
 8014f24:	08022190 	.word	0x08022190
 8014f28:	20007204 	.word	0x20007204
 8014f2c:	080221b0 	.word	0x080221b0
 8014f30:	080221ec 	.word	0x080221ec
 8014f34:	08022204 	.word	0x08022204
 8014f38:	08022230 	.word	0x08022230

08014f3c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8014f3c:	b5b0      	push	{r4, r5, r7, lr}
 8014f3e:	b08a      	sub	sp, #40	; 0x28
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d106      	bne.n	8014f58 <tcp_output+0x1c>
 8014f4a:	4b8a      	ldr	r3, [pc, #552]	; (8015174 <tcp_output+0x238>)
 8014f4c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8014f50:	4989      	ldr	r1, [pc, #548]	; (8015178 <tcp_output+0x23c>)
 8014f52:	488a      	ldr	r0, [pc, #552]	; (801517c <tcp_output+0x240>)
 8014f54:	f007 fbec 	bl	801c730 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	7d1b      	ldrb	r3, [r3, #20]
 8014f5c:	2b01      	cmp	r3, #1
 8014f5e:	d106      	bne.n	8014f6e <tcp_output+0x32>
 8014f60:	4b84      	ldr	r3, [pc, #528]	; (8015174 <tcp_output+0x238>)
 8014f62:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8014f66:	4986      	ldr	r1, [pc, #536]	; (8015180 <tcp_output+0x244>)
 8014f68:	4884      	ldr	r0, [pc, #528]	; (801517c <tcp_output+0x240>)
 8014f6a:	f007 fbe1 	bl	801c730 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8014f6e:	4b85      	ldr	r3, [pc, #532]	; (8015184 <tcp_output+0x248>)
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	687a      	ldr	r2, [r7, #4]
 8014f74:	429a      	cmp	r2, r3
 8014f76:	d101      	bne.n	8014f7c <tcp_output+0x40>
    return ERR_OK;
 8014f78:	2300      	movs	r3, #0
 8014f7a:	e1ce      	b.n	801531a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014f88:	4293      	cmp	r3, r2
 8014f8a:	bf28      	it	cs
 8014f8c:	4613      	movcs	r3, r2
 8014f8e:	b29b      	uxth	r3, r3
 8014f90:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f96:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8014f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d10b      	bne.n	8014fb6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	8b5b      	ldrh	r3, [r3, #26]
 8014fa2:	f003 0302 	and.w	r3, r3, #2
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	f000 81aa 	beq.w	8015300 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8014fac:	6878      	ldr	r0, [r7, #4]
 8014fae:	f000 fdfb 	bl	8015ba8 <tcp_send_empty_ack>
 8014fb2:	4603      	mov	r3, r0
 8014fb4:	e1b1      	b.n	801531a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014fb6:	6879      	ldr	r1, [r7, #4]
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	3304      	adds	r3, #4
 8014fbc:	461a      	mov	r2, r3
 8014fbe:	6878      	ldr	r0, [r7, #4]
 8014fc0:	f7ff fc56 	bl	8014870 <tcp_route>
 8014fc4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014fc6:	697b      	ldr	r3, [r7, #20]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d102      	bne.n	8014fd2 <tcp_output+0x96>
    return ERR_RTE;
 8014fcc:	f06f 0303 	mvn.w	r3, #3
 8014fd0:	e1a3      	b.n	801531a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d003      	beq.n	8014fe0 <tcp_output+0xa4>
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d111      	bne.n	8015004 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014fe0:	697b      	ldr	r3, [r7, #20]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d002      	beq.n	8014fec <tcp_output+0xb0>
 8014fe6:	697b      	ldr	r3, [r7, #20]
 8014fe8:	3304      	adds	r3, #4
 8014fea:	e000      	b.n	8014fee <tcp_output+0xb2>
 8014fec:	2300      	movs	r3, #0
 8014fee:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014ff0:	693b      	ldr	r3, [r7, #16]
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d102      	bne.n	8014ffc <tcp_output+0xc0>
      return ERR_RTE;
 8014ff6:	f06f 0303 	mvn.w	r3, #3
 8014ffa:	e18e      	b.n	801531a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014ffc:	693b      	ldr	r3, [r7, #16]
 8014ffe:	681a      	ldr	r2, [r3, #0]
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8015004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015006:	68db      	ldr	r3, [r3, #12]
 8015008:	685b      	ldr	r3, [r3, #4]
 801500a:	4618      	mov	r0, r3
 801500c:	f7f9 fa3f 	bl	800e48e <lwip_htonl>
 8015010:	4602      	mov	r2, r0
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015016:	1ad3      	subs	r3, r2, r3
 8015018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801501a:	8912      	ldrh	r2, [r2, #8]
 801501c:	4413      	add	r3, r2
 801501e:	69ba      	ldr	r2, [r7, #24]
 8015020:	429a      	cmp	r2, r3
 8015022:	d227      	bcs.n	8015074 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801502a:	461a      	mov	r2, r3
 801502c:	69bb      	ldr	r3, [r7, #24]
 801502e:	4293      	cmp	r3, r2
 8015030:	d114      	bne.n	801505c <tcp_output+0x120>
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015036:	2b00      	cmp	r3, #0
 8015038:	d110      	bne.n	801505c <tcp_output+0x120>
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015040:	2b00      	cmp	r3, #0
 8015042:	d10b      	bne.n	801505c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	2200      	movs	r2, #0
 8015048:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	2201      	movs	r2, #1
 8015050:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	2200      	movs	r2, #0
 8015058:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	8b5b      	ldrh	r3, [r3, #26]
 8015060:	f003 0302 	and.w	r3, r3, #2
 8015064:	2b00      	cmp	r3, #0
 8015066:	f000 814d 	beq.w	8015304 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801506a:	6878      	ldr	r0, [r7, #4]
 801506c:	f000 fd9c 	bl	8015ba8 <tcp_send_empty_ack>
 8015070:	4603      	mov	r3, r0
 8015072:	e152      	b.n	801531a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	2200      	movs	r2, #0
 8015078:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015080:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8015082:	6a3b      	ldr	r3, [r7, #32]
 8015084:	2b00      	cmp	r3, #0
 8015086:	f000 811c 	beq.w	80152c2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801508a:	e002      	b.n	8015092 <tcp_output+0x156>
 801508c:	6a3b      	ldr	r3, [r7, #32]
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	623b      	str	r3, [r7, #32]
 8015092:	6a3b      	ldr	r3, [r7, #32]
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	2b00      	cmp	r3, #0
 8015098:	d1f8      	bne.n	801508c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801509a:	e112      	b.n	80152c2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801509e:	68db      	ldr	r3, [r3, #12]
 80150a0:	899b      	ldrh	r3, [r3, #12]
 80150a2:	b29b      	uxth	r3, r3
 80150a4:	4618      	mov	r0, r3
 80150a6:	f7f9 f9dd 	bl	800e464 <lwip_htons>
 80150aa:	4603      	mov	r3, r0
 80150ac:	b2db      	uxtb	r3, r3
 80150ae:	f003 0304 	and.w	r3, r3, #4
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d006      	beq.n	80150c4 <tcp_output+0x188>
 80150b6:	4b2f      	ldr	r3, [pc, #188]	; (8015174 <tcp_output+0x238>)
 80150b8:	f240 5236 	movw	r2, #1334	; 0x536
 80150bc:	4932      	ldr	r1, [pc, #200]	; (8015188 <tcp_output+0x24c>)
 80150be:	482f      	ldr	r0, [pc, #188]	; (801517c <tcp_output+0x240>)
 80150c0:	f007 fb36 	bl	801c730 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d01f      	beq.n	801510c <tcp_output+0x1d0>
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	8b5b      	ldrh	r3, [r3, #26]
 80150d0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d119      	bne.n	801510c <tcp_output+0x1d0>
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d00b      	beq.n	80150f8 <tcp_output+0x1bc>
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d110      	bne.n	801510c <tcp_output+0x1d0>
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150ee:	891a      	ldrh	r2, [r3, #8]
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80150f4:	429a      	cmp	r2, r3
 80150f6:	d209      	bcs.n	801510c <tcp_output+0x1d0>
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d004      	beq.n	801510c <tcp_output+0x1d0>
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015108:	2b08      	cmp	r3, #8
 801510a:	d901      	bls.n	8015110 <tcp_output+0x1d4>
 801510c:	2301      	movs	r3, #1
 801510e:	e000      	b.n	8015112 <tcp_output+0x1d6>
 8015110:	2300      	movs	r3, #0
 8015112:	2b00      	cmp	r3, #0
 8015114:	d106      	bne.n	8015124 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	8b5b      	ldrh	r3, [r3, #26]
 801511a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801511e:	2b00      	cmp	r3, #0
 8015120:	f000 80e4 	beq.w	80152ec <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	7d1b      	ldrb	r3, [r3, #20]
 8015128:	2b02      	cmp	r3, #2
 801512a:	d00d      	beq.n	8015148 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801512e:	68db      	ldr	r3, [r3, #12]
 8015130:	899b      	ldrh	r3, [r3, #12]
 8015132:	b29c      	uxth	r4, r3
 8015134:	2010      	movs	r0, #16
 8015136:	f7f9 f995 	bl	800e464 <lwip_htons>
 801513a:	4603      	mov	r3, r0
 801513c:	461a      	mov	r2, r3
 801513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015140:	68db      	ldr	r3, [r3, #12]
 8015142:	4322      	orrs	r2, r4
 8015144:	b292      	uxth	r2, r2
 8015146:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8015148:	697a      	ldr	r2, [r7, #20]
 801514a:	6879      	ldr	r1, [r7, #4]
 801514c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801514e:	f000 f909 	bl	8015364 <tcp_output_segment>
 8015152:	4603      	mov	r3, r0
 8015154:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d016      	beq.n	801518c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	8b5b      	ldrh	r3, [r3, #26]
 8015162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015166:	b29a      	uxth	r2, r3
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	835a      	strh	r2, [r3, #26]
      return err;
 801516c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015170:	e0d3      	b.n	801531a <tcp_output+0x3de>
 8015172:	bf00      	nop
 8015174:	08021d14 	.word	0x08021d14
 8015178:	08022258 	.word	0x08022258
 801517c:	08021d68 	.word	0x08021d68
 8015180:	08022270 	.word	0x08022270
 8015184:	200073e8 	.word	0x200073e8
 8015188:	08022298 	.word	0x08022298
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801518e:	681a      	ldr	r2, [r3, #0]
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	7d1b      	ldrb	r3, [r3, #20]
 8015198:	2b02      	cmp	r3, #2
 801519a:	d006      	beq.n	80151aa <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	8b5b      	ldrh	r3, [r3, #26]
 80151a0:	f023 0303 	bic.w	r3, r3, #3
 80151a4:	b29a      	uxth	r2, r3
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80151aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ac:	68db      	ldr	r3, [r3, #12]
 80151ae:	685b      	ldr	r3, [r3, #4]
 80151b0:	4618      	mov	r0, r3
 80151b2:	f7f9 f96c 	bl	800e48e <lwip_htonl>
 80151b6:	4604      	mov	r4, r0
 80151b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ba:	891b      	ldrh	r3, [r3, #8]
 80151bc:	461d      	mov	r5, r3
 80151be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151c0:	68db      	ldr	r3, [r3, #12]
 80151c2:	899b      	ldrh	r3, [r3, #12]
 80151c4:	b29b      	uxth	r3, r3
 80151c6:	4618      	mov	r0, r3
 80151c8:	f7f9 f94c 	bl	800e464 <lwip_htons>
 80151cc:	4603      	mov	r3, r0
 80151ce:	b2db      	uxtb	r3, r3
 80151d0:	f003 0303 	and.w	r3, r3, #3
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d001      	beq.n	80151dc <tcp_output+0x2a0>
 80151d8:	2301      	movs	r3, #1
 80151da:	e000      	b.n	80151de <tcp_output+0x2a2>
 80151dc:	2300      	movs	r3, #0
 80151de:	442b      	add	r3, r5
 80151e0:	4423      	add	r3, r4
 80151e2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80151e8:	68bb      	ldr	r3, [r7, #8]
 80151ea:	1ad3      	subs	r3, r2, r3
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	da02      	bge.n	80151f6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	68ba      	ldr	r2, [r7, #8]
 80151f4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80151f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151f8:	891b      	ldrh	r3, [r3, #8]
 80151fa:	461c      	mov	r4, r3
 80151fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151fe:	68db      	ldr	r3, [r3, #12]
 8015200:	899b      	ldrh	r3, [r3, #12]
 8015202:	b29b      	uxth	r3, r3
 8015204:	4618      	mov	r0, r3
 8015206:	f7f9 f92d 	bl	800e464 <lwip_htons>
 801520a:	4603      	mov	r3, r0
 801520c:	b2db      	uxtb	r3, r3
 801520e:	f003 0303 	and.w	r3, r3, #3
 8015212:	2b00      	cmp	r3, #0
 8015214:	d001      	beq.n	801521a <tcp_output+0x2de>
 8015216:	2301      	movs	r3, #1
 8015218:	e000      	b.n	801521c <tcp_output+0x2e0>
 801521a:	2300      	movs	r3, #0
 801521c:	4423      	add	r3, r4
 801521e:	2b00      	cmp	r3, #0
 8015220:	d049      	beq.n	80152b6 <tcp_output+0x37a>
      seg->next = NULL;
 8015222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015224:	2200      	movs	r2, #0
 8015226:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801522c:	2b00      	cmp	r3, #0
 801522e:	d105      	bne.n	801523c <tcp_output+0x300>
        pcb->unacked = seg;
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015234:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8015236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015238:	623b      	str	r3, [r7, #32]
 801523a:	e03f      	b.n	80152bc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801523e:	68db      	ldr	r3, [r3, #12]
 8015240:	685b      	ldr	r3, [r3, #4]
 8015242:	4618      	mov	r0, r3
 8015244:	f7f9 f923 	bl	800e48e <lwip_htonl>
 8015248:	4604      	mov	r4, r0
 801524a:	6a3b      	ldr	r3, [r7, #32]
 801524c:	68db      	ldr	r3, [r3, #12]
 801524e:	685b      	ldr	r3, [r3, #4]
 8015250:	4618      	mov	r0, r3
 8015252:	f7f9 f91c 	bl	800e48e <lwip_htonl>
 8015256:	4603      	mov	r3, r0
 8015258:	1ae3      	subs	r3, r4, r3
 801525a:	2b00      	cmp	r3, #0
 801525c:	da24      	bge.n	80152a8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	3370      	adds	r3, #112	; 0x70
 8015262:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015264:	e002      	b.n	801526c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015266:	69fb      	ldr	r3, [r7, #28]
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801526c:	69fb      	ldr	r3, [r7, #28]
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d011      	beq.n	8015298 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015274:	69fb      	ldr	r3, [r7, #28]
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	68db      	ldr	r3, [r3, #12]
 801527a:	685b      	ldr	r3, [r3, #4]
 801527c:	4618      	mov	r0, r3
 801527e:	f7f9 f906 	bl	800e48e <lwip_htonl>
 8015282:	4604      	mov	r4, r0
 8015284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015286:	68db      	ldr	r3, [r3, #12]
 8015288:	685b      	ldr	r3, [r3, #4]
 801528a:	4618      	mov	r0, r3
 801528c:	f7f9 f8ff 	bl	800e48e <lwip_htonl>
 8015290:	4603      	mov	r3, r0
 8015292:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015294:	2b00      	cmp	r3, #0
 8015296:	dbe6      	blt.n	8015266 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8015298:	69fb      	ldr	r3, [r7, #28]
 801529a:	681a      	ldr	r2, [r3, #0]
 801529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801529e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80152a0:	69fb      	ldr	r3, [r7, #28]
 80152a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80152a4:	601a      	str	r2, [r3, #0]
 80152a6:	e009      	b.n	80152bc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80152a8:	6a3b      	ldr	r3, [r7, #32]
 80152aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80152ac:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80152ae:	6a3b      	ldr	r3, [r7, #32]
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	623b      	str	r3, [r7, #32]
 80152b4:	e002      	b.n	80152bc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80152b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80152b8:	f7fc fb6d 	bl	8011996 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152c0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80152c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d012      	beq.n	80152ee <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80152c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152ca:	68db      	ldr	r3, [r3, #12]
 80152cc:	685b      	ldr	r3, [r3, #4]
 80152ce:	4618      	mov	r0, r3
 80152d0:	f7f9 f8dd 	bl	800e48e <lwip_htonl>
 80152d4:	4602      	mov	r2, r0
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80152da:	1ad3      	subs	r3, r2, r3
 80152dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80152de:	8912      	ldrh	r2, [r2, #8]
 80152e0:	4413      	add	r3, r2
  while (seg != NULL &&
 80152e2:	69ba      	ldr	r2, [r7, #24]
 80152e4:	429a      	cmp	r2, r3
 80152e6:	f4bf aed9 	bcs.w	801509c <tcp_output+0x160>
 80152ea:	e000      	b.n	80152ee <tcp_output+0x3b2>
      break;
 80152ec:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d108      	bne.n	8015308 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	2200      	movs	r2, #0
 80152fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80152fe:	e004      	b.n	801530a <tcp_output+0x3ce>
    goto output_done;
 8015300:	bf00      	nop
 8015302:	e002      	b.n	801530a <tcp_output+0x3ce>
    goto output_done;
 8015304:	bf00      	nop
 8015306:	e000      	b.n	801530a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015308:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	8b5b      	ldrh	r3, [r3, #26]
 801530e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015312:	b29a      	uxth	r2, r3
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015318:	2300      	movs	r3, #0
}
 801531a:	4618      	mov	r0, r3
 801531c:	3728      	adds	r7, #40	; 0x28
 801531e:	46bd      	mov	sp, r7
 8015320:	bdb0      	pop	{r4, r5, r7, pc}
 8015322:	bf00      	nop

08015324 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015324:	b580      	push	{r7, lr}
 8015326:	b082      	sub	sp, #8
 8015328:	af00      	add	r7, sp, #0
 801532a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	2b00      	cmp	r3, #0
 8015330:	d106      	bne.n	8015340 <tcp_output_segment_busy+0x1c>
 8015332:	4b09      	ldr	r3, [pc, #36]	; (8015358 <tcp_output_segment_busy+0x34>)
 8015334:	f240 529a 	movw	r2, #1434	; 0x59a
 8015338:	4908      	ldr	r1, [pc, #32]	; (801535c <tcp_output_segment_busy+0x38>)
 801533a:	4809      	ldr	r0, [pc, #36]	; (8015360 <tcp_output_segment_busy+0x3c>)
 801533c:	f007 f9f8 	bl	801c730 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	685b      	ldr	r3, [r3, #4]
 8015344:	7b9b      	ldrb	r3, [r3, #14]
 8015346:	2b01      	cmp	r3, #1
 8015348:	d001      	beq.n	801534e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801534a:	2301      	movs	r3, #1
 801534c:	e000      	b.n	8015350 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801534e:	2300      	movs	r3, #0
}
 8015350:	4618      	mov	r0, r3
 8015352:	3708      	adds	r7, #8
 8015354:	46bd      	mov	sp, r7
 8015356:	bd80      	pop	{r7, pc}
 8015358:	08021d14 	.word	0x08021d14
 801535c:	080222b0 	.word	0x080222b0
 8015360:	08021d68 	.word	0x08021d68

08015364 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015364:	b5b0      	push	{r4, r5, r7, lr}
 8015366:	b08c      	sub	sp, #48	; 0x30
 8015368:	af04      	add	r7, sp, #16
 801536a:	60f8      	str	r0, [r7, #12]
 801536c:	60b9      	str	r1, [r7, #8]
 801536e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d106      	bne.n	8015384 <tcp_output_segment+0x20>
 8015376:	4b6c      	ldr	r3, [pc, #432]	; (8015528 <tcp_output_segment+0x1c4>)
 8015378:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801537c:	496b      	ldr	r1, [pc, #428]	; (801552c <tcp_output_segment+0x1c8>)
 801537e:	486c      	ldr	r0, [pc, #432]	; (8015530 <tcp_output_segment+0x1cc>)
 8015380:	f007 f9d6 	bl	801c730 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015384:	68bb      	ldr	r3, [r7, #8]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d106      	bne.n	8015398 <tcp_output_segment+0x34>
 801538a:	4b67      	ldr	r3, [pc, #412]	; (8015528 <tcp_output_segment+0x1c4>)
 801538c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8015390:	4968      	ldr	r1, [pc, #416]	; (8015534 <tcp_output_segment+0x1d0>)
 8015392:	4867      	ldr	r0, [pc, #412]	; (8015530 <tcp_output_segment+0x1cc>)
 8015394:	f007 f9cc 	bl	801c730 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	2b00      	cmp	r3, #0
 801539c:	d106      	bne.n	80153ac <tcp_output_segment+0x48>
 801539e:	4b62      	ldr	r3, [pc, #392]	; (8015528 <tcp_output_segment+0x1c4>)
 80153a0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80153a4:	4964      	ldr	r1, [pc, #400]	; (8015538 <tcp_output_segment+0x1d4>)
 80153a6:	4862      	ldr	r0, [pc, #392]	; (8015530 <tcp_output_segment+0x1cc>)
 80153a8:	f007 f9c2 	bl	801c730 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80153ac:	68f8      	ldr	r0, [r7, #12]
 80153ae:	f7ff ffb9 	bl	8015324 <tcp_output_segment_busy>
 80153b2:	4603      	mov	r3, r0
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d001      	beq.n	80153bc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80153b8:	2300      	movs	r3, #0
 80153ba:	e0b1      	b.n	8015520 <tcp_output_segment+0x1bc>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80153bc:	68bb      	ldr	r3, [r7, #8]
 80153be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	68dc      	ldr	r4, [r3, #12]
 80153c4:	4610      	mov	r0, r2
 80153c6:	f7f9 f862 	bl	800e48e <lwip_htonl>
 80153ca:	4603      	mov	r3, r0
 80153cc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80153ce:	68bb      	ldr	r3, [r7, #8]
 80153d0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	68dc      	ldr	r4, [r3, #12]
 80153d6:	4610      	mov	r0, r2
 80153d8:	f7f9 f844 	bl	800e464 <lwip_htons>
 80153dc:	4603      	mov	r3, r0
 80153de:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80153e0:	68bb      	ldr	r3, [r7, #8]
 80153e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153e4:	68ba      	ldr	r2, [r7, #8]
 80153e6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80153e8:	441a      	add	r2, r3
 80153ea:	68bb      	ldr	r3, [r7, #8]
 80153ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	68db      	ldr	r3, [r3, #12]
 80153f2:	3314      	adds	r3, #20
 80153f4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	7a9b      	ldrb	r3, [r3, #10]
 80153fa:	f003 0301 	and.w	r3, r3, #1
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d015      	beq.n	801542e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015402:	68bb      	ldr	r3, [r7, #8]
 8015404:	3304      	adds	r3, #4
 8015406:	461a      	mov	r2, r3
 8015408:	6879      	ldr	r1, [r7, #4]
 801540a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801540e:	f7fc fde3 	bl	8011fd8 <tcp_eff_send_mss_netif>
 8015412:	4603      	mov	r3, r0
 8015414:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015416:	8b7b      	ldrh	r3, [r7, #26]
 8015418:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801541c:	4618      	mov	r0, r3
 801541e:	f7f9 f836 	bl	800e48e <lwip_htonl>
 8015422:	4602      	mov	r2, r0
 8015424:	69fb      	ldr	r3, [r7, #28]
 8015426:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015428:	69fb      	ldr	r3, [r7, #28]
 801542a:	3304      	adds	r3, #4
 801542c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801542e:	68bb      	ldr	r3, [r7, #8]
 8015430:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015434:	2b00      	cmp	r3, #0
 8015436:	da02      	bge.n	801543e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015438:	68bb      	ldr	r3, [r7, #8]
 801543a:	2200      	movs	r2, #0
 801543c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801543e:	68bb      	ldr	r3, [r7, #8]
 8015440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015442:	2b00      	cmp	r3, #0
 8015444:	d10c      	bne.n	8015460 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015446:	4b3d      	ldr	r3, [pc, #244]	; (801553c <tcp_output_segment+0x1d8>)
 8015448:	681a      	ldr	r2, [r3, #0]
 801544a:	68bb      	ldr	r3, [r7, #8]
 801544c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	68db      	ldr	r3, [r3, #12]
 8015452:	685b      	ldr	r3, [r3, #4]
 8015454:	4618      	mov	r0, r3
 8015456:	f7f9 f81a 	bl	800e48e <lwip_htonl>
 801545a:	4602      	mov	r2, r0
 801545c:	68bb      	ldr	r3, [r7, #8]
 801545e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	68da      	ldr	r2, [r3, #12]
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	685b      	ldr	r3, [r3, #4]
 8015468:	685b      	ldr	r3, [r3, #4]
 801546a:	1ad3      	subs	r3, r2, r3
 801546c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
 801546e:	8b3b      	ldrh	r3, [r7, #24]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d106      	bne.n	8015482 <tcp_output_segment+0x11e>
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
 8015474:	4b32      	ldr	r3, [pc, #200]	; (8015540 <tcp_output_segment+0x1dc>)
 8015476:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 801547a:	3301      	adds	r3, #1
 801547c:	4a30      	ldr	r2, [pc, #192]	; (8015540 <tcp_output_segment+0x1dc>)
 801547e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
  }

  seg->p->len -= len;
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	685b      	ldr	r3, [r3, #4]
 8015486:	8959      	ldrh	r1, [r3, #10]
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	685b      	ldr	r3, [r3, #4]
 801548c:	8b3a      	ldrh	r2, [r7, #24]
 801548e:	1a8a      	subs	r2, r1, r2
 8015490:	b292      	uxth	r2, r2
 8015492:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	685b      	ldr	r3, [r3, #4]
 8015498:	8919      	ldrh	r1, [r3, #8]
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	685b      	ldr	r3, [r3, #4]
 801549e:	8b3a      	ldrh	r2, [r7, #24]
 80154a0:	1a8a      	subs	r2, r1, r2
 80154a2:	b292      	uxth	r2, r2
 80154a4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	685b      	ldr	r3, [r3, #4]
 80154aa:	68fa      	ldr	r2, [r7, #12]
 80154ac:	68d2      	ldr	r2, [r2, #12]
 80154ae:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	68db      	ldr	r3, [r3, #12]
 80154b4:	2200      	movs	r2, #0
 80154b6:	741a      	strb	r2, [r3, #16]
 80154b8:	2200      	movs	r2, #0
 80154ba:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	68db      	ldr	r3, [r3, #12]
 80154c0:	f103 0214 	add.w	r2, r3, #20
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	7a9b      	ldrb	r3, [r3, #10]
 80154c8:	009b      	lsls	r3, r3, #2
 80154ca:	f003 0304 	and.w	r3, r3, #4
 80154ce:	4413      	add	r3, r2
 80154d0:	69fa      	ldr	r2, [r7, #28]
 80154d2:	429a      	cmp	r2, r3
 80154d4:	d006      	beq.n	80154e4 <tcp_output_segment+0x180>
 80154d6:	4b14      	ldr	r3, [pc, #80]	; (8015528 <tcp_output_segment+0x1c4>)
 80154d8:	f240 621c 	movw	r2, #1564	; 0x61c
 80154dc:	4919      	ldr	r1, [pc, #100]	; (8015544 <tcp_output_segment+0x1e0>)
 80154de:	4814      	ldr	r0, [pc, #80]	; (8015530 <tcp_output_segment+0x1cc>)
 80154e0:	f007 f926 	bl	801c730 <iprintf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 80154e4:	4b16      	ldr	r3, [pc, #88]	; (8015540 <tcp_output_segment+0x1dc>)
 80154e6:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 80154ea:	3301      	adds	r3, #1
 80154ec:	b29a      	uxth	r2, r3
 80154ee:	4b14      	ldr	r3, [pc, #80]	; (8015540 <tcp_output_segment+0x1dc>)
 80154f0:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	6858      	ldr	r0, [r3, #4]
 80154f8:	68b9      	ldr	r1, [r7, #8]
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	1d1c      	adds	r4, r3, #4
 80154fe:	68bb      	ldr	r3, [r7, #8]
 8015500:	7add      	ldrb	r5, [r3, #11]
 8015502:	68bb      	ldr	r3, [r7, #8]
 8015504:	7a9b      	ldrb	r3, [r3, #10]
 8015506:	687a      	ldr	r2, [r7, #4]
 8015508:	9202      	str	r2, [sp, #8]
 801550a:	2206      	movs	r2, #6
 801550c:	9201      	str	r2, [sp, #4]
 801550e:	9300      	str	r3, [sp, #0]
 8015510:	462b      	mov	r3, r5
 8015512:	4622      	mov	r2, r4
 8015514:	f004 ff4a 	bl	801a3ac <ip4_output_if>
 8015518:	4603      	mov	r3, r0
 801551a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801551c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015520:	4618      	mov	r0, r3
 8015522:	3720      	adds	r7, #32
 8015524:	46bd      	mov	sp, r7
 8015526:	bdb0      	pop	{r4, r5, r7, pc}
 8015528:	08021d14 	.word	0x08021d14
 801552c:	080222d8 	.word	0x080222d8
 8015530:	08021d68 	.word	0x08021d68
 8015534:	080222f8 	.word	0x080222f8
 8015538:	08022318 	.word	0x08022318
 801553c:	2000739c 	.word	0x2000739c
 8015540:	20007204 	.word	0x20007204
 8015544:	0802233c 	.word	0x0802233c

08015548 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8015548:	b5b0      	push	{r4, r5, r7, lr}
 801554a:	b084      	sub	sp, #16
 801554c:	af00      	add	r7, sp, #0
 801554e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d106      	bne.n	8015564 <tcp_rexmit_rto_prepare+0x1c>
 8015556:	4b31      	ldr	r3, [pc, #196]	; (801561c <tcp_rexmit_rto_prepare+0xd4>)
 8015558:	f240 6263 	movw	r2, #1635	; 0x663
 801555c:	4930      	ldr	r1, [pc, #192]	; (8015620 <tcp_rexmit_rto_prepare+0xd8>)
 801555e:	4831      	ldr	r0, [pc, #196]	; (8015624 <tcp_rexmit_rto_prepare+0xdc>)
 8015560:	f007 f8e6 	bl	801c730 <iprintf>

  if (pcb->unacked == NULL) {
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015568:	2b00      	cmp	r3, #0
 801556a:	d102      	bne.n	8015572 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801556c:	f06f 0305 	mvn.w	r3, #5
 8015570:	e050      	b.n	8015614 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015576:	60fb      	str	r3, [r7, #12]
 8015578:	e00b      	b.n	8015592 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801557a:	68f8      	ldr	r0, [r7, #12]
 801557c:	f7ff fed2 	bl	8015324 <tcp_output_segment_busy>
 8015580:	4603      	mov	r3, r0
 8015582:	2b00      	cmp	r3, #0
 8015584:	d002      	beq.n	801558c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015586:	f06f 0305 	mvn.w	r3, #5
 801558a:	e043      	b.n	8015614 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	60fb      	str	r3, [r7, #12]
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d1ef      	bne.n	801557a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801559a:	68f8      	ldr	r0, [r7, #12]
 801559c:	f7ff fec2 	bl	8015324 <tcp_output_segment_busy>
 80155a0:	4603      	mov	r3, r0
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d002      	beq.n	80155ac <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80155a6:	f06f 0305 	mvn.w	r3, #5
 80155aa:	e033      	b.n	8015614 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	2200      	movs	r2, #0
 80155c0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	8b5b      	ldrh	r3, [r3, #26]
 80155c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80155ca:	b29a      	uxth	r2, r3
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	68db      	ldr	r3, [r3, #12]
 80155d4:	685b      	ldr	r3, [r3, #4]
 80155d6:	4618      	mov	r0, r3
 80155d8:	f7f8 ff59 	bl	800e48e <lwip_htonl>
 80155dc:	4604      	mov	r4, r0
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	891b      	ldrh	r3, [r3, #8]
 80155e2:	461d      	mov	r5, r3
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	68db      	ldr	r3, [r3, #12]
 80155e8:	899b      	ldrh	r3, [r3, #12]
 80155ea:	b29b      	uxth	r3, r3
 80155ec:	4618      	mov	r0, r3
 80155ee:	f7f8 ff39 	bl	800e464 <lwip_htons>
 80155f2:	4603      	mov	r3, r0
 80155f4:	b2db      	uxtb	r3, r3
 80155f6:	f003 0303 	and.w	r3, r3, #3
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d001      	beq.n	8015602 <tcp_rexmit_rto_prepare+0xba>
 80155fe:	2301      	movs	r3, #1
 8015600:	e000      	b.n	8015604 <tcp_rexmit_rto_prepare+0xbc>
 8015602:	2300      	movs	r3, #0
 8015604:	442b      	add	r3, r5
 8015606:	18e2      	adds	r2, r4, r3
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	2200      	movs	r2, #0
 8015610:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8015612:	2300      	movs	r3, #0
}
 8015614:	4618      	mov	r0, r3
 8015616:	3710      	adds	r7, #16
 8015618:	46bd      	mov	sp, r7
 801561a:	bdb0      	pop	{r4, r5, r7, pc}
 801561c:	08021d14 	.word	0x08021d14
 8015620:	08022350 	.word	0x08022350
 8015624:	08021d68 	.word	0x08021d68

08015628 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015628:	b580      	push	{r7, lr}
 801562a:	b082      	sub	sp, #8
 801562c:	af00      	add	r7, sp, #0
 801562e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	2b00      	cmp	r3, #0
 8015634:	d106      	bne.n	8015644 <tcp_rexmit_rto_commit+0x1c>
 8015636:	4b0d      	ldr	r3, [pc, #52]	; (801566c <tcp_rexmit_rto_commit+0x44>)
 8015638:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801563c:	490c      	ldr	r1, [pc, #48]	; (8015670 <tcp_rexmit_rto_commit+0x48>)
 801563e:	480d      	ldr	r0, [pc, #52]	; (8015674 <tcp_rexmit_rto_commit+0x4c>)
 8015640:	f007 f876 	bl	801c730 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801564a:	2bff      	cmp	r3, #255	; 0xff
 801564c:	d007      	beq.n	801565e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015654:	3301      	adds	r3, #1
 8015656:	b2da      	uxtb	r2, r3
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801565e:	6878      	ldr	r0, [r7, #4]
 8015660:	f7ff fc6c 	bl	8014f3c <tcp_output>
}
 8015664:	bf00      	nop
 8015666:	3708      	adds	r7, #8
 8015668:	46bd      	mov	sp, r7
 801566a:	bd80      	pop	{r7, pc}
 801566c:	08021d14 	.word	0x08021d14
 8015670:	08022374 	.word	0x08022374
 8015674:	08021d68 	.word	0x08021d68

08015678 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015678:	b580      	push	{r7, lr}
 801567a:	b082      	sub	sp, #8
 801567c:	af00      	add	r7, sp, #0
 801567e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	2b00      	cmp	r3, #0
 8015684:	d106      	bne.n	8015694 <tcp_rexmit_rto+0x1c>
 8015686:	4b0a      	ldr	r3, [pc, #40]	; (80156b0 <tcp_rexmit_rto+0x38>)
 8015688:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801568c:	4909      	ldr	r1, [pc, #36]	; (80156b4 <tcp_rexmit_rto+0x3c>)
 801568e:	480a      	ldr	r0, [pc, #40]	; (80156b8 <tcp_rexmit_rto+0x40>)
 8015690:	f007 f84e 	bl	801c730 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015694:	6878      	ldr	r0, [r7, #4]
 8015696:	f7ff ff57 	bl	8015548 <tcp_rexmit_rto_prepare>
 801569a:	4603      	mov	r3, r0
 801569c:	2b00      	cmp	r3, #0
 801569e:	d102      	bne.n	80156a6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80156a0:	6878      	ldr	r0, [r7, #4]
 80156a2:	f7ff ffc1 	bl	8015628 <tcp_rexmit_rto_commit>
  }
}
 80156a6:	bf00      	nop
 80156a8:	3708      	adds	r7, #8
 80156aa:	46bd      	mov	sp, r7
 80156ac:	bd80      	pop	{r7, pc}
 80156ae:	bf00      	nop
 80156b0:	08021d14 	.word	0x08021d14
 80156b4:	08022398 	.word	0x08022398
 80156b8:	08021d68 	.word	0x08021d68

080156bc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80156bc:	b590      	push	{r4, r7, lr}
 80156be:	b085      	sub	sp, #20
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d106      	bne.n	80156d8 <tcp_rexmit+0x1c>
 80156ca:	4b33      	ldr	r3, [pc, #204]	; (8015798 <tcp_rexmit+0xdc>)
 80156cc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80156d0:	4932      	ldr	r1, [pc, #200]	; (801579c <tcp_rexmit+0xe0>)
 80156d2:	4833      	ldr	r0, [pc, #204]	; (80157a0 <tcp_rexmit+0xe4>)
 80156d4:	f007 f82c 	bl	801c730 <iprintf>

  if (pcb->unacked == NULL) {
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d102      	bne.n	80156e6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80156e0:	f06f 0305 	mvn.w	r3, #5
 80156e4:	e053      	b.n	801578e <tcp_rexmit+0xd2>
  }

  seg = pcb->unacked;
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80156ea:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80156ec:	68b8      	ldr	r0, [r7, #8]
 80156ee:	f7ff fe19 	bl	8015324 <tcp_output_segment_busy>
 80156f2:	4603      	mov	r3, r0
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d002      	beq.n	80156fe <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80156f8:	f06f 0305 	mvn.w	r3, #5
 80156fc:	e047      	b.n	801578e <tcp_rexmit+0xd2>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80156fe:	68bb      	ldr	r3, [r7, #8]
 8015700:	681a      	ldr	r2, [r3, #0]
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	336c      	adds	r3, #108	; 0x6c
 801570a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801570c:	e002      	b.n	8015714 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	2b00      	cmp	r3, #0
 801571a:	d011      	beq.n	8015740 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	68db      	ldr	r3, [r3, #12]
 8015722:	685b      	ldr	r3, [r3, #4]
 8015724:	4618      	mov	r0, r3
 8015726:	f7f8 feb2 	bl	800e48e <lwip_htonl>
 801572a:	4604      	mov	r4, r0
 801572c:	68bb      	ldr	r3, [r7, #8]
 801572e:	68db      	ldr	r3, [r3, #12]
 8015730:	685b      	ldr	r3, [r3, #4]
 8015732:	4618      	mov	r0, r3
 8015734:	f7f8 feab 	bl	800e48e <lwip_htonl>
 8015738:	4603      	mov	r3, r0
 801573a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801573c:	2b00      	cmp	r3, #0
 801573e:	dbe6      	blt.n	801570e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	681a      	ldr	r2, [r3, #0]
 8015744:	68bb      	ldr	r3, [r7, #8]
 8015746:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	68ba      	ldr	r2, [r7, #8]
 801574c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801574e:	68bb      	ldr	r3, [r7, #8]
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d103      	bne.n	801575e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	2200      	movs	r2, #0
 801575a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015764:	2bff      	cmp	r3, #255	; 0xff
 8015766:	d007      	beq.n	8015778 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801576e:	3301      	adds	r3, #1
 8015770:	b2da      	uxtb	r2, r3
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	2200      	movs	r2, #0
 801577c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
 801577e:	4b09      	ldr	r3, [pc, #36]	; (80157a4 <tcp_rexmit+0xe8>)
 8015780:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8015784:	3301      	adds	r3, #1
 8015786:	4a07      	ldr	r2, [pc, #28]	; (80157a4 <tcp_rexmit+0xe8>)
 8015788:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801578c:	2300      	movs	r3, #0
}
 801578e:	4618      	mov	r0, r3
 8015790:	3714      	adds	r7, #20
 8015792:	46bd      	mov	sp, r7
 8015794:	bd90      	pop	{r4, r7, pc}
 8015796:	bf00      	nop
 8015798:	08021d14 	.word	0x08021d14
 801579c:	080223b4 	.word	0x080223b4
 80157a0:	08021d68 	.word	0x08021d68
 80157a4:	20007204 	.word	0x20007204

080157a8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b082      	sub	sp, #8
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d106      	bne.n	80157c4 <tcp_rexmit_fast+0x1c>
 80157b6:	4b2a      	ldr	r3, [pc, #168]	; (8015860 <tcp_rexmit_fast+0xb8>)
 80157b8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80157bc:	4929      	ldr	r1, [pc, #164]	; (8015864 <tcp_rexmit_fast+0xbc>)
 80157be:	482a      	ldr	r0, [pc, #168]	; (8015868 <tcp_rexmit_fast+0xc0>)
 80157c0:	f006 ffb6 	bl	801c730 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d045      	beq.n	8015858 <tcp_rexmit_fast+0xb0>
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	8b5b      	ldrh	r3, [r3, #26]
 80157d0:	f003 0304 	and.w	r3, r3, #4
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d13f      	bne.n	8015858 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80157d8:	6878      	ldr	r0, [r7, #4]
 80157da:	f7ff ff6f 	bl	80156bc <tcp_rexmit>
 80157de:	4603      	mov	r3, r0
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d139      	bne.n	8015858 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80157f0:	4293      	cmp	r3, r2
 80157f2:	bf28      	it	cs
 80157f4:	4613      	movcs	r3, r2
 80157f6:	b29b      	uxth	r3, r3
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	da00      	bge.n	80157fe <tcp_rexmit_fast+0x56>
 80157fc:	3301      	adds	r3, #1
 80157fe:	105b      	asrs	r3, r3, #1
 8015800:	b29a      	uxth	r2, r3
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801580e:	461a      	mov	r2, r3
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015814:	005b      	lsls	r3, r3, #1
 8015816:	429a      	cmp	r2, r3
 8015818:	d206      	bcs.n	8015828 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801581e:	005b      	lsls	r3, r3, #1
 8015820:	b29a      	uxth	r2, r3
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015832:	4619      	mov	r1, r3
 8015834:	0049      	lsls	r1, r1, #1
 8015836:	440b      	add	r3, r1
 8015838:	b29b      	uxth	r3, r3
 801583a:	4413      	add	r3, r2
 801583c:	b29a      	uxth	r2, r3
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	8b5b      	ldrh	r3, [r3, #26]
 8015848:	f043 0304 	orr.w	r3, r3, #4
 801584c:	b29a      	uxth	r2, r3
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	2200      	movs	r2, #0
 8015856:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8015858:	bf00      	nop
 801585a:	3708      	adds	r7, #8
 801585c:	46bd      	mov	sp, r7
 801585e:	bd80      	pop	{r7, pc}
 8015860:	08021d14 	.word	0x08021d14
 8015864:	080223cc 	.word	0x080223cc
 8015868:	08021d68 	.word	0x08021d68

0801586c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801586c:	b580      	push	{r7, lr}
 801586e:	b086      	sub	sp, #24
 8015870:	af00      	add	r7, sp, #0
 8015872:	60f8      	str	r0, [r7, #12]
 8015874:	607b      	str	r3, [r7, #4]
 8015876:	460b      	mov	r3, r1
 8015878:	817b      	strh	r3, [r7, #10]
 801587a:	4613      	mov	r3, r2
 801587c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801587e:	897a      	ldrh	r2, [r7, #10]
 8015880:	893b      	ldrh	r3, [r7, #8]
 8015882:	4413      	add	r3, r2
 8015884:	b29b      	uxth	r3, r3
 8015886:	3314      	adds	r3, #20
 8015888:	b29b      	uxth	r3, r3
 801588a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801588e:	4619      	mov	r1, r3
 8015890:	2022      	movs	r0, #34	; 0x22
 8015892:	f7fa f999 	bl	800fbc8 <pbuf_alloc>
 8015896:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015898:	697b      	ldr	r3, [r7, #20]
 801589a:	2b00      	cmp	r3, #0
 801589c:	d04d      	beq.n	801593a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801589e:	897b      	ldrh	r3, [r7, #10]
 80158a0:	3313      	adds	r3, #19
 80158a2:	697a      	ldr	r2, [r7, #20]
 80158a4:	8952      	ldrh	r2, [r2, #10]
 80158a6:	4293      	cmp	r3, r2
 80158a8:	db06      	blt.n	80158b8 <tcp_output_alloc_header_common+0x4c>
 80158aa:	4b26      	ldr	r3, [pc, #152]	; (8015944 <tcp_output_alloc_header_common+0xd8>)
 80158ac:	f240 7223 	movw	r2, #1827	; 0x723
 80158b0:	4925      	ldr	r1, [pc, #148]	; (8015948 <tcp_output_alloc_header_common+0xdc>)
 80158b2:	4826      	ldr	r0, [pc, #152]	; (801594c <tcp_output_alloc_header_common+0xe0>)
 80158b4:	f006 ff3c 	bl	801c730 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80158b8:	697b      	ldr	r3, [r7, #20]
 80158ba:	685b      	ldr	r3, [r3, #4]
 80158bc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80158be:	8c3b      	ldrh	r3, [r7, #32]
 80158c0:	4618      	mov	r0, r3
 80158c2:	f7f8 fdcf 	bl	800e464 <lwip_htons>
 80158c6:	4603      	mov	r3, r0
 80158c8:	461a      	mov	r2, r3
 80158ca:	693b      	ldr	r3, [r7, #16]
 80158cc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80158ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80158d0:	4618      	mov	r0, r3
 80158d2:	f7f8 fdc7 	bl	800e464 <lwip_htons>
 80158d6:	4603      	mov	r3, r0
 80158d8:	461a      	mov	r2, r3
 80158da:	693b      	ldr	r3, [r7, #16]
 80158dc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80158de:	693b      	ldr	r3, [r7, #16]
 80158e0:	687a      	ldr	r2, [r7, #4]
 80158e2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80158e4:	68f8      	ldr	r0, [r7, #12]
 80158e6:	f7f8 fdd2 	bl	800e48e <lwip_htonl>
 80158ea:	4602      	mov	r2, r0
 80158ec:	693b      	ldr	r3, [r7, #16]
 80158ee:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80158f0:	897b      	ldrh	r3, [r7, #10]
 80158f2:	089b      	lsrs	r3, r3, #2
 80158f4:	b29b      	uxth	r3, r3
 80158f6:	3305      	adds	r3, #5
 80158f8:	b29b      	uxth	r3, r3
 80158fa:	031b      	lsls	r3, r3, #12
 80158fc:	b29a      	uxth	r2, r3
 80158fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015902:	b29b      	uxth	r3, r3
 8015904:	4313      	orrs	r3, r2
 8015906:	b29b      	uxth	r3, r3
 8015908:	4618      	mov	r0, r3
 801590a:	f7f8 fdab 	bl	800e464 <lwip_htons>
 801590e:	4603      	mov	r3, r0
 8015910:	461a      	mov	r2, r3
 8015912:	693b      	ldr	r3, [r7, #16]
 8015914:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015916:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015918:	4618      	mov	r0, r3
 801591a:	f7f8 fda3 	bl	800e464 <lwip_htons>
 801591e:	4603      	mov	r3, r0
 8015920:	461a      	mov	r2, r3
 8015922:	693b      	ldr	r3, [r7, #16]
 8015924:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8015926:	693b      	ldr	r3, [r7, #16]
 8015928:	2200      	movs	r2, #0
 801592a:	741a      	strb	r2, [r3, #16]
 801592c:	2200      	movs	r2, #0
 801592e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015930:	693b      	ldr	r3, [r7, #16]
 8015932:	2200      	movs	r2, #0
 8015934:	749a      	strb	r2, [r3, #18]
 8015936:	2200      	movs	r2, #0
 8015938:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801593a:	697b      	ldr	r3, [r7, #20]
}
 801593c:	4618      	mov	r0, r3
 801593e:	3718      	adds	r7, #24
 8015940:	46bd      	mov	sp, r7
 8015942:	bd80      	pop	{r7, pc}
 8015944:	08021d14 	.word	0x08021d14
 8015948:	080223ec 	.word	0x080223ec
 801594c:	08021d68 	.word	0x08021d68

08015950 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015950:	b5b0      	push	{r4, r5, r7, lr}
 8015952:	b08a      	sub	sp, #40	; 0x28
 8015954:	af04      	add	r7, sp, #16
 8015956:	60f8      	str	r0, [r7, #12]
 8015958:	607b      	str	r3, [r7, #4]
 801595a:	460b      	mov	r3, r1
 801595c:	817b      	strh	r3, [r7, #10]
 801595e:	4613      	mov	r3, r2
 8015960:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	2b00      	cmp	r3, #0
 8015966:	d106      	bne.n	8015976 <tcp_output_alloc_header+0x26>
 8015968:	4b15      	ldr	r3, [pc, #84]	; (80159c0 <tcp_output_alloc_header+0x70>)
 801596a:	f240 7242 	movw	r2, #1858	; 0x742
 801596e:	4915      	ldr	r1, [pc, #84]	; (80159c4 <tcp_output_alloc_header+0x74>)
 8015970:	4815      	ldr	r0, [pc, #84]	; (80159c8 <tcp_output_alloc_header+0x78>)
 8015972:	f006 fedd 	bl	801c730 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	8adb      	ldrh	r3, [r3, #22]
 801597e:	68fa      	ldr	r2, [r7, #12]
 8015980:	8b12      	ldrh	r2, [r2, #24]
 8015982:	68f9      	ldr	r1, [r7, #12]
 8015984:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8015986:	893d      	ldrh	r5, [r7, #8]
 8015988:	897c      	ldrh	r4, [r7, #10]
 801598a:	9103      	str	r1, [sp, #12]
 801598c:	2110      	movs	r1, #16
 801598e:	9102      	str	r1, [sp, #8]
 8015990:	9201      	str	r2, [sp, #4]
 8015992:	9300      	str	r3, [sp, #0]
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	462a      	mov	r2, r5
 8015998:	4621      	mov	r1, r4
 801599a:	f7ff ff67 	bl	801586c <tcp_output_alloc_header_common>
 801599e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80159a0:	697b      	ldr	r3, [r7, #20]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d006      	beq.n	80159b4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159aa:	68fa      	ldr	r2, [r7, #12]
 80159ac:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80159ae:	441a      	add	r2, r3
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80159b4:	697b      	ldr	r3, [r7, #20]
}
 80159b6:	4618      	mov	r0, r3
 80159b8:	3718      	adds	r7, #24
 80159ba:	46bd      	mov	sp, r7
 80159bc:	bdb0      	pop	{r4, r5, r7, pc}
 80159be:	bf00      	nop
 80159c0:	08021d14 	.word	0x08021d14
 80159c4:	0802241c 	.word	0x0802241c
 80159c8:	08021d68 	.word	0x08021d68

080159cc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80159cc:	b580      	push	{r7, lr}
 80159ce:	b088      	sub	sp, #32
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	60f8      	str	r0, [r7, #12]
 80159d4:	60b9      	str	r1, [r7, #8]
 80159d6:	4611      	mov	r1, r2
 80159d8:	461a      	mov	r2, r3
 80159da:	460b      	mov	r3, r1
 80159dc:	71fb      	strb	r3, [r7, #7]
 80159de:	4613      	mov	r3, r2
 80159e0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80159e2:	2300      	movs	r3, #0
 80159e4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80159e6:	68bb      	ldr	r3, [r7, #8]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d106      	bne.n	80159fa <tcp_output_fill_options+0x2e>
 80159ec:	4b13      	ldr	r3, [pc, #76]	; (8015a3c <tcp_output_fill_options+0x70>)
 80159ee:	f240 7256 	movw	r2, #1878	; 0x756
 80159f2:	4913      	ldr	r1, [pc, #76]	; (8015a40 <tcp_output_fill_options+0x74>)
 80159f4:	4813      	ldr	r0, [pc, #76]	; (8015a44 <tcp_output_fill_options+0x78>)
 80159f6:	f006 fe9b 	bl	801c730 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80159fa:	68bb      	ldr	r3, [r7, #8]
 80159fc:	685b      	ldr	r3, [r3, #4]
 80159fe:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015a00:	69bb      	ldr	r3, [r7, #24]
 8015a02:	3314      	adds	r3, #20
 8015a04:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8015a06:	69bb      	ldr	r3, [r7, #24]
 8015a08:	f103 0214 	add.w	r2, r3, #20
 8015a0c:	8bfb      	ldrh	r3, [r7, #30]
 8015a0e:	009b      	lsls	r3, r3, #2
 8015a10:	4619      	mov	r1, r3
 8015a12:	79fb      	ldrb	r3, [r7, #7]
 8015a14:	009b      	lsls	r3, r3, #2
 8015a16:	f003 0304 	and.w	r3, r3, #4
 8015a1a:	440b      	add	r3, r1
 8015a1c:	4413      	add	r3, r2
 8015a1e:	697a      	ldr	r2, [r7, #20]
 8015a20:	429a      	cmp	r2, r3
 8015a22:	d006      	beq.n	8015a32 <tcp_output_fill_options+0x66>
 8015a24:	4b05      	ldr	r3, [pc, #20]	; (8015a3c <tcp_output_fill_options+0x70>)
 8015a26:	f240 7275 	movw	r2, #1909	; 0x775
 8015a2a:	4907      	ldr	r1, [pc, #28]	; (8015a48 <tcp_output_fill_options+0x7c>)
 8015a2c:	4805      	ldr	r0, [pc, #20]	; (8015a44 <tcp_output_fill_options+0x78>)
 8015a2e:	f006 fe7f 	bl	801c730 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015a32:	bf00      	nop
 8015a34:	3720      	adds	r7, #32
 8015a36:	46bd      	mov	sp, r7
 8015a38:	bd80      	pop	{r7, pc}
 8015a3a:	bf00      	nop
 8015a3c:	08021d14 	.word	0x08021d14
 8015a40:	08022444 	.word	0x08022444
 8015a44:	08021d68 	.word	0x08021d68
 8015a48:	0802233c 	.word	0x0802233c

08015a4c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015a4c:	b580      	push	{r7, lr}
 8015a4e:	b08a      	sub	sp, #40	; 0x28
 8015a50:	af04      	add	r7, sp, #16
 8015a52:	60f8      	str	r0, [r7, #12]
 8015a54:	60b9      	str	r1, [r7, #8]
 8015a56:	607a      	str	r2, [r7, #4]
 8015a58:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8015a5a:	68bb      	ldr	r3, [r7, #8]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d106      	bne.n	8015a6e <tcp_output_control_segment+0x22>
 8015a60:	4b20      	ldr	r3, [pc, #128]	; (8015ae4 <tcp_output_control_segment+0x98>)
 8015a62:	f240 7287 	movw	r2, #1927	; 0x787
 8015a66:	4920      	ldr	r1, [pc, #128]	; (8015ae8 <tcp_output_control_segment+0x9c>)
 8015a68:	4820      	ldr	r0, [pc, #128]	; (8015aec <tcp_output_control_segment+0xa0>)
 8015a6a:	f006 fe61 	bl	801c730 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8015a6e:	683a      	ldr	r2, [r7, #0]
 8015a70:	6879      	ldr	r1, [r7, #4]
 8015a72:	68f8      	ldr	r0, [r7, #12]
 8015a74:	f7fe fefc 	bl	8014870 <tcp_route>
 8015a78:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8015a7a:	693b      	ldr	r3, [r7, #16]
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d102      	bne.n	8015a86 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8015a80:	23fc      	movs	r3, #252	; 0xfc
 8015a82:	75fb      	strb	r3, [r7, #23]
 8015a84:	e024      	b.n	8015ad0 <tcp_output_control_segment+0x84>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d006      	beq.n	8015a9a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8015a8c:	68fb      	ldr	r3, [r7, #12]
 8015a8e:	7adb      	ldrb	r3, [r3, #11]
 8015a90:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	7a9b      	ldrb	r3, [r3, #10]
 8015a96:	757b      	strb	r3, [r7, #21]
 8015a98:	e003      	b.n	8015aa2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8015a9a:	23ff      	movs	r3, #255	; 0xff
 8015a9c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8015a9e:	2300      	movs	r3, #0
 8015aa0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
 8015aa2:	4b13      	ldr	r3, [pc, #76]	; (8015af0 <tcp_output_control_segment+0xa4>)
 8015aa4:	f8b3 3090 	ldrh.w	r3, [r3, #144]	; 0x90
 8015aa8:	3301      	adds	r3, #1
 8015aaa:	b29a      	uxth	r2, r3
 8015aac:	4b10      	ldr	r3, [pc, #64]	; (8015af0 <tcp_output_control_segment+0xa4>)
 8015aae:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8015ab2:	7dba      	ldrb	r2, [r7, #22]
 8015ab4:	693b      	ldr	r3, [r7, #16]
 8015ab6:	9302      	str	r3, [sp, #8]
 8015ab8:	2306      	movs	r3, #6
 8015aba:	9301      	str	r3, [sp, #4]
 8015abc:	7d7b      	ldrb	r3, [r7, #21]
 8015abe:	9300      	str	r3, [sp, #0]
 8015ac0:	4613      	mov	r3, r2
 8015ac2:	683a      	ldr	r2, [r7, #0]
 8015ac4:	6879      	ldr	r1, [r7, #4]
 8015ac6:	68b8      	ldr	r0, [r7, #8]
 8015ac8:	f004 fc70 	bl	801a3ac <ip4_output_if>
 8015acc:	4603      	mov	r3, r0
 8015ace:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8015ad0:	68b8      	ldr	r0, [r7, #8]
 8015ad2:	f7fa fb5d 	bl	8010190 <pbuf_free>
  return err;
 8015ad6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015ada:	4618      	mov	r0, r3
 8015adc:	3718      	adds	r7, #24
 8015ade:	46bd      	mov	sp, r7
 8015ae0:	bd80      	pop	{r7, pc}
 8015ae2:	bf00      	nop
 8015ae4:	08021d14 	.word	0x08021d14
 8015ae8:	0802246c 	.word	0x0802246c
 8015aec:	08021d68 	.word	0x08021d68
 8015af0:	20007204 	.word	0x20007204

08015af4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015af4:	b590      	push	{r4, r7, lr}
 8015af6:	b08b      	sub	sp, #44	; 0x2c
 8015af8:	af04      	add	r7, sp, #16
 8015afa:	60f8      	str	r0, [r7, #12]
 8015afc:	60b9      	str	r1, [r7, #8]
 8015afe:	607a      	str	r2, [r7, #4]
 8015b00:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8015b02:	683b      	ldr	r3, [r7, #0]
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d106      	bne.n	8015b16 <tcp_rst+0x22>
 8015b08:	4b22      	ldr	r3, [pc, #136]	; (8015b94 <tcp_rst+0xa0>)
 8015b0a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8015b0e:	4922      	ldr	r1, [pc, #136]	; (8015b98 <tcp_rst+0xa4>)
 8015b10:	4822      	ldr	r0, [pc, #136]	; (8015b9c <tcp_rst+0xa8>)
 8015b12:	f006 fe0d 	bl	801c730 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8015b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d106      	bne.n	8015b2a <tcp_rst+0x36>
 8015b1c:	4b1d      	ldr	r3, [pc, #116]	; (8015b94 <tcp_rst+0xa0>)
 8015b1e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8015b22:	491f      	ldr	r1, [pc, #124]	; (8015ba0 <tcp_rst+0xac>)
 8015b24:	481d      	ldr	r0, [pc, #116]	; (8015b9c <tcp_rst+0xa8>)
 8015b26:	f006 fe03 	bl	801c730 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8015b2e:	f246 0308 	movw	r3, #24584	; 0x6008
 8015b32:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015b34:	7dfb      	ldrb	r3, [r7, #23]
 8015b36:	b29c      	uxth	r4, r3
 8015b38:	68b8      	ldr	r0, [r7, #8]
 8015b3a:	f7f8 fca8 	bl	800e48e <lwip_htonl>
 8015b3e:	4602      	mov	r2, r0
 8015b40:	8abb      	ldrh	r3, [r7, #20]
 8015b42:	9303      	str	r3, [sp, #12]
 8015b44:	2314      	movs	r3, #20
 8015b46:	9302      	str	r3, [sp, #8]
 8015b48:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015b4a:	9301      	str	r3, [sp, #4]
 8015b4c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015b4e:	9300      	str	r3, [sp, #0]
 8015b50:	4613      	mov	r3, r2
 8015b52:	2200      	movs	r2, #0
 8015b54:	4621      	mov	r1, r4
 8015b56:	6878      	ldr	r0, [r7, #4]
 8015b58:	f7ff fe88 	bl	801586c <tcp_output_alloc_header_common>
 8015b5c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8015b5e:	693b      	ldr	r3, [r7, #16]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d013      	beq.n	8015b8c <tcp_rst+0x98>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015b64:	7dfb      	ldrb	r3, [r7, #23]
 8015b66:	2200      	movs	r2, #0
 8015b68:	6939      	ldr	r1, [r7, #16]
 8015b6a:	68f8      	ldr	r0, [r7, #12]
 8015b6c:	f7ff ff2e 	bl	80159cc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);
 8015b70:	4b0c      	ldr	r3, [pc, #48]	; (8015ba4 <tcp_rst+0xb0>)
 8015b72:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8015b76:	3301      	adds	r3, #1
 8015b78:	4a0a      	ldr	r2, [pc, #40]	; (8015ba4 <tcp_rst+0xb0>)
 8015b7a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b80:	683a      	ldr	r2, [r7, #0]
 8015b82:	6939      	ldr	r1, [r7, #16]
 8015b84:	68f8      	ldr	r0, [r7, #12]
 8015b86:	f7ff ff61 	bl	8015a4c <tcp_output_control_segment>
 8015b8a:	e000      	b.n	8015b8e <tcp_rst+0x9a>
    return;
 8015b8c:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015b8e:	371c      	adds	r7, #28
 8015b90:	46bd      	mov	sp, r7
 8015b92:	bd90      	pop	{r4, r7, pc}
 8015b94:	08021d14 	.word	0x08021d14
 8015b98:	08022498 	.word	0x08022498
 8015b9c:	08021d68 	.word	0x08021d68
 8015ba0:	080224b4 	.word	0x080224b4
 8015ba4:	20007204 	.word	0x20007204

08015ba8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015ba8:	b590      	push	{r4, r7, lr}
 8015baa:	b087      	sub	sp, #28
 8015bac:	af00      	add	r7, sp, #0
 8015bae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015bb0:	2300      	movs	r3, #0
 8015bb2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d106      	bne.n	8015bcc <tcp_send_empty_ack+0x24>
 8015bbe:	4b28      	ldr	r3, [pc, #160]	; (8015c60 <tcp_send_empty_ack+0xb8>)
 8015bc0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8015bc4:	4927      	ldr	r1, [pc, #156]	; (8015c64 <tcp_send_empty_ack+0xbc>)
 8015bc6:	4828      	ldr	r0, [pc, #160]	; (8015c68 <tcp_send_empty_ack+0xc0>)
 8015bc8:	f006 fdb2 	bl	801c730 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015bcc:	7dfb      	ldrb	r3, [r7, #23]
 8015bce:	009b      	lsls	r3, r3, #2
 8015bd0:	b2db      	uxtb	r3, r3
 8015bd2:	f003 0304 	and.w	r3, r3, #4
 8015bd6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015bd8:	7d7b      	ldrb	r3, [r7, #21]
 8015bda:	b29c      	uxth	r4, r3
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015be0:	4618      	mov	r0, r3
 8015be2:	f7f8 fc54 	bl	800e48e <lwip_htonl>
 8015be6:	4603      	mov	r3, r0
 8015be8:	2200      	movs	r2, #0
 8015bea:	4621      	mov	r1, r4
 8015bec:	6878      	ldr	r0, [r7, #4]
 8015bee:	f7ff feaf 	bl	8015950 <tcp_output_alloc_header>
 8015bf2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015bf4:	693b      	ldr	r3, [r7, #16]
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d109      	bne.n	8015c0e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	8b5b      	ldrh	r3, [r3, #26]
 8015bfe:	f043 0303 	orr.w	r3, r3, #3
 8015c02:	b29a      	uxth	r2, r3
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015c08:	f06f 0301 	mvn.w	r3, #1
 8015c0c:	e023      	b.n	8015c56 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8015c0e:	7dbb      	ldrb	r3, [r7, #22]
 8015c10:	7dfa      	ldrb	r2, [r7, #23]
 8015c12:	6939      	ldr	r1, [r7, #16]
 8015c14:	6878      	ldr	r0, [r7, #4]
 8015c16:	f7ff fed9 	bl	80159cc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015c1a:	687a      	ldr	r2, [r7, #4]
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	3304      	adds	r3, #4
 8015c20:	6939      	ldr	r1, [r7, #16]
 8015c22:	6878      	ldr	r0, [r7, #4]
 8015c24:	f7ff ff12 	bl	8015a4c <tcp_output_control_segment>
 8015c28:	4603      	mov	r3, r0
 8015c2a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8015c2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d007      	beq.n	8015c44 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	8b5b      	ldrh	r3, [r3, #26]
 8015c38:	f043 0303 	orr.w	r3, r3, #3
 8015c3c:	b29a      	uxth	r2, r3
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	835a      	strh	r2, [r3, #26]
 8015c42:	e006      	b.n	8015c52 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	8b5b      	ldrh	r3, [r3, #26]
 8015c48:	f023 0303 	bic.w	r3, r3, #3
 8015c4c:	b29a      	uxth	r2, r3
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8015c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015c56:	4618      	mov	r0, r3
 8015c58:	371c      	adds	r7, #28
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	bd90      	pop	{r4, r7, pc}
 8015c5e:	bf00      	nop
 8015c60:	08021d14 	.word	0x08021d14
 8015c64:	080224d0 	.word	0x080224d0
 8015c68:	08021d68 	.word	0x08021d68

08015c6c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015c6c:	b590      	push	{r4, r7, lr}
 8015c6e:	b087      	sub	sp, #28
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015c74:	2300      	movs	r3, #0
 8015c76:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d106      	bne.n	8015c8c <tcp_keepalive+0x20>
 8015c7e:	4b18      	ldr	r3, [pc, #96]	; (8015ce0 <tcp_keepalive+0x74>)
 8015c80:	f640 0224 	movw	r2, #2084	; 0x824
 8015c84:	4917      	ldr	r1, [pc, #92]	; (8015ce4 <tcp_keepalive+0x78>)
 8015c86:	4818      	ldr	r0, [pc, #96]	; (8015ce8 <tcp_keepalive+0x7c>)
 8015c88:	f006 fd52 	bl	801c730 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015c8c:	7dfb      	ldrb	r3, [r7, #23]
 8015c8e:	b29c      	uxth	r4, r3
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015c94:	3b01      	subs	r3, #1
 8015c96:	4618      	mov	r0, r3
 8015c98:	f7f8 fbf9 	bl	800e48e <lwip_htonl>
 8015c9c:	4603      	mov	r3, r0
 8015c9e:	2200      	movs	r2, #0
 8015ca0:	4621      	mov	r1, r4
 8015ca2:	6878      	ldr	r0, [r7, #4]
 8015ca4:	f7ff fe54 	bl	8015950 <tcp_output_alloc_header>
 8015ca8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015caa:	693b      	ldr	r3, [r7, #16]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d102      	bne.n	8015cb6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8015cb4:	e010      	b.n	8015cd8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015cb6:	7dfb      	ldrb	r3, [r7, #23]
 8015cb8:	2200      	movs	r2, #0
 8015cba:	6939      	ldr	r1, [r7, #16]
 8015cbc:	6878      	ldr	r0, [r7, #4]
 8015cbe:	f7ff fe85 	bl	80159cc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015cc2:	687a      	ldr	r2, [r7, #4]
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	3304      	adds	r3, #4
 8015cc8:	6939      	ldr	r1, [r7, #16]
 8015cca:	6878      	ldr	r0, [r7, #4]
 8015ccc:	f7ff febe 	bl	8015a4c <tcp_output_control_segment>
 8015cd0:	4603      	mov	r3, r0
 8015cd2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015cd8:	4618      	mov	r0, r3
 8015cda:	371c      	adds	r7, #28
 8015cdc:	46bd      	mov	sp, r7
 8015cde:	bd90      	pop	{r4, r7, pc}
 8015ce0:	08021d14 	.word	0x08021d14
 8015ce4:	080224f0 	.word	0x080224f0
 8015ce8:	08021d68 	.word	0x08021d68

08015cec <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8015cec:	b590      	push	{r4, r7, lr}
 8015cee:	b08b      	sub	sp, #44	; 0x2c
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d106      	bne.n	8015d0e <tcp_zero_window_probe+0x22>
 8015d00:	4b4c      	ldr	r3, [pc, #304]	; (8015e34 <tcp_zero_window_probe+0x148>)
 8015d02:	f640 024f 	movw	r2, #2127	; 0x84f
 8015d06:	494c      	ldr	r1, [pc, #304]	; (8015e38 <tcp_zero_window_probe+0x14c>)
 8015d08:	484c      	ldr	r0, [pc, #304]	; (8015e3c <tcp_zero_window_probe+0x150>)
 8015d0a:	f006 fd11 	bl	801c730 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d12:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8015d14:	6a3b      	ldr	r3, [r7, #32]
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d101      	bne.n	8015d1e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8015d1a:	2300      	movs	r3, #0
 8015d1c:	e086      	b.n	8015e2c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015d24:	2bff      	cmp	r3, #255	; 0xff
 8015d26:	d007      	beq.n	8015d38 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015d2e:	3301      	adds	r3, #1
 8015d30:	b2da      	uxtb	r2, r3
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015d38:	6a3b      	ldr	r3, [r7, #32]
 8015d3a:	68db      	ldr	r3, [r3, #12]
 8015d3c:	899b      	ldrh	r3, [r3, #12]
 8015d3e:	b29b      	uxth	r3, r3
 8015d40:	4618      	mov	r0, r3
 8015d42:	f7f8 fb8f 	bl	800e464 <lwip_htons>
 8015d46:	4603      	mov	r3, r0
 8015d48:	b2db      	uxtb	r3, r3
 8015d4a:	f003 0301 	and.w	r3, r3, #1
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d005      	beq.n	8015d5e <tcp_zero_window_probe+0x72>
 8015d52:	6a3b      	ldr	r3, [r7, #32]
 8015d54:	891b      	ldrh	r3, [r3, #8]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d101      	bne.n	8015d5e <tcp_zero_window_probe+0x72>
 8015d5a:	2301      	movs	r3, #1
 8015d5c:	e000      	b.n	8015d60 <tcp_zero_window_probe+0x74>
 8015d5e:	2300      	movs	r3, #0
 8015d60:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8015d62:	7ffb      	ldrb	r3, [r7, #31]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	bf0c      	ite	eq
 8015d68:	2301      	moveq	r3, #1
 8015d6a:	2300      	movne	r3, #0
 8015d6c:	b2db      	uxtb	r3, r3
 8015d6e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015d70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d74:	b299      	uxth	r1, r3
 8015d76:	6a3b      	ldr	r3, [r7, #32]
 8015d78:	68db      	ldr	r3, [r3, #12]
 8015d7a:	685b      	ldr	r3, [r3, #4]
 8015d7c:	8bba      	ldrh	r2, [r7, #28]
 8015d7e:	6878      	ldr	r0, [r7, #4]
 8015d80:	f7ff fde6 	bl	8015950 <tcp_output_alloc_header>
 8015d84:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8015d86:	69bb      	ldr	r3, [r7, #24]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d102      	bne.n	8015d92 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8015d90:	e04c      	b.n	8015e2c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015d92:	69bb      	ldr	r3, [r7, #24]
 8015d94:	685b      	ldr	r3, [r3, #4]
 8015d96:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015d98:	7ffb      	ldrb	r3, [r7, #31]
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d011      	beq.n	8015dc2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8015d9e:	697b      	ldr	r3, [r7, #20]
 8015da0:	899b      	ldrh	r3, [r3, #12]
 8015da2:	b29b      	uxth	r3, r3
 8015da4:	b21b      	sxth	r3, r3
 8015da6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015daa:	b21c      	sxth	r4, r3
 8015dac:	2011      	movs	r0, #17
 8015dae:	f7f8 fb59 	bl	800e464 <lwip_htons>
 8015db2:	4603      	mov	r3, r0
 8015db4:	b21b      	sxth	r3, r3
 8015db6:	4323      	orrs	r3, r4
 8015db8:	b21b      	sxth	r3, r3
 8015dba:	b29a      	uxth	r2, r3
 8015dbc:	697b      	ldr	r3, [r7, #20]
 8015dbe:	819a      	strh	r2, [r3, #12]
 8015dc0:	e010      	b.n	8015de4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015dc2:	69bb      	ldr	r3, [r7, #24]
 8015dc4:	685b      	ldr	r3, [r3, #4]
 8015dc6:	3314      	adds	r3, #20
 8015dc8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8015dca:	6a3b      	ldr	r3, [r7, #32]
 8015dcc:	6858      	ldr	r0, [r3, #4]
 8015dce:	6a3b      	ldr	r3, [r7, #32]
 8015dd0:	685b      	ldr	r3, [r3, #4]
 8015dd2:	891a      	ldrh	r2, [r3, #8]
 8015dd4:	6a3b      	ldr	r3, [r7, #32]
 8015dd6:	891b      	ldrh	r3, [r3, #8]
 8015dd8:	1ad3      	subs	r3, r2, r3
 8015dda:	b29b      	uxth	r3, r3
 8015ddc:	2201      	movs	r2, #1
 8015dde:	6939      	ldr	r1, [r7, #16]
 8015de0:	f7fa fbd0 	bl	8010584 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015de4:	6a3b      	ldr	r3, [r7, #32]
 8015de6:	68db      	ldr	r3, [r3, #12]
 8015de8:	685b      	ldr	r3, [r3, #4]
 8015dea:	4618      	mov	r0, r3
 8015dec:	f7f8 fb4f 	bl	800e48e <lwip_htonl>
 8015df0:	4603      	mov	r3, r0
 8015df2:	3301      	adds	r3, #1
 8015df4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	1ad3      	subs	r3, r2, r3
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	da02      	bge.n	8015e08 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	68fa      	ldr	r2, [r7, #12]
 8015e06:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015e08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e0c:	2200      	movs	r2, #0
 8015e0e:	69b9      	ldr	r1, [r7, #24]
 8015e10:	6878      	ldr	r0, [r7, #4]
 8015e12:	f7ff fddb 	bl	80159cc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015e16:	687a      	ldr	r2, [r7, #4]
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	3304      	adds	r3, #4
 8015e1c:	69b9      	ldr	r1, [r7, #24]
 8015e1e:	6878      	ldr	r0, [r7, #4]
 8015e20:	f7ff fe14 	bl	8015a4c <tcp_output_control_segment>
 8015e24:	4603      	mov	r3, r0
 8015e26:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015e28:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	372c      	adds	r7, #44	; 0x2c
 8015e30:	46bd      	mov	sp, r7
 8015e32:	bd90      	pop	{r4, r7, pc}
 8015e34:	08021d14 	.word	0x08021d14
 8015e38:	0802250c 	.word	0x0802250c
 8015e3c:	08021d68 	.word	0x08021d68

08015e40 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b082      	sub	sp, #8
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015e48:	f7fa fdec 	bl	8010a24 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015e4c:	4b0a      	ldr	r3, [pc, #40]	; (8015e78 <tcpip_tcp_timer+0x38>)
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d103      	bne.n	8015e5c <tcpip_tcp_timer+0x1c>
 8015e54:	4b09      	ldr	r3, [pc, #36]	; (8015e7c <tcpip_tcp_timer+0x3c>)
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d005      	beq.n	8015e68 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015e5c:	2200      	movs	r2, #0
 8015e5e:	4908      	ldr	r1, [pc, #32]	; (8015e80 <tcpip_tcp_timer+0x40>)
 8015e60:	20fa      	movs	r0, #250	; 0xfa
 8015e62:	f000 f8f3 	bl	801604c <sys_timeout>
 8015e66:	e003      	b.n	8015e70 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015e68:	4b06      	ldr	r3, [pc, #24]	; (8015e84 <tcpip_tcp_timer+0x44>)
 8015e6a:	2200      	movs	r2, #0
 8015e6c:	601a      	str	r2, [r3, #0]
  }
}
 8015e6e:	bf00      	nop
 8015e70:	bf00      	nop
 8015e72:	3708      	adds	r7, #8
 8015e74:	46bd      	mov	sp, r7
 8015e76:	bd80      	pop	{r7, pc}
 8015e78:	200073a8 	.word	0x200073a8
 8015e7c:	200073ac 	.word	0x200073ac
 8015e80:	08015e41 	.word	0x08015e41
 8015e84:	200073f4 	.word	0x200073f4

08015e88 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015e88:	b580      	push	{r7, lr}
 8015e8a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015e8c:	4b0a      	ldr	r3, [pc, #40]	; (8015eb8 <tcp_timer_needed+0x30>)
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d10f      	bne.n	8015eb4 <tcp_timer_needed+0x2c>
 8015e94:	4b09      	ldr	r3, [pc, #36]	; (8015ebc <tcp_timer_needed+0x34>)
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d103      	bne.n	8015ea4 <tcp_timer_needed+0x1c>
 8015e9c:	4b08      	ldr	r3, [pc, #32]	; (8015ec0 <tcp_timer_needed+0x38>)
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d007      	beq.n	8015eb4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015ea4:	4b04      	ldr	r3, [pc, #16]	; (8015eb8 <tcp_timer_needed+0x30>)
 8015ea6:	2201      	movs	r2, #1
 8015ea8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015eaa:	2200      	movs	r2, #0
 8015eac:	4905      	ldr	r1, [pc, #20]	; (8015ec4 <tcp_timer_needed+0x3c>)
 8015eae:	20fa      	movs	r0, #250	; 0xfa
 8015eb0:	f000 f8cc 	bl	801604c <sys_timeout>
  }
}
 8015eb4:	bf00      	nop
 8015eb6:	bd80      	pop	{r7, pc}
 8015eb8:	200073f4 	.word	0x200073f4
 8015ebc:	200073a8 	.word	0x200073a8
 8015ec0:	200073ac 	.word	0x200073ac
 8015ec4:	08015e41 	.word	0x08015e41

08015ec8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015ec8:	b580      	push	{r7, lr}
 8015eca:	b086      	sub	sp, #24
 8015ecc:	af00      	add	r7, sp, #0
 8015ece:	60f8      	str	r0, [r7, #12]
 8015ed0:	60b9      	str	r1, [r7, #8]
 8015ed2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015ed4:	2006      	movs	r0, #6
 8015ed6:	f7f9 fad7 	bl	800f488 <memp_malloc>
 8015eda:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8015edc:	693b      	ldr	r3, [r7, #16]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d109      	bne.n	8015ef6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015ee2:	693b      	ldr	r3, [r7, #16]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d151      	bne.n	8015f8c <sys_timeout_abs+0xc4>
 8015ee8:	4b2a      	ldr	r3, [pc, #168]	; (8015f94 <sys_timeout_abs+0xcc>)
 8015eea:	22be      	movs	r2, #190	; 0xbe
 8015eec:	492a      	ldr	r1, [pc, #168]	; (8015f98 <sys_timeout_abs+0xd0>)
 8015eee:	482b      	ldr	r0, [pc, #172]	; (8015f9c <sys_timeout_abs+0xd4>)
 8015ef0:	f006 fc1e 	bl	801c730 <iprintf>
    return;
 8015ef4:	e04a      	b.n	8015f8c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8015ef6:	693b      	ldr	r3, [r7, #16]
 8015ef8:	2200      	movs	r2, #0
 8015efa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8015efc:	693b      	ldr	r3, [r7, #16]
 8015efe:	68ba      	ldr	r2, [r7, #8]
 8015f00:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015f02:	693b      	ldr	r3, [r7, #16]
 8015f04:	687a      	ldr	r2, [r7, #4]
 8015f06:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015f08:	693b      	ldr	r3, [r7, #16]
 8015f0a:	68fa      	ldr	r2, [r7, #12]
 8015f0c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8015f0e:	4b24      	ldr	r3, [pc, #144]	; (8015fa0 <sys_timeout_abs+0xd8>)
 8015f10:	681b      	ldr	r3, [r3, #0]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d103      	bne.n	8015f1e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015f16:	4a22      	ldr	r2, [pc, #136]	; (8015fa0 <sys_timeout_abs+0xd8>)
 8015f18:	693b      	ldr	r3, [r7, #16]
 8015f1a:	6013      	str	r3, [r2, #0]
    return;
 8015f1c:	e037      	b.n	8015f8e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8015f1e:	693b      	ldr	r3, [r7, #16]
 8015f20:	685a      	ldr	r2, [r3, #4]
 8015f22:	4b1f      	ldr	r3, [pc, #124]	; (8015fa0 <sys_timeout_abs+0xd8>)
 8015f24:	681b      	ldr	r3, [r3, #0]
 8015f26:	685b      	ldr	r3, [r3, #4]
 8015f28:	1ad3      	subs	r3, r2, r3
 8015f2a:	0fdb      	lsrs	r3, r3, #31
 8015f2c:	f003 0301 	and.w	r3, r3, #1
 8015f30:	b2db      	uxtb	r3, r3
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d007      	beq.n	8015f46 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8015f36:	4b1a      	ldr	r3, [pc, #104]	; (8015fa0 <sys_timeout_abs+0xd8>)
 8015f38:	681a      	ldr	r2, [r3, #0]
 8015f3a:	693b      	ldr	r3, [r7, #16]
 8015f3c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8015f3e:	4a18      	ldr	r2, [pc, #96]	; (8015fa0 <sys_timeout_abs+0xd8>)
 8015f40:	693b      	ldr	r3, [r7, #16]
 8015f42:	6013      	str	r3, [r2, #0]
 8015f44:	e023      	b.n	8015f8e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015f46:	4b16      	ldr	r3, [pc, #88]	; (8015fa0 <sys_timeout_abs+0xd8>)
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	617b      	str	r3, [r7, #20]
 8015f4c:	e01a      	b.n	8015f84 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8015f4e:	697b      	ldr	r3, [r7, #20]
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d00b      	beq.n	8015f6e <sys_timeout_abs+0xa6>
 8015f56:	693b      	ldr	r3, [r7, #16]
 8015f58:	685a      	ldr	r2, [r3, #4]
 8015f5a:	697b      	ldr	r3, [r7, #20]
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	685b      	ldr	r3, [r3, #4]
 8015f60:	1ad3      	subs	r3, r2, r3
 8015f62:	0fdb      	lsrs	r3, r3, #31
 8015f64:	f003 0301 	and.w	r3, r3, #1
 8015f68:	b2db      	uxtb	r3, r3
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d007      	beq.n	8015f7e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8015f6e:	697b      	ldr	r3, [r7, #20]
 8015f70:	681a      	ldr	r2, [r3, #0]
 8015f72:	693b      	ldr	r3, [r7, #16]
 8015f74:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015f76:	697b      	ldr	r3, [r7, #20]
 8015f78:	693a      	ldr	r2, [r7, #16]
 8015f7a:	601a      	str	r2, [r3, #0]
        break;
 8015f7c:	e007      	b.n	8015f8e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8015f7e:	697b      	ldr	r3, [r7, #20]
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	617b      	str	r3, [r7, #20]
 8015f84:	697b      	ldr	r3, [r7, #20]
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d1e1      	bne.n	8015f4e <sys_timeout_abs+0x86>
 8015f8a:	e000      	b.n	8015f8e <sys_timeout_abs+0xc6>
    return;
 8015f8c:	bf00      	nop
      }
    }
  }
}
 8015f8e:	3718      	adds	r7, #24
 8015f90:	46bd      	mov	sp, r7
 8015f92:	bd80      	pop	{r7, pc}
 8015f94:	08022530 	.word	0x08022530
 8015f98:	08022564 	.word	0x08022564
 8015f9c:	080225a4 	.word	0x080225a4
 8015fa0:	200073ec 	.word	0x200073ec

08015fa4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015fa4:	b580      	push	{r7, lr}
 8015fa6:	b086      	sub	sp, #24
 8015fa8:	af00      	add	r7, sp, #0
 8015faa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015fb0:	697b      	ldr	r3, [r7, #20]
 8015fb2:	685b      	ldr	r3, [r3, #4]
 8015fb4:	4798      	blx	r3

  now = sys_now();
 8015fb6:	f7f1 f94d 	bl	8007254 <sys_now>
 8015fba:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8015fbc:	697b      	ldr	r3, [r7, #20]
 8015fbe:	681a      	ldr	r2, [r3, #0]
 8015fc0:	4b0f      	ldr	r3, [pc, #60]	; (8016000 <lwip_cyclic_timer+0x5c>)
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	4413      	add	r3, r2
 8015fc6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015fc8:	68fa      	ldr	r2, [r7, #12]
 8015fca:	693b      	ldr	r3, [r7, #16]
 8015fcc:	1ad3      	subs	r3, r2, r3
 8015fce:	0fdb      	lsrs	r3, r3, #31
 8015fd0:	f003 0301 	and.w	r3, r3, #1
 8015fd4:	b2db      	uxtb	r3, r3
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d009      	beq.n	8015fee <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8015fda:	697b      	ldr	r3, [r7, #20]
 8015fdc:	681a      	ldr	r2, [r3, #0]
 8015fde:	693b      	ldr	r3, [r7, #16]
 8015fe0:	4413      	add	r3, r2
 8015fe2:	687a      	ldr	r2, [r7, #4]
 8015fe4:	4907      	ldr	r1, [pc, #28]	; (8016004 <lwip_cyclic_timer+0x60>)
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	f7ff ff6e 	bl	8015ec8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8015fec:	e004      	b.n	8015ff8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8015fee:	687a      	ldr	r2, [r7, #4]
 8015ff0:	4904      	ldr	r1, [pc, #16]	; (8016004 <lwip_cyclic_timer+0x60>)
 8015ff2:	68f8      	ldr	r0, [r7, #12]
 8015ff4:	f7ff ff68 	bl	8015ec8 <sys_timeout_abs>
}
 8015ff8:	bf00      	nop
 8015ffa:	3718      	adds	r7, #24
 8015ffc:	46bd      	mov	sp, r7
 8015ffe:	bd80      	pop	{r7, pc}
 8016000:	200073f0 	.word	0x200073f0
 8016004:	08015fa5 	.word	0x08015fa5

08016008 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016008:	b580      	push	{r7, lr}
 801600a:	b082      	sub	sp, #8
 801600c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801600e:	2301      	movs	r3, #1
 8016010:	607b      	str	r3, [r7, #4]
 8016012:	e00e      	b.n	8016032 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016014:	4a0b      	ldr	r2, [pc, #44]	; (8016044 <sys_timeouts_init+0x3c>)
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	00db      	lsls	r3, r3, #3
 8016020:	4a08      	ldr	r2, [pc, #32]	; (8016044 <sys_timeouts_init+0x3c>)
 8016022:	4413      	add	r3, r2
 8016024:	461a      	mov	r2, r3
 8016026:	4908      	ldr	r1, [pc, #32]	; (8016048 <sys_timeouts_init+0x40>)
 8016028:	f000 f810 	bl	801604c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	3301      	adds	r3, #1
 8016030:	607b      	str	r3, [r7, #4]
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	2b05      	cmp	r3, #5
 8016036:	d9ed      	bls.n	8016014 <sys_timeouts_init+0xc>
  }
}
 8016038:	bf00      	nop
 801603a:	bf00      	nop
 801603c:	3708      	adds	r7, #8
 801603e:	46bd      	mov	sp, r7
 8016040:	bd80      	pop	{r7, pc}
 8016042:	bf00      	nop
 8016044:	08024508 	.word	0x08024508
 8016048:	08015fa5 	.word	0x08015fa5

0801604c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801604c:	b580      	push	{r7, lr}
 801604e:	b086      	sub	sp, #24
 8016050:	af00      	add	r7, sp, #0
 8016052:	60f8      	str	r0, [r7, #12]
 8016054:	60b9      	str	r1, [r7, #8]
 8016056:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801605e:	d306      	bcc.n	801606e <sys_timeout+0x22>
 8016060:	4b0a      	ldr	r3, [pc, #40]	; (801608c <sys_timeout+0x40>)
 8016062:	f240 1229 	movw	r2, #297	; 0x129
 8016066:	490a      	ldr	r1, [pc, #40]	; (8016090 <sys_timeout+0x44>)
 8016068:	480a      	ldr	r0, [pc, #40]	; (8016094 <sys_timeout+0x48>)
 801606a:	f006 fb61 	bl	801c730 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801606e:	f7f1 f8f1 	bl	8007254 <sys_now>
 8016072:	4602      	mov	r2, r0
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	4413      	add	r3, r2
 8016078:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801607a:	687a      	ldr	r2, [r7, #4]
 801607c:	68b9      	ldr	r1, [r7, #8]
 801607e:	6978      	ldr	r0, [r7, #20]
 8016080:	f7ff ff22 	bl	8015ec8 <sys_timeout_abs>
#endif
}
 8016084:	bf00      	nop
 8016086:	3718      	adds	r7, #24
 8016088:	46bd      	mov	sp, r7
 801608a:	bd80      	pop	{r7, pc}
 801608c:	08022530 	.word	0x08022530
 8016090:	080225cc 	.word	0x080225cc
 8016094:	080225a4 	.word	0x080225a4

08016098 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8016098:	b580      	push	{r7, lr}
 801609a:	b084      	sub	sp, #16
 801609c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801609e:	f7f1 f8d9 	bl	8007254 <sys_now>
 80160a2:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 80160a4:	4b1a      	ldr	r3, [pc, #104]	; (8016110 <sys_check_timeouts+0x78>)
 80160a6:	781b      	ldrb	r3, [r3, #0]
 80160a8:	b2db      	uxtb	r3, r3
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d001      	beq.n	80160b2 <sys_check_timeouts+0x1a>
 80160ae:	f7f9 fd35 	bl	800fb1c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 80160b2:	4b18      	ldr	r3, [pc, #96]	; (8016114 <sys_check_timeouts+0x7c>)
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80160b8:	68bb      	ldr	r3, [r7, #8]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d022      	beq.n	8016104 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80160be:	68bb      	ldr	r3, [r7, #8]
 80160c0:	685b      	ldr	r3, [r3, #4]
 80160c2:	68fa      	ldr	r2, [r7, #12]
 80160c4:	1ad3      	subs	r3, r2, r3
 80160c6:	0fdb      	lsrs	r3, r3, #31
 80160c8:	f003 0301 	and.w	r3, r3, #1
 80160cc:	b2db      	uxtb	r3, r3
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d11a      	bne.n	8016108 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80160d2:	68bb      	ldr	r3, [r7, #8]
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	4a0f      	ldr	r2, [pc, #60]	; (8016114 <sys_check_timeouts+0x7c>)
 80160d8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80160da:	68bb      	ldr	r3, [r7, #8]
 80160dc:	689b      	ldr	r3, [r3, #8]
 80160de:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80160e0:	68bb      	ldr	r3, [r7, #8]
 80160e2:	68db      	ldr	r3, [r3, #12]
 80160e4:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80160e6:	68bb      	ldr	r3, [r7, #8]
 80160e8:	685b      	ldr	r3, [r3, #4]
 80160ea:	4a0b      	ldr	r2, [pc, #44]	; (8016118 <sys_check_timeouts+0x80>)
 80160ec:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80160ee:	68b9      	ldr	r1, [r7, #8]
 80160f0:	2006      	movs	r0, #6
 80160f2:	f7f9 fa1b 	bl	800f52c <memp_free>
    if (handler != NULL) {
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d0d3      	beq.n	80160a4 <sys_check_timeouts+0xc>
      handler(arg);
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	6838      	ldr	r0, [r7, #0]
 8016100:	4798      	blx	r3
  do {
 8016102:	e7cf      	b.n	80160a4 <sys_check_timeouts+0xc>
      return;
 8016104:	bf00      	nop
 8016106:	e000      	b.n	801610a <sys_check_timeouts+0x72>
      return;
 8016108:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801610a:	3710      	adds	r7, #16
 801610c:	46bd      	mov	sp, r7
 801610e:	bd80      	pop	{r7, pc}
 8016110:	20007201 	.word	0x20007201
 8016114:	200073ec 	.word	0x200073ec
 8016118:	200073f0 	.word	0x200073f0

0801611c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801611c:	b580      	push	{r7, lr}
 801611e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016120:	f006 fb1e 	bl	801c760 <rand>
 8016124:	4603      	mov	r3, r0
 8016126:	b29b      	uxth	r3, r3
 8016128:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801612c:	b29b      	uxth	r3, r3
 801612e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8016132:	b29a      	uxth	r2, r3
 8016134:	4b01      	ldr	r3, [pc, #4]	; (801613c <udp_init+0x20>)
 8016136:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016138:	bf00      	nop
 801613a:	bd80      	pop	{r7, pc}
 801613c:	20000060 	.word	0x20000060

08016140 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8016140:	b480      	push	{r7}
 8016142:	b083      	sub	sp, #12
 8016144:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8016146:	2300      	movs	r3, #0
 8016148:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801614a:	4b17      	ldr	r3, [pc, #92]	; (80161a8 <udp_new_port+0x68>)
 801614c:	881b      	ldrh	r3, [r3, #0]
 801614e:	1c5a      	adds	r2, r3, #1
 8016150:	b291      	uxth	r1, r2
 8016152:	4a15      	ldr	r2, [pc, #84]	; (80161a8 <udp_new_port+0x68>)
 8016154:	8011      	strh	r1, [r2, #0]
 8016156:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801615a:	4293      	cmp	r3, r2
 801615c:	d103      	bne.n	8016166 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801615e:	4b12      	ldr	r3, [pc, #72]	; (80161a8 <udp_new_port+0x68>)
 8016160:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016164:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016166:	4b11      	ldr	r3, [pc, #68]	; (80161ac <udp_new_port+0x6c>)
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	603b      	str	r3, [r7, #0]
 801616c:	e011      	b.n	8016192 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801616e:	683b      	ldr	r3, [r7, #0]
 8016170:	8a5a      	ldrh	r2, [r3, #18]
 8016172:	4b0d      	ldr	r3, [pc, #52]	; (80161a8 <udp_new_port+0x68>)
 8016174:	881b      	ldrh	r3, [r3, #0]
 8016176:	429a      	cmp	r2, r3
 8016178:	d108      	bne.n	801618c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801617a:	88fb      	ldrh	r3, [r7, #6]
 801617c:	3301      	adds	r3, #1
 801617e:	80fb      	strh	r3, [r7, #6]
 8016180:	88fb      	ldrh	r3, [r7, #6]
 8016182:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016186:	d3e0      	bcc.n	801614a <udp_new_port+0xa>
        return 0;
 8016188:	2300      	movs	r3, #0
 801618a:	e007      	b.n	801619c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801618c:	683b      	ldr	r3, [r7, #0]
 801618e:	68db      	ldr	r3, [r3, #12]
 8016190:	603b      	str	r3, [r7, #0]
 8016192:	683b      	ldr	r3, [r7, #0]
 8016194:	2b00      	cmp	r3, #0
 8016196:	d1ea      	bne.n	801616e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8016198:	4b03      	ldr	r3, [pc, #12]	; (80161a8 <udp_new_port+0x68>)
 801619a:	881b      	ldrh	r3, [r3, #0]
}
 801619c:	4618      	mov	r0, r3
 801619e:	370c      	adds	r7, #12
 80161a0:	46bd      	mov	sp, r7
 80161a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161a6:	4770      	bx	lr
 80161a8:	20000060 	.word	0x20000060
 80161ac:	200073f8 	.word	0x200073f8

080161b0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b084      	sub	sp, #16
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	60f8      	str	r0, [r7, #12]
 80161b8:	60b9      	str	r1, [r7, #8]
 80161ba:	4613      	mov	r3, r2
 80161bc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d105      	bne.n	80161d0 <udp_input_local_match+0x20>
 80161c4:	4b27      	ldr	r3, [pc, #156]	; (8016264 <udp_input_local_match+0xb4>)
 80161c6:	2287      	movs	r2, #135	; 0x87
 80161c8:	4927      	ldr	r1, [pc, #156]	; (8016268 <udp_input_local_match+0xb8>)
 80161ca:	4828      	ldr	r0, [pc, #160]	; (801626c <udp_input_local_match+0xbc>)
 80161cc:	f006 fab0 	bl	801c730 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80161d0:	68bb      	ldr	r3, [r7, #8]
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d105      	bne.n	80161e2 <udp_input_local_match+0x32>
 80161d6:	4b23      	ldr	r3, [pc, #140]	; (8016264 <udp_input_local_match+0xb4>)
 80161d8:	2288      	movs	r2, #136	; 0x88
 80161da:	4925      	ldr	r1, [pc, #148]	; (8016270 <udp_input_local_match+0xc0>)
 80161dc:	4823      	ldr	r0, [pc, #140]	; (801626c <udp_input_local_match+0xbc>)
 80161de:	f006 faa7 	bl	801c730 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	7a1b      	ldrb	r3, [r3, #8]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d00b      	beq.n	8016202 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	7a1a      	ldrb	r2, [r3, #8]
 80161ee:	4b21      	ldr	r3, [pc, #132]	; (8016274 <udp_input_local_match+0xc4>)
 80161f0:	685b      	ldr	r3, [r3, #4]
 80161f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80161f6:	3301      	adds	r3, #1
 80161f8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80161fa:	429a      	cmp	r2, r3
 80161fc:	d001      	beq.n	8016202 <udp_input_local_match+0x52>
    return 0;
 80161fe:	2300      	movs	r3, #0
 8016200:	e02b      	b.n	801625a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016202:	79fb      	ldrb	r3, [r7, #7]
 8016204:	2b00      	cmp	r3, #0
 8016206:	d018      	beq.n	801623a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	2b00      	cmp	r3, #0
 801620c:	d013      	beq.n	8016236 <udp_input_local_match+0x86>
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	2b00      	cmp	r3, #0
 8016214:	d00f      	beq.n	8016236 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016216:	4b17      	ldr	r3, [pc, #92]	; (8016274 <udp_input_local_match+0xc4>)
 8016218:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801621a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801621e:	d00a      	beq.n	8016236 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	681a      	ldr	r2, [r3, #0]
 8016224:	4b13      	ldr	r3, [pc, #76]	; (8016274 <udp_input_local_match+0xc4>)
 8016226:	695b      	ldr	r3, [r3, #20]
 8016228:	405a      	eors	r2, r3
 801622a:	68bb      	ldr	r3, [r7, #8]
 801622c:	3308      	adds	r3, #8
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016232:	2b00      	cmp	r3, #0
 8016234:	d110      	bne.n	8016258 <udp_input_local_match+0xa8>
          return 1;
 8016236:	2301      	movs	r3, #1
 8016238:	e00f      	b.n	801625a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d009      	beq.n	8016254 <udp_input_local_match+0xa4>
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d005      	beq.n	8016254 <udp_input_local_match+0xa4>
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	681a      	ldr	r2, [r3, #0]
 801624c:	4b09      	ldr	r3, [pc, #36]	; (8016274 <udp_input_local_match+0xc4>)
 801624e:	695b      	ldr	r3, [r3, #20]
 8016250:	429a      	cmp	r2, r3
 8016252:	d101      	bne.n	8016258 <udp_input_local_match+0xa8>
        return 1;
 8016254:	2301      	movs	r3, #1
 8016256:	e000      	b.n	801625a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8016258:	2300      	movs	r3, #0
}
 801625a:	4618      	mov	r0, r3
 801625c:	3710      	adds	r7, #16
 801625e:	46bd      	mov	sp, r7
 8016260:	bd80      	pop	{r7, pc}
 8016262:	bf00      	nop
 8016264:	08022618 	.word	0x08022618
 8016268:	08022648 	.word	0x08022648
 801626c:	0802266c 	.word	0x0802266c
 8016270:	08022694 	.word	0x08022694
 8016274:	20003be8 	.word	0x20003be8

08016278 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016278:	b590      	push	{r4, r7, lr}
 801627a:	b08d      	sub	sp, #52	; 0x34
 801627c:	af02      	add	r7, sp, #8
 801627e:	6078      	str	r0, [r7, #4]
 8016280:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016282:	2300      	movs	r3, #0
 8016284:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d105      	bne.n	8016298 <udp_input+0x20>
 801628c:	4b8a      	ldr	r3, [pc, #552]	; (80164b8 <udp_input+0x240>)
 801628e:	22cf      	movs	r2, #207	; 0xcf
 8016290:	498a      	ldr	r1, [pc, #552]	; (80164bc <udp_input+0x244>)
 8016292:	488b      	ldr	r0, [pc, #556]	; (80164c0 <udp_input+0x248>)
 8016294:	f006 fa4c 	bl	801c730 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8016298:	683b      	ldr	r3, [r7, #0]
 801629a:	2b00      	cmp	r3, #0
 801629c:	d105      	bne.n	80162aa <udp_input+0x32>
 801629e:	4b86      	ldr	r3, [pc, #536]	; (80164b8 <udp_input+0x240>)
 80162a0:	22d0      	movs	r2, #208	; 0xd0
 80162a2:	4988      	ldr	r1, [pc, #544]	; (80164c4 <udp_input+0x24c>)
 80162a4:	4886      	ldr	r0, [pc, #536]	; (80164c0 <udp_input+0x248>)
 80162a6:	f006 fa43 	bl	801c730 <iprintf>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 80162aa:	4b87      	ldr	r3, [pc, #540]	; (80164c8 <udp_input+0x250>)
 80162ac:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80162b0:	3301      	adds	r3, #1
 80162b2:	b29a      	uxth	r2, r3
 80162b4:	4b84      	ldr	r3, [pc, #528]	; (80164c8 <udp_input+0x250>)
 80162b6:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	895b      	ldrh	r3, [r3, #10]
 80162be:	2b07      	cmp	r3, #7
 80162c0:	d81a      	bhi.n	80162f8 <udp_input+0x80>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 80162c2:	4b81      	ldr	r3, [pc, #516]	; (80164c8 <udp_input+0x250>)
 80162c4:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80162c8:	3301      	adds	r3, #1
 80162ca:	b29a      	uxth	r2, r3
 80162cc:	4b7e      	ldr	r3, [pc, #504]	; (80164c8 <udp_input+0x250>)
 80162ce:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
    UDP_STATS_INC(udp.drop);
 80162d2:	4b7d      	ldr	r3, [pc, #500]	; (80164c8 <udp_input+0x250>)
 80162d4:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 80162d8:	3301      	adds	r3, #1
 80162da:	b29a      	uxth	r2, r3
 80162dc:	4b7a      	ldr	r3, [pc, #488]	; (80164c8 <udp_input+0x250>)
 80162de:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
 80162e2:	4b79      	ldr	r3, [pc, #484]	; (80164c8 <udp_input+0x250>)
 80162e4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80162e8:	3301      	adds	r3, #1
 80162ea:	4a77      	ldr	r2, [pc, #476]	; (80164c8 <udp_input+0x250>)
 80162ec:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
    pbuf_free(p);
 80162f0:	6878      	ldr	r0, [r7, #4]
 80162f2:	f7f9 ff4d 	bl	8010190 <pbuf_free>
    goto end;
 80162f6:	e125      	b.n	8016544 <udp_input+0x2cc>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	685b      	ldr	r3, [r3, #4]
 80162fc:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80162fe:	4b73      	ldr	r3, [pc, #460]	; (80164cc <udp_input+0x254>)
 8016300:	695b      	ldr	r3, [r3, #20]
 8016302:	4a72      	ldr	r2, [pc, #456]	; (80164cc <udp_input+0x254>)
 8016304:	6812      	ldr	r2, [r2, #0]
 8016306:	4611      	mov	r1, r2
 8016308:	4618      	mov	r0, r3
 801630a:	f004 f957 	bl	801a5bc <ip4_addr_isbroadcast_u32>
 801630e:	4603      	mov	r3, r0
 8016310:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016312:	697b      	ldr	r3, [r7, #20]
 8016314:	881b      	ldrh	r3, [r3, #0]
 8016316:	b29b      	uxth	r3, r3
 8016318:	4618      	mov	r0, r3
 801631a:	f7f8 f8a3 	bl	800e464 <lwip_htons>
 801631e:	4603      	mov	r3, r0
 8016320:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016322:	697b      	ldr	r3, [r7, #20]
 8016324:	885b      	ldrh	r3, [r3, #2]
 8016326:	b29b      	uxth	r3, r3
 8016328:	4618      	mov	r0, r3
 801632a:	f7f8 f89b 	bl	800e464 <lwip_htons>
 801632e:	4603      	mov	r3, r0
 8016330:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016332:	2300      	movs	r3, #0
 8016334:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8016336:	2300      	movs	r3, #0
 8016338:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801633a:	2300      	movs	r3, #0
 801633c:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801633e:	4b64      	ldr	r3, [pc, #400]	; (80164d0 <udp_input+0x258>)
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	627b      	str	r3, [r7, #36]	; 0x24
 8016344:	e05d      	b.n	8016402 <udp_input+0x18a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016348:	8a5b      	ldrh	r3, [r3, #18]
 801634a:	89fa      	ldrh	r2, [r7, #14]
 801634c:	429a      	cmp	r2, r3
 801634e:	d153      	bne.n	80163f8 <udp_input+0x180>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016350:	7cfb      	ldrb	r3, [r7, #19]
 8016352:	461a      	mov	r2, r3
 8016354:	6839      	ldr	r1, [r7, #0]
 8016356:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016358:	f7ff ff2a 	bl	80161b0 <udp_input_local_match>
 801635c:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801635e:	2b00      	cmp	r3, #0
 8016360:	d04a      	beq.n	80163f8 <udp_input+0x180>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016364:	7c1b      	ldrb	r3, [r3, #16]
 8016366:	f003 0304 	and.w	r3, r3, #4
 801636a:	2b00      	cmp	r3, #0
 801636c:	d11d      	bne.n	80163aa <udp_input+0x132>
        if (uncon_pcb == NULL) {
 801636e:	69fb      	ldr	r3, [r7, #28]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d102      	bne.n	801637a <udp_input+0x102>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016376:	61fb      	str	r3, [r7, #28]
 8016378:	e017      	b.n	80163aa <udp_input+0x132>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801637a:	7cfb      	ldrb	r3, [r7, #19]
 801637c:	2b00      	cmp	r3, #0
 801637e:	d014      	beq.n	80163aa <udp_input+0x132>
 8016380:	4b52      	ldr	r3, [pc, #328]	; (80164cc <udp_input+0x254>)
 8016382:	695b      	ldr	r3, [r3, #20]
 8016384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016388:	d10f      	bne.n	80163aa <udp_input+0x132>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801638a:	69fb      	ldr	r3, [r7, #28]
 801638c:	681a      	ldr	r2, [r3, #0]
 801638e:	683b      	ldr	r3, [r7, #0]
 8016390:	3304      	adds	r3, #4
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	429a      	cmp	r2, r3
 8016396:	d008      	beq.n	80163aa <udp_input+0x132>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8016398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801639a:	681a      	ldr	r2, [r3, #0]
 801639c:	683b      	ldr	r3, [r7, #0]
 801639e:	3304      	adds	r3, #4
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	429a      	cmp	r2, r3
 80163a4:	d101      	bne.n	80163aa <udp_input+0x132>
              /* better match */
              uncon_pcb = pcb;
 80163a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163a8:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80163aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163ac:	8a9b      	ldrh	r3, [r3, #20]
 80163ae:	8a3a      	ldrh	r2, [r7, #16]
 80163b0:	429a      	cmp	r2, r3
 80163b2:	d121      	bne.n	80163f8 <udp_input+0x180>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80163b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163b6:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d005      	beq.n	80163c8 <udp_input+0x150>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80163bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163be:	685a      	ldr	r2, [r3, #4]
 80163c0:	4b42      	ldr	r3, [pc, #264]	; (80164cc <udp_input+0x254>)
 80163c2:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80163c4:	429a      	cmp	r2, r3
 80163c6:	d117      	bne.n	80163f8 <udp_input+0x180>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80163c8:	6a3b      	ldr	r3, [r7, #32]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d00b      	beq.n	80163e6 <udp_input+0x16e>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80163ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163d0:	68da      	ldr	r2, [r3, #12]
 80163d2:	6a3b      	ldr	r3, [r7, #32]
 80163d4:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80163d6:	4b3e      	ldr	r3, [pc, #248]	; (80164d0 <udp_input+0x258>)
 80163d8:	681a      	ldr	r2, [r3, #0]
 80163da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163dc:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80163de:	4a3c      	ldr	r2, [pc, #240]	; (80164d0 <udp_input+0x258>)
 80163e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163e2:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80163e4:	e010      	b.n	8016408 <udp_input+0x190>
          UDP_STATS_INC(udp.cachehit);
 80163e6:	4b38      	ldr	r3, [pc, #224]	; (80164c8 <udp_input+0x250>)
 80163e8:	f8b3 308e 	ldrh.w	r3, [r3, #142]	; 0x8e
 80163ec:	3301      	adds	r3, #1
 80163ee:	b29a      	uxth	r2, r3
 80163f0:	4b35      	ldr	r3, [pc, #212]	; (80164c8 <udp_input+0x250>)
 80163f2:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
        break;
 80163f6:	e007      	b.n	8016408 <udp_input+0x190>
      }
    }

    prev = pcb;
 80163f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163fa:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80163fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163fe:	68db      	ldr	r3, [r3, #12]
 8016400:	627b      	str	r3, [r7, #36]	; 0x24
 8016402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016404:	2b00      	cmp	r3, #0
 8016406:	d19e      	bne.n	8016346 <udp_input+0xce>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801640a:	2b00      	cmp	r3, #0
 801640c:	d101      	bne.n	8016412 <udp_input+0x19a>
    pcb = uncon_pcb;
 801640e:	69fb      	ldr	r3, [r7, #28]
 8016410:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016414:	2b00      	cmp	r3, #0
 8016416:	d002      	beq.n	801641e <udp_input+0x1a6>
    for_us = 1;
 8016418:	2301      	movs	r3, #1
 801641a:	76fb      	strb	r3, [r7, #27]
 801641c:	e00a      	b.n	8016434 <udp_input+0x1bc>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801641e:	683b      	ldr	r3, [r7, #0]
 8016420:	3304      	adds	r3, #4
 8016422:	681a      	ldr	r2, [r3, #0]
 8016424:	4b29      	ldr	r3, [pc, #164]	; (80164cc <udp_input+0x254>)
 8016426:	695b      	ldr	r3, [r3, #20]
 8016428:	429a      	cmp	r2, r3
 801642a:	bf0c      	ite	eq
 801642c:	2301      	moveq	r3, #1
 801642e:	2300      	movne	r3, #0
 8016430:	b2db      	uxtb	r3, r3
 8016432:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016434:	7efb      	ldrb	r3, [r7, #27]
 8016436:	2b00      	cmp	r3, #0
 8016438:	f000 8081 	beq.w	801653e <udp_input+0x2c6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801643c:	2108      	movs	r1, #8
 801643e:	6878      	ldr	r0, [r7, #4]
 8016440:	f7f9 fe20 	bl	8010084 <pbuf_remove_header>
 8016444:	4603      	mov	r3, r0
 8016446:	2b00      	cmp	r3, #0
 8016448:	d019      	beq.n	801647e <udp_input+0x206>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801644a:	4b1b      	ldr	r3, [pc, #108]	; (80164b8 <udp_input+0x240>)
 801644c:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8016450:	4920      	ldr	r1, [pc, #128]	; (80164d4 <udp_input+0x25c>)
 8016452:	481b      	ldr	r0, [pc, #108]	; (80164c0 <udp_input+0x248>)
 8016454:	f006 f96c 	bl	801c730 <iprintf>
      UDP_STATS_INC(udp.drop);
 8016458:	4b1b      	ldr	r3, [pc, #108]	; (80164c8 <udp_input+0x250>)
 801645a:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 801645e:	3301      	adds	r3, #1
 8016460:	b29a      	uxth	r2, r3
 8016462:	4b19      	ldr	r3, [pc, #100]	; (80164c8 <udp_input+0x250>)
 8016464:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
 8016468:	4b17      	ldr	r3, [pc, #92]	; (80164c8 <udp_input+0x250>)
 801646a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 801646e:	3301      	adds	r3, #1
 8016470:	4a15      	ldr	r2, [pc, #84]	; (80164c8 <udp_input+0x250>)
 8016472:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
      pbuf_free(p);
 8016476:	6878      	ldr	r0, [r7, #4]
 8016478:	f7f9 fe8a 	bl	8010190 <pbuf_free>
      goto end;
 801647c:	e062      	b.n	8016544 <udp_input+0x2cc>
    }

    if (pcb != NULL) {
 801647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016480:	2b00      	cmp	r3, #0
 8016482:	d02b      	beq.n	80164dc <udp_input+0x264>
      MIB2_STATS_INC(mib2.udpindatagrams);
 8016484:	4b10      	ldr	r3, [pc, #64]	; (80164c8 <udp_input+0x250>)
 8016486:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 801648a:	3301      	adds	r3, #1
 801648c:	4a0e      	ldr	r2, [pc, #56]	; (80164c8 <udp_input+0x250>)
 801648e:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016494:	699b      	ldr	r3, [r3, #24]
 8016496:	2b00      	cmp	r3, #0
 8016498:	d00a      	beq.n	80164b0 <udp_input+0x238>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801649c:	699c      	ldr	r4, [r3, #24]
 801649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164a0:	69d8      	ldr	r0, [r3, #28]
 80164a2:	8a3b      	ldrh	r3, [r7, #16]
 80164a4:	9300      	str	r3, [sp, #0]
 80164a6:	4b0c      	ldr	r3, [pc, #48]	; (80164d8 <udp_input+0x260>)
 80164a8:	687a      	ldr	r2, [r7, #4]
 80164aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80164ac:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80164ae:	e04a      	b.n	8016546 <udp_input+0x2ce>
        pbuf_free(p);
 80164b0:	6878      	ldr	r0, [r7, #4]
 80164b2:	f7f9 fe6d 	bl	8010190 <pbuf_free>
        goto end;
 80164b6:	e045      	b.n	8016544 <udp_input+0x2cc>
 80164b8:	08022618 	.word	0x08022618
 80164bc:	080226bc 	.word	0x080226bc
 80164c0:	0802266c 	.word	0x0802266c
 80164c4:	080226d4 	.word	0x080226d4
 80164c8:	20007204 	.word	0x20007204
 80164cc:	20003be8 	.word	0x20003be8
 80164d0:	200073f8 	.word	0x200073f8
 80164d4:	080226f0 	.word	0x080226f0
 80164d8:	20003bf8 	.word	0x20003bf8
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80164dc:	7cfb      	ldrb	r3, [r7, #19]
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d112      	bne.n	8016508 <udp_input+0x290>
 80164e2:	4b1a      	ldr	r3, [pc, #104]	; (801654c <udp_input+0x2d4>)
 80164e4:	695b      	ldr	r3, [r3, #20]
 80164e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80164ea:	2be0      	cmp	r3, #224	; 0xe0
 80164ec:	d00c      	beq.n	8016508 <udp_input+0x290>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80164ee:	4b17      	ldr	r3, [pc, #92]	; (801654c <udp_input+0x2d4>)
 80164f0:	899b      	ldrh	r3, [r3, #12]
 80164f2:	3308      	adds	r3, #8
 80164f4:	b29b      	uxth	r3, r3
 80164f6:	b21b      	sxth	r3, r3
 80164f8:	4619      	mov	r1, r3
 80164fa:	6878      	ldr	r0, [r7, #4]
 80164fc:	f7f9 fe35 	bl	801016a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016500:	2103      	movs	r1, #3
 8016502:	6878      	ldr	r0, [r7, #4]
 8016504:	f003 fc16 	bl	8019d34 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 8016508:	4b11      	ldr	r3, [pc, #68]	; (8016550 <udp_input+0x2d8>)
 801650a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 801650e:	3301      	adds	r3, #1
 8016510:	b29a      	uxth	r2, r3
 8016512:	4b0f      	ldr	r3, [pc, #60]	; (8016550 <udp_input+0x2d8>)
 8016514:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
      UDP_STATS_INC(udp.drop);
 8016518:	4b0d      	ldr	r3, [pc, #52]	; (8016550 <udp_input+0x2d8>)
 801651a:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 801651e:	3301      	adds	r3, #1
 8016520:	b29a      	uxth	r2, r3
 8016522:	4b0b      	ldr	r3, [pc, #44]	; (8016550 <udp_input+0x2d8>)
 8016524:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
      MIB2_STATS_INC(mib2.udpnoports);
 8016528:	4b09      	ldr	r3, [pc, #36]	; (8016550 <udp_input+0x2d8>)
 801652a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 801652e:	3301      	adds	r3, #1
 8016530:	4a07      	ldr	r2, [pc, #28]	; (8016550 <udp_input+0x2d8>)
 8016532:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
      pbuf_free(p);
 8016536:	6878      	ldr	r0, [r7, #4]
 8016538:	f7f9 fe2a 	bl	8010190 <pbuf_free>
  return;
 801653c:	e003      	b.n	8016546 <udp_input+0x2ce>
    pbuf_free(p);
 801653e:	6878      	ldr	r0, [r7, #4]
 8016540:	f7f9 fe26 	bl	8010190 <pbuf_free>
  return;
 8016544:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016546:	372c      	adds	r7, #44	; 0x2c
 8016548:	46bd      	mov	sp, r7
 801654a:	bd90      	pop	{r4, r7, pc}
 801654c:	20003be8 	.word	0x20003be8
 8016550:	20007204 	.word	0x20007204

08016554 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8016554:	b580      	push	{r7, lr}
 8016556:	b088      	sub	sp, #32
 8016558:	af02      	add	r7, sp, #8
 801655a:	60f8      	str	r0, [r7, #12]
 801655c:	60b9      	str	r1, [r7, #8]
 801655e:	607a      	str	r2, [r7, #4]
 8016560:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	2b00      	cmp	r3, #0
 8016566:	d109      	bne.n	801657c <udp_sendto+0x28>
 8016568:	4b27      	ldr	r3, [pc, #156]	; (8016608 <udp_sendto+0xb4>)
 801656a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801656e:	4927      	ldr	r1, [pc, #156]	; (801660c <udp_sendto+0xb8>)
 8016570:	4827      	ldr	r0, [pc, #156]	; (8016610 <udp_sendto+0xbc>)
 8016572:	f006 f8dd 	bl	801c730 <iprintf>
 8016576:	f06f 030f 	mvn.w	r3, #15
 801657a:	e040      	b.n	80165fe <udp_sendto+0xaa>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801657c:	68bb      	ldr	r3, [r7, #8]
 801657e:	2b00      	cmp	r3, #0
 8016580:	d109      	bne.n	8016596 <udp_sendto+0x42>
 8016582:	4b21      	ldr	r3, [pc, #132]	; (8016608 <udp_sendto+0xb4>)
 8016584:	f240 2219 	movw	r2, #537	; 0x219
 8016588:	4922      	ldr	r1, [pc, #136]	; (8016614 <udp_sendto+0xc0>)
 801658a:	4821      	ldr	r0, [pc, #132]	; (8016610 <udp_sendto+0xbc>)
 801658c:	f006 f8d0 	bl	801c730 <iprintf>
 8016590:	f06f 030f 	mvn.w	r3, #15
 8016594:	e033      	b.n	80165fe <udp_sendto+0xaa>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d109      	bne.n	80165b0 <udp_sendto+0x5c>
 801659c:	4b1a      	ldr	r3, [pc, #104]	; (8016608 <udp_sendto+0xb4>)
 801659e:	f240 221a 	movw	r2, #538	; 0x21a
 80165a2:	491d      	ldr	r1, [pc, #116]	; (8016618 <udp_sendto+0xc4>)
 80165a4:	481a      	ldr	r0, [pc, #104]	; (8016610 <udp_sendto+0xbc>)
 80165a6:	f006 f8c3 	bl	801c730 <iprintf>
 80165aa:	f06f 030f 	mvn.w	r3, #15
 80165ae:	e026      	b.n	80165fe <udp_sendto+0xaa>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	7a1b      	ldrb	r3, [r3, #8]
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d006      	beq.n	80165c6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	7a1b      	ldrb	r3, [r3, #8]
 80165bc:	4618      	mov	r0, r3
 80165be:	f7f9 fa87 	bl	800fad0 <netif_get_by_index>
 80165c2:	6178      	str	r0, [r7, #20]
 80165c4:	e003      	b.n	80165ce <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80165c6:	6878      	ldr	r0, [r7, #4]
 80165c8:	f003 fc68 	bl	8019e9c <ip4_route>
 80165cc:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80165ce:	697b      	ldr	r3, [r7, #20]
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d10a      	bne.n	80165ea <udp_sendto+0x96>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
 80165d4:	4b11      	ldr	r3, [pc, #68]	; (801661c <udp_sendto+0xc8>)
 80165d6:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80165da:	3301      	adds	r3, #1
 80165dc:	b29a      	uxth	r2, r3
 80165de:	4b0f      	ldr	r3, [pc, #60]	; (801661c <udp_sendto+0xc8>)
 80165e0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
    return ERR_RTE;
 80165e4:	f06f 0303 	mvn.w	r3, #3
 80165e8:	e009      	b.n	80165fe <udp_sendto+0xaa>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80165ea:	887a      	ldrh	r2, [r7, #2]
 80165ec:	697b      	ldr	r3, [r7, #20]
 80165ee:	9300      	str	r3, [sp, #0]
 80165f0:	4613      	mov	r3, r2
 80165f2:	687a      	ldr	r2, [r7, #4]
 80165f4:	68b9      	ldr	r1, [r7, #8]
 80165f6:	68f8      	ldr	r0, [r7, #12]
 80165f8:	f000 f812 	bl	8016620 <udp_sendto_if>
 80165fc:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80165fe:	4618      	mov	r0, r3
 8016600:	3718      	adds	r7, #24
 8016602:	46bd      	mov	sp, r7
 8016604:	bd80      	pop	{r7, pc}
 8016606:	bf00      	nop
 8016608:	08022618 	.word	0x08022618
 801660c:	0802273c 	.word	0x0802273c
 8016610:	0802266c 	.word	0x0802266c
 8016614:	08022754 	.word	0x08022754
 8016618:	08022770 	.word	0x08022770
 801661c:	20007204 	.word	0x20007204

08016620 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8016620:	b580      	push	{r7, lr}
 8016622:	b088      	sub	sp, #32
 8016624:	af02      	add	r7, sp, #8
 8016626:	60f8      	str	r0, [r7, #12]
 8016628:	60b9      	str	r1, [r7, #8]
 801662a:	607a      	str	r2, [r7, #4]
 801662c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	2b00      	cmp	r3, #0
 8016632:	d109      	bne.n	8016648 <udp_sendto_if+0x28>
 8016634:	4b2e      	ldr	r3, [pc, #184]	; (80166f0 <udp_sendto_if+0xd0>)
 8016636:	f44f 7220 	mov.w	r2, #640	; 0x280
 801663a:	492e      	ldr	r1, [pc, #184]	; (80166f4 <udp_sendto_if+0xd4>)
 801663c:	482e      	ldr	r0, [pc, #184]	; (80166f8 <udp_sendto_if+0xd8>)
 801663e:	f006 f877 	bl	801c730 <iprintf>
 8016642:	f06f 030f 	mvn.w	r3, #15
 8016646:	e04f      	b.n	80166e8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8016648:	68bb      	ldr	r3, [r7, #8]
 801664a:	2b00      	cmp	r3, #0
 801664c:	d109      	bne.n	8016662 <udp_sendto_if+0x42>
 801664e:	4b28      	ldr	r3, [pc, #160]	; (80166f0 <udp_sendto_if+0xd0>)
 8016650:	f240 2281 	movw	r2, #641	; 0x281
 8016654:	4929      	ldr	r1, [pc, #164]	; (80166fc <udp_sendto_if+0xdc>)
 8016656:	4828      	ldr	r0, [pc, #160]	; (80166f8 <udp_sendto_if+0xd8>)
 8016658:	f006 f86a 	bl	801c730 <iprintf>
 801665c:	f06f 030f 	mvn.w	r3, #15
 8016660:	e042      	b.n	80166e8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	2b00      	cmp	r3, #0
 8016666:	d109      	bne.n	801667c <udp_sendto_if+0x5c>
 8016668:	4b21      	ldr	r3, [pc, #132]	; (80166f0 <udp_sendto_if+0xd0>)
 801666a:	f240 2282 	movw	r2, #642	; 0x282
 801666e:	4924      	ldr	r1, [pc, #144]	; (8016700 <udp_sendto_if+0xe0>)
 8016670:	4821      	ldr	r0, [pc, #132]	; (80166f8 <udp_sendto_if+0xd8>)
 8016672:	f006 f85d 	bl	801c730 <iprintf>
 8016676:	f06f 030f 	mvn.w	r3, #15
 801667a:	e035      	b.n	80166e8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801667c:	6a3b      	ldr	r3, [r7, #32]
 801667e:	2b00      	cmp	r3, #0
 8016680:	d109      	bne.n	8016696 <udp_sendto_if+0x76>
 8016682:	4b1b      	ldr	r3, [pc, #108]	; (80166f0 <udp_sendto_if+0xd0>)
 8016684:	f240 2283 	movw	r2, #643	; 0x283
 8016688:	491e      	ldr	r1, [pc, #120]	; (8016704 <udp_sendto_if+0xe4>)
 801668a:	481b      	ldr	r0, [pc, #108]	; (80166f8 <udp_sendto_if+0xd8>)
 801668c:	f006 f850 	bl	801c730 <iprintf>
 8016690:	f06f 030f 	mvn.w	r3, #15
 8016694:	e028      	b.n	80166e8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d009      	beq.n	80166b0 <udp_sendto_if+0x90>
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d005      	beq.n	80166b0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80166a4:	68fb      	ldr	r3, [r7, #12]
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80166ac:	2be0      	cmp	r3, #224	; 0xe0
 80166ae:	d103      	bne.n	80166b8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80166b0:	6a3b      	ldr	r3, [r7, #32]
 80166b2:	3304      	adds	r3, #4
 80166b4:	617b      	str	r3, [r7, #20]
 80166b6:	e00b      	b.n	80166d0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	681a      	ldr	r2, [r3, #0]
 80166bc:	6a3b      	ldr	r3, [r7, #32]
 80166be:	3304      	adds	r3, #4
 80166c0:	681b      	ldr	r3, [r3, #0]
 80166c2:	429a      	cmp	r2, r3
 80166c4:	d002      	beq.n	80166cc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80166c6:	f06f 0303 	mvn.w	r3, #3
 80166ca:	e00d      	b.n	80166e8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80166d0:	887a      	ldrh	r2, [r7, #2]
 80166d2:	697b      	ldr	r3, [r7, #20]
 80166d4:	9301      	str	r3, [sp, #4]
 80166d6:	6a3b      	ldr	r3, [r7, #32]
 80166d8:	9300      	str	r3, [sp, #0]
 80166da:	4613      	mov	r3, r2
 80166dc:	687a      	ldr	r2, [r7, #4]
 80166de:	68b9      	ldr	r1, [r7, #8]
 80166e0:	68f8      	ldr	r0, [r7, #12]
 80166e2:	f000 f811 	bl	8016708 <udp_sendto_if_src>
 80166e6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80166e8:	4618      	mov	r0, r3
 80166ea:	3718      	adds	r7, #24
 80166ec:	46bd      	mov	sp, r7
 80166ee:	bd80      	pop	{r7, pc}
 80166f0:	08022618 	.word	0x08022618
 80166f4:	0802278c 	.word	0x0802278c
 80166f8:	0802266c 	.word	0x0802266c
 80166fc:	080227a8 	.word	0x080227a8
 8016700:	080227c4 	.word	0x080227c4
 8016704:	080227e4 	.word	0x080227e4

08016708 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8016708:	b580      	push	{r7, lr}
 801670a:	b08c      	sub	sp, #48	; 0x30
 801670c:	af04      	add	r7, sp, #16
 801670e:	60f8      	str	r0, [r7, #12]
 8016710:	60b9      	str	r1, [r7, #8]
 8016712:	607a      	str	r2, [r7, #4]
 8016714:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	2b00      	cmp	r3, #0
 801671a:	d109      	bne.n	8016730 <udp_sendto_if_src+0x28>
 801671c:	4b6c      	ldr	r3, [pc, #432]	; (80168d0 <udp_sendto_if_src+0x1c8>)
 801671e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8016722:	496c      	ldr	r1, [pc, #432]	; (80168d4 <udp_sendto_if_src+0x1cc>)
 8016724:	486c      	ldr	r0, [pc, #432]	; (80168d8 <udp_sendto_if_src+0x1d0>)
 8016726:	f006 f803 	bl	801c730 <iprintf>
 801672a:	f06f 030f 	mvn.w	r3, #15
 801672e:	e0cb      	b.n	80168c8 <udp_sendto_if_src+0x1c0>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8016730:	68bb      	ldr	r3, [r7, #8]
 8016732:	2b00      	cmp	r3, #0
 8016734:	d109      	bne.n	801674a <udp_sendto_if_src+0x42>
 8016736:	4b66      	ldr	r3, [pc, #408]	; (80168d0 <udp_sendto_if_src+0x1c8>)
 8016738:	f240 22d2 	movw	r2, #722	; 0x2d2
 801673c:	4967      	ldr	r1, [pc, #412]	; (80168dc <udp_sendto_if_src+0x1d4>)
 801673e:	4866      	ldr	r0, [pc, #408]	; (80168d8 <udp_sendto_if_src+0x1d0>)
 8016740:	f005 fff6 	bl	801c730 <iprintf>
 8016744:	f06f 030f 	mvn.w	r3, #15
 8016748:	e0be      	b.n	80168c8 <udp_sendto_if_src+0x1c0>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	2b00      	cmp	r3, #0
 801674e:	d109      	bne.n	8016764 <udp_sendto_if_src+0x5c>
 8016750:	4b5f      	ldr	r3, [pc, #380]	; (80168d0 <udp_sendto_if_src+0x1c8>)
 8016752:	f240 22d3 	movw	r2, #723	; 0x2d3
 8016756:	4962      	ldr	r1, [pc, #392]	; (80168e0 <udp_sendto_if_src+0x1d8>)
 8016758:	485f      	ldr	r0, [pc, #380]	; (80168d8 <udp_sendto_if_src+0x1d0>)
 801675a:	f005 ffe9 	bl	801c730 <iprintf>
 801675e:	f06f 030f 	mvn.w	r3, #15
 8016762:	e0b1      	b.n	80168c8 <udp_sendto_if_src+0x1c0>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8016764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016766:	2b00      	cmp	r3, #0
 8016768:	d109      	bne.n	801677e <udp_sendto_if_src+0x76>
 801676a:	4b59      	ldr	r3, [pc, #356]	; (80168d0 <udp_sendto_if_src+0x1c8>)
 801676c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8016770:	495c      	ldr	r1, [pc, #368]	; (80168e4 <udp_sendto_if_src+0x1dc>)
 8016772:	4859      	ldr	r0, [pc, #356]	; (80168d8 <udp_sendto_if_src+0x1d0>)
 8016774:	f005 ffdc 	bl	801c730 <iprintf>
 8016778:	f06f 030f 	mvn.w	r3, #15
 801677c:	e0a4      	b.n	80168c8 <udp_sendto_if_src+0x1c0>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801677e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016780:	2b00      	cmp	r3, #0
 8016782:	d109      	bne.n	8016798 <udp_sendto_if_src+0x90>
 8016784:	4b52      	ldr	r3, [pc, #328]	; (80168d0 <udp_sendto_if_src+0x1c8>)
 8016786:	f240 22d5 	movw	r2, #725	; 0x2d5
 801678a:	4957      	ldr	r1, [pc, #348]	; (80168e8 <udp_sendto_if_src+0x1e0>)
 801678c:	4852      	ldr	r0, [pc, #328]	; (80168d8 <udp_sendto_if_src+0x1d0>)
 801678e:	f005 ffcf 	bl	801c730 <iprintf>
 8016792:	f06f 030f 	mvn.w	r3, #15
 8016796:	e097      	b.n	80168c8 <udp_sendto_if_src+0x1c0>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	8a5b      	ldrh	r3, [r3, #18]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d10f      	bne.n	80167c0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80167a0:	68f9      	ldr	r1, [r7, #12]
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	8a5b      	ldrh	r3, [r3, #18]
 80167a6:	461a      	mov	r2, r3
 80167a8:	68f8      	ldr	r0, [r7, #12]
 80167aa:	f000 f8a3 	bl	80168f4 <udp_bind>
 80167ae:	4603      	mov	r3, r0
 80167b0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80167b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d002      	beq.n	80167c0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80167ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80167be:	e083      	b.n	80168c8 <udp_sendto_if_src+0x1c0>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80167c0:	68bb      	ldr	r3, [r7, #8]
 80167c2:	891b      	ldrh	r3, [r3, #8]
 80167c4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80167c8:	4293      	cmp	r3, r2
 80167ca:	d902      	bls.n	80167d2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80167cc:	f04f 33ff 	mov.w	r3, #4294967295
 80167d0:	e07a      	b.n	80168c8 <udp_sendto_if_src+0x1c0>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80167d2:	2108      	movs	r1, #8
 80167d4:	68b8      	ldr	r0, [r7, #8]
 80167d6:	f7f9 fc45 	bl	8010064 <pbuf_add_header>
 80167da:	4603      	mov	r3, r0
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d015      	beq.n	801680c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80167e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80167e4:	2108      	movs	r1, #8
 80167e6:	2022      	movs	r0, #34	; 0x22
 80167e8:	f7f9 f9ee 	bl	800fbc8 <pbuf_alloc>
 80167ec:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80167ee:	69fb      	ldr	r3, [r7, #28]
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d102      	bne.n	80167fa <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80167f4:	f04f 33ff 	mov.w	r3, #4294967295
 80167f8:	e066      	b.n	80168c8 <udp_sendto_if_src+0x1c0>
    }
    if (p->tot_len != 0) {
 80167fa:	68bb      	ldr	r3, [r7, #8]
 80167fc:	891b      	ldrh	r3, [r3, #8]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d006      	beq.n	8016810 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8016802:	68b9      	ldr	r1, [r7, #8]
 8016804:	69f8      	ldr	r0, [r7, #28]
 8016806:	f7f9 fddb 	bl	80103c0 <pbuf_chain>
 801680a:	e001      	b.n	8016810 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801680c:	68bb      	ldr	r3, [r7, #8]
 801680e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8016810:	69fb      	ldr	r3, [r7, #28]
 8016812:	895b      	ldrh	r3, [r3, #10]
 8016814:	2b07      	cmp	r3, #7
 8016816:	d806      	bhi.n	8016826 <udp_sendto_if_src+0x11e>
 8016818:	4b2d      	ldr	r3, [pc, #180]	; (80168d0 <udp_sendto_if_src+0x1c8>)
 801681a:	f240 320d 	movw	r2, #781	; 0x30d
 801681e:	4933      	ldr	r1, [pc, #204]	; (80168ec <udp_sendto_if_src+0x1e4>)
 8016820:	482d      	ldr	r0, [pc, #180]	; (80168d8 <udp_sendto_if_src+0x1d0>)
 8016822:	f005 ff85 	bl	801c730 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8016826:	69fb      	ldr	r3, [r7, #28]
 8016828:	685b      	ldr	r3, [r3, #4]
 801682a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	8a5b      	ldrh	r3, [r3, #18]
 8016830:	4618      	mov	r0, r3
 8016832:	f7f7 fe17 	bl	800e464 <lwip_htons>
 8016836:	4603      	mov	r3, r0
 8016838:	461a      	mov	r2, r3
 801683a:	697b      	ldr	r3, [r7, #20]
 801683c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801683e:	887b      	ldrh	r3, [r7, #2]
 8016840:	4618      	mov	r0, r3
 8016842:	f7f7 fe0f 	bl	800e464 <lwip_htons>
 8016846:	4603      	mov	r3, r0
 8016848:	461a      	mov	r2, r3
 801684a:	697b      	ldr	r3, [r7, #20]
 801684c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801684e:	697b      	ldr	r3, [r7, #20]
 8016850:	2200      	movs	r2, #0
 8016852:	719a      	strb	r2, [r3, #6]
 8016854:	2200      	movs	r2, #0
 8016856:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8016858:	69fb      	ldr	r3, [r7, #28]
 801685a:	891b      	ldrh	r3, [r3, #8]
 801685c:	4618      	mov	r0, r3
 801685e:	f7f7 fe01 	bl	800e464 <lwip_htons>
 8016862:	4603      	mov	r3, r0
 8016864:	461a      	mov	r2, r3
 8016866:	697b      	ldr	r3, [r7, #20]
 8016868:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801686a:	2311      	movs	r3, #17
 801686c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	7adb      	ldrb	r3, [r3, #11]
 8016872:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	7a9b      	ldrb	r3, [r3, #10]
 8016878:	7cb9      	ldrb	r1, [r7, #18]
 801687a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801687c:	9202      	str	r2, [sp, #8]
 801687e:	7cfa      	ldrb	r2, [r7, #19]
 8016880:	9201      	str	r2, [sp, #4]
 8016882:	9300      	str	r3, [sp, #0]
 8016884:	460b      	mov	r3, r1
 8016886:	687a      	ldr	r2, [r7, #4]
 8016888:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801688a:	69f8      	ldr	r0, [r7, #28]
 801688c:	f003 fdb8 	bl	801a400 <ip4_output_if_src>
 8016890:	4603      	mov	r3, r0
 8016892:	76fb      	strb	r3, [r7, #27]
  NETIF_RESET_HINTS(netif);

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);
 8016894:	4b16      	ldr	r3, [pc, #88]	; (80168f0 <udp_sendto_if_src+0x1e8>)
 8016896:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 801689a:	3301      	adds	r3, #1
 801689c:	4a14      	ldr	r2, [pc, #80]	; (80168f0 <udp_sendto_if_src+0x1e8>)
 801689e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80168a2:	69fa      	ldr	r2, [r7, #28]
 80168a4:	68bb      	ldr	r3, [r7, #8]
 80168a6:	429a      	cmp	r2, r3
 80168a8:	d004      	beq.n	80168b4 <udp_sendto_if_src+0x1ac>
    /* free the header pbuf */
    pbuf_free(q);
 80168aa:	69f8      	ldr	r0, [r7, #28]
 80168ac:	f7f9 fc70 	bl	8010190 <pbuf_free>
    q = NULL;
 80168b0:	2300      	movs	r3, #0
 80168b2:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 80168b4:	4b0e      	ldr	r3, [pc, #56]	; (80168f0 <udp_sendto_if_src+0x1e8>)
 80168b6:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 80168ba:	3301      	adds	r3, #1
 80168bc:	b29a      	uxth	r2, r3
 80168be:	4b0c      	ldr	r3, [pc, #48]	; (80168f0 <udp_sendto_if_src+0x1e8>)
 80168c0:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
  return err;
 80168c4:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80168c8:	4618      	mov	r0, r3
 80168ca:	3720      	adds	r7, #32
 80168cc:	46bd      	mov	sp, r7
 80168ce:	bd80      	pop	{r7, pc}
 80168d0:	08022618 	.word	0x08022618
 80168d4:	08022804 	.word	0x08022804
 80168d8:	0802266c 	.word	0x0802266c
 80168dc:	08022824 	.word	0x08022824
 80168e0:	08022844 	.word	0x08022844
 80168e4:	08022868 	.word	0x08022868
 80168e8:	0802288c 	.word	0x0802288c
 80168ec:	080228b0 	.word	0x080228b0
 80168f0:	20007204 	.word	0x20007204

080168f4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80168f4:	b580      	push	{r7, lr}
 80168f6:	b086      	sub	sp, #24
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	60f8      	str	r0, [r7, #12]
 80168fc:	60b9      	str	r1, [r7, #8]
 80168fe:	4613      	mov	r3, r2
 8016900:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016902:	68bb      	ldr	r3, [r7, #8]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d101      	bne.n	801690c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8016908:	4b39      	ldr	r3, [pc, #228]	; (80169f0 <udp_bind+0xfc>)
 801690a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801690c:	68fb      	ldr	r3, [r7, #12]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d109      	bne.n	8016926 <udp_bind+0x32>
 8016912:	4b38      	ldr	r3, [pc, #224]	; (80169f4 <udp_bind+0x100>)
 8016914:	f240 32b7 	movw	r2, #951	; 0x3b7
 8016918:	4937      	ldr	r1, [pc, #220]	; (80169f8 <udp_bind+0x104>)
 801691a:	4838      	ldr	r0, [pc, #224]	; (80169fc <udp_bind+0x108>)
 801691c:	f005 ff08 	bl	801c730 <iprintf>
 8016920:	f06f 030f 	mvn.w	r3, #15
 8016924:	e060      	b.n	80169e8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8016926:	2300      	movs	r3, #0
 8016928:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801692a:	4b35      	ldr	r3, [pc, #212]	; (8016a00 <udp_bind+0x10c>)
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	617b      	str	r3, [r7, #20]
 8016930:	e009      	b.n	8016946 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8016932:	68fa      	ldr	r2, [r7, #12]
 8016934:	697b      	ldr	r3, [r7, #20]
 8016936:	429a      	cmp	r2, r3
 8016938:	d102      	bne.n	8016940 <udp_bind+0x4c>
      rebind = 1;
 801693a:	2301      	movs	r3, #1
 801693c:	74fb      	strb	r3, [r7, #19]
      break;
 801693e:	e005      	b.n	801694c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016940:	697b      	ldr	r3, [r7, #20]
 8016942:	68db      	ldr	r3, [r3, #12]
 8016944:	617b      	str	r3, [r7, #20]
 8016946:	697b      	ldr	r3, [r7, #20]
 8016948:	2b00      	cmp	r3, #0
 801694a:	d1f2      	bne.n	8016932 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801694c:	88fb      	ldrh	r3, [r7, #6]
 801694e:	2b00      	cmp	r3, #0
 8016950:	d109      	bne.n	8016966 <udp_bind+0x72>
    port = udp_new_port();
 8016952:	f7ff fbf5 	bl	8016140 <udp_new_port>
 8016956:	4603      	mov	r3, r0
 8016958:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801695a:	88fb      	ldrh	r3, [r7, #6]
 801695c:	2b00      	cmp	r3, #0
 801695e:	d12c      	bne.n	80169ba <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8016960:	f06f 0307 	mvn.w	r3, #7
 8016964:	e040      	b.n	80169e8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016966:	4b26      	ldr	r3, [pc, #152]	; (8016a00 <udp_bind+0x10c>)
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	617b      	str	r3, [r7, #20]
 801696c:	e022      	b.n	80169b4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801696e:	68fa      	ldr	r2, [r7, #12]
 8016970:	697b      	ldr	r3, [r7, #20]
 8016972:	429a      	cmp	r2, r3
 8016974:	d01b      	beq.n	80169ae <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8016976:	697b      	ldr	r3, [r7, #20]
 8016978:	8a5b      	ldrh	r3, [r3, #18]
 801697a:	88fa      	ldrh	r2, [r7, #6]
 801697c:	429a      	cmp	r2, r3
 801697e:	d116      	bne.n	80169ae <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016980:	697b      	ldr	r3, [r7, #20]
 8016982:	681a      	ldr	r2, [r3, #0]
 8016984:	68bb      	ldr	r3, [r7, #8]
 8016986:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8016988:	429a      	cmp	r2, r3
 801698a:	d00d      	beq.n	80169a8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801698c:	68bb      	ldr	r3, [r7, #8]
 801698e:	2b00      	cmp	r3, #0
 8016990:	d00a      	beq.n	80169a8 <udp_bind+0xb4>
 8016992:	68bb      	ldr	r3, [r7, #8]
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d006      	beq.n	80169a8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801699a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801699c:	2b00      	cmp	r3, #0
 801699e:	d003      	beq.n	80169a8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80169a0:	697b      	ldr	r3, [r7, #20]
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d102      	bne.n	80169ae <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80169a8:	f06f 0307 	mvn.w	r3, #7
 80169ac:	e01c      	b.n	80169e8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80169ae:	697b      	ldr	r3, [r7, #20]
 80169b0:	68db      	ldr	r3, [r3, #12]
 80169b2:	617b      	str	r3, [r7, #20]
 80169b4:	697b      	ldr	r3, [r7, #20]
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d1d9      	bne.n	801696e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80169ba:	68bb      	ldr	r3, [r7, #8]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d002      	beq.n	80169c6 <udp_bind+0xd2>
 80169c0:	68bb      	ldr	r3, [r7, #8]
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	e000      	b.n	80169c8 <udp_bind+0xd4>
 80169c6:	2300      	movs	r3, #0
 80169c8:	68fa      	ldr	r2, [r7, #12]
 80169ca:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	88fa      	ldrh	r2, [r7, #6]
 80169d0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80169d2:	7cfb      	ldrb	r3, [r7, #19]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	d106      	bne.n	80169e6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80169d8:	4b09      	ldr	r3, [pc, #36]	; (8016a00 <udp_bind+0x10c>)
 80169da:	681a      	ldr	r2, [r3, #0]
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80169e0:	4a07      	ldr	r2, [pc, #28]	; (8016a00 <udp_bind+0x10c>)
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80169e6:	2300      	movs	r3, #0
}
 80169e8:	4618      	mov	r0, r3
 80169ea:	3718      	adds	r7, #24
 80169ec:	46bd      	mov	sp, r7
 80169ee:	bd80      	pop	{r7, pc}
 80169f0:	08024538 	.word	0x08024538
 80169f4:	08022618 	.word	0x08022618
 80169f8:	080228e0 	.word	0x080228e0
 80169fc:	0802266c 	.word	0x0802266c
 8016a00:	200073f8 	.word	0x200073f8

08016a04 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016a04:	b580      	push	{r7, lr}
 8016a06:	b086      	sub	sp, #24
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	60f8      	str	r0, [r7, #12]
 8016a0c:	60b9      	str	r1, [r7, #8]
 8016a0e:	4613      	mov	r3, r2
 8016a10:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d109      	bne.n	8016a2c <udp_connect+0x28>
 8016a18:	4b2c      	ldr	r3, [pc, #176]	; (8016acc <udp_connect+0xc8>)
 8016a1a:	f240 4235 	movw	r2, #1077	; 0x435
 8016a1e:	492c      	ldr	r1, [pc, #176]	; (8016ad0 <udp_connect+0xcc>)
 8016a20:	482c      	ldr	r0, [pc, #176]	; (8016ad4 <udp_connect+0xd0>)
 8016a22:	f005 fe85 	bl	801c730 <iprintf>
 8016a26:	f06f 030f 	mvn.w	r3, #15
 8016a2a:	e04b      	b.n	8016ac4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8016a2c:	68bb      	ldr	r3, [r7, #8]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d109      	bne.n	8016a46 <udp_connect+0x42>
 8016a32:	4b26      	ldr	r3, [pc, #152]	; (8016acc <udp_connect+0xc8>)
 8016a34:	f240 4236 	movw	r2, #1078	; 0x436
 8016a38:	4927      	ldr	r1, [pc, #156]	; (8016ad8 <udp_connect+0xd4>)
 8016a3a:	4826      	ldr	r0, [pc, #152]	; (8016ad4 <udp_connect+0xd0>)
 8016a3c:	f005 fe78 	bl	801c730 <iprintf>
 8016a40:	f06f 030f 	mvn.w	r3, #15
 8016a44:	e03e      	b.n	8016ac4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8016a46:	68fb      	ldr	r3, [r7, #12]
 8016a48:	8a5b      	ldrh	r3, [r3, #18]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d10f      	bne.n	8016a6e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016a4e:	68f9      	ldr	r1, [r7, #12]
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	8a5b      	ldrh	r3, [r3, #18]
 8016a54:	461a      	mov	r2, r3
 8016a56:	68f8      	ldr	r0, [r7, #12]
 8016a58:	f7ff ff4c 	bl	80168f4 <udp_bind>
 8016a5c:	4603      	mov	r3, r0
 8016a5e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8016a60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d002      	beq.n	8016a6e <udp_connect+0x6a>
      return err;
 8016a68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016a6c:	e02a      	b.n	8016ac4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8016a6e:	68bb      	ldr	r3, [r7, #8]
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d002      	beq.n	8016a7a <udp_connect+0x76>
 8016a74:	68bb      	ldr	r3, [r7, #8]
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	e000      	b.n	8016a7c <udp_connect+0x78>
 8016a7a:	2300      	movs	r3, #0
 8016a7c:	68fa      	ldr	r2, [r7, #12]
 8016a7e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	88fa      	ldrh	r2, [r7, #6]
 8016a84:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	7c1b      	ldrb	r3, [r3, #16]
 8016a8a:	f043 0304 	orr.w	r3, r3, #4
 8016a8e:	b2da      	uxtb	r2, r3
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016a94:	4b11      	ldr	r3, [pc, #68]	; (8016adc <udp_connect+0xd8>)
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	617b      	str	r3, [r7, #20]
 8016a9a:	e008      	b.n	8016aae <udp_connect+0xaa>
    if (pcb == ipcb) {
 8016a9c:	68fa      	ldr	r2, [r7, #12]
 8016a9e:	697b      	ldr	r3, [r7, #20]
 8016aa0:	429a      	cmp	r2, r3
 8016aa2:	d101      	bne.n	8016aa8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8016aa4:	2300      	movs	r3, #0
 8016aa6:	e00d      	b.n	8016ac4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016aa8:	697b      	ldr	r3, [r7, #20]
 8016aaa:	68db      	ldr	r3, [r3, #12]
 8016aac:	617b      	str	r3, [r7, #20]
 8016aae:	697b      	ldr	r3, [r7, #20]
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d1f3      	bne.n	8016a9c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8016ab4:	4b09      	ldr	r3, [pc, #36]	; (8016adc <udp_connect+0xd8>)
 8016ab6:	681a      	ldr	r2, [r3, #0]
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8016abc:	4a07      	ldr	r2, [pc, #28]	; (8016adc <udp_connect+0xd8>)
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8016ac2:	2300      	movs	r3, #0
}
 8016ac4:	4618      	mov	r0, r3
 8016ac6:	3718      	adds	r7, #24
 8016ac8:	46bd      	mov	sp, r7
 8016aca:	bd80      	pop	{r7, pc}
 8016acc:	08022618 	.word	0x08022618
 8016ad0:	080228f8 	.word	0x080228f8
 8016ad4:	0802266c 	.word	0x0802266c
 8016ad8:	08022914 	.word	0x08022914
 8016adc:	200073f8 	.word	0x200073f8

08016ae0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8016ae0:	b580      	push	{r7, lr}
 8016ae2:	b084      	sub	sp, #16
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	60f8      	str	r0, [r7, #12]
 8016ae8:	60b9      	str	r1, [r7, #8]
 8016aea:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d107      	bne.n	8016b02 <udp_recv+0x22>
 8016af2:	4b08      	ldr	r3, [pc, #32]	; (8016b14 <udp_recv+0x34>)
 8016af4:	f240 428a 	movw	r2, #1162	; 0x48a
 8016af8:	4907      	ldr	r1, [pc, #28]	; (8016b18 <udp_recv+0x38>)
 8016afa:	4808      	ldr	r0, [pc, #32]	; (8016b1c <udp_recv+0x3c>)
 8016afc:	f005 fe18 	bl	801c730 <iprintf>
 8016b00:	e005      	b.n	8016b0e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	68ba      	ldr	r2, [r7, #8]
 8016b06:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8016b08:	68fb      	ldr	r3, [r7, #12]
 8016b0a:	687a      	ldr	r2, [r7, #4]
 8016b0c:	61da      	str	r2, [r3, #28]
}
 8016b0e:	3710      	adds	r7, #16
 8016b10:	46bd      	mov	sp, r7
 8016b12:	bd80      	pop	{r7, pc}
 8016b14:	08022618 	.word	0x08022618
 8016b18:	0802294c 	.word	0x0802294c
 8016b1c:	0802266c 	.word	0x0802266c

08016b20 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8016b20:	b580      	push	{r7, lr}
 8016b22:	b084      	sub	sp, #16
 8016b24:	af00      	add	r7, sp, #0
 8016b26:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d107      	bne.n	8016b3e <udp_remove+0x1e>
 8016b2e:	4b19      	ldr	r3, [pc, #100]	; (8016b94 <udp_remove+0x74>)
 8016b30:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8016b34:	4918      	ldr	r1, [pc, #96]	; (8016b98 <udp_remove+0x78>)
 8016b36:	4819      	ldr	r0, [pc, #100]	; (8016b9c <udp_remove+0x7c>)
 8016b38:	f005 fdfa 	bl	801c730 <iprintf>
 8016b3c:	e026      	b.n	8016b8c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8016b3e:	4b18      	ldr	r3, [pc, #96]	; (8016ba0 <udp_remove+0x80>)
 8016b40:	681b      	ldr	r3, [r3, #0]
 8016b42:	687a      	ldr	r2, [r7, #4]
 8016b44:	429a      	cmp	r2, r3
 8016b46:	d105      	bne.n	8016b54 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8016b48:	4b15      	ldr	r3, [pc, #84]	; (8016ba0 <udp_remove+0x80>)
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	68db      	ldr	r3, [r3, #12]
 8016b4e:	4a14      	ldr	r2, [pc, #80]	; (8016ba0 <udp_remove+0x80>)
 8016b50:	6013      	str	r3, [r2, #0]
 8016b52:	e017      	b.n	8016b84 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016b54:	4b12      	ldr	r3, [pc, #72]	; (8016ba0 <udp_remove+0x80>)
 8016b56:	681b      	ldr	r3, [r3, #0]
 8016b58:	60fb      	str	r3, [r7, #12]
 8016b5a:	e010      	b.n	8016b7e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8016b5c:	68fb      	ldr	r3, [r7, #12]
 8016b5e:	68db      	ldr	r3, [r3, #12]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d009      	beq.n	8016b78 <udp_remove+0x58>
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	68db      	ldr	r3, [r3, #12]
 8016b68:	687a      	ldr	r2, [r7, #4]
 8016b6a:	429a      	cmp	r2, r3
 8016b6c:	d104      	bne.n	8016b78 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	68da      	ldr	r2, [r3, #12]
 8016b72:	68fb      	ldr	r3, [r7, #12]
 8016b74:	60da      	str	r2, [r3, #12]
        break;
 8016b76:	e005      	b.n	8016b84 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	68db      	ldr	r3, [r3, #12]
 8016b7c:	60fb      	str	r3, [r7, #12]
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d1eb      	bne.n	8016b5c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8016b84:	6879      	ldr	r1, [r7, #4]
 8016b86:	2000      	movs	r0, #0
 8016b88:	f7f8 fcd0 	bl	800f52c <memp_free>
}
 8016b8c:	3710      	adds	r7, #16
 8016b8e:	46bd      	mov	sp, r7
 8016b90:	bd80      	pop	{r7, pc}
 8016b92:	bf00      	nop
 8016b94:	08022618 	.word	0x08022618
 8016b98:	08022964 	.word	0x08022964
 8016b9c:	0802266c 	.word	0x0802266c
 8016ba0:	200073f8 	.word	0x200073f8

08016ba4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8016ba4:	b580      	push	{r7, lr}
 8016ba6:	b082      	sub	sp, #8
 8016ba8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8016baa:	2000      	movs	r0, #0
 8016bac:	f7f8 fc6c 	bl	800f488 <memp_malloc>
 8016bb0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d007      	beq.n	8016bc8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8016bb8:	2220      	movs	r2, #32
 8016bba:	2100      	movs	r1, #0
 8016bbc:	6878      	ldr	r0, [r7, #4]
 8016bbe:	f004 fe71 	bl	801b8a4 <memset>
    pcb->ttl = UDP_TTL;
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	22ff      	movs	r2, #255	; 0xff
 8016bc6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8016bc8:	687b      	ldr	r3, [r7, #4]
}
 8016bca:	4618      	mov	r0, r3
 8016bcc:	3708      	adds	r7, #8
 8016bce:	46bd      	mov	sp, r7
 8016bd0:	bd80      	pop	{r7, pc}

08016bd2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8016bd2:	b580      	push	{r7, lr}
 8016bd4:	b084      	sub	sp, #16
 8016bd6:	af00      	add	r7, sp, #0
 8016bd8:	4603      	mov	r3, r0
 8016bda:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8016bdc:	f7ff ffe2 	bl	8016ba4 <udp_new>
 8016be0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8016be2:	68fb      	ldr	r3, [r7, #12]
}
 8016be4:	4618      	mov	r0, r3
 8016be6:	3710      	adds	r7, #16
 8016be8:	46bd      	mov	sp, r7
 8016bea:	bd80      	pop	{r7, pc}

08016bec <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016bec:	b480      	push	{r7}
 8016bee:	b085      	sub	sp, #20
 8016bf0:	af00      	add	r7, sp, #0
 8016bf2:	6078      	str	r0, [r7, #4]
 8016bf4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d01e      	beq.n	8016c3a <udp_netif_ip_addr_changed+0x4e>
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d01a      	beq.n	8016c3a <udp_netif_ip_addr_changed+0x4e>
 8016c04:	683b      	ldr	r3, [r7, #0]
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d017      	beq.n	8016c3a <udp_netif_ip_addr_changed+0x4e>
 8016c0a:	683b      	ldr	r3, [r7, #0]
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d013      	beq.n	8016c3a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016c12:	4b0d      	ldr	r3, [pc, #52]	; (8016c48 <udp_netif_ip_addr_changed+0x5c>)
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	60fb      	str	r3, [r7, #12]
 8016c18:	e00c      	b.n	8016c34 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	681a      	ldr	r2, [r3, #0]
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	429a      	cmp	r2, r3
 8016c24:	d103      	bne.n	8016c2e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016c26:	683b      	ldr	r3, [r7, #0]
 8016c28:	681a      	ldr	r2, [r3, #0]
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	68db      	ldr	r3, [r3, #12]
 8016c32:	60fb      	str	r3, [r7, #12]
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d1ef      	bne.n	8016c1a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016c3a:	bf00      	nop
 8016c3c:	3714      	adds	r7, #20
 8016c3e:	46bd      	mov	sp, r7
 8016c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c44:	4770      	bx	lr
 8016c46:	bf00      	nop
 8016c48:	200073f8 	.word	0x200073f8

08016c4c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8016c4c:	b580      	push	{r7, lr}
 8016c4e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8016c50:	4b20      	ldr	r3, [pc, #128]	; (8016cd4 <dhcp_inc_pcb_refcount+0x88>)
 8016c52:	781b      	ldrb	r3, [r3, #0]
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d133      	bne.n	8016cc0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8016c58:	4b1f      	ldr	r3, [pc, #124]	; (8016cd8 <dhcp_inc_pcb_refcount+0x8c>)
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d005      	beq.n	8016c6c <dhcp_inc_pcb_refcount+0x20>
 8016c60:	4b1e      	ldr	r3, [pc, #120]	; (8016cdc <dhcp_inc_pcb_refcount+0x90>)
 8016c62:	22e5      	movs	r2, #229	; 0xe5
 8016c64:	491e      	ldr	r1, [pc, #120]	; (8016ce0 <dhcp_inc_pcb_refcount+0x94>)
 8016c66:	481f      	ldr	r0, [pc, #124]	; (8016ce4 <dhcp_inc_pcb_refcount+0x98>)
 8016c68:	f005 fd62 	bl	801c730 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8016c6c:	f7ff ff9a 	bl	8016ba4 <udp_new>
 8016c70:	4603      	mov	r3, r0
 8016c72:	4a19      	ldr	r2, [pc, #100]	; (8016cd8 <dhcp_inc_pcb_refcount+0x8c>)
 8016c74:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8016c76:	4b18      	ldr	r3, [pc, #96]	; (8016cd8 <dhcp_inc_pcb_refcount+0x8c>)
 8016c78:	681b      	ldr	r3, [r3, #0]
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d102      	bne.n	8016c84 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8016c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8016c82:	e024      	b.n	8016cce <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8016c84:	4b14      	ldr	r3, [pc, #80]	; (8016cd8 <dhcp_inc_pcb_refcount+0x8c>)
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	7a5a      	ldrb	r2, [r3, #9]
 8016c8a:	4b13      	ldr	r3, [pc, #76]	; (8016cd8 <dhcp_inc_pcb_refcount+0x8c>)
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	f042 0220 	orr.w	r2, r2, #32
 8016c92:	b2d2      	uxtb	r2, r2
 8016c94:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8016c96:	4b10      	ldr	r3, [pc, #64]	; (8016cd8 <dhcp_inc_pcb_refcount+0x8c>)
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	2244      	movs	r2, #68	; 0x44
 8016c9c:	4912      	ldr	r1, [pc, #72]	; (8016ce8 <dhcp_inc_pcb_refcount+0x9c>)
 8016c9e:	4618      	mov	r0, r3
 8016ca0:	f7ff fe28 	bl	80168f4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8016ca4:	4b0c      	ldr	r3, [pc, #48]	; (8016cd8 <dhcp_inc_pcb_refcount+0x8c>)
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	2243      	movs	r2, #67	; 0x43
 8016caa:	490f      	ldr	r1, [pc, #60]	; (8016ce8 <dhcp_inc_pcb_refcount+0x9c>)
 8016cac:	4618      	mov	r0, r3
 8016cae:	f7ff fea9 	bl	8016a04 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8016cb2:	4b09      	ldr	r3, [pc, #36]	; (8016cd8 <dhcp_inc_pcb_refcount+0x8c>)
 8016cb4:	681b      	ldr	r3, [r3, #0]
 8016cb6:	2200      	movs	r2, #0
 8016cb8:	490c      	ldr	r1, [pc, #48]	; (8016cec <dhcp_inc_pcb_refcount+0xa0>)
 8016cba:	4618      	mov	r0, r3
 8016cbc:	f7ff ff10 	bl	8016ae0 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8016cc0:	4b04      	ldr	r3, [pc, #16]	; (8016cd4 <dhcp_inc_pcb_refcount+0x88>)
 8016cc2:	781b      	ldrb	r3, [r3, #0]
 8016cc4:	3301      	adds	r3, #1
 8016cc6:	b2da      	uxtb	r2, r3
 8016cc8:	4b02      	ldr	r3, [pc, #8]	; (8016cd4 <dhcp_inc_pcb_refcount+0x88>)
 8016cca:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8016ccc:	2300      	movs	r3, #0
}
 8016cce:	4618      	mov	r0, r3
 8016cd0:	bd80      	pop	{r7, pc}
 8016cd2:	bf00      	nop
 8016cd4:	20007434 	.word	0x20007434
 8016cd8:	20007430 	.word	0x20007430
 8016cdc:	0802297c 	.word	0x0802297c
 8016ce0:	080229b4 	.word	0x080229b4
 8016ce4:	080229dc 	.word	0x080229dc
 8016ce8:	08024538 	.word	0x08024538
 8016cec:	080185ad 	.word	0x080185ad

08016cf0 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8016cf0:	b580      	push	{r7, lr}
 8016cf2:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8016cf4:	4b0e      	ldr	r3, [pc, #56]	; (8016d30 <dhcp_dec_pcb_refcount+0x40>)
 8016cf6:	781b      	ldrb	r3, [r3, #0]
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d105      	bne.n	8016d08 <dhcp_dec_pcb_refcount+0x18>
 8016cfc:	4b0d      	ldr	r3, [pc, #52]	; (8016d34 <dhcp_dec_pcb_refcount+0x44>)
 8016cfe:	22ff      	movs	r2, #255	; 0xff
 8016d00:	490d      	ldr	r1, [pc, #52]	; (8016d38 <dhcp_dec_pcb_refcount+0x48>)
 8016d02:	480e      	ldr	r0, [pc, #56]	; (8016d3c <dhcp_dec_pcb_refcount+0x4c>)
 8016d04:	f005 fd14 	bl	801c730 <iprintf>
  dhcp_pcb_refcount--;
 8016d08:	4b09      	ldr	r3, [pc, #36]	; (8016d30 <dhcp_dec_pcb_refcount+0x40>)
 8016d0a:	781b      	ldrb	r3, [r3, #0]
 8016d0c:	3b01      	subs	r3, #1
 8016d0e:	b2da      	uxtb	r2, r3
 8016d10:	4b07      	ldr	r3, [pc, #28]	; (8016d30 <dhcp_dec_pcb_refcount+0x40>)
 8016d12:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8016d14:	4b06      	ldr	r3, [pc, #24]	; (8016d30 <dhcp_dec_pcb_refcount+0x40>)
 8016d16:	781b      	ldrb	r3, [r3, #0]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d107      	bne.n	8016d2c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8016d1c:	4b08      	ldr	r3, [pc, #32]	; (8016d40 <dhcp_dec_pcb_refcount+0x50>)
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	4618      	mov	r0, r3
 8016d22:	f7ff fefd 	bl	8016b20 <udp_remove>
    dhcp_pcb = NULL;
 8016d26:	4b06      	ldr	r3, [pc, #24]	; (8016d40 <dhcp_dec_pcb_refcount+0x50>)
 8016d28:	2200      	movs	r2, #0
 8016d2a:	601a      	str	r2, [r3, #0]
  }
}
 8016d2c:	bf00      	nop
 8016d2e:	bd80      	pop	{r7, pc}
 8016d30:	20007434 	.word	0x20007434
 8016d34:	0802297c 	.word	0x0802297c
 8016d38:	08022a04 	.word	0x08022a04
 8016d3c:	080229dc 	.word	0x080229dc
 8016d40:	20007430 	.word	0x20007430

08016d44 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8016d44:	b580      	push	{r7, lr}
 8016d46:	b084      	sub	sp, #16
 8016d48:	af00      	add	r7, sp, #0
 8016d4a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d50:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8016d52:	210c      	movs	r1, #12
 8016d54:	68f8      	ldr	r0, [r7, #12]
 8016d56:	f001 f83b 	bl	8017dd0 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8016d5a:	4b06      	ldr	r3, [pc, #24]	; (8016d74 <dhcp_handle_nak+0x30>)
 8016d5c:	4a05      	ldr	r2, [pc, #20]	; (8016d74 <dhcp_handle_nak+0x30>)
 8016d5e:	4905      	ldr	r1, [pc, #20]	; (8016d74 <dhcp_handle_nak+0x30>)
 8016d60:	6878      	ldr	r0, [r7, #4]
 8016d62:	f7f8 fd85 	bl	800f870 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8016d66:	6878      	ldr	r0, [r7, #4]
 8016d68:	f000 fc2e 	bl	80175c8 <dhcp_discover>
}
 8016d6c:	bf00      	nop
 8016d6e:	3710      	adds	r7, #16
 8016d70:	46bd      	mov	sp, r7
 8016d72:	bd80      	pop	{r7, pc}
 8016d74:	08024538 	.word	0x08024538

08016d78 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8016d78:	b580      	push	{r7, lr}
 8016d7a:	b084      	sub	sp, #16
 8016d7c:	af00      	add	r7, sp, #0
 8016d7e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d84:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8016d86:	2108      	movs	r1, #8
 8016d88:	68f8      	ldr	r0, [r7, #12]
 8016d8a:	f001 f821 	bl	8017dd0 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	331c      	adds	r3, #28
 8016d92:	2200      	movs	r2, #0
 8016d94:	4619      	mov	r1, r3
 8016d96:	6878      	ldr	r0, [r7, #4]
 8016d98:	f002 fbdc 	bl	8019554 <etharp_query>
 8016d9c:	4603      	mov	r3, r0
 8016d9e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	799b      	ldrb	r3, [r3, #6]
 8016da4:	2bff      	cmp	r3, #255	; 0xff
 8016da6:	d005      	beq.n	8016db4 <dhcp_check+0x3c>
    dhcp->tries++;
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	799b      	ldrb	r3, [r3, #6]
 8016dac:	3301      	adds	r3, #1
 8016dae:	b2da      	uxtb	r2, r3
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8016db4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8016db8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016dba:	893b      	ldrh	r3, [r7, #8]
 8016dbc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016dc0:	4a06      	ldr	r2, [pc, #24]	; (8016ddc <dhcp_check+0x64>)
 8016dc2:	fb82 1203 	smull	r1, r2, r2, r3
 8016dc6:	1152      	asrs	r2, r2, #5
 8016dc8:	17db      	asrs	r3, r3, #31
 8016dca:	1ad3      	subs	r3, r2, r3
 8016dcc:	b29a      	uxth	r2, r3
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8016dd2:	bf00      	nop
 8016dd4:	3710      	adds	r7, #16
 8016dd6:	46bd      	mov	sp, r7
 8016dd8:	bd80      	pop	{r7, pc}
 8016dda:	bf00      	nop
 8016ddc:	10624dd3 	.word	0x10624dd3

08016de0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8016de0:	b580      	push	{r7, lr}
 8016de2:	b084      	sub	sp, #16
 8016de4:	af00      	add	r7, sp, #0
 8016de6:	6078      	str	r0, [r7, #4]
 8016de8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016dee:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8016df0:	4b0c      	ldr	r3, [pc, #48]	; (8016e24 <dhcp_handle_offer+0x44>)
 8016df2:	789b      	ldrb	r3, [r3, #2]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d011      	beq.n	8016e1c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	2200      	movs	r2, #0
 8016dfc:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8016dfe:	4b0a      	ldr	r3, [pc, #40]	; (8016e28 <dhcp_handle_offer+0x48>)
 8016e00:	689b      	ldr	r3, [r3, #8]
 8016e02:	4618      	mov	r0, r3
 8016e04:	f7f7 fb43 	bl	800e48e <lwip_htonl>
 8016e08:	4602      	mov	r2, r0
 8016e0a:	68fb      	ldr	r3, [r7, #12]
 8016e0c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8016e0e:	683b      	ldr	r3, [r7, #0]
 8016e10:	691a      	ldr	r2, [r3, #16]
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8016e16:	6878      	ldr	r0, [r7, #4]
 8016e18:	f000 f808 	bl	8016e2c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8016e1c:	bf00      	nop
 8016e1e:	3710      	adds	r7, #16
 8016e20:	46bd      	mov	sp, r7
 8016e22:	bd80      	pop	{r7, pc}
 8016e24:	20007424 	.word	0x20007424
 8016e28:	200073fc 	.word	0x200073fc

08016e2c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8016e2c:	b5b0      	push	{r4, r5, r7, lr}
 8016e2e:	b08a      	sub	sp, #40	; 0x28
 8016e30:	af02      	add	r7, sp, #8
 8016e32:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d109      	bne.n	8016e4e <dhcp_select+0x22>
 8016e3a:	4b71      	ldr	r3, [pc, #452]	; (8017000 <dhcp_select+0x1d4>)
 8016e3c:	f240 1277 	movw	r2, #375	; 0x177
 8016e40:	4970      	ldr	r1, [pc, #448]	; (8017004 <dhcp_select+0x1d8>)
 8016e42:	4871      	ldr	r0, [pc, #452]	; (8017008 <dhcp_select+0x1dc>)
 8016e44:	f005 fc74 	bl	801c730 <iprintf>
 8016e48:	f06f 030f 	mvn.w	r3, #15
 8016e4c:	e0d3      	b.n	8016ff6 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e52:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8016e54:	69bb      	ldr	r3, [r7, #24]
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d109      	bne.n	8016e6e <dhcp_select+0x42>
 8016e5a:	4b69      	ldr	r3, [pc, #420]	; (8017000 <dhcp_select+0x1d4>)
 8016e5c:	f240 1279 	movw	r2, #377	; 0x179
 8016e60:	496a      	ldr	r1, [pc, #424]	; (801700c <dhcp_select+0x1e0>)
 8016e62:	4869      	ldr	r0, [pc, #420]	; (8017008 <dhcp_select+0x1dc>)
 8016e64:	f005 fc64 	bl	801c730 <iprintf>
 8016e68:	f06f 0305 	mvn.w	r3, #5
 8016e6c:	e0c3      	b.n	8016ff6 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8016e6e:	2101      	movs	r1, #1
 8016e70:	69b8      	ldr	r0, [r7, #24]
 8016e72:	f000 ffad 	bl	8017dd0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016e76:	f107 030c 	add.w	r3, r7, #12
 8016e7a:	2203      	movs	r2, #3
 8016e7c:	69b9      	ldr	r1, [r7, #24]
 8016e7e:	6878      	ldr	r0, [r7, #4]
 8016e80:	f001 fc62 	bl	8018748 <dhcp_create_msg>
 8016e84:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016e86:	697b      	ldr	r3, [r7, #20]
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	f000 8085 	beq.w	8016f98 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016e8e:	697b      	ldr	r3, [r7, #20]
 8016e90:	685b      	ldr	r3, [r3, #4]
 8016e92:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016e94:	89b8      	ldrh	r0, [r7, #12]
 8016e96:	693b      	ldr	r3, [r7, #16]
 8016e98:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016e9c:	2302      	movs	r3, #2
 8016e9e:	2239      	movs	r2, #57	; 0x39
 8016ea0:	f000 ffb0 	bl	8017e04 <dhcp_option>
 8016ea4:	4603      	mov	r3, r0
 8016ea6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016ea8:	89b8      	ldrh	r0, [r7, #12]
 8016eaa:	693b      	ldr	r3, [r7, #16]
 8016eac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016eb4:	461a      	mov	r2, r3
 8016eb6:	f000 ffff 	bl	8017eb8 <dhcp_option_short>
 8016eba:	4603      	mov	r3, r0
 8016ebc:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016ebe:	89b8      	ldrh	r0, [r7, #12]
 8016ec0:	693b      	ldr	r3, [r7, #16]
 8016ec2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016ec6:	2304      	movs	r3, #4
 8016ec8:	2232      	movs	r2, #50	; 0x32
 8016eca:	f000 ff9b 	bl	8017e04 <dhcp_option>
 8016ece:	4603      	mov	r3, r0
 8016ed0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8016ed2:	89bc      	ldrh	r4, [r7, #12]
 8016ed4:	693b      	ldr	r3, [r7, #16]
 8016ed6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016eda:	69bb      	ldr	r3, [r7, #24]
 8016edc:	69db      	ldr	r3, [r3, #28]
 8016ede:	4618      	mov	r0, r3
 8016ee0:	f7f7 fad5 	bl	800e48e <lwip_htonl>
 8016ee4:	4603      	mov	r3, r0
 8016ee6:	461a      	mov	r2, r3
 8016ee8:	4629      	mov	r1, r5
 8016eea:	4620      	mov	r0, r4
 8016eec:	f001 f816 	bl	8017f1c <dhcp_option_long>
 8016ef0:	4603      	mov	r3, r0
 8016ef2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8016ef4:	89b8      	ldrh	r0, [r7, #12]
 8016ef6:	693b      	ldr	r3, [r7, #16]
 8016ef8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016efc:	2304      	movs	r3, #4
 8016efe:	2236      	movs	r2, #54	; 0x36
 8016f00:	f000 ff80 	bl	8017e04 <dhcp_option>
 8016f04:	4603      	mov	r3, r0
 8016f06:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8016f08:	89bc      	ldrh	r4, [r7, #12]
 8016f0a:	693b      	ldr	r3, [r7, #16]
 8016f0c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016f10:	69bb      	ldr	r3, [r7, #24]
 8016f12:	699b      	ldr	r3, [r3, #24]
 8016f14:	4618      	mov	r0, r3
 8016f16:	f7f7 faba 	bl	800e48e <lwip_htonl>
 8016f1a:	4603      	mov	r3, r0
 8016f1c:	461a      	mov	r2, r3
 8016f1e:	4629      	mov	r1, r5
 8016f20:	4620      	mov	r0, r4
 8016f22:	f000 fffb 	bl	8017f1c <dhcp_option_long>
 8016f26:	4603      	mov	r3, r0
 8016f28:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016f2a:	89b8      	ldrh	r0, [r7, #12]
 8016f2c:	693b      	ldr	r3, [r7, #16]
 8016f2e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016f32:	2304      	movs	r3, #4
 8016f34:	2237      	movs	r2, #55	; 0x37
 8016f36:	f000 ff65 	bl	8017e04 <dhcp_option>
 8016f3a:	4603      	mov	r3, r0
 8016f3c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016f3e:	2300      	movs	r3, #0
 8016f40:	77bb      	strb	r3, [r7, #30]
 8016f42:	e00e      	b.n	8016f62 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016f44:	89b8      	ldrh	r0, [r7, #12]
 8016f46:	693b      	ldr	r3, [r7, #16]
 8016f48:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016f4c:	7fbb      	ldrb	r3, [r7, #30]
 8016f4e:	4a30      	ldr	r2, [pc, #192]	; (8017010 <dhcp_select+0x1e4>)
 8016f50:	5cd3      	ldrb	r3, [r2, r3]
 8016f52:	461a      	mov	r2, r3
 8016f54:	f000 ff8a 	bl	8017e6c <dhcp_option_byte>
 8016f58:	4603      	mov	r3, r0
 8016f5a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016f5c:	7fbb      	ldrb	r3, [r7, #30]
 8016f5e:	3301      	adds	r3, #1
 8016f60:	77bb      	strb	r3, [r7, #30]
 8016f62:	7fbb      	ldrb	r3, [r7, #30]
 8016f64:	2b03      	cmp	r3, #3
 8016f66:	d9ed      	bls.n	8016f44 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016f68:	89b8      	ldrh	r0, [r7, #12]
 8016f6a:	693b      	ldr	r3, [r7, #16]
 8016f6c:	33f0      	adds	r3, #240	; 0xf0
 8016f6e:	697a      	ldr	r2, [r7, #20]
 8016f70:	4619      	mov	r1, r3
 8016f72:	f001 fcbf 	bl	80188f4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8016f76:	4b27      	ldr	r3, [pc, #156]	; (8017014 <dhcp_select+0x1e8>)
 8016f78:	6818      	ldr	r0, [r3, #0]
 8016f7a:	4b27      	ldr	r3, [pc, #156]	; (8017018 <dhcp_select+0x1ec>)
 8016f7c:	9301      	str	r3, [sp, #4]
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	9300      	str	r3, [sp, #0]
 8016f82:	2343      	movs	r3, #67	; 0x43
 8016f84:	4a25      	ldr	r2, [pc, #148]	; (801701c <dhcp_select+0x1f0>)
 8016f86:	6979      	ldr	r1, [r7, #20]
 8016f88:	f7ff fbbe 	bl	8016708 <udp_sendto_if_src>
 8016f8c:	4603      	mov	r3, r0
 8016f8e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016f90:	6978      	ldr	r0, [r7, #20]
 8016f92:	f7f9 f8fd 	bl	8010190 <pbuf_free>
 8016f96:	e001      	b.n	8016f9c <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016f98:	23ff      	movs	r3, #255	; 0xff
 8016f9a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016f9c:	69bb      	ldr	r3, [r7, #24]
 8016f9e:	799b      	ldrb	r3, [r3, #6]
 8016fa0:	2bff      	cmp	r3, #255	; 0xff
 8016fa2:	d005      	beq.n	8016fb0 <dhcp_select+0x184>
    dhcp->tries++;
 8016fa4:	69bb      	ldr	r3, [r7, #24]
 8016fa6:	799b      	ldrb	r3, [r3, #6]
 8016fa8:	3301      	adds	r3, #1
 8016faa:	b2da      	uxtb	r2, r3
 8016fac:	69bb      	ldr	r3, [r7, #24]
 8016fae:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8016fb0:	69bb      	ldr	r3, [r7, #24]
 8016fb2:	799b      	ldrb	r3, [r3, #6]
 8016fb4:	2b05      	cmp	r3, #5
 8016fb6:	d80d      	bhi.n	8016fd4 <dhcp_select+0x1a8>
 8016fb8:	69bb      	ldr	r3, [r7, #24]
 8016fba:	799b      	ldrb	r3, [r3, #6]
 8016fbc:	461a      	mov	r2, r3
 8016fbe:	2301      	movs	r3, #1
 8016fc0:	4093      	lsls	r3, r2
 8016fc2:	b29b      	uxth	r3, r3
 8016fc4:	461a      	mov	r2, r3
 8016fc6:	0152      	lsls	r2, r2, #5
 8016fc8:	1ad2      	subs	r2, r2, r3
 8016fca:	0092      	lsls	r2, r2, #2
 8016fcc:	4413      	add	r3, r2
 8016fce:	00db      	lsls	r3, r3, #3
 8016fd0:	b29b      	uxth	r3, r3
 8016fd2:	e001      	b.n	8016fd8 <dhcp_select+0x1ac>
 8016fd4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8016fd8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016fda:	89fb      	ldrh	r3, [r7, #14]
 8016fdc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016fe0:	4a0f      	ldr	r2, [pc, #60]	; (8017020 <dhcp_select+0x1f4>)
 8016fe2:	fb82 1203 	smull	r1, r2, r2, r3
 8016fe6:	1152      	asrs	r2, r2, #5
 8016fe8:	17db      	asrs	r3, r3, #31
 8016fea:	1ad3      	subs	r3, r2, r3
 8016fec:	b29a      	uxth	r2, r3
 8016fee:	69bb      	ldr	r3, [r7, #24]
 8016ff0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016ff2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016ff6:	4618      	mov	r0, r3
 8016ff8:	3720      	adds	r7, #32
 8016ffa:	46bd      	mov	sp, r7
 8016ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8016ffe:	bf00      	nop
 8017000:	0802297c 	.word	0x0802297c
 8017004:	08022a28 	.word	0x08022a28
 8017008:	080229dc 	.word	0x080229dc
 801700c:	08022a44 	.word	0x08022a44
 8017010:	20000064 	.word	0x20000064
 8017014:	20007430 	.word	0x20007430
 8017018:	08024538 	.word	0x08024538
 801701c:	0802453c 	.word	0x0802453c
 8017020:	10624dd3 	.word	0x10624dd3

08017024 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8017024:	b580      	push	{r7, lr}
 8017026:	b082      	sub	sp, #8
 8017028:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801702a:	4b27      	ldr	r3, [pc, #156]	; (80170c8 <dhcp_coarse_tmr+0xa4>)
 801702c:	681b      	ldr	r3, [r3, #0]
 801702e:	607b      	str	r3, [r7, #4]
 8017030:	e042      	b.n	80170b8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017036:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8017038:	683b      	ldr	r3, [r7, #0]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d039      	beq.n	80170b2 <dhcp_coarse_tmr+0x8e>
 801703e:	683b      	ldr	r3, [r7, #0]
 8017040:	795b      	ldrb	r3, [r3, #5]
 8017042:	2b00      	cmp	r3, #0
 8017044:	d035      	beq.n	80170b2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8017046:	683b      	ldr	r3, [r7, #0]
 8017048:	8a9b      	ldrh	r3, [r3, #20]
 801704a:	2b00      	cmp	r3, #0
 801704c:	d012      	beq.n	8017074 <dhcp_coarse_tmr+0x50>
 801704e:	683b      	ldr	r3, [r7, #0]
 8017050:	8a5b      	ldrh	r3, [r3, #18]
 8017052:	3301      	adds	r3, #1
 8017054:	b29a      	uxth	r2, r3
 8017056:	683b      	ldr	r3, [r7, #0]
 8017058:	825a      	strh	r2, [r3, #18]
 801705a:	683b      	ldr	r3, [r7, #0]
 801705c:	8a5a      	ldrh	r2, [r3, #18]
 801705e:	683b      	ldr	r3, [r7, #0]
 8017060:	8a9b      	ldrh	r3, [r3, #20]
 8017062:	429a      	cmp	r2, r3
 8017064:	d106      	bne.n	8017074 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8017066:	6878      	ldr	r0, [r7, #4]
 8017068:	f000 fe18 	bl	8017c9c <dhcp_release_and_stop>
        dhcp_start(netif);
 801706c:	6878      	ldr	r0, [r7, #4]
 801706e:	f000 f98b 	bl	8017388 <dhcp_start>
 8017072:	e01e      	b.n	80170b2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8017074:	683b      	ldr	r3, [r7, #0]
 8017076:	8a1b      	ldrh	r3, [r3, #16]
 8017078:	2b00      	cmp	r3, #0
 801707a:	d00b      	beq.n	8017094 <dhcp_coarse_tmr+0x70>
 801707c:	683b      	ldr	r3, [r7, #0]
 801707e:	8a1b      	ldrh	r3, [r3, #16]
 8017080:	1e5a      	subs	r2, r3, #1
 8017082:	b291      	uxth	r1, r2
 8017084:	683a      	ldr	r2, [r7, #0]
 8017086:	8211      	strh	r1, [r2, #16]
 8017088:	2b01      	cmp	r3, #1
 801708a:	d103      	bne.n	8017094 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801708c:	6878      	ldr	r0, [r7, #4]
 801708e:	f000 f8c7 	bl	8017220 <dhcp_t2_timeout>
 8017092:	e00e      	b.n	80170b2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8017094:	683b      	ldr	r3, [r7, #0]
 8017096:	89db      	ldrh	r3, [r3, #14]
 8017098:	2b00      	cmp	r3, #0
 801709a:	d00a      	beq.n	80170b2 <dhcp_coarse_tmr+0x8e>
 801709c:	683b      	ldr	r3, [r7, #0]
 801709e:	89db      	ldrh	r3, [r3, #14]
 80170a0:	1e5a      	subs	r2, r3, #1
 80170a2:	b291      	uxth	r1, r2
 80170a4:	683a      	ldr	r2, [r7, #0]
 80170a6:	81d1      	strh	r1, [r2, #14]
 80170a8:	2b01      	cmp	r3, #1
 80170aa:	d102      	bne.n	80170b2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80170ac:	6878      	ldr	r0, [r7, #4]
 80170ae:	f000 f888 	bl	80171c2 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	681b      	ldr	r3, [r3, #0]
 80170b6:	607b      	str	r3, [r7, #4]
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d1b9      	bne.n	8017032 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80170be:	bf00      	nop
 80170c0:	bf00      	nop
 80170c2:	3708      	adds	r7, #8
 80170c4:	46bd      	mov	sp, r7
 80170c6:	bd80      	pop	{r7, pc}
 80170c8:	200071f8 	.word	0x200071f8

080170cc <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80170cc:	b580      	push	{r7, lr}
 80170ce:	b082      	sub	sp, #8
 80170d0:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80170d2:	4b16      	ldr	r3, [pc, #88]	; (801712c <dhcp_fine_tmr+0x60>)
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	607b      	str	r3, [r7, #4]
 80170d8:	e020      	b.n	801711c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170de:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80170e0:	683b      	ldr	r3, [r7, #0]
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d017      	beq.n	8017116 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80170e6:	683b      	ldr	r3, [r7, #0]
 80170e8:	891b      	ldrh	r3, [r3, #8]
 80170ea:	2b01      	cmp	r3, #1
 80170ec:	d906      	bls.n	80170fc <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80170ee:	683b      	ldr	r3, [r7, #0]
 80170f0:	891b      	ldrh	r3, [r3, #8]
 80170f2:	3b01      	subs	r3, #1
 80170f4:	b29a      	uxth	r2, r3
 80170f6:	683b      	ldr	r3, [r7, #0]
 80170f8:	811a      	strh	r2, [r3, #8]
 80170fa:	e00c      	b.n	8017116 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80170fc:	683b      	ldr	r3, [r7, #0]
 80170fe:	891b      	ldrh	r3, [r3, #8]
 8017100:	2b01      	cmp	r3, #1
 8017102:	d108      	bne.n	8017116 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8017104:	683b      	ldr	r3, [r7, #0]
 8017106:	891b      	ldrh	r3, [r3, #8]
 8017108:	3b01      	subs	r3, #1
 801710a:	b29a      	uxth	r2, r3
 801710c:	683b      	ldr	r3, [r7, #0]
 801710e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8017110:	6878      	ldr	r0, [r7, #4]
 8017112:	f000 f80d 	bl	8017130 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	681b      	ldr	r3, [r3, #0]
 801711a:	607b      	str	r3, [r7, #4]
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	2b00      	cmp	r3, #0
 8017120:	d1db      	bne.n	80170da <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8017122:	bf00      	nop
 8017124:	bf00      	nop
 8017126:	3708      	adds	r7, #8
 8017128:	46bd      	mov	sp, r7
 801712a:	bd80      	pop	{r7, pc}
 801712c:	200071f8 	.word	0x200071f8

08017130 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8017130:	b580      	push	{r7, lr}
 8017132:	b084      	sub	sp, #16
 8017134:	af00      	add	r7, sp, #0
 8017136:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801713c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	795b      	ldrb	r3, [r3, #5]
 8017142:	2b0c      	cmp	r3, #12
 8017144:	d003      	beq.n	801714e <dhcp_timeout+0x1e>
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	795b      	ldrb	r3, [r3, #5]
 801714a:	2b06      	cmp	r3, #6
 801714c:	d103      	bne.n	8017156 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801714e:	6878      	ldr	r0, [r7, #4]
 8017150:	f000 fa3a 	bl	80175c8 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8017154:	e031      	b.n	80171ba <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	795b      	ldrb	r3, [r3, #5]
 801715a:	2b01      	cmp	r3, #1
 801715c:	d10e      	bne.n	801717c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801715e:	68fb      	ldr	r3, [r7, #12]
 8017160:	799b      	ldrb	r3, [r3, #6]
 8017162:	2b05      	cmp	r3, #5
 8017164:	d803      	bhi.n	801716e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8017166:	6878      	ldr	r0, [r7, #4]
 8017168:	f7ff fe60 	bl	8016e2c <dhcp_select>
}
 801716c:	e025      	b.n	80171ba <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801716e:	6878      	ldr	r0, [r7, #4]
 8017170:	f000 fd94 	bl	8017c9c <dhcp_release_and_stop>
      dhcp_start(netif);
 8017174:	6878      	ldr	r0, [r7, #4]
 8017176:	f000 f907 	bl	8017388 <dhcp_start>
}
 801717a:	e01e      	b.n	80171ba <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	795b      	ldrb	r3, [r3, #5]
 8017180:	2b08      	cmp	r3, #8
 8017182:	d10b      	bne.n	801719c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	799b      	ldrb	r3, [r3, #6]
 8017188:	2b01      	cmp	r3, #1
 801718a:	d803      	bhi.n	8017194 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801718c:	6878      	ldr	r0, [r7, #4]
 801718e:	f7ff fdf3 	bl	8016d78 <dhcp_check>
}
 8017192:	e012      	b.n	80171ba <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8017194:	6878      	ldr	r0, [r7, #4]
 8017196:	f000 fab9 	bl	801770c <dhcp_bind>
}
 801719a:	e00e      	b.n	80171ba <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	795b      	ldrb	r3, [r3, #5]
 80171a0:	2b03      	cmp	r3, #3
 80171a2:	d10a      	bne.n	80171ba <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	799b      	ldrb	r3, [r3, #6]
 80171a8:	2b01      	cmp	r3, #1
 80171aa:	d803      	bhi.n	80171b4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80171ac:	6878      	ldr	r0, [r7, #4]
 80171ae:	f000 fcbf 	bl	8017b30 <dhcp_reboot>
}
 80171b2:	e002      	b.n	80171ba <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80171b4:	6878      	ldr	r0, [r7, #4]
 80171b6:	f000 fa07 	bl	80175c8 <dhcp_discover>
}
 80171ba:	bf00      	nop
 80171bc:	3710      	adds	r7, #16
 80171be:	46bd      	mov	sp, r7
 80171c0:	bd80      	pop	{r7, pc}

080171c2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80171c2:	b580      	push	{r7, lr}
 80171c4:	b084      	sub	sp, #16
 80171c6:	af00      	add	r7, sp, #0
 80171c8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171ce:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	795b      	ldrb	r3, [r3, #5]
 80171d4:	2b01      	cmp	r3, #1
 80171d6:	d007      	beq.n	80171e8 <dhcp_t1_timeout+0x26>
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	795b      	ldrb	r3, [r3, #5]
 80171dc:	2b0a      	cmp	r3, #10
 80171de:	d003      	beq.n	80171e8 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80171e4:	2b05      	cmp	r3, #5
 80171e6:	d117      	bne.n	8017218 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80171e8:	6878      	ldr	r0, [r7, #4]
 80171ea:	f000 fb69 	bl	80178c0 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	899b      	ldrh	r3, [r3, #12]
 80171f2:	461a      	mov	r2, r3
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	8a5b      	ldrh	r3, [r3, #18]
 80171f8:	1ad3      	subs	r3, r2, r3
 80171fa:	2b01      	cmp	r3, #1
 80171fc:	dd0c      	ble.n	8017218 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	899b      	ldrh	r3, [r3, #12]
 8017202:	461a      	mov	r2, r3
 8017204:	68fb      	ldr	r3, [r7, #12]
 8017206:	8a5b      	ldrh	r3, [r3, #18]
 8017208:	1ad3      	subs	r3, r2, r3
 801720a:	2b00      	cmp	r3, #0
 801720c:	da00      	bge.n	8017210 <dhcp_t1_timeout+0x4e>
 801720e:	3301      	adds	r3, #1
 8017210:	105b      	asrs	r3, r3, #1
 8017212:	b29a      	uxth	r2, r3
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8017218:	bf00      	nop
 801721a:	3710      	adds	r7, #16
 801721c:	46bd      	mov	sp, r7
 801721e:	bd80      	pop	{r7, pc}

08017220 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8017220:	b580      	push	{r7, lr}
 8017222:	b084      	sub	sp, #16
 8017224:	af00      	add	r7, sp, #0
 8017226:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801722c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	795b      	ldrb	r3, [r3, #5]
 8017232:	2b01      	cmp	r3, #1
 8017234:	d00b      	beq.n	801724e <dhcp_t2_timeout+0x2e>
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	795b      	ldrb	r3, [r3, #5]
 801723a:	2b0a      	cmp	r3, #10
 801723c:	d007      	beq.n	801724e <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8017242:	2b05      	cmp	r3, #5
 8017244:	d003      	beq.n	801724e <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8017246:	68fb      	ldr	r3, [r7, #12]
 8017248:	795b      	ldrb	r3, [r3, #5]
 801724a:	2b04      	cmp	r3, #4
 801724c:	d117      	bne.n	801727e <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801724e:	6878      	ldr	r0, [r7, #4]
 8017250:	f000 fbd2 	bl	80179f8 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	8a9b      	ldrh	r3, [r3, #20]
 8017258:	461a      	mov	r2, r3
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	8a5b      	ldrh	r3, [r3, #18]
 801725e:	1ad3      	subs	r3, r2, r3
 8017260:	2b01      	cmp	r3, #1
 8017262:	dd0c      	ble.n	801727e <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	8a9b      	ldrh	r3, [r3, #20]
 8017268:	461a      	mov	r2, r3
 801726a:	68fb      	ldr	r3, [r7, #12]
 801726c:	8a5b      	ldrh	r3, [r3, #18]
 801726e:	1ad3      	subs	r3, r2, r3
 8017270:	2b00      	cmp	r3, #0
 8017272:	da00      	bge.n	8017276 <dhcp_t2_timeout+0x56>
 8017274:	3301      	adds	r3, #1
 8017276:	105b      	asrs	r3, r3, #1
 8017278:	b29a      	uxth	r2, r3
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801727e:	bf00      	nop
 8017280:	3710      	adds	r7, #16
 8017282:	46bd      	mov	sp, r7
 8017284:	bd80      	pop	{r7, pc}
	...

08017288 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8017288:	b580      	push	{r7, lr}
 801728a:	b086      	sub	sp, #24
 801728c:	af00      	add	r7, sp, #0
 801728e:	6078      	str	r0, [r7, #4]
 8017290:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017296:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8017298:	693b      	ldr	r3, [r7, #16]
 801729a:	2200      	movs	r2, #0
 801729c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801729e:	693b      	ldr	r3, [r7, #16]
 80172a0:	2200      	movs	r2, #0
 80172a2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80172a4:	4b36      	ldr	r3, [pc, #216]	; (8017380 <dhcp_handle_ack+0xf8>)
 80172a6:	78db      	ldrb	r3, [r3, #3]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d003      	beq.n	80172b4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80172ac:	4b35      	ldr	r3, [pc, #212]	; (8017384 <dhcp_handle_ack+0xfc>)
 80172ae:	68da      	ldr	r2, [r3, #12]
 80172b0:	693b      	ldr	r3, [r7, #16]
 80172b2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80172b4:	4b32      	ldr	r3, [pc, #200]	; (8017380 <dhcp_handle_ack+0xf8>)
 80172b6:	791b      	ldrb	r3, [r3, #4]
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d004      	beq.n	80172c6 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80172bc:	4b31      	ldr	r3, [pc, #196]	; (8017384 <dhcp_handle_ack+0xfc>)
 80172be:	691a      	ldr	r2, [r3, #16]
 80172c0:	693b      	ldr	r3, [r7, #16]
 80172c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80172c4:	e004      	b.n	80172d0 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80172c6:	693b      	ldr	r3, [r7, #16]
 80172c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80172ca:	085a      	lsrs	r2, r3, #1
 80172cc:	693b      	ldr	r3, [r7, #16]
 80172ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80172d0:	4b2b      	ldr	r3, [pc, #172]	; (8017380 <dhcp_handle_ack+0xf8>)
 80172d2:	795b      	ldrb	r3, [r3, #5]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d004      	beq.n	80172e2 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80172d8:	4b2a      	ldr	r3, [pc, #168]	; (8017384 <dhcp_handle_ack+0xfc>)
 80172da:	695a      	ldr	r2, [r3, #20]
 80172dc:	693b      	ldr	r3, [r7, #16]
 80172de:	631a      	str	r2, [r3, #48]	; 0x30
 80172e0:	e007      	b.n	80172f2 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80172e2:	693b      	ldr	r3, [r7, #16]
 80172e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80172e6:	4613      	mov	r3, r2
 80172e8:	00db      	lsls	r3, r3, #3
 80172ea:	1a9b      	subs	r3, r3, r2
 80172ec:	08da      	lsrs	r2, r3, #3
 80172ee:	693b      	ldr	r3, [r7, #16]
 80172f0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80172f2:	683b      	ldr	r3, [r7, #0]
 80172f4:	691a      	ldr	r2, [r3, #16]
 80172f6:	693b      	ldr	r3, [r7, #16]
 80172f8:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80172fa:	4b21      	ldr	r3, [pc, #132]	; (8017380 <dhcp_handle_ack+0xf8>)
 80172fc:	799b      	ldrb	r3, [r3, #6]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d00b      	beq.n	801731a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8017302:	4b20      	ldr	r3, [pc, #128]	; (8017384 <dhcp_handle_ack+0xfc>)
 8017304:	699b      	ldr	r3, [r3, #24]
 8017306:	4618      	mov	r0, r3
 8017308:	f7f7 f8c1 	bl	800e48e <lwip_htonl>
 801730c:	4602      	mov	r2, r0
 801730e:	693b      	ldr	r3, [r7, #16]
 8017310:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8017312:	693b      	ldr	r3, [r7, #16]
 8017314:	2201      	movs	r2, #1
 8017316:	71da      	strb	r2, [r3, #7]
 8017318:	e002      	b.n	8017320 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801731a:	693b      	ldr	r3, [r7, #16]
 801731c:	2200      	movs	r2, #0
 801731e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8017320:	4b17      	ldr	r3, [pc, #92]	; (8017380 <dhcp_handle_ack+0xf8>)
 8017322:	79db      	ldrb	r3, [r3, #7]
 8017324:	2b00      	cmp	r3, #0
 8017326:	d007      	beq.n	8017338 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8017328:	4b16      	ldr	r3, [pc, #88]	; (8017384 <dhcp_handle_ack+0xfc>)
 801732a:	69db      	ldr	r3, [r3, #28]
 801732c:	4618      	mov	r0, r3
 801732e:	f7f7 f8ae 	bl	800e48e <lwip_htonl>
 8017332:	4602      	mov	r2, r0
 8017334:	693b      	ldr	r3, [r7, #16]
 8017336:	625a      	str	r2, [r3, #36]	; 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8017338:	2300      	movs	r3, #0
 801733a:	75fb      	strb	r3, [r7, #23]
 801733c:	e013      	b.n	8017366 <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801733e:	7dfb      	ldrb	r3, [r7, #23]
 8017340:	3308      	adds	r3, #8
 8017342:	4a10      	ldr	r2, [pc, #64]	; (8017384 <dhcp_handle_ack+0xfc>)
 8017344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017348:	4618      	mov	r0, r3
 801734a:	f7f7 f8a0 	bl	800e48e <lwip_htonl>
 801734e:	4603      	mov	r3, r0
 8017350:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 8017352:	f107 020c 	add.w	r2, r7, #12
 8017356:	7dfb      	ldrb	r3, [r7, #23]
 8017358:	4611      	mov	r1, r2
 801735a:	4618      	mov	r0, r3
 801735c:	f7f7 f8b8 	bl	800e4d0 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8017360:	7dfb      	ldrb	r3, [r7, #23]
 8017362:	3301      	adds	r3, #1
 8017364:	75fb      	strb	r3, [r7, #23]
 8017366:	7dfb      	ldrb	r3, [r7, #23]
 8017368:	2b01      	cmp	r3, #1
 801736a:	d805      	bhi.n	8017378 <dhcp_handle_ack+0xf0>
 801736c:	7dfb      	ldrb	r3, [r7, #23]
 801736e:	3308      	adds	r3, #8
 8017370:	4a03      	ldr	r2, [pc, #12]	; (8017380 <dhcp_handle_ack+0xf8>)
 8017372:	5cd3      	ldrb	r3, [r2, r3]
 8017374:	2b00      	cmp	r3, #0
 8017376:	d1e2      	bne.n	801733e <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8017378:	bf00      	nop
 801737a:	3718      	adds	r7, #24
 801737c:	46bd      	mov	sp, r7
 801737e:	bd80      	pop	{r7, pc}
 8017380:	20007424 	.word	0x20007424
 8017384:	200073fc 	.word	0x200073fc

08017388 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8017388:	b580      	push	{r7, lr}
 801738a:	b084      	sub	sp, #16
 801738c:	af00      	add	r7, sp, #0
 801738e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	2b00      	cmp	r3, #0
 8017394:	d109      	bne.n	80173aa <dhcp_start+0x22>
 8017396:	4b37      	ldr	r3, [pc, #220]	; (8017474 <dhcp_start+0xec>)
 8017398:	f240 22e7 	movw	r2, #743	; 0x2e7
 801739c:	4936      	ldr	r1, [pc, #216]	; (8017478 <dhcp_start+0xf0>)
 801739e:	4837      	ldr	r0, [pc, #220]	; (801747c <dhcp_start+0xf4>)
 80173a0:	f005 f9c6 	bl	801c730 <iprintf>
 80173a4:	f06f 030f 	mvn.w	r3, #15
 80173a8:	e060      	b.n	801746c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80173b0:	f003 0301 	and.w	r3, r3, #1
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d109      	bne.n	80173cc <dhcp_start+0x44>
 80173b8:	4b2e      	ldr	r3, [pc, #184]	; (8017474 <dhcp_start+0xec>)
 80173ba:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80173be:	4930      	ldr	r1, [pc, #192]	; (8017480 <dhcp_start+0xf8>)
 80173c0:	482e      	ldr	r0, [pc, #184]	; (801747c <dhcp_start+0xf4>)
 80173c2:	f005 f9b5 	bl	801c730 <iprintf>
 80173c6:	f06f 030f 	mvn.w	r3, #15
 80173ca:	e04f      	b.n	801746c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173d0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80173d6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80173da:	d202      	bcs.n	80173e2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80173dc:	f04f 33ff 	mov.w	r3, #4294967295
 80173e0:	e044      	b.n	801746c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80173e2:	68fb      	ldr	r3, [r7, #12]
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d10d      	bne.n	8017404 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80173e8:	2034      	movs	r0, #52	; 0x34
 80173ea:	f7f7 fe71 	bl	800f0d0 <mem_malloc>
 80173ee:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d102      	bne.n	80173fc <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80173f6:	f04f 33ff 	mov.w	r3, #4294967295
 80173fa:	e037      	b.n	801746c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	68fa      	ldr	r2, [r7, #12]
 8017400:	625a      	str	r2, [r3, #36]	; 0x24
 8017402:	e005      	b.n	8017410 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8017404:	68fb      	ldr	r3, [r7, #12]
 8017406:	791b      	ldrb	r3, [r3, #4]
 8017408:	2b00      	cmp	r3, #0
 801740a:	d001      	beq.n	8017410 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801740c:	f7ff fc70 	bl	8016cf0 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8017410:	2234      	movs	r2, #52	; 0x34
 8017412:	2100      	movs	r1, #0
 8017414:	68f8      	ldr	r0, [r7, #12]
 8017416:	f004 fa45 	bl	801b8a4 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801741a:	f7ff fc17 	bl	8016c4c <dhcp_inc_pcb_refcount>
 801741e:	4603      	mov	r3, r0
 8017420:	2b00      	cmp	r3, #0
 8017422:	d002      	beq.n	801742a <dhcp_start+0xa2>
    return ERR_MEM;
 8017424:	f04f 33ff 	mov.w	r3, #4294967295
 8017428:	e020      	b.n	801746c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	2201      	movs	r2, #1
 801742e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017436:	f003 0304 	and.w	r3, r3, #4
 801743a:	2b00      	cmp	r3, #0
 801743c:	d105      	bne.n	801744a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801743e:	2102      	movs	r1, #2
 8017440:	68f8      	ldr	r0, [r7, #12]
 8017442:	f000 fcc5 	bl	8017dd0 <dhcp_set_state>
    return ERR_OK;
 8017446:	2300      	movs	r3, #0
 8017448:	e010      	b.n	801746c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801744a:	6878      	ldr	r0, [r7, #4]
 801744c:	f000 f8bc 	bl	80175c8 <dhcp_discover>
 8017450:	4603      	mov	r3, r0
 8017452:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8017454:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8017458:	2b00      	cmp	r3, #0
 801745a:	d005      	beq.n	8017468 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801745c:	6878      	ldr	r0, [r7, #4]
 801745e:	f000 fc1d 	bl	8017c9c <dhcp_release_and_stop>
    return ERR_MEM;
 8017462:	f04f 33ff 	mov.w	r3, #4294967295
 8017466:	e001      	b.n	801746c <dhcp_start+0xe4>
  }
  return result;
 8017468:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801746c:	4618      	mov	r0, r3
 801746e:	3710      	adds	r7, #16
 8017470:	46bd      	mov	sp, r7
 8017472:	bd80      	pop	{r7, pc}
 8017474:	0802297c 	.word	0x0802297c
 8017478:	08022a60 	.word	0x08022a60
 801747c:	080229dc 	.word	0x080229dc
 8017480:	08022aa4 	.word	0x08022aa4

08017484 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8017484:	b580      	push	{r7, lr}
 8017486:	b084      	sub	sp, #16
 8017488:	af00      	add	r7, sp, #0
 801748a:	6078      	str	r0, [r7, #4]
 801748c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	2b00      	cmp	r3, #0
 8017492:	d107      	bne.n	80174a4 <dhcp_arp_reply+0x20>
 8017494:	4b0e      	ldr	r3, [pc, #56]	; (80174d0 <dhcp_arp_reply+0x4c>)
 8017496:	f240 328b 	movw	r2, #907	; 0x38b
 801749a:	490e      	ldr	r1, [pc, #56]	; (80174d4 <dhcp_arp_reply+0x50>)
 801749c:	480e      	ldr	r0, [pc, #56]	; (80174d8 <dhcp_arp_reply+0x54>)
 801749e:	f005 f947 	bl	801c730 <iprintf>
 80174a2:	e012      	b.n	80174ca <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174a8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d00c      	beq.n	80174ca <dhcp_arp_reply+0x46>
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	795b      	ldrb	r3, [r3, #5]
 80174b4:	2b08      	cmp	r3, #8
 80174b6:	d108      	bne.n	80174ca <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80174b8:	683b      	ldr	r3, [r7, #0]
 80174ba:	681a      	ldr	r2, [r3, #0]
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	69db      	ldr	r3, [r3, #28]
 80174c0:	429a      	cmp	r2, r3
 80174c2:	d102      	bne.n	80174ca <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80174c4:	6878      	ldr	r0, [r7, #4]
 80174c6:	f000 f809 	bl	80174dc <dhcp_decline>
    }
  }
}
 80174ca:	3710      	adds	r7, #16
 80174cc:	46bd      	mov	sp, r7
 80174ce:	bd80      	pop	{r7, pc}
 80174d0:	0802297c 	.word	0x0802297c
 80174d4:	08022a60 	.word	0x08022a60
 80174d8:	080229dc 	.word	0x080229dc

080174dc <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80174dc:	b5b0      	push	{r4, r5, r7, lr}
 80174de:	b08a      	sub	sp, #40	; 0x28
 80174e0:	af02      	add	r7, sp, #8
 80174e2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174e8:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80174ea:	210c      	movs	r1, #12
 80174ec:	69b8      	ldr	r0, [r7, #24]
 80174ee:	f000 fc6f 	bl	8017dd0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80174f2:	f107 030c 	add.w	r3, r7, #12
 80174f6:	2204      	movs	r2, #4
 80174f8:	69b9      	ldr	r1, [r7, #24]
 80174fa:	6878      	ldr	r0, [r7, #4]
 80174fc:	f001 f924 	bl	8018748 <dhcp_create_msg>
 8017500:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8017502:	697b      	ldr	r3, [r7, #20]
 8017504:	2b00      	cmp	r3, #0
 8017506:	d035      	beq.n	8017574 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017508:	697b      	ldr	r3, [r7, #20]
 801750a:	685b      	ldr	r3, [r3, #4]
 801750c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801750e:	89b8      	ldrh	r0, [r7, #12]
 8017510:	693b      	ldr	r3, [r7, #16]
 8017512:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017516:	2304      	movs	r3, #4
 8017518:	2232      	movs	r2, #50	; 0x32
 801751a:	f000 fc73 	bl	8017e04 <dhcp_option>
 801751e:	4603      	mov	r3, r0
 8017520:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8017522:	89bc      	ldrh	r4, [r7, #12]
 8017524:	693b      	ldr	r3, [r7, #16]
 8017526:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801752a:	69bb      	ldr	r3, [r7, #24]
 801752c:	69db      	ldr	r3, [r3, #28]
 801752e:	4618      	mov	r0, r3
 8017530:	f7f6 ffad 	bl	800e48e <lwip_htonl>
 8017534:	4603      	mov	r3, r0
 8017536:	461a      	mov	r2, r3
 8017538:	4629      	mov	r1, r5
 801753a:	4620      	mov	r0, r4
 801753c:	f000 fcee 	bl	8017f1c <dhcp_option_long>
 8017540:	4603      	mov	r3, r0
 8017542:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017544:	89b8      	ldrh	r0, [r7, #12]
 8017546:	693b      	ldr	r3, [r7, #16]
 8017548:	33f0      	adds	r3, #240	; 0xf0
 801754a:	697a      	ldr	r2, [r7, #20]
 801754c:	4619      	mov	r1, r3
 801754e:	f001 f9d1 	bl	80188f4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8017552:	4b19      	ldr	r3, [pc, #100]	; (80175b8 <dhcp_decline+0xdc>)
 8017554:	6818      	ldr	r0, [r3, #0]
 8017556:	4b19      	ldr	r3, [pc, #100]	; (80175bc <dhcp_decline+0xe0>)
 8017558:	9301      	str	r3, [sp, #4]
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	9300      	str	r3, [sp, #0]
 801755e:	2343      	movs	r3, #67	; 0x43
 8017560:	4a17      	ldr	r2, [pc, #92]	; (80175c0 <dhcp_decline+0xe4>)
 8017562:	6979      	ldr	r1, [r7, #20]
 8017564:	f7ff f8d0 	bl	8016708 <udp_sendto_if_src>
 8017568:	4603      	mov	r3, r0
 801756a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801756c:	6978      	ldr	r0, [r7, #20]
 801756e:	f7f8 fe0f 	bl	8010190 <pbuf_free>
 8017572:	e001      	b.n	8017578 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8017574:	23ff      	movs	r3, #255	; 0xff
 8017576:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017578:	69bb      	ldr	r3, [r7, #24]
 801757a:	799b      	ldrb	r3, [r3, #6]
 801757c:	2bff      	cmp	r3, #255	; 0xff
 801757e:	d005      	beq.n	801758c <dhcp_decline+0xb0>
    dhcp->tries++;
 8017580:	69bb      	ldr	r3, [r7, #24]
 8017582:	799b      	ldrb	r3, [r3, #6]
 8017584:	3301      	adds	r3, #1
 8017586:	b2da      	uxtb	r2, r3
 8017588:	69bb      	ldr	r3, [r7, #24]
 801758a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801758c:	f242 7310 	movw	r3, #10000	; 0x2710
 8017590:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017592:	89fb      	ldrh	r3, [r7, #14]
 8017594:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017598:	4a0a      	ldr	r2, [pc, #40]	; (80175c4 <dhcp_decline+0xe8>)
 801759a:	fb82 1203 	smull	r1, r2, r2, r3
 801759e:	1152      	asrs	r2, r2, #5
 80175a0:	17db      	asrs	r3, r3, #31
 80175a2:	1ad3      	subs	r3, r2, r3
 80175a4:	b29a      	uxth	r2, r3
 80175a6:	69bb      	ldr	r3, [r7, #24]
 80175a8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80175aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80175ae:	4618      	mov	r0, r3
 80175b0:	3720      	adds	r7, #32
 80175b2:	46bd      	mov	sp, r7
 80175b4:	bdb0      	pop	{r4, r5, r7, pc}
 80175b6:	bf00      	nop
 80175b8:	20007430 	.word	0x20007430
 80175bc:	08024538 	.word	0x08024538
 80175c0:	0802453c 	.word	0x0802453c
 80175c4:	10624dd3 	.word	0x10624dd3

080175c8 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80175c8:	b580      	push	{r7, lr}
 80175ca:	b08a      	sub	sp, #40	; 0x28
 80175cc:	af02      	add	r7, sp, #8
 80175ce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175d4:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80175d6:	2300      	movs	r3, #0
 80175d8:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80175da:	69bb      	ldr	r3, [r7, #24]
 80175dc:	2200      	movs	r2, #0
 80175de:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80175e0:	2106      	movs	r1, #6
 80175e2:	69b8      	ldr	r0, [r7, #24]
 80175e4:	f000 fbf4 	bl	8017dd0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80175e8:	f107 0308 	add.w	r3, r7, #8
 80175ec:	2201      	movs	r2, #1
 80175ee:	69b9      	ldr	r1, [r7, #24]
 80175f0:	6878      	ldr	r0, [r7, #4]
 80175f2:	f001 f8a9 	bl	8018748 <dhcp_create_msg>
 80175f6:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80175f8:	693b      	ldr	r3, [r7, #16]
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d04b      	beq.n	8017696 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80175fe:	693b      	ldr	r3, [r7, #16]
 8017600:	685b      	ldr	r3, [r3, #4]
 8017602:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8017604:	8938      	ldrh	r0, [r7, #8]
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801760c:	2302      	movs	r3, #2
 801760e:	2239      	movs	r2, #57	; 0x39
 8017610:	f000 fbf8 	bl	8017e04 <dhcp_option>
 8017614:	4603      	mov	r3, r0
 8017616:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8017618:	8938      	ldrh	r0, [r7, #8]
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017624:	461a      	mov	r2, r3
 8017626:	f000 fc47 	bl	8017eb8 <dhcp_option_short>
 801762a:	4603      	mov	r3, r0
 801762c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801762e:	8938      	ldrh	r0, [r7, #8]
 8017630:	68fb      	ldr	r3, [r7, #12]
 8017632:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017636:	2304      	movs	r3, #4
 8017638:	2237      	movs	r2, #55	; 0x37
 801763a:	f000 fbe3 	bl	8017e04 <dhcp_option>
 801763e:	4603      	mov	r3, r0
 8017640:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017642:	2300      	movs	r3, #0
 8017644:	77fb      	strb	r3, [r7, #31]
 8017646:	e00e      	b.n	8017666 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8017648:	8938      	ldrh	r0, [r7, #8]
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017650:	7ffb      	ldrb	r3, [r7, #31]
 8017652:	4a29      	ldr	r2, [pc, #164]	; (80176f8 <dhcp_discover+0x130>)
 8017654:	5cd3      	ldrb	r3, [r2, r3]
 8017656:	461a      	mov	r2, r3
 8017658:	f000 fc08 	bl	8017e6c <dhcp_option_byte>
 801765c:	4603      	mov	r3, r0
 801765e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017660:	7ffb      	ldrb	r3, [r7, #31]
 8017662:	3301      	adds	r3, #1
 8017664:	77fb      	strb	r3, [r7, #31]
 8017666:	7ffb      	ldrb	r3, [r7, #31]
 8017668:	2b03      	cmp	r3, #3
 801766a:	d9ed      	bls.n	8017648 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801766c:	8938      	ldrh	r0, [r7, #8]
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	33f0      	adds	r3, #240	; 0xf0
 8017672:	693a      	ldr	r2, [r7, #16]
 8017674:	4619      	mov	r1, r3
 8017676:	f001 f93d 	bl	80188f4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801767a:	4b20      	ldr	r3, [pc, #128]	; (80176fc <dhcp_discover+0x134>)
 801767c:	6818      	ldr	r0, [r3, #0]
 801767e:	4b20      	ldr	r3, [pc, #128]	; (8017700 <dhcp_discover+0x138>)
 8017680:	9301      	str	r3, [sp, #4]
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	9300      	str	r3, [sp, #0]
 8017686:	2343      	movs	r3, #67	; 0x43
 8017688:	4a1e      	ldr	r2, [pc, #120]	; (8017704 <dhcp_discover+0x13c>)
 801768a:	6939      	ldr	r1, [r7, #16]
 801768c:	f7ff f83c 	bl	8016708 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8017690:	6938      	ldr	r0, [r7, #16]
 8017692:	f7f8 fd7d 	bl	8010190 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8017696:	69bb      	ldr	r3, [r7, #24]
 8017698:	799b      	ldrb	r3, [r3, #6]
 801769a:	2bff      	cmp	r3, #255	; 0xff
 801769c:	d005      	beq.n	80176aa <dhcp_discover+0xe2>
    dhcp->tries++;
 801769e:	69bb      	ldr	r3, [r7, #24]
 80176a0:	799b      	ldrb	r3, [r3, #6]
 80176a2:	3301      	adds	r3, #1
 80176a4:	b2da      	uxtb	r2, r3
 80176a6:	69bb      	ldr	r3, [r7, #24]
 80176a8:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80176aa:	69bb      	ldr	r3, [r7, #24]
 80176ac:	799b      	ldrb	r3, [r3, #6]
 80176ae:	2b05      	cmp	r3, #5
 80176b0:	d80d      	bhi.n	80176ce <dhcp_discover+0x106>
 80176b2:	69bb      	ldr	r3, [r7, #24]
 80176b4:	799b      	ldrb	r3, [r3, #6]
 80176b6:	461a      	mov	r2, r3
 80176b8:	2301      	movs	r3, #1
 80176ba:	4093      	lsls	r3, r2
 80176bc:	b29b      	uxth	r3, r3
 80176be:	461a      	mov	r2, r3
 80176c0:	0152      	lsls	r2, r2, #5
 80176c2:	1ad2      	subs	r2, r2, r3
 80176c4:	0092      	lsls	r2, r2, #2
 80176c6:	4413      	add	r3, r2
 80176c8:	00db      	lsls	r3, r3, #3
 80176ca:	b29b      	uxth	r3, r3
 80176cc:	e001      	b.n	80176d2 <dhcp_discover+0x10a>
 80176ce:	f64e 2360 	movw	r3, #60000	; 0xea60
 80176d2:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80176d4:	897b      	ldrh	r3, [r7, #10]
 80176d6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80176da:	4a0b      	ldr	r2, [pc, #44]	; (8017708 <dhcp_discover+0x140>)
 80176dc:	fb82 1203 	smull	r1, r2, r2, r3
 80176e0:	1152      	asrs	r2, r2, #5
 80176e2:	17db      	asrs	r3, r3, #31
 80176e4:	1ad3      	subs	r3, r2, r3
 80176e6:	b29a      	uxth	r2, r3
 80176e8:	69bb      	ldr	r3, [r7, #24]
 80176ea:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80176ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80176f0:	4618      	mov	r0, r3
 80176f2:	3720      	adds	r7, #32
 80176f4:	46bd      	mov	sp, r7
 80176f6:	bd80      	pop	{r7, pc}
 80176f8:	20000064 	.word	0x20000064
 80176fc:	20007430 	.word	0x20007430
 8017700:	08024538 	.word	0x08024538
 8017704:	0802453c 	.word	0x0802453c
 8017708:	10624dd3 	.word	0x10624dd3

0801770c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801770c:	b580      	push	{r7, lr}
 801770e:	b088      	sub	sp, #32
 8017710:	af00      	add	r7, sp, #0
 8017712:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	2b00      	cmp	r3, #0
 8017718:	d107      	bne.n	801772a <dhcp_bind+0x1e>
 801771a:	4b64      	ldr	r3, [pc, #400]	; (80178ac <dhcp_bind+0x1a0>)
 801771c:	f240 4215 	movw	r2, #1045	; 0x415
 8017720:	4963      	ldr	r1, [pc, #396]	; (80178b0 <dhcp_bind+0x1a4>)
 8017722:	4864      	ldr	r0, [pc, #400]	; (80178b4 <dhcp_bind+0x1a8>)
 8017724:	f005 f804 	bl	801c730 <iprintf>
 8017728:	e0bc      	b.n	80178a4 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801772e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8017730:	69bb      	ldr	r3, [r7, #24]
 8017732:	2b00      	cmp	r3, #0
 8017734:	d107      	bne.n	8017746 <dhcp_bind+0x3a>
 8017736:	4b5d      	ldr	r3, [pc, #372]	; (80178ac <dhcp_bind+0x1a0>)
 8017738:	f240 4217 	movw	r2, #1047	; 0x417
 801773c:	495e      	ldr	r1, [pc, #376]	; (80178b8 <dhcp_bind+0x1ac>)
 801773e:	485d      	ldr	r0, [pc, #372]	; (80178b4 <dhcp_bind+0x1a8>)
 8017740:	f004 fff6 	bl	801c730 <iprintf>
 8017744:	e0ae      	b.n	80178a4 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8017746:	69bb      	ldr	r3, [r7, #24]
 8017748:	2200      	movs	r2, #0
 801774a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801774c:	69bb      	ldr	r3, [r7, #24]
 801774e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017754:	d019      	beq.n	801778a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017756:	69bb      	ldr	r3, [r7, #24]
 8017758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801775a:	331e      	adds	r3, #30
 801775c:	4a57      	ldr	r2, [pc, #348]	; (80178bc <dhcp_bind+0x1b0>)
 801775e:	fba2 2303 	umull	r2, r3, r2, r3
 8017762:	095b      	lsrs	r3, r3, #5
 8017764:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8017766:	69fb      	ldr	r3, [r7, #28]
 8017768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801776c:	d302      	bcc.n	8017774 <dhcp_bind+0x68>
      timeout = 0xffff;
 801776e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017772:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8017774:	69fb      	ldr	r3, [r7, #28]
 8017776:	b29a      	uxth	r2, r3
 8017778:	69bb      	ldr	r3, [r7, #24]
 801777a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801777c:	69bb      	ldr	r3, [r7, #24]
 801777e:	8a9b      	ldrh	r3, [r3, #20]
 8017780:	2b00      	cmp	r3, #0
 8017782:	d102      	bne.n	801778a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8017784:	69bb      	ldr	r3, [r7, #24]
 8017786:	2201      	movs	r2, #1
 8017788:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801778a:	69bb      	ldr	r3, [r7, #24]
 801778c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801778e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017792:	d01d      	beq.n	80177d0 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017794:	69bb      	ldr	r3, [r7, #24]
 8017796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017798:	331e      	adds	r3, #30
 801779a:	4a48      	ldr	r2, [pc, #288]	; (80178bc <dhcp_bind+0x1b0>)
 801779c:	fba2 2303 	umull	r2, r3, r2, r3
 80177a0:	095b      	lsrs	r3, r3, #5
 80177a2:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80177a4:	69fb      	ldr	r3, [r7, #28]
 80177a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80177aa:	d302      	bcc.n	80177b2 <dhcp_bind+0xa6>
      timeout = 0xffff;
 80177ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80177b0:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80177b2:	69fb      	ldr	r3, [r7, #28]
 80177b4:	b29a      	uxth	r2, r3
 80177b6:	69bb      	ldr	r3, [r7, #24]
 80177b8:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80177ba:	69bb      	ldr	r3, [r7, #24]
 80177bc:	895b      	ldrh	r3, [r3, #10]
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d102      	bne.n	80177c8 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80177c2:	69bb      	ldr	r3, [r7, #24]
 80177c4:	2201      	movs	r2, #1
 80177c6:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80177c8:	69bb      	ldr	r3, [r7, #24]
 80177ca:	895a      	ldrh	r2, [r3, #10]
 80177cc:	69bb      	ldr	r3, [r7, #24]
 80177ce:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80177d0:	69bb      	ldr	r3, [r7, #24]
 80177d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80177d8:	d01d      	beq.n	8017816 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80177da:	69bb      	ldr	r3, [r7, #24]
 80177dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177de:	331e      	adds	r3, #30
 80177e0:	4a36      	ldr	r2, [pc, #216]	; (80178bc <dhcp_bind+0x1b0>)
 80177e2:	fba2 2303 	umull	r2, r3, r2, r3
 80177e6:	095b      	lsrs	r3, r3, #5
 80177e8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80177ea:	69fb      	ldr	r3, [r7, #28]
 80177ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80177f0:	d302      	bcc.n	80177f8 <dhcp_bind+0xec>
      timeout = 0xffff;
 80177f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80177f6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80177f8:	69fb      	ldr	r3, [r7, #28]
 80177fa:	b29a      	uxth	r2, r3
 80177fc:	69bb      	ldr	r3, [r7, #24]
 80177fe:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8017800:	69bb      	ldr	r3, [r7, #24]
 8017802:	899b      	ldrh	r3, [r3, #12]
 8017804:	2b00      	cmp	r3, #0
 8017806:	d102      	bne.n	801780e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8017808:	69bb      	ldr	r3, [r7, #24]
 801780a:	2201      	movs	r2, #1
 801780c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801780e:	69bb      	ldr	r3, [r7, #24]
 8017810:	899a      	ldrh	r2, [r3, #12]
 8017812:	69bb      	ldr	r3, [r7, #24]
 8017814:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8017816:	69bb      	ldr	r3, [r7, #24]
 8017818:	895a      	ldrh	r2, [r3, #10]
 801781a:	69bb      	ldr	r3, [r7, #24]
 801781c:	899b      	ldrh	r3, [r3, #12]
 801781e:	429a      	cmp	r2, r3
 8017820:	d306      	bcc.n	8017830 <dhcp_bind+0x124>
 8017822:	69bb      	ldr	r3, [r7, #24]
 8017824:	899b      	ldrh	r3, [r3, #12]
 8017826:	2b00      	cmp	r3, #0
 8017828:	d002      	beq.n	8017830 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801782a:	69bb      	ldr	r3, [r7, #24]
 801782c:	2200      	movs	r2, #0
 801782e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8017830:	69bb      	ldr	r3, [r7, #24]
 8017832:	79db      	ldrb	r3, [r3, #7]
 8017834:	2b00      	cmp	r3, #0
 8017836:	d003      	beq.n	8017840 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8017838:	69bb      	ldr	r3, [r7, #24]
 801783a:	6a1b      	ldr	r3, [r3, #32]
 801783c:	613b      	str	r3, [r7, #16]
 801783e:	e014      	b.n	801786a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8017840:	69bb      	ldr	r3, [r7, #24]
 8017842:	331c      	adds	r3, #28
 8017844:	781b      	ldrb	r3, [r3, #0]
 8017846:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8017848:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801784c:	2b00      	cmp	r3, #0
 801784e:	db02      	blt.n	8017856 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8017850:	23ff      	movs	r3, #255	; 0xff
 8017852:	613b      	str	r3, [r7, #16]
 8017854:	e009      	b.n	801786a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8017856:	7dfb      	ldrb	r3, [r7, #23]
 8017858:	2bbf      	cmp	r3, #191	; 0xbf
 801785a:	d903      	bls.n	8017864 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801785c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8017860:	613b      	str	r3, [r7, #16]
 8017862:	e002      	b.n	801786a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8017864:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017868:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801786a:	69bb      	ldr	r3, [r7, #24]
 801786c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801786e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	2b00      	cmp	r3, #0
 8017874:	d108      	bne.n	8017888 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8017876:	69bb      	ldr	r3, [r7, #24]
 8017878:	69da      	ldr	r2, [r3, #28]
 801787a:	693b      	ldr	r3, [r7, #16]
 801787c:	4013      	ands	r3, r2
 801787e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017886:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8017888:	210a      	movs	r1, #10
 801788a:	69b8      	ldr	r0, [r7, #24]
 801788c:	f000 faa0 	bl	8017dd0 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8017890:	69bb      	ldr	r3, [r7, #24]
 8017892:	f103 011c 	add.w	r1, r3, #28
 8017896:	f107 030c 	add.w	r3, r7, #12
 801789a:	f107 0210 	add.w	r2, r7, #16
 801789e:	6878      	ldr	r0, [r7, #4]
 80178a0:	f7f7 ffe6 	bl	800f870 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80178a4:	3720      	adds	r7, #32
 80178a6:	46bd      	mov	sp, r7
 80178a8:	bd80      	pop	{r7, pc}
 80178aa:	bf00      	nop
 80178ac:	0802297c 	.word	0x0802297c
 80178b0:	08022adc 	.word	0x08022adc
 80178b4:	080229dc 	.word	0x080229dc
 80178b8:	08022af8 	.word	0x08022af8
 80178bc:	88888889 	.word	0x88888889

080178c0 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80178c0:	b580      	push	{r7, lr}
 80178c2:	b08a      	sub	sp, #40	; 0x28
 80178c4:	af02      	add	r7, sp, #8
 80178c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178cc:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80178ce:	2105      	movs	r1, #5
 80178d0:	69b8      	ldr	r0, [r7, #24]
 80178d2:	f000 fa7d 	bl	8017dd0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80178d6:	f107 030c 	add.w	r3, r7, #12
 80178da:	2203      	movs	r2, #3
 80178dc:	69b9      	ldr	r1, [r7, #24]
 80178de:	6878      	ldr	r0, [r7, #4]
 80178e0:	f000 ff32 	bl	8018748 <dhcp_create_msg>
 80178e4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80178e6:	697b      	ldr	r3, [r7, #20]
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d04e      	beq.n	801798a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80178ec:	697b      	ldr	r3, [r7, #20]
 80178ee:	685b      	ldr	r3, [r3, #4]
 80178f0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80178f2:	89b8      	ldrh	r0, [r7, #12]
 80178f4:	693b      	ldr	r3, [r7, #16]
 80178f6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80178fa:	2302      	movs	r3, #2
 80178fc:	2239      	movs	r2, #57	; 0x39
 80178fe:	f000 fa81 	bl	8017e04 <dhcp_option>
 8017902:	4603      	mov	r3, r0
 8017904:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8017906:	89b8      	ldrh	r0, [r7, #12]
 8017908:	693b      	ldr	r3, [r7, #16]
 801790a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017912:	461a      	mov	r2, r3
 8017914:	f000 fad0 	bl	8017eb8 <dhcp_option_short>
 8017918:	4603      	mov	r3, r0
 801791a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801791c:	89b8      	ldrh	r0, [r7, #12]
 801791e:	693b      	ldr	r3, [r7, #16]
 8017920:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017924:	2304      	movs	r3, #4
 8017926:	2237      	movs	r2, #55	; 0x37
 8017928:	f000 fa6c 	bl	8017e04 <dhcp_option>
 801792c:	4603      	mov	r3, r0
 801792e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017930:	2300      	movs	r3, #0
 8017932:	77bb      	strb	r3, [r7, #30]
 8017934:	e00e      	b.n	8017954 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8017936:	89b8      	ldrh	r0, [r7, #12]
 8017938:	693b      	ldr	r3, [r7, #16]
 801793a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801793e:	7fbb      	ldrb	r3, [r7, #30]
 8017940:	4a2a      	ldr	r2, [pc, #168]	; (80179ec <dhcp_renew+0x12c>)
 8017942:	5cd3      	ldrb	r3, [r2, r3]
 8017944:	461a      	mov	r2, r3
 8017946:	f000 fa91 	bl	8017e6c <dhcp_option_byte>
 801794a:	4603      	mov	r3, r0
 801794c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801794e:	7fbb      	ldrb	r3, [r7, #30]
 8017950:	3301      	adds	r3, #1
 8017952:	77bb      	strb	r3, [r7, #30]
 8017954:	7fbb      	ldrb	r3, [r7, #30]
 8017956:	2b03      	cmp	r3, #3
 8017958:	d9ed      	bls.n	8017936 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801795a:	89b8      	ldrh	r0, [r7, #12]
 801795c:	693b      	ldr	r3, [r7, #16]
 801795e:	33f0      	adds	r3, #240	; 0xf0
 8017960:	697a      	ldr	r2, [r7, #20]
 8017962:	4619      	mov	r1, r3
 8017964:	f000 ffc6 	bl	80188f4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8017968:	4b21      	ldr	r3, [pc, #132]	; (80179f0 <dhcp_renew+0x130>)
 801796a:	6818      	ldr	r0, [r3, #0]
 801796c:	69bb      	ldr	r3, [r7, #24]
 801796e:	f103 0218 	add.w	r2, r3, #24
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	9300      	str	r3, [sp, #0]
 8017976:	2343      	movs	r3, #67	; 0x43
 8017978:	6979      	ldr	r1, [r7, #20]
 801797a:	f7fe fe51 	bl	8016620 <udp_sendto_if>
 801797e:	4603      	mov	r3, r0
 8017980:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8017982:	6978      	ldr	r0, [r7, #20]
 8017984:	f7f8 fc04 	bl	8010190 <pbuf_free>
 8017988:	e001      	b.n	801798e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801798a:	23ff      	movs	r3, #255	; 0xff
 801798c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801798e:	69bb      	ldr	r3, [r7, #24]
 8017990:	799b      	ldrb	r3, [r3, #6]
 8017992:	2bff      	cmp	r3, #255	; 0xff
 8017994:	d005      	beq.n	80179a2 <dhcp_renew+0xe2>
    dhcp->tries++;
 8017996:	69bb      	ldr	r3, [r7, #24]
 8017998:	799b      	ldrb	r3, [r3, #6]
 801799a:	3301      	adds	r3, #1
 801799c:	b2da      	uxtb	r2, r3
 801799e:	69bb      	ldr	r3, [r7, #24]
 80179a0:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80179a2:	69bb      	ldr	r3, [r7, #24]
 80179a4:	799b      	ldrb	r3, [r3, #6]
 80179a6:	2b09      	cmp	r3, #9
 80179a8:	d80a      	bhi.n	80179c0 <dhcp_renew+0x100>
 80179aa:	69bb      	ldr	r3, [r7, #24]
 80179ac:	799b      	ldrb	r3, [r3, #6]
 80179ae:	b29b      	uxth	r3, r3
 80179b0:	461a      	mov	r2, r3
 80179b2:	0152      	lsls	r2, r2, #5
 80179b4:	1ad2      	subs	r2, r2, r3
 80179b6:	0092      	lsls	r2, r2, #2
 80179b8:	4413      	add	r3, r2
 80179ba:	011b      	lsls	r3, r3, #4
 80179bc:	b29b      	uxth	r3, r3
 80179be:	e001      	b.n	80179c4 <dhcp_renew+0x104>
 80179c0:	f644 6320 	movw	r3, #20000	; 0x4e20
 80179c4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80179c6:	89fb      	ldrh	r3, [r7, #14]
 80179c8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80179cc:	4a09      	ldr	r2, [pc, #36]	; (80179f4 <dhcp_renew+0x134>)
 80179ce:	fb82 1203 	smull	r1, r2, r2, r3
 80179d2:	1152      	asrs	r2, r2, #5
 80179d4:	17db      	asrs	r3, r3, #31
 80179d6:	1ad3      	subs	r3, r2, r3
 80179d8:	b29a      	uxth	r2, r3
 80179da:	69bb      	ldr	r3, [r7, #24]
 80179dc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80179de:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80179e2:	4618      	mov	r0, r3
 80179e4:	3720      	adds	r7, #32
 80179e6:	46bd      	mov	sp, r7
 80179e8:	bd80      	pop	{r7, pc}
 80179ea:	bf00      	nop
 80179ec:	20000064 	.word	0x20000064
 80179f0:	20007430 	.word	0x20007430
 80179f4:	10624dd3 	.word	0x10624dd3

080179f8 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80179f8:	b580      	push	{r7, lr}
 80179fa:	b08a      	sub	sp, #40	; 0x28
 80179fc:	af02      	add	r7, sp, #8
 80179fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a04:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8017a06:	2104      	movs	r1, #4
 8017a08:	69b8      	ldr	r0, [r7, #24]
 8017a0a:	f000 f9e1 	bl	8017dd0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8017a0e:	f107 030c 	add.w	r3, r7, #12
 8017a12:	2203      	movs	r2, #3
 8017a14:	69b9      	ldr	r1, [r7, #24]
 8017a16:	6878      	ldr	r0, [r7, #4]
 8017a18:	f000 fe96 	bl	8018748 <dhcp_create_msg>
 8017a1c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8017a1e:	697b      	ldr	r3, [r7, #20]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d04c      	beq.n	8017abe <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017a24:	697b      	ldr	r3, [r7, #20]
 8017a26:	685b      	ldr	r3, [r3, #4]
 8017a28:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8017a2a:	89b8      	ldrh	r0, [r7, #12]
 8017a2c:	693b      	ldr	r3, [r7, #16]
 8017a2e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017a32:	2302      	movs	r3, #2
 8017a34:	2239      	movs	r2, #57	; 0x39
 8017a36:	f000 f9e5 	bl	8017e04 <dhcp_option>
 8017a3a:	4603      	mov	r3, r0
 8017a3c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8017a3e:	89b8      	ldrh	r0, [r7, #12]
 8017a40:	693b      	ldr	r3, [r7, #16]
 8017a42:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017a4a:	461a      	mov	r2, r3
 8017a4c:	f000 fa34 	bl	8017eb8 <dhcp_option_short>
 8017a50:	4603      	mov	r3, r0
 8017a52:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017a54:	89b8      	ldrh	r0, [r7, #12]
 8017a56:	693b      	ldr	r3, [r7, #16]
 8017a58:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017a5c:	2304      	movs	r3, #4
 8017a5e:	2237      	movs	r2, #55	; 0x37
 8017a60:	f000 f9d0 	bl	8017e04 <dhcp_option>
 8017a64:	4603      	mov	r3, r0
 8017a66:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017a68:	2300      	movs	r3, #0
 8017a6a:	77bb      	strb	r3, [r7, #30]
 8017a6c:	e00e      	b.n	8017a8c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8017a6e:	89b8      	ldrh	r0, [r7, #12]
 8017a70:	693b      	ldr	r3, [r7, #16]
 8017a72:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017a76:	7fbb      	ldrb	r3, [r7, #30]
 8017a78:	4a29      	ldr	r2, [pc, #164]	; (8017b20 <dhcp_rebind+0x128>)
 8017a7a:	5cd3      	ldrb	r3, [r2, r3]
 8017a7c:	461a      	mov	r2, r3
 8017a7e:	f000 f9f5 	bl	8017e6c <dhcp_option_byte>
 8017a82:	4603      	mov	r3, r0
 8017a84:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017a86:	7fbb      	ldrb	r3, [r7, #30]
 8017a88:	3301      	adds	r3, #1
 8017a8a:	77bb      	strb	r3, [r7, #30]
 8017a8c:	7fbb      	ldrb	r3, [r7, #30]
 8017a8e:	2b03      	cmp	r3, #3
 8017a90:	d9ed      	bls.n	8017a6e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017a92:	89b8      	ldrh	r0, [r7, #12]
 8017a94:	693b      	ldr	r3, [r7, #16]
 8017a96:	33f0      	adds	r3, #240	; 0xf0
 8017a98:	697a      	ldr	r2, [r7, #20]
 8017a9a:	4619      	mov	r1, r3
 8017a9c:	f000 ff2a 	bl	80188f4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8017aa0:	4b20      	ldr	r3, [pc, #128]	; (8017b24 <dhcp_rebind+0x12c>)
 8017aa2:	6818      	ldr	r0, [r3, #0]
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	9300      	str	r3, [sp, #0]
 8017aa8:	2343      	movs	r3, #67	; 0x43
 8017aaa:	4a1f      	ldr	r2, [pc, #124]	; (8017b28 <dhcp_rebind+0x130>)
 8017aac:	6979      	ldr	r1, [r7, #20]
 8017aae:	f7fe fdb7 	bl	8016620 <udp_sendto_if>
 8017ab2:	4603      	mov	r3, r0
 8017ab4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8017ab6:	6978      	ldr	r0, [r7, #20]
 8017ab8:	f7f8 fb6a 	bl	8010190 <pbuf_free>
 8017abc:	e001      	b.n	8017ac2 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8017abe:	23ff      	movs	r3, #255	; 0xff
 8017ac0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017ac2:	69bb      	ldr	r3, [r7, #24]
 8017ac4:	799b      	ldrb	r3, [r3, #6]
 8017ac6:	2bff      	cmp	r3, #255	; 0xff
 8017ac8:	d005      	beq.n	8017ad6 <dhcp_rebind+0xde>
    dhcp->tries++;
 8017aca:	69bb      	ldr	r3, [r7, #24]
 8017acc:	799b      	ldrb	r3, [r3, #6]
 8017ace:	3301      	adds	r3, #1
 8017ad0:	b2da      	uxtb	r2, r3
 8017ad2:	69bb      	ldr	r3, [r7, #24]
 8017ad4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8017ad6:	69bb      	ldr	r3, [r7, #24]
 8017ad8:	799b      	ldrb	r3, [r3, #6]
 8017ada:	2b09      	cmp	r3, #9
 8017adc:	d80a      	bhi.n	8017af4 <dhcp_rebind+0xfc>
 8017ade:	69bb      	ldr	r3, [r7, #24]
 8017ae0:	799b      	ldrb	r3, [r3, #6]
 8017ae2:	b29b      	uxth	r3, r3
 8017ae4:	461a      	mov	r2, r3
 8017ae6:	0152      	lsls	r2, r2, #5
 8017ae8:	1ad2      	subs	r2, r2, r3
 8017aea:	0092      	lsls	r2, r2, #2
 8017aec:	4413      	add	r3, r2
 8017aee:	00db      	lsls	r3, r3, #3
 8017af0:	b29b      	uxth	r3, r3
 8017af2:	e001      	b.n	8017af8 <dhcp_rebind+0x100>
 8017af4:	f242 7310 	movw	r3, #10000	; 0x2710
 8017af8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017afa:	89fb      	ldrh	r3, [r7, #14]
 8017afc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017b00:	4a0a      	ldr	r2, [pc, #40]	; (8017b2c <dhcp_rebind+0x134>)
 8017b02:	fb82 1203 	smull	r1, r2, r2, r3
 8017b06:	1152      	asrs	r2, r2, #5
 8017b08:	17db      	asrs	r3, r3, #31
 8017b0a:	1ad3      	subs	r3, r2, r3
 8017b0c:	b29a      	uxth	r2, r3
 8017b0e:	69bb      	ldr	r3, [r7, #24]
 8017b10:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017b12:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017b16:	4618      	mov	r0, r3
 8017b18:	3720      	adds	r7, #32
 8017b1a:	46bd      	mov	sp, r7
 8017b1c:	bd80      	pop	{r7, pc}
 8017b1e:	bf00      	nop
 8017b20:	20000064 	.word	0x20000064
 8017b24:	20007430 	.word	0x20007430
 8017b28:	0802453c 	.word	0x0802453c
 8017b2c:	10624dd3 	.word	0x10624dd3

08017b30 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8017b30:	b5b0      	push	{r4, r5, r7, lr}
 8017b32:	b08a      	sub	sp, #40	; 0x28
 8017b34:	af02      	add	r7, sp, #8
 8017b36:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b3c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8017b3e:	2103      	movs	r1, #3
 8017b40:	69b8      	ldr	r0, [r7, #24]
 8017b42:	f000 f945 	bl	8017dd0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8017b46:	f107 030c 	add.w	r3, r7, #12
 8017b4a:	2203      	movs	r2, #3
 8017b4c:	69b9      	ldr	r1, [r7, #24]
 8017b4e:	6878      	ldr	r0, [r7, #4]
 8017b50:	f000 fdfa 	bl	8018748 <dhcp_create_msg>
 8017b54:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8017b56:	697b      	ldr	r3, [r7, #20]
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d066      	beq.n	8017c2a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017b5c:	697b      	ldr	r3, [r7, #20]
 8017b5e:	685b      	ldr	r3, [r3, #4]
 8017b60:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8017b62:	89b8      	ldrh	r0, [r7, #12]
 8017b64:	693b      	ldr	r3, [r7, #16]
 8017b66:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017b6a:	2302      	movs	r3, #2
 8017b6c:	2239      	movs	r2, #57	; 0x39
 8017b6e:	f000 f949 	bl	8017e04 <dhcp_option>
 8017b72:	4603      	mov	r3, r0
 8017b74:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8017b76:	89b8      	ldrh	r0, [r7, #12]
 8017b78:	693b      	ldr	r3, [r7, #16]
 8017b7a:	33f0      	adds	r3, #240	; 0xf0
 8017b7c:	f44f 7210 	mov.w	r2, #576	; 0x240
 8017b80:	4619      	mov	r1, r3
 8017b82:	f000 f999 	bl	8017eb8 <dhcp_option_short>
 8017b86:	4603      	mov	r3, r0
 8017b88:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8017b8a:	89b8      	ldrh	r0, [r7, #12]
 8017b8c:	693b      	ldr	r3, [r7, #16]
 8017b8e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017b92:	2304      	movs	r3, #4
 8017b94:	2232      	movs	r2, #50	; 0x32
 8017b96:	f000 f935 	bl	8017e04 <dhcp_option>
 8017b9a:	4603      	mov	r3, r0
 8017b9c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8017b9e:	89bc      	ldrh	r4, [r7, #12]
 8017ba0:	693b      	ldr	r3, [r7, #16]
 8017ba2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8017ba6:	69bb      	ldr	r3, [r7, #24]
 8017ba8:	69db      	ldr	r3, [r3, #28]
 8017baa:	4618      	mov	r0, r3
 8017bac:	f7f6 fc6f 	bl	800e48e <lwip_htonl>
 8017bb0:	4603      	mov	r3, r0
 8017bb2:	461a      	mov	r2, r3
 8017bb4:	4629      	mov	r1, r5
 8017bb6:	4620      	mov	r0, r4
 8017bb8:	f000 f9b0 	bl	8017f1c <dhcp_option_long>
 8017bbc:	4603      	mov	r3, r0
 8017bbe:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017bc0:	89b8      	ldrh	r0, [r7, #12]
 8017bc2:	693b      	ldr	r3, [r7, #16]
 8017bc4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017bc8:	2304      	movs	r3, #4
 8017bca:	2237      	movs	r2, #55	; 0x37
 8017bcc:	f000 f91a 	bl	8017e04 <dhcp_option>
 8017bd0:	4603      	mov	r3, r0
 8017bd2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017bd4:	2300      	movs	r3, #0
 8017bd6:	77bb      	strb	r3, [r7, #30]
 8017bd8:	e00e      	b.n	8017bf8 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8017bda:	89b8      	ldrh	r0, [r7, #12]
 8017bdc:	693b      	ldr	r3, [r7, #16]
 8017bde:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017be2:	7fbb      	ldrb	r3, [r7, #30]
 8017be4:	4a29      	ldr	r2, [pc, #164]	; (8017c8c <dhcp_reboot+0x15c>)
 8017be6:	5cd3      	ldrb	r3, [r2, r3]
 8017be8:	461a      	mov	r2, r3
 8017bea:	f000 f93f 	bl	8017e6c <dhcp_option_byte>
 8017bee:	4603      	mov	r3, r0
 8017bf0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017bf2:	7fbb      	ldrb	r3, [r7, #30]
 8017bf4:	3301      	adds	r3, #1
 8017bf6:	77bb      	strb	r3, [r7, #30]
 8017bf8:	7fbb      	ldrb	r3, [r7, #30]
 8017bfa:	2b03      	cmp	r3, #3
 8017bfc:	d9ed      	bls.n	8017bda <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017bfe:	89b8      	ldrh	r0, [r7, #12]
 8017c00:	693b      	ldr	r3, [r7, #16]
 8017c02:	33f0      	adds	r3, #240	; 0xf0
 8017c04:	697a      	ldr	r2, [r7, #20]
 8017c06:	4619      	mov	r1, r3
 8017c08:	f000 fe74 	bl	80188f4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8017c0c:	4b20      	ldr	r3, [pc, #128]	; (8017c90 <dhcp_reboot+0x160>)
 8017c0e:	6818      	ldr	r0, [r3, #0]
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	9300      	str	r3, [sp, #0]
 8017c14:	2343      	movs	r3, #67	; 0x43
 8017c16:	4a1f      	ldr	r2, [pc, #124]	; (8017c94 <dhcp_reboot+0x164>)
 8017c18:	6979      	ldr	r1, [r7, #20]
 8017c1a:	f7fe fd01 	bl	8016620 <udp_sendto_if>
 8017c1e:	4603      	mov	r3, r0
 8017c20:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8017c22:	6978      	ldr	r0, [r7, #20]
 8017c24:	f7f8 fab4 	bl	8010190 <pbuf_free>
 8017c28:	e001      	b.n	8017c2e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8017c2a:	23ff      	movs	r3, #255	; 0xff
 8017c2c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017c2e:	69bb      	ldr	r3, [r7, #24]
 8017c30:	799b      	ldrb	r3, [r3, #6]
 8017c32:	2bff      	cmp	r3, #255	; 0xff
 8017c34:	d005      	beq.n	8017c42 <dhcp_reboot+0x112>
    dhcp->tries++;
 8017c36:	69bb      	ldr	r3, [r7, #24]
 8017c38:	799b      	ldrb	r3, [r3, #6]
 8017c3a:	3301      	adds	r3, #1
 8017c3c:	b2da      	uxtb	r2, r3
 8017c3e:	69bb      	ldr	r3, [r7, #24]
 8017c40:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8017c42:	69bb      	ldr	r3, [r7, #24]
 8017c44:	799b      	ldrb	r3, [r3, #6]
 8017c46:	2b09      	cmp	r3, #9
 8017c48:	d80a      	bhi.n	8017c60 <dhcp_reboot+0x130>
 8017c4a:	69bb      	ldr	r3, [r7, #24]
 8017c4c:	799b      	ldrb	r3, [r3, #6]
 8017c4e:	b29b      	uxth	r3, r3
 8017c50:	461a      	mov	r2, r3
 8017c52:	0152      	lsls	r2, r2, #5
 8017c54:	1ad2      	subs	r2, r2, r3
 8017c56:	0092      	lsls	r2, r2, #2
 8017c58:	4413      	add	r3, r2
 8017c5a:	00db      	lsls	r3, r3, #3
 8017c5c:	b29b      	uxth	r3, r3
 8017c5e:	e001      	b.n	8017c64 <dhcp_reboot+0x134>
 8017c60:	f242 7310 	movw	r3, #10000	; 0x2710
 8017c64:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017c66:	89fb      	ldrh	r3, [r7, #14]
 8017c68:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017c6c:	4a0a      	ldr	r2, [pc, #40]	; (8017c98 <dhcp_reboot+0x168>)
 8017c6e:	fb82 1203 	smull	r1, r2, r2, r3
 8017c72:	1152      	asrs	r2, r2, #5
 8017c74:	17db      	asrs	r3, r3, #31
 8017c76:	1ad3      	subs	r3, r2, r3
 8017c78:	b29a      	uxth	r2, r3
 8017c7a:	69bb      	ldr	r3, [r7, #24]
 8017c7c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017c7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017c82:	4618      	mov	r0, r3
 8017c84:	3720      	adds	r7, #32
 8017c86:	46bd      	mov	sp, r7
 8017c88:	bdb0      	pop	{r4, r5, r7, pc}
 8017c8a:	bf00      	nop
 8017c8c:	20000064 	.word	0x20000064
 8017c90:	20007430 	.word	0x20007430
 8017c94:	0802453c 	.word	0x0802453c
 8017c98:	10624dd3 	.word	0x10624dd3

08017c9c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8017c9c:	b5b0      	push	{r4, r5, r7, lr}
 8017c9e:	b08a      	sub	sp, #40	; 0x28
 8017ca0:	af02      	add	r7, sp, #8
 8017ca2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ca8:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8017caa:	69fb      	ldr	r3, [r7, #28]
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	f000 8084 	beq.w	8017dba <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8017cb2:	69fb      	ldr	r3, [r7, #28]
 8017cb4:	795b      	ldrb	r3, [r3, #5]
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	f000 8081 	beq.w	8017dbe <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8017cbc:	69fb      	ldr	r3, [r7, #28]
 8017cbe:	699b      	ldr	r3, [r3, #24]
 8017cc0:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8017cc2:	69fb      	ldr	r3, [r7, #28]
 8017cc4:	2200      	movs	r2, #0
 8017cc6:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8017cc8:	69fb      	ldr	r3, [r7, #28]
 8017cca:	2200      	movs	r2, #0
 8017ccc:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8017cce:	69fb      	ldr	r3, [r7, #28]
 8017cd0:	2200      	movs	r2, #0
 8017cd2:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8017cd4:	69fb      	ldr	r3, [r7, #28]
 8017cd6:	2200      	movs	r2, #0
 8017cd8:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8017cda:	69fb      	ldr	r3, [r7, #28]
 8017cdc:	2200      	movs	r2, #0
 8017cde:	631a      	str	r2, [r3, #48]	; 0x30
 8017ce0:	69fb      	ldr	r3, [r7, #28]
 8017ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017ce4:	69fb      	ldr	r3, [r7, #28]
 8017ce6:	62da      	str	r2, [r3, #44]	; 0x2c
 8017ce8:	69fb      	ldr	r3, [r7, #28]
 8017cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017cec:	69fb      	ldr	r3, [r7, #28]
 8017cee:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8017cf0:	69fb      	ldr	r3, [r7, #28]
 8017cf2:	2200      	movs	r2, #0
 8017cf4:	829a      	strh	r2, [r3, #20]
 8017cf6:	69fb      	ldr	r3, [r7, #28]
 8017cf8:	8a9a      	ldrh	r2, [r3, #20]
 8017cfa:	69fb      	ldr	r3, [r7, #28]
 8017cfc:	825a      	strh	r2, [r3, #18]
 8017cfe:	69fb      	ldr	r3, [r7, #28]
 8017d00:	8a5a      	ldrh	r2, [r3, #18]
 8017d02:	69fb      	ldr	r3, [r7, #28]
 8017d04:	821a      	strh	r2, [r3, #16]
 8017d06:	69fb      	ldr	r3, [r7, #28]
 8017d08:	8a1a      	ldrh	r2, [r3, #16]
 8017d0a:	69fb      	ldr	r3, [r7, #28]
 8017d0c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8017d0e:	6878      	ldr	r0, [r7, #4]
 8017d10:	f000 fe1e 	bl	8018950 <dhcp_supplied_address>
 8017d14:	4603      	mov	r3, r0
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d03b      	beq.n	8017d92 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8017d1a:	f107 030e 	add.w	r3, r7, #14
 8017d1e:	2207      	movs	r2, #7
 8017d20:	69f9      	ldr	r1, [r7, #28]
 8017d22:	6878      	ldr	r0, [r7, #4]
 8017d24:	f000 fd10 	bl	8018748 <dhcp_create_msg>
 8017d28:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8017d2a:	69bb      	ldr	r3, [r7, #24]
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d030      	beq.n	8017d92 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017d30:	69bb      	ldr	r3, [r7, #24]
 8017d32:	685b      	ldr	r3, [r3, #4]
 8017d34:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8017d36:	89f8      	ldrh	r0, [r7, #14]
 8017d38:	697b      	ldr	r3, [r7, #20]
 8017d3a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017d3e:	2304      	movs	r3, #4
 8017d40:	2236      	movs	r2, #54	; 0x36
 8017d42:	f000 f85f 	bl	8017e04 <dhcp_option>
 8017d46:	4603      	mov	r3, r0
 8017d48:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8017d4a:	89fc      	ldrh	r4, [r7, #14]
 8017d4c:	697b      	ldr	r3, [r7, #20]
 8017d4e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8017d52:	693b      	ldr	r3, [r7, #16]
 8017d54:	4618      	mov	r0, r3
 8017d56:	f7f6 fb9a 	bl	800e48e <lwip_htonl>
 8017d5a:	4603      	mov	r3, r0
 8017d5c:	461a      	mov	r2, r3
 8017d5e:	4629      	mov	r1, r5
 8017d60:	4620      	mov	r0, r4
 8017d62:	f000 f8db 	bl	8017f1c <dhcp_option_long>
 8017d66:	4603      	mov	r3, r0
 8017d68:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017d6a:	89f8      	ldrh	r0, [r7, #14]
 8017d6c:	697b      	ldr	r3, [r7, #20]
 8017d6e:	33f0      	adds	r3, #240	; 0xf0
 8017d70:	69ba      	ldr	r2, [r7, #24]
 8017d72:	4619      	mov	r1, r3
 8017d74:	f000 fdbe 	bl	80188f4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8017d78:	4b13      	ldr	r3, [pc, #76]	; (8017dc8 <dhcp_release_and_stop+0x12c>)
 8017d7a:	6818      	ldr	r0, [r3, #0]
 8017d7c:	f107 0210 	add.w	r2, r7, #16
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	9300      	str	r3, [sp, #0]
 8017d84:	2343      	movs	r3, #67	; 0x43
 8017d86:	69b9      	ldr	r1, [r7, #24]
 8017d88:	f7fe fc4a 	bl	8016620 <udp_sendto_if>
      pbuf_free(p_out);
 8017d8c:	69b8      	ldr	r0, [r7, #24]
 8017d8e:	f7f8 f9ff 	bl	8010190 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8017d92:	4b0e      	ldr	r3, [pc, #56]	; (8017dcc <dhcp_release_and_stop+0x130>)
 8017d94:	4a0d      	ldr	r2, [pc, #52]	; (8017dcc <dhcp_release_and_stop+0x130>)
 8017d96:	490d      	ldr	r1, [pc, #52]	; (8017dcc <dhcp_release_and_stop+0x130>)
 8017d98:	6878      	ldr	r0, [r7, #4]
 8017d9a:	f7f7 fd69 	bl	800f870 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8017d9e:	2100      	movs	r1, #0
 8017da0:	69f8      	ldr	r0, [r7, #28]
 8017da2:	f000 f815 	bl	8017dd0 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8017da6:	69fb      	ldr	r3, [r7, #28]
 8017da8:	791b      	ldrb	r3, [r3, #4]
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d008      	beq.n	8017dc0 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8017dae:	f7fe ff9f 	bl	8016cf0 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8017db2:	69fb      	ldr	r3, [r7, #28]
 8017db4:	2200      	movs	r2, #0
 8017db6:	711a      	strb	r2, [r3, #4]
 8017db8:	e002      	b.n	8017dc0 <dhcp_release_and_stop+0x124>
    return;
 8017dba:	bf00      	nop
 8017dbc:	e000      	b.n	8017dc0 <dhcp_release_and_stop+0x124>
    return;
 8017dbe:	bf00      	nop
  }
}
 8017dc0:	3720      	adds	r7, #32
 8017dc2:	46bd      	mov	sp, r7
 8017dc4:	bdb0      	pop	{r4, r5, r7, pc}
 8017dc6:	bf00      	nop
 8017dc8:	20007430 	.word	0x20007430
 8017dcc:	08024538 	.word	0x08024538

08017dd0 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8017dd0:	b480      	push	{r7}
 8017dd2:	b083      	sub	sp, #12
 8017dd4:	af00      	add	r7, sp, #0
 8017dd6:	6078      	str	r0, [r7, #4]
 8017dd8:	460b      	mov	r3, r1
 8017dda:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	795b      	ldrb	r3, [r3, #5]
 8017de0:	78fa      	ldrb	r2, [r7, #3]
 8017de2:	429a      	cmp	r2, r3
 8017de4:	d008      	beq.n	8017df8 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	78fa      	ldrb	r2, [r7, #3]
 8017dea:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	2200      	movs	r2, #0
 8017df0:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	2200      	movs	r2, #0
 8017df6:	811a      	strh	r2, [r3, #8]
  }
}
 8017df8:	bf00      	nop
 8017dfa:	370c      	adds	r7, #12
 8017dfc:	46bd      	mov	sp, r7
 8017dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e02:	4770      	bx	lr

08017e04 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8017e04:	b580      	push	{r7, lr}
 8017e06:	b082      	sub	sp, #8
 8017e08:	af00      	add	r7, sp, #0
 8017e0a:	6039      	str	r1, [r7, #0]
 8017e0c:	4611      	mov	r1, r2
 8017e0e:	461a      	mov	r2, r3
 8017e10:	4603      	mov	r3, r0
 8017e12:	80fb      	strh	r3, [r7, #6]
 8017e14:	460b      	mov	r3, r1
 8017e16:	717b      	strb	r3, [r7, #5]
 8017e18:	4613      	mov	r3, r2
 8017e1a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8017e1c:	88fa      	ldrh	r2, [r7, #6]
 8017e1e:	793b      	ldrb	r3, [r7, #4]
 8017e20:	4413      	add	r3, r2
 8017e22:	3302      	adds	r3, #2
 8017e24:	2b44      	cmp	r3, #68	; 0x44
 8017e26:	d906      	bls.n	8017e36 <dhcp_option+0x32>
 8017e28:	4b0d      	ldr	r3, [pc, #52]	; (8017e60 <dhcp_option+0x5c>)
 8017e2a:	f240 529a 	movw	r2, #1434	; 0x59a
 8017e2e:	490d      	ldr	r1, [pc, #52]	; (8017e64 <dhcp_option+0x60>)
 8017e30:	480d      	ldr	r0, [pc, #52]	; (8017e68 <dhcp_option+0x64>)
 8017e32:	f004 fc7d 	bl	801c730 <iprintf>
  options[options_out_len++] = option_type;
 8017e36:	88fb      	ldrh	r3, [r7, #6]
 8017e38:	1c5a      	adds	r2, r3, #1
 8017e3a:	80fa      	strh	r2, [r7, #6]
 8017e3c:	461a      	mov	r2, r3
 8017e3e:	683b      	ldr	r3, [r7, #0]
 8017e40:	4413      	add	r3, r2
 8017e42:	797a      	ldrb	r2, [r7, #5]
 8017e44:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8017e46:	88fb      	ldrh	r3, [r7, #6]
 8017e48:	1c5a      	adds	r2, r3, #1
 8017e4a:	80fa      	strh	r2, [r7, #6]
 8017e4c:	461a      	mov	r2, r3
 8017e4e:	683b      	ldr	r3, [r7, #0]
 8017e50:	4413      	add	r3, r2
 8017e52:	793a      	ldrb	r2, [r7, #4]
 8017e54:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8017e56:	88fb      	ldrh	r3, [r7, #6]
}
 8017e58:	4618      	mov	r0, r3
 8017e5a:	3708      	adds	r7, #8
 8017e5c:	46bd      	mov	sp, r7
 8017e5e:	bd80      	pop	{r7, pc}
 8017e60:	0802297c 	.word	0x0802297c
 8017e64:	08022b10 	.word	0x08022b10
 8017e68:	080229dc 	.word	0x080229dc

08017e6c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8017e6c:	b580      	push	{r7, lr}
 8017e6e:	b082      	sub	sp, #8
 8017e70:	af00      	add	r7, sp, #0
 8017e72:	4603      	mov	r3, r0
 8017e74:	6039      	str	r1, [r7, #0]
 8017e76:	80fb      	strh	r3, [r7, #6]
 8017e78:	4613      	mov	r3, r2
 8017e7a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8017e7c:	88fb      	ldrh	r3, [r7, #6]
 8017e7e:	2b43      	cmp	r3, #67	; 0x43
 8017e80:	d906      	bls.n	8017e90 <dhcp_option_byte+0x24>
 8017e82:	4b0a      	ldr	r3, [pc, #40]	; (8017eac <dhcp_option_byte+0x40>)
 8017e84:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8017e88:	4909      	ldr	r1, [pc, #36]	; (8017eb0 <dhcp_option_byte+0x44>)
 8017e8a:	480a      	ldr	r0, [pc, #40]	; (8017eb4 <dhcp_option_byte+0x48>)
 8017e8c:	f004 fc50 	bl	801c730 <iprintf>
  options[options_out_len++] = value;
 8017e90:	88fb      	ldrh	r3, [r7, #6]
 8017e92:	1c5a      	adds	r2, r3, #1
 8017e94:	80fa      	strh	r2, [r7, #6]
 8017e96:	461a      	mov	r2, r3
 8017e98:	683b      	ldr	r3, [r7, #0]
 8017e9a:	4413      	add	r3, r2
 8017e9c:	797a      	ldrb	r2, [r7, #5]
 8017e9e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8017ea0:	88fb      	ldrh	r3, [r7, #6]
}
 8017ea2:	4618      	mov	r0, r3
 8017ea4:	3708      	adds	r7, #8
 8017ea6:	46bd      	mov	sp, r7
 8017ea8:	bd80      	pop	{r7, pc}
 8017eaa:	bf00      	nop
 8017eac:	0802297c 	.word	0x0802297c
 8017eb0:	08022b54 	.word	0x08022b54
 8017eb4:	080229dc 	.word	0x080229dc

08017eb8 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8017eb8:	b580      	push	{r7, lr}
 8017eba:	b082      	sub	sp, #8
 8017ebc:	af00      	add	r7, sp, #0
 8017ebe:	4603      	mov	r3, r0
 8017ec0:	6039      	str	r1, [r7, #0]
 8017ec2:	80fb      	strh	r3, [r7, #6]
 8017ec4:	4613      	mov	r3, r2
 8017ec6:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8017ec8:	88fb      	ldrh	r3, [r7, #6]
 8017eca:	3302      	adds	r3, #2
 8017ecc:	2b44      	cmp	r3, #68	; 0x44
 8017ece:	d906      	bls.n	8017ede <dhcp_option_short+0x26>
 8017ed0:	4b0f      	ldr	r3, [pc, #60]	; (8017f10 <dhcp_option_short+0x58>)
 8017ed2:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8017ed6:	490f      	ldr	r1, [pc, #60]	; (8017f14 <dhcp_option_short+0x5c>)
 8017ed8:	480f      	ldr	r0, [pc, #60]	; (8017f18 <dhcp_option_short+0x60>)
 8017eda:	f004 fc29 	bl	801c730 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8017ede:	88bb      	ldrh	r3, [r7, #4]
 8017ee0:	0a1b      	lsrs	r3, r3, #8
 8017ee2:	b29a      	uxth	r2, r3
 8017ee4:	88fb      	ldrh	r3, [r7, #6]
 8017ee6:	1c59      	adds	r1, r3, #1
 8017ee8:	80f9      	strh	r1, [r7, #6]
 8017eea:	4619      	mov	r1, r3
 8017eec:	683b      	ldr	r3, [r7, #0]
 8017eee:	440b      	add	r3, r1
 8017ef0:	b2d2      	uxtb	r2, r2
 8017ef2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8017ef4:	88fb      	ldrh	r3, [r7, #6]
 8017ef6:	1c5a      	adds	r2, r3, #1
 8017ef8:	80fa      	strh	r2, [r7, #6]
 8017efa:	461a      	mov	r2, r3
 8017efc:	683b      	ldr	r3, [r7, #0]
 8017efe:	4413      	add	r3, r2
 8017f00:	88ba      	ldrh	r2, [r7, #4]
 8017f02:	b2d2      	uxtb	r2, r2
 8017f04:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8017f06:	88fb      	ldrh	r3, [r7, #6]
}
 8017f08:	4618      	mov	r0, r3
 8017f0a:	3708      	adds	r7, #8
 8017f0c:	46bd      	mov	sp, r7
 8017f0e:	bd80      	pop	{r7, pc}
 8017f10:	0802297c 	.word	0x0802297c
 8017f14:	08022b8c 	.word	0x08022b8c
 8017f18:	080229dc 	.word	0x080229dc

08017f1c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8017f1c:	b580      	push	{r7, lr}
 8017f1e:	b084      	sub	sp, #16
 8017f20:	af00      	add	r7, sp, #0
 8017f22:	4603      	mov	r3, r0
 8017f24:	60b9      	str	r1, [r7, #8]
 8017f26:	607a      	str	r2, [r7, #4]
 8017f28:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8017f2a:	89fb      	ldrh	r3, [r7, #14]
 8017f2c:	3304      	adds	r3, #4
 8017f2e:	2b44      	cmp	r3, #68	; 0x44
 8017f30:	d906      	bls.n	8017f40 <dhcp_option_long+0x24>
 8017f32:	4b19      	ldr	r3, [pc, #100]	; (8017f98 <dhcp_option_long+0x7c>)
 8017f34:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8017f38:	4918      	ldr	r1, [pc, #96]	; (8017f9c <dhcp_option_long+0x80>)
 8017f3a:	4819      	ldr	r0, [pc, #100]	; (8017fa0 <dhcp_option_long+0x84>)
 8017f3c:	f004 fbf8 	bl	801c730 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	0e1a      	lsrs	r2, r3, #24
 8017f44:	89fb      	ldrh	r3, [r7, #14]
 8017f46:	1c59      	adds	r1, r3, #1
 8017f48:	81f9      	strh	r1, [r7, #14]
 8017f4a:	4619      	mov	r1, r3
 8017f4c:	68bb      	ldr	r3, [r7, #8]
 8017f4e:	440b      	add	r3, r1
 8017f50:	b2d2      	uxtb	r2, r2
 8017f52:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	0c1a      	lsrs	r2, r3, #16
 8017f58:	89fb      	ldrh	r3, [r7, #14]
 8017f5a:	1c59      	adds	r1, r3, #1
 8017f5c:	81f9      	strh	r1, [r7, #14]
 8017f5e:	4619      	mov	r1, r3
 8017f60:	68bb      	ldr	r3, [r7, #8]
 8017f62:	440b      	add	r3, r1
 8017f64:	b2d2      	uxtb	r2, r2
 8017f66:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	0a1a      	lsrs	r2, r3, #8
 8017f6c:	89fb      	ldrh	r3, [r7, #14]
 8017f6e:	1c59      	adds	r1, r3, #1
 8017f70:	81f9      	strh	r1, [r7, #14]
 8017f72:	4619      	mov	r1, r3
 8017f74:	68bb      	ldr	r3, [r7, #8]
 8017f76:	440b      	add	r3, r1
 8017f78:	b2d2      	uxtb	r2, r2
 8017f7a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8017f7c:	89fb      	ldrh	r3, [r7, #14]
 8017f7e:	1c5a      	adds	r2, r3, #1
 8017f80:	81fa      	strh	r2, [r7, #14]
 8017f82:	461a      	mov	r2, r3
 8017f84:	68bb      	ldr	r3, [r7, #8]
 8017f86:	4413      	add	r3, r2
 8017f88:	687a      	ldr	r2, [r7, #4]
 8017f8a:	b2d2      	uxtb	r2, r2
 8017f8c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8017f8e:	89fb      	ldrh	r3, [r7, #14]
}
 8017f90:	4618      	mov	r0, r3
 8017f92:	3710      	adds	r7, #16
 8017f94:	46bd      	mov	sp, r7
 8017f96:	bd80      	pop	{r7, pc}
 8017f98:	0802297c 	.word	0x0802297c
 8017f9c:	08022bc8 	.word	0x08022bc8
 8017fa0:	080229dc 	.word	0x080229dc

08017fa4 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8017fa4:	b580      	push	{r7, lr}
 8017fa6:	b090      	sub	sp, #64	; 0x40
 8017fa8:	af00      	add	r7, sp, #0
 8017faa:	6078      	str	r0, [r7, #4]
 8017fac:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8017fae:	2300      	movs	r3, #0
 8017fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8017fb2:	2300      	movs	r3, #0
 8017fb4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8017fb6:	220a      	movs	r2, #10
 8017fb8:	2100      	movs	r1, #0
 8017fba:	48ba      	ldr	r0, [pc, #744]	; (80182a4 <dhcp_parse_reply+0x300>)
 8017fbc:	f003 fc72 	bl	801b8a4 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	895b      	ldrh	r3, [r3, #10]
 8017fc4:	2b2b      	cmp	r3, #43	; 0x2b
 8017fc6:	d802      	bhi.n	8017fce <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8017fc8:	f06f 0301 	mvn.w	r3, #1
 8017fcc:	e2ea      	b.n	80185a4 <dhcp_parse_reply+0x600>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	685b      	ldr	r3, [r3, #4]
 8017fd2:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8017fd4:	23f0      	movs	r3, #240	; 0xf0
 8017fd6:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	891b      	ldrh	r3, [r3, #8]
 8017fdc:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8017fe2:	e00c      	b.n	8017ffe <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8017fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fe6:	895b      	ldrh	r3, [r3, #10]
 8017fe8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8017fea:	1ad3      	subs	r3, r2, r3
 8017fec:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8017fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ff0:	895b      	ldrh	r3, [r3, #10]
 8017ff2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8017ff4:	1ad3      	subs	r3, r2, r3
 8017ff6:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8017ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8017ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018000:	2b00      	cmp	r3, #0
 8018002:	d004      	beq.n	801800e <dhcp_parse_reply+0x6a>
 8018004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018006:	895b      	ldrh	r3, [r3, #10]
 8018008:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801800a:	429a      	cmp	r2, r3
 801800c:	d2ea      	bcs.n	8017fe4 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801800e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018010:	2b00      	cmp	r3, #0
 8018012:	d102      	bne.n	801801a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8018014:	f06f 0301 	mvn.w	r3, #1
 8018018:	e2c4      	b.n	80185a4 <dhcp_parse_reply+0x600>
  }
  offset = options_idx;
 801801a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801801c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801801e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018020:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8018022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018024:	685b      	ldr	r3, [r3, #4]
 8018026:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8018028:	e267      	b.n	80184fa <dhcp_parse_reply+0x556>
    u8_t op = options[offset];
 801802a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801802c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801802e:	4413      	add	r3, r2
 8018030:	781b      	ldrb	r3, [r3, #0]
 8018032:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8018034:	2300      	movs	r3, #0
 8018036:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801803a:	f04f 33ff 	mov.w	r3, #4294967295
 801803e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8018040:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018042:	3302      	adds	r3, #2
 8018044:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8018046:	8bfa      	ldrh	r2, [r7, #30]
 8018048:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801804a:	429a      	cmp	r2, r3
 801804c:	d202      	bcs.n	8018054 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801804e:	f06f 0301 	mvn.w	r3, #1
 8018052:	e2a7      	b.n	80185a4 <dhcp_parse_reply+0x600>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8018054:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018056:	3301      	adds	r3, #1
 8018058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801805a:	8952      	ldrh	r2, [r2, #10]
 801805c:	4293      	cmp	r3, r2
 801805e:	da07      	bge.n	8018070 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8018060:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018062:	3301      	adds	r3, #1
 8018064:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018066:	4413      	add	r3, r2
 8018068:	781b      	ldrb	r3, [r3, #0]
 801806a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801806e:	e00b      	b.n	8018088 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8018070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018072:	681b      	ldr	r3, [r3, #0]
 8018074:	2b00      	cmp	r3, #0
 8018076:	d004      	beq.n	8018082 <dhcp_parse_reply+0xde>
 8018078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	685b      	ldr	r3, [r3, #4]
 801807e:	781b      	ldrb	r3, [r3, #0]
 8018080:	e000      	b.n	8018084 <dhcp_parse_reply+0xe0>
 8018082:	2300      	movs	r3, #0
 8018084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8018088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801808c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8018090:	7dfb      	ldrb	r3, [r7, #23]
 8018092:	2b3b      	cmp	r3, #59	; 0x3b
 8018094:	f200 815a 	bhi.w	801834c <dhcp_parse_reply+0x3a8>
 8018098:	a201      	add	r2, pc, #4	; (adr r2, 80180a0 <dhcp_parse_reply+0xfc>)
 801809a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801809e:	bf00      	nop
 80180a0:	08018191 	.word	0x08018191
 80180a4:	080181a1 	.word	0x080181a1
 80180a8:	0801834d 	.word	0x0801834d
 80180ac:	080181c3 	.word	0x080181c3
 80180b0:	0801834d 	.word	0x0801834d
 80180b4:	0801834d 	.word	0x0801834d
 80180b8:	080181ef 	.word	0x080181ef
 80180bc:	0801834d 	.word	0x0801834d
 80180c0:	0801834d 	.word	0x0801834d
 80180c4:	0801834d 	.word	0x0801834d
 80180c8:	0801834d 	.word	0x0801834d
 80180cc:	0801834d 	.word	0x0801834d
 80180d0:	0801834d 	.word	0x0801834d
 80180d4:	0801834d 	.word	0x0801834d
 80180d8:	0801834d 	.word	0x0801834d
 80180dc:	0801834d 	.word	0x0801834d
 80180e0:	0801834d 	.word	0x0801834d
 80180e4:	0801834d 	.word	0x0801834d
 80180e8:	0801834d 	.word	0x0801834d
 80180ec:	0801834d 	.word	0x0801834d
 80180f0:	0801834d 	.word	0x0801834d
 80180f4:	0801834d 	.word	0x0801834d
 80180f8:	0801834d 	.word	0x0801834d
 80180fc:	0801834d 	.word	0x0801834d
 8018100:	0801834d 	.word	0x0801834d
 8018104:	0801834d 	.word	0x0801834d
 8018108:	0801834d 	.word	0x0801834d
 801810c:	0801834d 	.word	0x0801834d
 8018110:	0801834d 	.word	0x0801834d
 8018114:	0801834d 	.word	0x0801834d
 8018118:	0801834d 	.word	0x0801834d
 801811c:	0801834d 	.word	0x0801834d
 8018120:	0801834d 	.word	0x0801834d
 8018124:	0801834d 	.word	0x0801834d
 8018128:	0801834d 	.word	0x0801834d
 801812c:	0801834d 	.word	0x0801834d
 8018130:	0801834d 	.word	0x0801834d
 8018134:	0801834d 	.word	0x0801834d
 8018138:	0801834d 	.word	0x0801834d
 801813c:	0801834d 	.word	0x0801834d
 8018140:	0801834d 	.word	0x0801834d
 8018144:	0801834d 	.word	0x0801834d
 8018148:	0801834d 	.word	0x0801834d
 801814c:	0801834d 	.word	0x0801834d
 8018150:	0801834d 	.word	0x0801834d
 8018154:	0801834d 	.word	0x0801834d
 8018158:	0801834d 	.word	0x0801834d
 801815c:	0801834d 	.word	0x0801834d
 8018160:	0801834d 	.word	0x0801834d
 8018164:	0801834d 	.word	0x0801834d
 8018168:	0801834d 	.word	0x0801834d
 801816c:	08018245 	.word	0x08018245
 8018170:	08018267 	.word	0x08018267
 8018174:	080182c5 	.word	0x080182c5
 8018178:	080182e7 	.word	0x080182e7
 801817c:	0801834d 	.word	0x0801834d
 8018180:	0801834d 	.word	0x0801834d
 8018184:	0801834d 	.word	0x0801834d
 8018188:	08018309 	.word	0x08018309
 801818c:	0801832b 	.word	0x0801832b
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8018190:	2300      	movs	r3, #0
 8018192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018196:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801819a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801819e:	e0d9      	b.n	8018354 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80181a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80181a4:	2b04      	cmp	r3, #4
 80181a6:	d009      	beq.n	80181bc <dhcp_parse_reply+0x218>
 80181a8:	4b3f      	ldr	r3, [pc, #252]	; (80182a8 <dhcp_parse_reply+0x304>)
 80181aa:	f240 622e 	movw	r2, #1582	; 0x62e
 80181ae:	493f      	ldr	r1, [pc, #252]	; (80182ac <dhcp_parse_reply+0x308>)
 80181b0:	483f      	ldr	r0, [pc, #252]	; (80182b0 <dhcp_parse_reply+0x30c>)
 80181b2:	f004 fabd 	bl	801c730 <iprintf>
 80181b6:	f06f 0305 	mvn.w	r3, #5
 80181ba:	e1f3      	b.n	80185a4 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80181bc:	2306      	movs	r3, #6
 80181be:	623b      	str	r3, [r7, #32]
        break;
 80181c0:	e0c8      	b.n	8018354 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80181c2:	2304      	movs	r3, #4
 80181c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80181c8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80181cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80181d0:	429a      	cmp	r2, r3
 80181d2:	d209      	bcs.n	80181e8 <dhcp_parse_reply+0x244>
 80181d4:	4b34      	ldr	r3, [pc, #208]	; (80182a8 <dhcp_parse_reply+0x304>)
 80181d6:	f240 6233 	movw	r2, #1587	; 0x633
 80181da:	4936      	ldr	r1, [pc, #216]	; (80182b4 <dhcp_parse_reply+0x310>)
 80181dc:	4834      	ldr	r0, [pc, #208]	; (80182b0 <dhcp_parse_reply+0x30c>)
 80181de:	f004 faa7 	bl	801c730 <iprintf>
 80181e2:	f06f 0305 	mvn.w	r3, #5
 80181e6:	e1dd      	b.n	80185a4 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80181e8:	2307      	movs	r3, #7
 80181ea:	623b      	str	r3, [r7, #32]
        break;
 80181ec:	e0b2      	b.n	8018354 <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 80181ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80181f2:	f003 0303 	and.w	r3, r3, #3
 80181f6:	b2db      	uxtb	r3, r3
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d009      	beq.n	8018210 <dhcp_parse_reply+0x26c>
 80181fc:	4b2a      	ldr	r3, [pc, #168]	; (80182a8 <dhcp_parse_reply+0x304>)
 80181fe:	f240 6239 	movw	r2, #1593	; 0x639
 8018202:	492d      	ldr	r1, [pc, #180]	; (80182b8 <dhcp_parse_reply+0x314>)
 8018204:	482a      	ldr	r0, [pc, #168]	; (80182b0 <dhcp_parse_reply+0x30c>)
 8018206:	f004 fa93 	bl	801c730 <iprintf>
 801820a:	f06f 0305 	mvn.w	r3, #5
 801820e:	e1c9      	b.n	80185a4 <dhcp_parse_reply+0x600>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 8018210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018214:	2b08      	cmp	r3, #8
 8018216:	bf28      	it	cs
 8018218:	2308      	movcs	r3, #8
 801821a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801821e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018222:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018226:	429a      	cmp	r2, r3
 8018228:	d209      	bcs.n	801823e <dhcp_parse_reply+0x29a>
 801822a:	4b1f      	ldr	r3, [pc, #124]	; (80182a8 <dhcp_parse_reply+0x304>)
 801822c:	f240 623c 	movw	r2, #1596	; 0x63c
 8018230:	4920      	ldr	r1, [pc, #128]	; (80182b4 <dhcp_parse_reply+0x310>)
 8018232:	481f      	ldr	r0, [pc, #124]	; (80182b0 <dhcp_parse_reply+0x30c>)
 8018234:	f004 fa7c 	bl	801c730 <iprintf>
 8018238:	f06f 0305 	mvn.w	r3, #5
 801823c:	e1b2      	b.n	80185a4 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 801823e:	2308      	movs	r3, #8
 8018240:	623b      	str	r3, [r7, #32]
        break;
 8018242:	e087      	b.n	8018354 <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8018244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018248:	2b04      	cmp	r3, #4
 801824a:	d009      	beq.n	8018260 <dhcp_parse_reply+0x2bc>
 801824c:	4b16      	ldr	r3, [pc, #88]	; (80182a8 <dhcp_parse_reply+0x304>)
 801824e:	f240 6241 	movw	r2, #1601	; 0x641
 8018252:	4916      	ldr	r1, [pc, #88]	; (80182ac <dhcp_parse_reply+0x308>)
 8018254:	4816      	ldr	r0, [pc, #88]	; (80182b0 <dhcp_parse_reply+0x30c>)
 8018256:	f004 fa6b 	bl	801c730 <iprintf>
 801825a:	f06f 0305 	mvn.w	r3, #5
 801825e:	e1a1      	b.n	80185a4 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8018260:	2303      	movs	r3, #3
 8018262:	623b      	str	r3, [r7, #32]
        break;
 8018264:	e076      	b.n	8018354 <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8018266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801826a:	2b01      	cmp	r3, #1
 801826c:	d009      	beq.n	8018282 <dhcp_parse_reply+0x2de>
 801826e:	4b0e      	ldr	r3, [pc, #56]	; (80182a8 <dhcp_parse_reply+0x304>)
 8018270:	f240 624f 	movw	r2, #1615	; 0x64f
 8018274:	4911      	ldr	r1, [pc, #68]	; (80182bc <dhcp_parse_reply+0x318>)
 8018276:	480e      	ldr	r0, [pc, #56]	; (80182b0 <dhcp_parse_reply+0x30c>)
 8018278:	f004 fa5a 	bl	801c730 <iprintf>
 801827c:	f06f 0305 	mvn.w	r3, #5
 8018280:	e190      	b.n	80185a4 <dhcp_parse_reply+0x600>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8018282:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8018284:	2bf0      	cmp	r3, #240	; 0xf0
 8018286:	d009      	beq.n	801829c <dhcp_parse_reply+0x2f8>
 8018288:	4b07      	ldr	r3, [pc, #28]	; (80182a8 <dhcp_parse_reply+0x304>)
 801828a:	f240 6251 	movw	r2, #1617	; 0x651
 801828e:	490c      	ldr	r1, [pc, #48]	; (80182c0 <dhcp_parse_reply+0x31c>)
 8018290:	4807      	ldr	r0, [pc, #28]	; (80182b0 <dhcp_parse_reply+0x30c>)
 8018292:	f004 fa4d 	bl	801c730 <iprintf>
 8018296:	f06f 0305 	mvn.w	r3, #5
 801829a:	e183      	b.n	80185a4 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801829c:	2300      	movs	r3, #0
 801829e:	623b      	str	r3, [r7, #32]
        break;
 80182a0:	e058      	b.n	8018354 <dhcp_parse_reply+0x3b0>
 80182a2:	bf00      	nop
 80182a4:	20007424 	.word	0x20007424
 80182a8:	0802297c 	.word	0x0802297c
 80182ac:	08022c04 	.word	0x08022c04
 80182b0:	080229dc 	.word	0x080229dc
 80182b4:	08022c10 	.word	0x08022c10
 80182b8:	08022c24 	.word	0x08022c24
 80182bc:	08022c34 	.word	0x08022c34
 80182c0:	08022c40 	.word	0x08022c40
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80182c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80182c8:	2b01      	cmp	r3, #1
 80182ca:	d009      	beq.n	80182e0 <dhcp_parse_reply+0x33c>
 80182cc:	4b9d      	ldr	r3, [pc, #628]	; (8018544 <dhcp_parse_reply+0x5a0>)
 80182ce:	f240 6255 	movw	r2, #1621	; 0x655
 80182d2:	499d      	ldr	r1, [pc, #628]	; (8018548 <dhcp_parse_reply+0x5a4>)
 80182d4:	489d      	ldr	r0, [pc, #628]	; (801854c <dhcp_parse_reply+0x5a8>)
 80182d6:	f004 fa2b 	bl	801c730 <iprintf>
 80182da:	f06f 0305 	mvn.w	r3, #5
 80182de:	e161      	b.n	80185a4 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80182e0:	2301      	movs	r3, #1
 80182e2:	623b      	str	r3, [r7, #32]
        break;
 80182e4:	e036      	b.n	8018354 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80182e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80182ea:	2b04      	cmp	r3, #4
 80182ec:	d009      	beq.n	8018302 <dhcp_parse_reply+0x35e>
 80182ee:	4b95      	ldr	r3, [pc, #596]	; (8018544 <dhcp_parse_reply+0x5a0>)
 80182f0:	f240 6259 	movw	r2, #1625	; 0x659
 80182f4:	4996      	ldr	r1, [pc, #600]	; (8018550 <dhcp_parse_reply+0x5ac>)
 80182f6:	4895      	ldr	r0, [pc, #596]	; (801854c <dhcp_parse_reply+0x5a8>)
 80182f8:	f004 fa1a 	bl	801c730 <iprintf>
 80182fc:	f06f 0305 	mvn.w	r3, #5
 8018300:	e150      	b.n	80185a4 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8018302:	2302      	movs	r3, #2
 8018304:	623b      	str	r3, [r7, #32]
        break;
 8018306:	e025      	b.n	8018354 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8018308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801830c:	2b04      	cmp	r3, #4
 801830e:	d009      	beq.n	8018324 <dhcp_parse_reply+0x380>
 8018310:	4b8c      	ldr	r3, [pc, #560]	; (8018544 <dhcp_parse_reply+0x5a0>)
 8018312:	f240 625d 	movw	r2, #1629	; 0x65d
 8018316:	498e      	ldr	r1, [pc, #568]	; (8018550 <dhcp_parse_reply+0x5ac>)
 8018318:	488c      	ldr	r0, [pc, #560]	; (801854c <dhcp_parse_reply+0x5a8>)
 801831a:	f004 fa09 	bl	801c730 <iprintf>
 801831e:	f06f 0305 	mvn.w	r3, #5
 8018322:	e13f      	b.n	80185a4 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T1;
 8018324:	2304      	movs	r3, #4
 8018326:	623b      	str	r3, [r7, #32]
        break;
 8018328:	e014      	b.n	8018354 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801832a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801832e:	2b04      	cmp	r3, #4
 8018330:	d009      	beq.n	8018346 <dhcp_parse_reply+0x3a2>
 8018332:	4b84      	ldr	r3, [pc, #528]	; (8018544 <dhcp_parse_reply+0x5a0>)
 8018334:	f240 6261 	movw	r2, #1633	; 0x661
 8018338:	4985      	ldr	r1, [pc, #532]	; (8018550 <dhcp_parse_reply+0x5ac>)
 801833a:	4884      	ldr	r0, [pc, #528]	; (801854c <dhcp_parse_reply+0x5a8>)
 801833c:	f004 f9f8 	bl	801c730 <iprintf>
 8018340:	f06f 0305 	mvn.w	r3, #5
 8018344:	e12e      	b.n	80185a4 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T2;
 8018346:	2305      	movs	r3, #5
 8018348:	623b      	str	r3, [r7, #32]
        break;
 801834a:	e003      	b.n	8018354 <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 801834c:	2300      	movs	r3, #0
 801834e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8018352:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8018354:	7dfb      	ldrb	r3, [r7, #23]
 8018356:	2b00      	cmp	r3, #0
 8018358:	d103      	bne.n	8018362 <dhcp_parse_reply+0x3be>
      offset++;
 801835a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801835c:	3301      	adds	r3, #1
 801835e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8018360:	e0a1      	b.n	80184a6 <dhcp_parse_reply+0x502>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8018362:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018368:	4413      	add	r3, r2
 801836a:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801836e:	4293      	cmp	r3, r2
 8018370:	dd02      	ble.n	8018378 <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 8018372:	f06f 0301 	mvn.w	r3, #1
 8018376:	e115      	b.n	80185a4 <dhcp_parse_reply+0x600>
      }
      offset = (u16_t)(offset + len + 2);
 8018378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801837c:	b29a      	uxth	r2, r3
 801837e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018380:	4413      	add	r3, r2
 8018382:	b29b      	uxth	r3, r3
 8018384:	3302      	adds	r3, #2
 8018386:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8018388:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801838c:	2b00      	cmp	r3, #0
 801838e:	f000 808a 	beq.w	80184a6 <dhcp_parse_reply+0x502>
        u32_t value = 0;
 8018392:	2300      	movs	r3, #0
 8018394:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8018396:	6a3b      	ldr	r3, [r7, #32]
 8018398:	2b00      	cmp	r3, #0
 801839a:	db02      	blt.n	80183a2 <dhcp_parse_reply+0x3fe>
 801839c:	6a3b      	ldr	r3, [r7, #32]
 801839e:	2b09      	cmp	r3, #9
 80183a0:	dd06      	ble.n	80183b0 <dhcp_parse_reply+0x40c>
 80183a2:	4b68      	ldr	r3, [pc, #416]	; (8018544 <dhcp_parse_reply+0x5a0>)
 80183a4:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80183a8:	496a      	ldr	r1, [pc, #424]	; (8018554 <dhcp_parse_reply+0x5b0>)
 80183aa:	4868      	ldr	r0, [pc, #416]	; (801854c <dhcp_parse_reply+0x5a8>)
 80183ac:	f004 f9c0 	bl	801c730 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80183b0:	4a69      	ldr	r2, [pc, #420]	; (8018558 <dhcp_parse_reply+0x5b4>)
 80183b2:	6a3b      	ldr	r3, [r7, #32]
 80183b4:	4413      	add	r3, r2
 80183b6:	781b      	ldrb	r3, [r3, #0]
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d174      	bne.n	80184a6 <dhcp_parse_reply+0x502>
          copy_len = LWIP_MIN(decode_len, 4);
 80183bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80183c0:	2b04      	cmp	r3, #4
 80183c2:	bf28      	it	cs
 80183c4:	2304      	movcs	r3, #4
 80183c6:	b2db      	uxtb	r3, r3
 80183c8:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80183ca:	8bfb      	ldrh	r3, [r7, #30]
 80183cc:	8aba      	ldrh	r2, [r7, #20]
 80183ce:	f107 0108 	add.w	r1, r7, #8
 80183d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80183d4:	f7f8 f8d6 	bl	8010584 <pbuf_copy_partial>
 80183d8:	4603      	mov	r3, r0
 80183da:	461a      	mov	r2, r3
 80183dc:	8abb      	ldrh	r3, [r7, #20]
 80183de:	4293      	cmp	r3, r2
 80183e0:	d002      	beq.n	80183e8 <dhcp_parse_reply+0x444>
            return ERR_BUF;
 80183e2:	f06f 0301 	mvn.w	r3, #1
 80183e6:	e0dd      	b.n	80185a4 <dhcp_parse_reply+0x600>
          }
          if (decode_len > 4) {
 80183e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80183ec:	2b04      	cmp	r3, #4
 80183ee:	d933      	bls.n	8018458 <dhcp_parse_reply+0x4b4>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80183f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80183f4:	f003 0303 	and.w	r3, r3, #3
 80183f8:	b2db      	uxtb	r3, r3
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d009      	beq.n	8018412 <dhcp_parse_reply+0x46e>
 80183fe:	4b51      	ldr	r3, [pc, #324]	; (8018544 <dhcp_parse_reply+0x5a0>)
 8018400:	f240 6281 	movw	r2, #1665	; 0x681
 8018404:	4955      	ldr	r1, [pc, #340]	; (801855c <dhcp_parse_reply+0x5b8>)
 8018406:	4851      	ldr	r0, [pc, #324]	; (801854c <dhcp_parse_reply+0x5a8>)
 8018408:	f004 f992 	bl	801c730 <iprintf>
 801840c:	f06f 0305 	mvn.w	r3, #5
 8018410:	e0c8      	b.n	80185a4 <dhcp_parse_reply+0x600>
            dhcp_got_option(dhcp, decode_idx);
 8018412:	4a51      	ldr	r2, [pc, #324]	; (8018558 <dhcp_parse_reply+0x5b4>)
 8018414:	6a3b      	ldr	r3, [r7, #32]
 8018416:	4413      	add	r3, r2
 8018418:	2201      	movs	r2, #1
 801841a:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801841c:	68bb      	ldr	r3, [r7, #8]
 801841e:	4618      	mov	r0, r3
 8018420:	f7f6 f835 	bl	800e48e <lwip_htonl>
 8018424:	4602      	mov	r2, r0
 8018426:	494e      	ldr	r1, [pc, #312]	; (8018560 <dhcp_parse_reply+0x5bc>)
 8018428:	6a3b      	ldr	r3, [r7, #32]
 801842a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801842e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018432:	3b04      	subs	r3, #4
 8018434:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8018438:	8bfb      	ldrh	r3, [r7, #30]
 801843a:	3304      	adds	r3, #4
 801843c:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801843e:	8a7a      	ldrh	r2, [r7, #18]
 8018440:	8bfb      	ldrh	r3, [r7, #30]
 8018442:	429a      	cmp	r2, r3
 8018444:	d202      	bcs.n	801844c <dhcp_parse_reply+0x4a8>
              /* overflow */
              return ERR_BUF;
 8018446:	f06f 0301 	mvn.w	r3, #1
 801844a:	e0ab      	b.n	80185a4 <dhcp_parse_reply+0x600>
            }
            val_offset = next_val_offset;
 801844c:	8a7b      	ldrh	r3, [r7, #18]
 801844e:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8018450:	6a3b      	ldr	r3, [r7, #32]
 8018452:	3301      	adds	r3, #1
 8018454:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8018456:	e79e      	b.n	8018396 <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 8018458:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801845c:	2b04      	cmp	r3, #4
 801845e:	d106      	bne.n	801846e <dhcp_parse_reply+0x4ca>
            value = lwip_ntohl(value);
 8018460:	68bb      	ldr	r3, [r7, #8]
 8018462:	4618      	mov	r0, r3
 8018464:	f7f6 f813 	bl	800e48e <lwip_htonl>
 8018468:	4603      	mov	r3, r0
 801846a:	60bb      	str	r3, [r7, #8]
 801846c:	e011      	b.n	8018492 <dhcp_parse_reply+0x4ee>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801846e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018472:	2b01      	cmp	r3, #1
 8018474:	d009      	beq.n	801848a <dhcp_parse_reply+0x4e6>
 8018476:	4b33      	ldr	r3, [pc, #204]	; (8018544 <dhcp_parse_reply+0x5a0>)
 8018478:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801847c:	4939      	ldr	r1, [pc, #228]	; (8018564 <dhcp_parse_reply+0x5c0>)
 801847e:	4833      	ldr	r0, [pc, #204]	; (801854c <dhcp_parse_reply+0x5a8>)
 8018480:	f004 f956 	bl	801c730 <iprintf>
 8018484:	f06f 0305 	mvn.w	r3, #5
 8018488:	e08c      	b.n	80185a4 <dhcp_parse_reply+0x600>
            value = ((u8_t *)&value)[0];
 801848a:	f107 0308 	add.w	r3, r7, #8
 801848e:	781b      	ldrb	r3, [r3, #0]
 8018490:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8018492:	4a31      	ldr	r2, [pc, #196]	; (8018558 <dhcp_parse_reply+0x5b4>)
 8018494:	6a3b      	ldr	r3, [r7, #32]
 8018496:	4413      	add	r3, r2
 8018498:	2201      	movs	r2, #1
 801849a:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801849c:	68ba      	ldr	r2, [r7, #8]
 801849e:	4930      	ldr	r1, [pc, #192]	; (8018560 <dhcp_parse_reply+0x5bc>)
 80184a0:	6a3b      	ldr	r3, [r7, #32]
 80184a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80184a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184a8:	895b      	ldrh	r3, [r3, #10]
 80184aa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80184ac:	429a      	cmp	r2, r3
 80184ae:	d324      	bcc.n	80184fa <dhcp_parse_reply+0x556>
      offset = (u16_t)(offset - q->len);
 80184b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184b2:	895b      	ldrh	r3, [r3, #10]
 80184b4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80184b6:	1ad3      	subs	r3, r2, r3
 80184b8:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80184ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184bc:	895b      	ldrh	r3, [r3, #10]
 80184be:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80184c0:	1ad3      	subs	r3, r2, r3
 80184c2:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80184c4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80184c6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80184c8:	429a      	cmp	r2, r3
 80184ca:	d213      	bcs.n	80184f4 <dhcp_parse_reply+0x550>
        q = q->next;
 80184cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184ce:	681b      	ldr	r3, [r3, #0]
 80184d0:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80184d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d109      	bne.n	80184ec <dhcp_parse_reply+0x548>
 80184d8:	4b1a      	ldr	r3, [pc, #104]	; (8018544 <dhcp_parse_reply+0x5a0>)
 80184da:	f240 629d 	movw	r2, #1693	; 0x69d
 80184de:	4922      	ldr	r1, [pc, #136]	; (8018568 <dhcp_parse_reply+0x5c4>)
 80184e0:	481a      	ldr	r0, [pc, #104]	; (801854c <dhcp_parse_reply+0x5a8>)
 80184e2:	f004 f925 	bl	801c730 <iprintf>
 80184e6:	f06f 0305 	mvn.w	r3, #5
 80184ea:	e05b      	b.n	80185a4 <dhcp_parse_reply+0x600>
        options = (u8_t *)q->payload;
 80184ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184ee:	685b      	ldr	r3, [r3, #4]
 80184f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80184f2:	e002      	b.n	80184fa <dhcp_parse_reply+0x556>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80184f4:	f06f 0301 	mvn.w	r3, #1
 80184f8:	e054      	b.n	80185a4 <dhcp_parse_reply+0x600>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80184fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d00a      	beq.n	8018516 <dhcp_parse_reply+0x572>
 8018500:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018502:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8018504:	429a      	cmp	r2, r3
 8018506:	d206      	bcs.n	8018516 <dhcp_parse_reply+0x572>
 8018508:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801850a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801850c:	4413      	add	r3, r2
 801850e:	781b      	ldrb	r3, [r3, #0]
 8018510:	2bff      	cmp	r3, #255	; 0xff
 8018512:	f47f ad8a 	bne.w	801802a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8018516:	4b10      	ldr	r3, [pc, #64]	; (8018558 <dhcp_parse_reply+0x5b4>)
 8018518:	781b      	ldrb	r3, [r3, #0]
 801851a:	2b00      	cmp	r3, #0
 801851c:	d02d      	beq.n	801857a <dhcp_parse_reply+0x5d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801851e:	4b10      	ldr	r3, [pc, #64]	; (8018560 <dhcp_parse_reply+0x5bc>)
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8018524:	4b0c      	ldr	r3, [pc, #48]	; (8018558 <dhcp_parse_reply+0x5b4>)
 8018526:	2200      	movs	r2, #0
 8018528:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801852a:	68fb      	ldr	r3, [r7, #12]
 801852c:	2b01      	cmp	r3, #1
 801852e:	d102      	bne.n	8018536 <dhcp_parse_reply+0x592>
      parse_file_as_options = 1;
 8018530:	2301      	movs	r3, #1
 8018532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018534:	e021      	b.n	801857a <dhcp_parse_reply+0x5d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8018536:	68fb      	ldr	r3, [r7, #12]
 8018538:	2b02      	cmp	r3, #2
 801853a:	d117      	bne.n	801856c <dhcp_parse_reply+0x5c8>
      parse_sname_as_options = 1;
 801853c:	2301      	movs	r3, #1
 801853e:	62bb      	str	r3, [r7, #40]	; 0x28
 8018540:	e01b      	b.n	801857a <dhcp_parse_reply+0x5d6>
 8018542:	bf00      	nop
 8018544:	0802297c 	.word	0x0802297c
 8018548:	08022c34 	.word	0x08022c34
 801854c:	080229dc 	.word	0x080229dc
 8018550:	08022c04 	.word	0x08022c04
 8018554:	08022c58 	.word	0x08022c58
 8018558:	20007424 	.word	0x20007424
 801855c:	08022c6c 	.word	0x08022c6c
 8018560:	200073fc 	.word	0x200073fc
 8018564:	08022c84 	.word	0x08022c84
 8018568:	08022c98 	.word	0x08022c98
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801856c:	68fb      	ldr	r3, [r7, #12]
 801856e:	2b03      	cmp	r3, #3
 8018570:	d103      	bne.n	801857a <dhcp_parse_reply+0x5d6>
      parse_sname_as_options = 1;
 8018572:	2301      	movs	r3, #1
 8018574:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8018576:	2301      	movs	r3, #1
 8018578:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801857a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801857c:	2b00      	cmp	r3, #0
 801857e:	d006      	beq.n	801858e <dhcp_parse_reply+0x5ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8018580:	2300      	movs	r3, #0
 8018582:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8018584:	236c      	movs	r3, #108	; 0x6c
 8018586:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8018588:	23ec      	movs	r3, #236	; 0xec
 801858a:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801858c:	e527      	b.n	8017fde <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801858e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018590:	2b00      	cmp	r3, #0
 8018592:	d006      	beq.n	80185a2 <dhcp_parse_reply+0x5fe>
    parse_sname_as_options = 0;
 8018594:	2300      	movs	r3, #0
 8018596:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8018598:	232c      	movs	r3, #44	; 0x2c
 801859a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801859c:	236c      	movs	r3, #108	; 0x6c
 801859e:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80185a0:	e51d      	b.n	8017fde <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80185a2:	2300      	movs	r3, #0
}
 80185a4:	4618      	mov	r0, r3
 80185a6:	3740      	adds	r7, #64	; 0x40
 80185a8:	46bd      	mov	sp, r7
 80185aa:	bd80      	pop	{r7, pc}

080185ac <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80185ac:	b580      	push	{r7, lr}
 80185ae:	b08a      	sub	sp, #40	; 0x28
 80185b0:	af00      	add	r7, sp, #0
 80185b2:	60f8      	str	r0, [r7, #12]
 80185b4:	60b9      	str	r1, [r7, #8]
 80185b6:	607a      	str	r2, [r7, #4]
 80185b8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80185ba:	4b60      	ldr	r3, [pc, #384]	; (801873c <dhcp_recv+0x190>)
 80185bc:	685b      	ldr	r3, [r3, #4]
 80185be:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80185c0:	6a3b      	ldr	r3, [r7, #32]
 80185c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185c4:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	685b      	ldr	r3, [r3, #4]
 80185ca:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80185cc:	69fb      	ldr	r3, [r7, #28]
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	f000 809d 	beq.w	801870e <dhcp_recv+0x162>
 80185d4:	69fb      	ldr	r3, [r7, #28]
 80185d6:	791b      	ldrb	r3, [r3, #4]
 80185d8:	2b00      	cmp	r3, #0
 80185da:	f000 8098 	beq.w	801870e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	895b      	ldrh	r3, [r3, #10]
 80185e2:	2b2b      	cmp	r3, #43	; 0x2b
 80185e4:	f240 8095 	bls.w	8018712 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80185e8:	69bb      	ldr	r3, [r7, #24]
 80185ea:	781b      	ldrb	r3, [r3, #0]
 80185ec:	2b02      	cmp	r3, #2
 80185ee:	f040 8092 	bne.w	8018716 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80185f2:	2300      	movs	r3, #0
 80185f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80185f8:	e012      	b.n	8018620 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80185fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80185fe:	6a3a      	ldr	r2, [r7, #32]
 8018600:	4413      	add	r3, r2
 8018602:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8018606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801860a:	69b9      	ldr	r1, [r7, #24]
 801860c:	440b      	add	r3, r1
 801860e:	7f1b      	ldrb	r3, [r3, #28]
 8018610:	429a      	cmp	r2, r3
 8018612:	f040 8082 	bne.w	801871a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018616:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801861a:	3301      	adds	r3, #1
 801861c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018620:	6a3b      	ldr	r3, [r7, #32]
 8018622:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018626:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801862a:	429a      	cmp	r2, r3
 801862c:	d203      	bcs.n	8018636 <dhcp_recv+0x8a>
 801862e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018632:	2b05      	cmp	r3, #5
 8018634:	d9e1      	bls.n	80185fa <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8018636:	69bb      	ldr	r3, [r7, #24]
 8018638:	685b      	ldr	r3, [r3, #4]
 801863a:	4618      	mov	r0, r3
 801863c:	f7f5 ff27 	bl	800e48e <lwip_htonl>
 8018640:	4602      	mov	r2, r0
 8018642:	69fb      	ldr	r3, [r7, #28]
 8018644:	681b      	ldr	r3, [r3, #0]
 8018646:	429a      	cmp	r2, r3
 8018648:	d169      	bne.n	801871e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801864a:	69f9      	ldr	r1, [r7, #28]
 801864c:	6878      	ldr	r0, [r7, #4]
 801864e:	f7ff fca9 	bl	8017fa4 <dhcp_parse_reply>
 8018652:	4603      	mov	r3, r0
 8018654:	2b00      	cmp	r3, #0
 8018656:	d164      	bne.n	8018722 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8018658:	4b39      	ldr	r3, [pc, #228]	; (8018740 <dhcp_recv+0x194>)
 801865a:	785b      	ldrb	r3, [r3, #1]
 801865c:	2b00      	cmp	r3, #0
 801865e:	d062      	beq.n	8018726 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	685b      	ldr	r3, [r3, #4]
 8018664:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8018666:	4b37      	ldr	r3, [pc, #220]	; (8018744 <dhcp_recv+0x198>)
 8018668:	685b      	ldr	r3, [r3, #4]
 801866a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801866c:	7cfb      	ldrb	r3, [r7, #19]
 801866e:	2b05      	cmp	r3, #5
 8018670:	d12a      	bne.n	80186c8 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8018672:	69fb      	ldr	r3, [r7, #28]
 8018674:	795b      	ldrb	r3, [r3, #5]
 8018676:	2b01      	cmp	r3, #1
 8018678:	d112      	bne.n	80186a0 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801867a:	6979      	ldr	r1, [r7, #20]
 801867c:	6a38      	ldr	r0, [r7, #32]
 801867e:	f7fe fe03 	bl	8017288 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8018682:	6a3b      	ldr	r3, [r7, #32]
 8018684:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018688:	f003 0308 	and.w	r3, r3, #8
 801868c:	2b00      	cmp	r3, #0
 801868e:	d003      	beq.n	8018698 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8018690:	6a38      	ldr	r0, [r7, #32]
 8018692:	f7fe fb71 	bl	8016d78 <dhcp_check>
 8018696:	e049      	b.n	801872c <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8018698:	6a38      	ldr	r0, [r7, #32]
 801869a:	f7ff f837 	bl	801770c <dhcp_bind>
 801869e:	e045      	b.n	801872c <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80186a0:	69fb      	ldr	r3, [r7, #28]
 80186a2:	795b      	ldrb	r3, [r3, #5]
 80186a4:	2b03      	cmp	r3, #3
 80186a6:	d007      	beq.n	80186b8 <dhcp_recv+0x10c>
 80186a8:	69fb      	ldr	r3, [r7, #28]
 80186aa:	795b      	ldrb	r3, [r3, #5]
 80186ac:	2b04      	cmp	r3, #4
 80186ae:	d003      	beq.n	80186b8 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80186b0:	69fb      	ldr	r3, [r7, #28]
 80186b2:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80186b4:	2b05      	cmp	r3, #5
 80186b6:	d139      	bne.n	801872c <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80186b8:	6979      	ldr	r1, [r7, #20]
 80186ba:	6a38      	ldr	r0, [r7, #32]
 80186bc:	f7fe fde4 	bl	8017288 <dhcp_handle_ack>
      dhcp_bind(netif);
 80186c0:	6a38      	ldr	r0, [r7, #32]
 80186c2:	f7ff f823 	bl	801770c <dhcp_bind>
 80186c6:	e031      	b.n	801872c <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80186c8:	7cfb      	ldrb	r3, [r7, #19]
 80186ca:	2b06      	cmp	r3, #6
 80186cc:	d113      	bne.n	80186f6 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80186ce:	69fb      	ldr	r3, [r7, #28]
 80186d0:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80186d2:	2b03      	cmp	r3, #3
 80186d4:	d00b      	beq.n	80186ee <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80186d6:	69fb      	ldr	r3, [r7, #28]
 80186d8:	795b      	ldrb	r3, [r3, #5]
 80186da:	2b01      	cmp	r3, #1
 80186dc:	d007      	beq.n	80186ee <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80186de:	69fb      	ldr	r3, [r7, #28]
 80186e0:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80186e2:	2b04      	cmp	r3, #4
 80186e4:	d003      	beq.n	80186ee <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80186e6:	69fb      	ldr	r3, [r7, #28]
 80186e8:	795b      	ldrb	r3, [r3, #5]
 80186ea:	2b05      	cmp	r3, #5
 80186ec:	d103      	bne.n	80186f6 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80186ee:	6a38      	ldr	r0, [r7, #32]
 80186f0:	f7fe fb28 	bl	8016d44 <dhcp_handle_nak>
 80186f4:	e01a      	b.n	801872c <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80186f6:	7cfb      	ldrb	r3, [r7, #19]
 80186f8:	2b02      	cmp	r3, #2
 80186fa:	d116      	bne.n	801872a <dhcp_recv+0x17e>
 80186fc:	69fb      	ldr	r3, [r7, #28]
 80186fe:	795b      	ldrb	r3, [r3, #5]
 8018700:	2b06      	cmp	r3, #6
 8018702:	d112      	bne.n	801872a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8018704:	6979      	ldr	r1, [r7, #20]
 8018706:	6a38      	ldr	r0, [r7, #32]
 8018708:	f7fe fb6a 	bl	8016de0 <dhcp_handle_offer>
 801870c:	e00e      	b.n	801872c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801870e:	bf00      	nop
 8018710:	e00c      	b.n	801872c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8018712:	bf00      	nop
 8018714:	e00a      	b.n	801872c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8018716:	bf00      	nop
 8018718:	e008      	b.n	801872c <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801871a:	bf00      	nop
 801871c:	e006      	b.n	801872c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801871e:	bf00      	nop
 8018720:	e004      	b.n	801872c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8018722:	bf00      	nop
 8018724:	e002      	b.n	801872c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8018726:	bf00      	nop
 8018728:	e000      	b.n	801872c <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801872a:	bf00      	nop
  pbuf_free(p);
 801872c:	6878      	ldr	r0, [r7, #4]
 801872e:	f7f7 fd2f 	bl	8010190 <pbuf_free>
}
 8018732:	bf00      	nop
 8018734:	3728      	adds	r7, #40	; 0x28
 8018736:	46bd      	mov	sp, r7
 8018738:	bd80      	pop	{r7, pc}
 801873a:	bf00      	nop
 801873c:	20003be8 	.word	0x20003be8
 8018740:	20007424 	.word	0x20007424
 8018744:	200073fc 	.word	0x200073fc

08018748 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8018748:	b580      	push	{r7, lr}
 801874a:	b088      	sub	sp, #32
 801874c:	af00      	add	r7, sp, #0
 801874e:	60f8      	str	r0, [r7, #12]
 8018750:	60b9      	str	r1, [r7, #8]
 8018752:	603b      	str	r3, [r7, #0]
 8018754:	4613      	mov	r3, r2
 8018756:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8018758:	68fb      	ldr	r3, [r7, #12]
 801875a:	2b00      	cmp	r3, #0
 801875c:	d108      	bne.n	8018770 <dhcp_create_msg+0x28>
 801875e:	4b5f      	ldr	r3, [pc, #380]	; (80188dc <dhcp_create_msg+0x194>)
 8018760:	f240 7269 	movw	r2, #1897	; 0x769
 8018764:	495e      	ldr	r1, [pc, #376]	; (80188e0 <dhcp_create_msg+0x198>)
 8018766:	485f      	ldr	r0, [pc, #380]	; (80188e4 <dhcp_create_msg+0x19c>)
 8018768:	f003 ffe2 	bl	801c730 <iprintf>
 801876c:	2300      	movs	r3, #0
 801876e:	e0b1      	b.n	80188d4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8018770:	68bb      	ldr	r3, [r7, #8]
 8018772:	2b00      	cmp	r3, #0
 8018774:	d108      	bne.n	8018788 <dhcp_create_msg+0x40>
 8018776:	4b59      	ldr	r3, [pc, #356]	; (80188dc <dhcp_create_msg+0x194>)
 8018778:	f240 726a 	movw	r2, #1898	; 0x76a
 801877c:	495a      	ldr	r1, [pc, #360]	; (80188e8 <dhcp_create_msg+0x1a0>)
 801877e:	4859      	ldr	r0, [pc, #356]	; (80188e4 <dhcp_create_msg+0x19c>)
 8018780:	f003 ffd6 	bl	801c730 <iprintf>
 8018784:	2300      	movs	r3, #0
 8018786:	e0a5      	b.n	80188d4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8018788:	f44f 7220 	mov.w	r2, #640	; 0x280
 801878c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8018790:	2036      	movs	r0, #54	; 0x36
 8018792:	f7f7 fa19 	bl	800fbc8 <pbuf_alloc>
 8018796:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8018798:	69bb      	ldr	r3, [r7, #24]
 801879a:	2b00      	cmp	r3, #0
 801879c:	d101      	bne.n	80187a2 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801879e:	2300      	movs	r3, #0
 80187a0:	e098      	b.n	80188d4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80187a2:	69bb      	ldr	r3, [r7, #24]
 80187a4:	895b      	ldrh	r3, [r3, #10]
 80187a6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80187aa:	d206      	bcs.n	80187ba <dhcp_create_msg+0x72>
 80187ac:	4b4b      	ldr	r3, [pc, #300]	; (80188dc <dhcp_create_msg+0x194>)
 80187ae:	f240 7271 	movw	r2, #1905	; 0x771
 80187b2:	494e      	ldr	r1, [pc, #312]	; (80188ec <dhcp_create_msg+0x1a4>)
 80187b4:	484b      	ldr	r0, [pc, #300]	; (80188e4 <dhcp_create_msg+0x19c>)
 80187b6:	f003 ffbb 	bl	801c730 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80187ba:	79fb      	ldrb	r3, [r7, #7]
 80187bc:	2b03      	cmp	r3, #3
 80187be:	d103      	bne.n	80187c8 <dhcp_create_msg+0x80>
 80187c0:	68bb      	ldr	r3, [r7, #8]
 80187c2:	795b      	ldrb	r3, [r3, #5]
 80187c4:	2b03      	cmp	r3, #3
 80187c6:	d10d      	bne.n	80187e4 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80187c8:	68bb      	ldr	r3, [r7, #8]
 80187ca:	799b      	ldrb	r3, [r3, #6]
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d105      	bne.n	80187dc <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80187d0:	f003 ffc6 	bl	801c760 <rand>
 80187d4:	4603      	mov	r3, r0
 80187d6:	461a      	mov	r2, r3
 80187d8:	4b45      	ldr	r3, [pc, #276]	; (80188f0 <dhcp_create_msg+0x1a8>)
 80187da:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80187dc:	4b44      	ldr	r3, [pc, #272]	; (80188f0 <dhcp_create_msg+0x1a8>)
 80187de:	681a      	ldr	r2, [r3, #0]
 80187e0:	68bb      	ldr	r3, [r7, #8]
 80187e2:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80187e4:	69bb      	ldr	r3, [r7, #24]
 80187e6:	685b      	ldr	r3, [r3, #4]
 80187e8:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80187ea:	f44f 729a 	mov.w	r2, #308	; 0x134
 80187ee:	2100      	movs	r1, #0
 80187f0:	6978      	ldr	r0, [r7, #20]
 80187f2:	f003 f857 	bl	801b8a4 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80187f6:	697b      	ldr	r3, [r7, #20]
 80187f8:	2201      	movs	r2, #1
 80187fa:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80187fc:	697b      	ldr	r3, [r7, #20]
 80187fe:	2201      	movs	r2, #1
 8018800:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8018802:	68fb      	ldr	r3, [r7, #12]
 8018804:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8018808:	697b      	ldr	r3, [r7, #20]
 801880a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801880c:	68bb      	ldr	r3, [r7, #8]
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	4618      	mov	r0, r3
 8018812:	f7f5 fe3c 	bl	800e48e <lwip_htonl>
 8018816:	4602      	mov	r2, r0
 8018818:	697b      	ldr	r3, [r7, #20]
 801881a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801881c:	79fb      	ldrb	r3, [r7, #7]
 801881e:	2b08      	cmp	r3, #8
 8018820:	d010      	beq.n	8018844 <dhcp_create_msg+0xfc>
 8018822:	79fb      	ldrb	r3, [r7, #7]
 8018824:	2b04      	cmp	r3, #4
 8018826:	d00d      	beq.n	8018844 <dhcp_create_msg+0xfc>
 8018828:	79fb      	ldrb	r3, [r7, #7]
 801882a:	2b07      	cmp	r3, #7
 801882c:	d00a      	beq.n	8018844 <dhcp_create_msg+0xfc>
 801882e:	79fb      	ldrb	r3, [r7, #7]
 8018830:	2b03      	cmp	r3, #3
 8018832:	d10c      	bne.n	801884e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8018834:	68bb      	ldr	r3, [r7, #8]
 8018836:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8018838:	2b05      	cmp	r3, #5
 801883a:	d003      	beq.n	8018844 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801883c:	68bb      	ldr	r3, [r7, #8]
 801883e:	795b      	ldrb	r3, [r3, #5]
 8018840:	2b04      	cmp	r3, #4
 8018842:	d104      	bne.n	801884e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8018844:	68fb      	ldr	r3, [r7, #12]
 8018846:	3304      	adds	r3, #4
 8018848:	681a      	ldr	r2, [r3, #0]
 801884a:	697b      	ldr	r3, [r7, #20]
 801884c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801884e:	2300      	movs	r3, #0
 8018850:	83fb      	strh	r3, [r7, #30]
 8018852:	e00c      	b.n	801886e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8018854:	8bfa      	ldrh	r2, [r7, #30]
 8018856:	8bfb      	ldrh	r3, [r7, #30]
 8018858:	68f9      	ldr	r1, [r7, #12]
 801885a:	440a      	add	r2, r1
 801885c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8018860:	697a      	ldr	r2, [r7, #20]
 8018862:	4413      	add	r3, r2
 8018864:	460a      	mov	r2, r1
 8018866:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018868:	8bfb      	ldrh	r3, [r7, #30]
 801886a:	3301      	adds	r3, #1
 801886c:	83fb      	strh	r3, [r7, #30]
 801886e:	8bfb      	ldrh	r3, [r7, #30]
 8018870:	2b05      	cmp	r3, #5
 8018872:	d9ef      	bls.n	8018854 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8018874:	697b      	ldr	r3, [r7, #20]
 8018876:	2200      	movs	r2, #0
 8018878:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801887c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8018880:	2200      	movs	r2, #0
 8018882:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8018886:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801888a:	2200      	movs	r2, #0
 801888c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8018890:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8018894:	2200      	movs	r2, #0
 8018896:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801889a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801889e:	697b      	ldr	r3, [r7, #20]
 80188a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80188a4:	2301      	movs	r3, #1
 80188a6:	2235      	movs	r2, #53	; 0x35
 80188a8:	2000      	movs	r0, #0
 80188aa:	f7ff faab 	bl	8017e04 <dhcp_option>
 80188ae:	4603      	mov	r3, r0
 80188b0:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80188b2:	697b      	ldr	r3, [r7, #20]
 80188b4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80188b8:	79fa      	ldrb	r2, [r7, #7]
 80188ba:	8a7b      	ldrh	r3, [r7, #18]
 80188bc:	4618      	mov	r0, r3
 80188be:	f7ff fad5 	bl	8017e6c <dhcp_option_byte>
 80188c2:	4603      	mov	r3, r0
 80188c4:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80188c6:	683b      	ldr	r3, [r7, #0]
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	d002      	beq.n	80188d2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80188cc:	683b      	ldr	r3, [r7, #0]
 80188ce:	8a7a      	ldrh	r2, [r7, #18]
 80188d0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80188d2:	69bb      	ldr	r3, [r7, #24]
}
 80188d4:	4618      	mov	r0, r3
 80188d6:	3720      	adds	r7, #32
 80188d8:	46bd      	mov	sp, r7
 80188da:	bd80      	pop	{r7, pc}
 80188dc:	0802297c 	.word	0x0802297c
 80188e0:	08022cac 	.word	0x08022cac
 80188e4:	080229dc 	.word	0x080229dc
 80188e8:	08022ccc 	.word	0x08022ccc
 80188ec:	08022cec 	.word	0x08022cec
 80188f0:	20007438 	.word	0x20007438

080188f4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80188f4:	b580      	push	{r7, lr}
 80188f6:	b084      	sub	sp, #16
 80188f8:	af00      	add	r7, sp, #0
 80188fa:	4603      	mov	r3, r0
 80188fc:	60b9      	str	r1, [r7, #8]
 80188fe:	607a      	str	r2, [r7, #4]
 8018900:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8018902:	89fb      	ldrh	r3, [r7, #14]
 8018904:	1c5a      	adds	r2, r3, #1
 8018906:	81fa      	strh	r2, [r7, #14]
 8018908:	461a      	mov	r2, r3
 801890a:	68bb      	ldr	r3, [r7, #8]
 801890c:	4413      	add	r3, r2
 801890e:	22ff      	movs	r2, #255	; 0xff
 8018910:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8018912:	e007      	b.n	8018924 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8018914:	89fb      	ldrh	r3, [r7, #14]
 8018916:	1c5a      	adds	r2, r3, #1
 8018918:	81fa      	strh	r2, [r7, #14]
 801891a:	461a      	mov	r2, r3
 801891c:	68bb      	ldr	r3, [r7, #8]
 801891e:	4413      	add	r3, r2
 8018920:	2200      	movs	r2, #0
 8018922:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8018924:	89fb      	ldrh	r3, [r7, #14]
 8018926:	2b43      	cmp	r3, #67	; 0x43
 8018928:	d904      	bls.n	8018934 <dhcp_option_trailer+0x40>
 801892a:	89fb      	ldrh	r3, [r7, #14]
 801892c:	f003 0303 	and.w	r3, r3, #3
 8018930:	2b00      	cmp	r3, #0
 8018932:	d002      	beq.n	801893a <dhcp_option_trailer+0x46>
 8018934:	89fb      	ldrh	r3, [r7, #14]
 8018936:	2b43      	cmp	r3, #67	; 0x43
 8018938:	d9ec      	bls.n	8018914 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801893a:	89fb      	ldrh	r3, [r7, #14]
 801893c:	33f0      	adds	r3, #240	; 0xf0
 801893e:	b29b      	uxth	r3, r3
 8018940:	4619      	mov	r1, r3
 8018942:	6878      	ldr	r0, [r7, #4]
 8018944:	f7f7 fa9e 	bl	800fe84 <pbuf_realloc>
}
 8018948:	bf00      	nop
 801894a:	3710      	adds	r7, #16
 801894c:	46bd      	mov	sp, r7
 801894e:	bd80      	pop	{r7, pc}

08018950 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8018950:	b480      	push	{r7}
 8018952:	b085      	sub	sp, #20
 8018954:	af00      	add	r7, sp, #0
 8018956:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	2b00      	cmp	r3, #0
 801895c:	d017      	beq.n	801898e <dhcp_supplied_address+0x3e>
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018962:	2b00      	cmp	r3, #0
 8018964:	d013      	beq.n	801898e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801896a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801896c:	68fb      	ldr	r3, [r7, #12]
 801896e:	795b      	ldrb	r3, [r3, #5]
 8018970:	2b0a      	cmp	r3, #10
 8018972:	d007      	beq.n	8018984 <dhcp_supplied_address+0x34>
 8018974:	68fb      	ldr	r3, [r7, #12]
 8018976:	795b      	ldrb	r3, [r3, #5]
 8018978:	2b05      	cmp	r3, #5
 801897a:	d003      	beq.n	8018984 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801897c:	68fb      	ldr	r3, [r7, #12]
 801897e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8018980:	2b04      	cmp	r3, #4
 8018982:	d101      	bne.n	8018988 <dhcp_supplied_address+0x38>
 8018984:	2301      	movs	r3, #1
 8018986:	e000      	b.n	801898a <dhcp_supplied_address+0x3a>
 8018988:	2300      	movs	r3, #0
 801898a:	b2db      	uxtb	r3, r3
 801898c:	e000      	b.n	8018990 <dhcp_supplied_address+0x40>
  }
  return 0;
 801898e:	2300      	movs	r3, #0
}
 8018990:	4618      	mov	r0, r3
 8018992:	3714      	adds	r7, #20
 8018994:	46bd      	mov	sp, r7
 8018996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801899a:	4770      	bx	lr

0801899c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801899c:	b580      	push	{r7, lr}
 801899e:	b082      	sub	sp, #8
 80189a0:	af00      	add	r7, sp, #0
 80189a2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80189a4:	4915      	ldr	r1, [pc, #84]	; (80189fc <etharp_free_entry+0x60>)
 80189a6:	687a      	ldr	r2, [r7, #4]
 80189a8:	4613      	mov	r3, r2
 80189aa:	005b      	lsls	r3, r3, #1
 80189ac:	4413      	add	r3, r2
 80189ae:	00db      	lsls	r3, r3, #3
 80189b0:	440b      	add	r3, r1
 80189b2:	681b      	ldr	r3, [r3, #0]
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d013      	beq.n	80189e0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80189b8:	4910      	ldr	r1, [pc, #64]	; (80189fc <etharp_free_entry+0x60>)
 80189ba:	687a      	ldr	r2, [r7, #4]
 80189bc:	4613      	mov	r3, r2
 80189be:	005b      	lsls	r3, r3, #1
 80189c0:	4413      	add	r3, r2
 80189c2:	00db      	lsls	r3, r3, #3
 80189c4:	440b      	add	r3, r1
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	4618      	mov	r0, r3
 80189ca:	f7f7 fbe1 	bl	8010190 <pbuf_free>
    arp_table[i].q = NULL;
 80189ce:	490b      	ldr	r1, [pc, #44]	; (80189fc <etharp_free_entry+0x60>)
 80189d0:	687a      	ldr	r2, [r7, #4]
 80189d2:	4613      	mov	r3, r2
 80189d4:	005b      	lsls	r3, r3, #1
 80189d6:	4413      	add	r3, r2
 80189d8:	00db      	lsls	r3, r3, #3
 80189da:	440b      	add	r3, r1
 80189dc:	2200      	movs	r2, #0
 80189de:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80189e0:	4906      	ldr	r1, [pc, #24]	; (80189fc <etharp_free_entry+0x60>)
 80189e2:	687a      	ldr	r2, [r7, #4]
 80189e4:	4613      	mov	r3, r2
 80189e6:	005b      	lsls	r3, r3, #1
 80189e8:	4413      	add	r3, r2
 80189ea:	00db      	lsls	r3, r3, #3
 80189ec:	440b      	add	r3, r1
 80189ee:	3314      	adds	r3, #20
 80189f0:	2200      	movs	r2, #0
 80189f2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80189f4:	bf00      	nop
 80189f6:	3708      	adds	r7, #8
 80189f8:	46bd      	mov	sp, r7
 80189fa:	bd80      	pop	{r7, pc}
 80189fc:	2000743c 	.word	0x2000743c

08018a00 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018a00:	b580      	push	{r7, lr}
 8018a02:	b082      	sub	sp, #8
 8018a04:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018a06:	2300      	movs	r3, #0
 8018a08:	607b      	str	r3, [r7, #4]
 8018a0a:	e096      	b.n	8018b3a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8018a0c:	494f      	ldr	r1, [pc, #316]	; (8018b4c <etharp_tmr+0x14c>)
 8018a0e:	687a      	ldr	r2, [r7, #4]
 8018a10:	4613      	mov	r3, r2
 8018a12:	005b      	lsls	r3, r3, #1
 8018a14:	4413      	add	r3, r2
 8018a16:	00db      	lsls	r3, r3, #3
 8018a18:	440b      	add	r3, r1
 8018a1a:	3314      	adds	r3, #20
 8018a1c:	781b      	ldrb	r3, [r3, #0]
 8018a1e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8018a20:	78fb      	ldrb	r3, [r7, #3]
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	f000 8086 	beq.w	8018b34 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8018a28:	4948      	ldr	r1, [pc, #288]	; (8018b4c <etharp_tmr+0x14c>)
 8018a2a:	687a      	ldr	r2, [r7, #4]
 8018a2c:	4613      	mov	r3, r2
 8018a2e:	005b      	lsls	r3, r3, #1
 8018a30:	4413      	add	r3, r2
 8018a32:	00db      	lsls	r3, r3, #3
 8018a34:	440b      	add	r3, r1
 8018a36:	3312      	adds	r3, #18
 8018a38:	881b      	ldrh	r3, [r3, #0]
 8018a3a:	3301      	adds	r3, #1
 8018a3c:	b298      	uxth	r0, r3
 8018a3e:	4943      	ldr	r1, [pc, #268]	; (8018b4c <etharp_tmr+0x14c>)
 8018a40:	687a      	ldr	r2, [r7, #4]
 8018a42:	4613      	mov	r3, r2
 8018a44:	005b      	lsls	r3, r3, #1
 8018a46:	4413      	add	r3, r2
 8018a48:	00db      	lsls	r3, r3, #3
 8018a4a:	440b      	add	r3, r1
 8018a4c:	3312      	adds	r3, #18
 8018a4e:	4602      	mov	r2, r0
 8018a50:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018a52:	493e      	ldr	r1, [pc, #248]	; (8018b4c <etharp_tmr+0x14c>)
 8018a54:	687a      	ldr	r2, [r7, #4]
 8018a56:	4613      	mov	r3, r2
 8018a58:	005b      	lsls	r3, r3, #1
 8018a5a:	4413      	add	r3, r2
 8018a5c:	00db      	lsls	r3, r3, #3
 8018a5e:	440b      	add	r3, r1
 8018a60:	3312      	adds	r3, #18
 8018a62:	881b      	ldrh	r3, [r3, #0]
 8018a64:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8018a68:	d215      	bcs.n	8018a96 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018a6a:	4938      	ldr	r1, [pc, #224]	; (8018b4c <etharp_tmr+0x14c>)
 8018a6c:	687a      	ldr	r2, [r7, #4]
 8018a6e:	4613      	mov	r3, r2
 8018a70:	005b      	lsls	r3, r3, #1
 8018a72:	4413      	add	r3, r2
 8018a74:	00db      	lsls	r3, r3, #3
 8018a76:	440b      	add	r3, r1
 8018a78:	3314      	adds	r3, #20
 8018a7a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018a7c:	2b01      	cmp	r3, #1
 8018a7e:	d10e      	bne.n	8018a9e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8018a80:	4932      	ldr	r1, [pc, #200]	; (8018b4c <etharp_tmr+0x14c>)
 8018a82:	687a      	ldr	r2, [r7, #4]
 8018a84:	4613      	mov	r3, r2
 8018a86:	005b      	lsls	r3, r3, #1
 8018a88:	4413      	add	r3, r2
 8018a8a:	00db      	lsls	r3, r3, #3
 8018a8c:	440b      	add	r3, r1
 8018a8e:	3312      	adds	r3, #18
 8018a90:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018a92:	2b04      	cmp	r3, #4
 8018a94:	d903      	bls.n	8018a9e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8018a96:	6878      	ldr	r0, [r7, #4]
 8018a98:	f7ff ff80 	bl	801899c <etharp_free_entry>
 8018a9c:	e04a      	b.n	8018b34 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8018a9e:	492b      	ldr	r1, [pc, #172]	; (8018b4c <etharp_tmr+0x14c>)
 8018aa0:	687a      	ldr	r2, [r7, #4]
 8018aa2:	4613      	mov	r3, r2
 8018aa4:	005b      	lsls	r3, r3, #1
 8018aa6:	4413      	add	r3, r2
 8018aa8:	00db      	lsls	r3, r3, #3
 8018aaa:	440b      	add	r3, r1
 8018aac:	3314      	adds	r3, #20
 8018aae:	781b      	ldrb	r3, [r3, #0]
 8018ab0:	2b03      	cmp	r3, #3
 8018ab2:	d10a      	bne.n	8018aca <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018ab4:	4925      	ldr	r1, [pc, #148]	; (8018b4c <etharp_tmr+0x14c>)
 8018ab6:	687a      	ldr	r2, [r7, #4]
 8018ab8:	4613      	mov	r3, r2
 8018aba:	005b      	lsls	r3, r3, #1
 8018abc:	4413      	add	r3, r2
 8018abe:	00db      	lsls	r3, r3, #3
 8018ac0:	440b      	add	r3, r1
 8018ac2:	3314      	adds	r3, #20
 8018ac4:	2204      	movs	r2, #4
 8018ac6:	701a      	strb	r2, [r3, #0]
 8018ac8:	e034      	b.n	8018b34 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8018aca:	4920      	ldr	r1, [pc, #128]	; (8018b4c <etharp_tmr+0x14c>)
 8018acc:	687a      	ldr	r2, [r7, #4]
 8018ace:	4613      	mov	r3, r2
 8018ad0:	005b      	lsls	r3, r3, #1
 8018ad2:	4413      	add	r3, r2
 8018ad4:	00db      	lsls	r3, r3, #3
 8018ad6:	440b      	add	r3, r1
 8018ad8:	3314      	adds	r3, #20
 8018ada:	781b      	ldrb	r3, [r3, #0]
 8018adc:	2b04      	cmp	r3, #4
 8018ade:	d10a      	bne.n	8018af6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8018ae0:	491a      	ldr	r1, [pc, #104]	; (8018b4c <etharp_tmr+0x14c>)
 8018ae2:	687a      	ldr	r2, [r7, #4]
 8018ae4:	4613      	mov	r3, r2
 8018ae6:	005b      	lsls	r3, r3, #1
 8018ae8:	4413      	add	r3, r2
 8018aea:	00db      	lsls	r3, r3, #3
 8018aec:	440b      	add	r3, r1
 8018aee:	3314      	adds	r3, #20
 8018af0:	2202      	movs	r2, #2
 8018af2:	701a      	strb	r2, [r3, #0]
 8018af4:	e01e      	b.n	8018b34 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018af6:	4915      	ldr	r1, [pc, #84]	; (8018b4c <etharp_tmr+0x14c>)
 8018af8:	687a      	ldr	r2, [r7, #4]
 8018afa:	4613      	mov	r3, r2
 8018afc:	005b      	lsls	r3, r3, #1
 8018afe:	4413      	add	r3, r2
 8018b00:	00db      	lsls	r3, r3, #3
 8018b02:	440b      	add	r3, r1
 8018b04:	3314      	adds	r3, #20
 8018b06:	781b      	ldrb	r3, [r3, #0]
 8018b08:	2b01      	cmp	r3, #1
 8018b0a:	d113      	bne.n	8018b34 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8018b0c:	490f      	ldr	r1, [pc, #60]	; (8018b4c <etharp_tmr+0x14c>)
 8018b0e:	687a      	ldr	r2, [r7, #4]
 8018b10:	4613      	mov	r3, r2
 8018b12:	005b      	lsls	r3, r3, #1
 8018b14:	4413      	add	r3, r2
 8018b16:	00db      	lsls	r3, r3, #3
 8018b18:	440b      	add	r3, r1
 8018b1a:	3308      	adds	r3, #8
 8018b1c:	6818      	ldr	r0, [r3, #0]
 8018b1e:	687a      	ldr	r2, [r7, #4]
 8018b20:	4613      	mov	r3, r2
 8018b22:	005b      	lsls	r3, r3, #1
 8018b24:	4413      	add	r3, r2
 8018b26:	00db      	lsls	r3, r3, #3
 8018b28:	4a08      	ldr	r2, [pc, #32]	; (8018b4c <etharp_tmr+0x14c>)
 8018b2a:	4413      	add	r3, r2
 8018b2c:	3304      	adds	r3, #4
 8018b2e:	4619      	mov	r1, r3
 8018b30:	f000 ff1a 	bl	8019968 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	3301      	adds	r3, #1
 8018b38:	607b      	str	r3, [r7, #4]
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	2b09      	cmp	r3, #9
 8018b3e:	f77f af65 	ble.w	8018a0c <etharp_tmr+0xc>
      }
    }
  }
}
 8018b42:	bf00      	nop
 8018b44:	bf00      	nop
 8018b46:	3708      	adds	r7, #8
 8018b48:	46bd      	mov	sp, r7
 8018b4a:	bd80      	pop	{r7, pc}
 8018b4c:	2000743c 	.word	0x2000743c

08018b50 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8018b50:	b580      	push	{r7, lr}
 8018b52:	b08a      	sub	sp, #40	; 0x28
 8018b54:	af00      	add	r7, sp, #0
 8018b56:	60f8      	str	r0, [r7, #12]
 8018b58:	460b      	mov	r3, r1
 8018b5a:	607a      	str	r2, [r7, #4]
 8018b5c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8018b5e:	230a      	movs	r3, #10
 8018b60:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018b62:	230a      	movs	r3, #10
 8018b64:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8018b66:	230a      	movs	r3, #10
 8018b68:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8018b6a:	2300      	movs	r3, #0
 8018b6c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8018b6e:	230a      	movs	r3, #10
 8018b70:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8018b72:	2300      	movs	r3, #0
 8018b74:	83bb      	strh	r3, [r7, #28]
 8018b76:	2300      	movs	r3, #0
 8018b78:	837b      	strh	r3, [r7, #26]
 8018b7a:	2300      	movs	r3, #0
 8018b7c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018b7e:	2300      	movs	r3, #0
 8018b80:	843b      	strh	r3, [r7, #32]
 8018b82:	e0ae      	b.n	8018ce2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8018b84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018b88:	49a6      	ldr	r1, [pc, #664]	; (8018e24 <etharp_find_entry+0x2d4>)
 8018b8a:	4613      	mov	r3, r2
 8018b8c:	005b      	lsls	r3, r3, #1
 8018b8e:	4413      	add	r3, r2
 8018b90:	00db      	lsls	r3, r3, #3
 8018b92:	440b      	add	r3, r1
 8018b94:	3314      	adds	r3, #20
 8018b96:	781b      	ldrb	r3, [r3, #0]
 8018b98:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8018b9a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018b9e:	2b0a      	cmp	r3, #10
 8018ba0:	d105      	bne.n	8018bae <etharp_find_entry+0x5e>
 8018ba2:	7dfb      	ldrb	r3, [r7, #23]
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d102      	bne.n	8018bae <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8018ba8:	8c3b      	ldrh	r3, [r7, #32]
 8018baa:	847b      	strh	r3, [r7, #34]	; 0x22
 8018bac:	e095      	b.n	8018cda <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8018bae:	7dfb      	ldrb	r3, [r7, #23]
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	f000 8092 	beq.w	8018cda <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8018bb6:	7dfb      	ldrb	r3, [r7, #23]
 8018bb8:	2b01      	cmp	r3, #1
 8018bba:	d009      	beq.n	8018bd0 <etharp_find_entry+0x80>
 8018bbc:	7dfb      	ldrb	r3, [r7, #23]
 8018bbe:	2b01      	cmp	r3, #1
 8018bc0:	d806      	bhi.n	8018bd0 <etharp_find_entry+0x80>
 8018bc2:	4b99      	ldr	r3, [pc, #612]	; (8018e28 <etharp_find_entry+0x2d8>)
 8018bc4:	f240 1223 	movw	r2, #291	; 0x123
 8018bc8:	4998      	ldr	r1, [pc, #608]	; (8018e2c <etharp_find_entry+0x2dc>)
 8018bca:	4899      	ldr	r0, [pc, #612]	; (8018e30 <etharp_find_entry+0x2e0>)
 8018bcc:	f003 fdb0 	bl	801c730 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8018bd0:	68fb      	ldr	r3, [r7, #12]
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d020      	beq.n	8018c18 <etharp_find_entry+0xc8>
 8018bd6:	68fb      	ldr	r3, [r7, #12]
 8018bd8:	6819      	ldr	r1, [r3, #0]
 8018bda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018bde:	4891      	ldr	r0, [pc, #580]	; (8018e24 <etharp_find_entry+0x2d4>)
 8018be0:	4613      	mov	r3, r2
 8018be2:	005b      	lsls	r3, r3, #1
 8018be4:	4413      	add	r3, r2
 8018be6:	00db      	lsls	r3, r3, #3
 8018be8:	4403      	add	r3, r0
 8018bea:	3304      	adds	r3, #4
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	4299      	cmp	r1, r3
 8018bf0:	d112      	bne.n	8018c18 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	d00c      	beq.n	8018c12 <etharp_find_entry+0xc2>
 8018bf8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018bfc:	4989      	ldr	r1, [pc, #548]	; (8018e24 <etharp_find_entry+0x2d4>)
 8018bfe:	4613      	mov	r3, r2
 8018c00:	005b      	lsls	r3, r3, #1
 8018c02:	4413      	add	r3, r2
 8018c04:	00db      	lsls	r3, r3, #3
 8018c06:	440b      	add	r3, r1
 8018c08:	3308      	adds	r3, #8
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	687a      	ldr	r2, [r7, #4]
 8018c0e:	429a      	cmp	r2, r3
 8018c10:	d102      	bne.n	8018c18 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8018c12:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018c16:	e100      	b.n	8018e1a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8018c18:	7dfb      	ldrb	r3, [r7, #23]
 8018c1a:	2b01      	cmp	r3, #1
 8018c1c:	d140      	bne.n	8018ca0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8018c1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018c22:	4980      	ldr	r1, [pc, #512]	; (8018e24 <etharp_find_entry+0x2d4>)
 8018c24:	4613      	mov	r3, r2
 8018c26:	005b      	lsls	r3, r3, #1
 8018c28:	4413      	add	r3, r2
 8018c2a:	00db      	lsls	r3, r3, #3
 8018c2c:	440b      	add	r3, r1
 8018c2e:	681b      	ldr	r3, [r3, #0]
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	d01a      	beq.n	8018c6a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8018c34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018c38:	497a      	ldr	r1, [pc, #488]	; (8018e24 <etharp_find_entry+0x2d4>)
 8018c3a:	4613      	mov	r3, r2
 8018c3c:	005b      	lsls	r3, r3, #1
 8018c3e:	4413      	add	r3, r2
 8018c40:	00db      	lsls	r3, r3, #3
 8018c42:	440b      	add	r3, r1
 8018c44:	3312      	adds	r3, #18
 8018c46:	881b      	ldrh	r3, [r3, #0]
 8018c48:	8bba      	ldrh	r2, [r7, #28]
 8018c4a:	429a      	cmp	r2, r3
 8018c4c:	d845      	bhi.n	8018cda <etharp_find_entry+0x18a>
            old_queue = i;
 8018c4e:	8c3b      	ldrh	r3, [r7, #32]
 8018c50:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8018c52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018c56:	4973      	ldr	r1, [pc, #460]	; (8018e24 <etharp_find_entry+0x2d4>)
 8018c58:	4613      	mov	r3, r2
 8018c5a:	005b      	lsls	r3, r3, #1
 8018c5c:	4413      	add	r3, r2
 8018c5e:	00db      	lsls	r3, r3, #3
 8018c60:	440b      	add	r3, r1
 8018c62:	3312      	adds	r3, #18
 8018c64:	881b      	ldrh	r3, [r3, #0]
 8018c66:	83bb      	strh	r3, [r7, #28]
 8018c68:	e037      	b.n	8018cda <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8018c6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018c6e:	496d      	ldr	r1, [pc, #436]	; (8018e24 <etharp_find_entry+0x2d4>)
 8018c70:	4613      	mov	r3, r2
 8018c72:	005b      	lsls	r3, r3, #1
 8018c74:	4413      	add	r3, r2
 8018c76:	00db      	lsls	r3, r3, #3
 8018c78:	440b      	add	r3, r1
 8018c7a:	3312      	adds	r3, #18
 8018c7c:	881b      	ldrh	r3, [r3, #0]
 8018c7e:	8b7a      	ldrh	r2, [r7, #26]
 8018c80:	429a      	cmp	r2, r3
 8018c82:	d82a      	bhi.n	8018cda <etharp_find_entry+0x18a>
            old_pending = i;
 8018c84:	8c3b      	ldrh	r3, [r7, #32]
 8018c86:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8018c88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018c8c:	4965      	ldr	r1, [pc, #404]	; (8018e24 <etharp_find_entry+0x2d4>)
 8018c8e:	4613      	mov	r3, r2
 8018c90:	005b      	lsls	r3, r3, #1
 8018c92:	4413      	add	r3, r2
 8018c94:	00db      	lsls	r3, r3, #3
 8018c96:	440b      	add	r3, r1
 8018c98:	3312      	adds	r3, #18
 8018c9a:	881b      	ldrh	r3, [r3, #0]
 8018c9c:	837b      	strh	r3, [r7, #26]
 8018c9e:	e01c      	b.n	8018cda <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8018ca0:	7dfb      	ldrb	r3, [r7, #23]
 8018ca2:	2b01      	cmp	r3, #1
 8018ca4:	d919      	bls.n	8018cda <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8018ca6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018caa:	495e      	ldr	r1, [pc, #376]	; (8018e24 <etharp_find_entry+0x2d4>)
 8018cac:	4613      	mov	r3, r2
 8018cae:	005b      	lsls	r3, r3, #1
 8018cb0:	4413      	add	r3, r2
 8018cb2:	00db      	lsls	r3, r3, #3
 8018cb4:	440b      	add	r3, r1
 8018cb6:	3312      	adds	r3, #18
 8018cb8:	881b      	ldrh	r3, [r3, #0]
 8018cba:	8b3a      	ldrh	r2, [r7, #24]
 8018cbc:	429a      	cmp	r2, r3
 8018cbe:	d80c      	bhi.n	8018cda <etharp_find_entry+0x18a>
            old_stable = i;
 8018cc0:	8c3b      	ldrh	r3, [r7, #32]
 8018cc2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8018cc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018cc8:	4956      	ldr	r1, [pc, #344]	; (8018e24 <etharp_find_entry+0x2d4>)
 8018cca:	4613      	mov	r3, r2
 8018ccc:	005b      	lsls	r3, r3, #1
 8018cce:	4413      	add	r3, r2
 8018cd0:	00db      	lsls	r3, r3, #3
 8018cd2:	440b      	add	r3, r1
 8018cd4:	3312      	adds	r3, #18
 8018cd6:	881b      	ldrh	r3, [r3, #0]
 8018cd8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018cda:	8c3b      	ldrh	r3, [r7, #32]
 8018cdc:	3301      	adds	r3, #1
 8018cde:	b29b      	uxth	r3, r3
 8018ce0:	843b      	strh	r3, [r7, #32]
 8018ce2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018ce6:	2b09      	cmp	r3, #9
 8018ce8:	f77f af4c 	ble.w	8018b84 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018cec:	7afb      	ldrb	r3, [r7, #11]
 8018cee:	f003 0302 	and.w	r3, r3, #2
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	d108      	bne.n	8018d08 <etharp_find_entry+0x1b8>
 8018cf6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018cfa:	2b0a      	cmp	r3, #10
 8018cfc:	d107      	bne.n	8018d0e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8018cfe:	7afb      	ldrb	r3, [r7, #11]
 8018d00:	f003 0301 	and.w	r3, r3, #1
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	d102      	bne.n	8018d0e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8018d08:	f04f 33ff 	mov.w	r3, #4294967295
 8018d0c:	e085      	b.n	8018e1a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8018d0e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018d12:	2b09      	cmp	r3, #9
 8018d14:	dc02      	bgt.n	8018d1c <etharp_find_entry+0x1cc>
    i = empty;
 8018d16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018d18:	843b      	strh	r3, [r7, #32]
 8018d1a:	e039      	b.n	8018d90 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018d1c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018d20:	2b09      	cmp	r3, #9
 8018d22:	dc14      	bgt.n	8018d4e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8018d24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d26:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8018d28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018d2c:	493d      	ldr	r1, [pc, #244]	; (8018e24 <etharp_find_entry+0x2d4>)
 8018d2e:	4613      	mov	r3, r2
 8018d30:	005b      	lsls	r3, r3, #1
 8018d32:	4413      	add	r3, r2
 8018d34:	00db      	lsls	r3, r3, #3
 8018d36:	440b      	add	r3, r1
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	d018      	beq.n	8018d70 <etharp_find_entry+0x220>
 8018d3e:	4b3a      	ldr	r3, [pc, #232]	; (8018e28 <etharp_find_entry+0x2d8>)
 8018d40:	f240 126d 	movw	r2, #365	; 0x16d
 8018d44:	493b      	ldr	r1, [pc, #236]	; (8018e34 <etharp_find_entry+0x2e4>)
 8018d46:	483a      	ldr	r0, [pc, #232]	; (8018e30 <etharp_find_entry+0x2e0>)
 8018d48:	f003 fcf2 	bl	801c730 <iprintf>
 8018d4c:	e010      	b.n	8018d70 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018d4e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018d52:	2b09      	cmp	r3, #9
 8018d54:	dc02      	bgt.n	8018d5c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8018d56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018d58:	843b      	strh	r3, [r7, #32]
 8018d5a:	e009      	b.n	8018d70 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018d5c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018d60:	2b09      	cmp	r3, #9
 8018d62:	dc02      	bgt.n	8018d6a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8018d64:	8bfb      	ldrh	r3, [r7, #30]
 8018d66:	843b      	strh	r3, [r7, #32]
 8018d68:	e002      	b.n	8018d70 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8018d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8018d6e:	e054      	b.n	8018e1a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018d70:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018d74:	2b09      	cmp	r3, #9
 8018d76:	dd06      	ble.n	8018d86 <etharp_find_entry+0x236>
 8018d78:	4b2b      	ldr	r3, [pc, #172]	; (8018e28 <etharp_find_entry+0x2d8>)
 8018d7a:	f240 127f 	movw	r2, #383	; 0x17f
 8018d7e:	492e      	ldr	r1, [pc, #184]	; (8018e38 <etharp_find_entry+0x2e8>)
 8018d80:	482b      	ldr	r0, [pc, #172]	; (8018e30 <etharp_find_entry+0x2e0>)
 8018d82:	f003 fcd5 	bl	801c730 <iprintf>
    etharp_free_entry(i);
 8018d86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018d8a:	4618      	mov	r0, r3
 8018d8c:	f7ff fe06 	bl	801899c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018d90:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018d94:	2b09      	cmp	r3, #9
 8018d96:	dd06      	ble.n	8018da6 <etharp_find_entry+0x256>
 8018d98:	4b23      	ldr	r3, [pc, #140]	; (8018e28 <etharp_find_entry+0x2d8>)
 8018d9a:	f240 1283 	movw	r2, #387	; 0x183
 8018d9e:	4926      	ldr	r1, [pc, #152]	; (8018e38 <etharp_find_entry+0x2e8>)
 8018da0:	4823      	ldr	r0, [pc, #140]	; (8018e30 <etharp_find_entry+0x2e0>)
 8018da2:	f003 fcc5 	bl	801c730 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8018da6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018daa:	491e      	ldr	r1, [pc, #120]	; (8018e24 <etharp_find_entry+0x2d4>)
 8018dac:	4613      	mov	r3, r2
 8018dae:	005b      	lsls	r3, r3, #1
 8018db0:	4413      	add	r3, r2
 8018db2:	00db      	lsls	r3, r3, #3
 8018db4:	440b      	add	r3, r1
 8018db6:	3314      	adds	r3, #20
 8018db8:	781b      	ldrb	r3, [r3, #0]
 8018dba:	2b00      	cmp	r3, #0
 8018dbc:	d006      	beq.n	8018dcc <etharp_find_entry+0x27c>
 8018dbe:	4b1a      	ldr	r3, [pc, #104]	; (8018e28 <etharp_find_entry+0x2d8>)
 8018dc0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8018dc4:	491d      	ldr	r1, [pc, #116]	; (8018e3c <etharp_find_entry+0x2ec>)
 8018dc6:	481a      	ldr	r0, [pc, #104]	; (8018e30 <etharp_find_entry+0x2e0>)
 8018dc8:	f003 fcb2 	bl	801c730 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018dcc:	68fb      	ldr	r3, [r7, #12]
 8018dce:	2b00      	cmp	r3, #0
 8018dd0:	d00b      	beq.n	8018dea <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8018dd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018dd6:	68fb      	ldr	r3, [r7, #12]
 8018dd8:	6819      	ldr	r1, [r3, #0]
 8018dda:	4812      	ldr	r0, [pc, #72]	; (8018e24 <etharp_find_entry+0x2d4>)
 8018ddc:	4613      	mov	r3, r2
 8018dde:	005b      	lsls	r3, r3, #1
 8018de0:	4413      	add	r3, r2
 8018de2:	00db      	lsls	r3, r3, #3
 8018de4:	4403      	add	r3, r0
 8018de6:	3304      	adds	r3, #4
 8018de8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8018dea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018dee:	490d      	ldr	r1, [pc, #52]	; (8018e24 <etharp_find_entry+0x2d4>)
 8018df0:	4613      	mov	r3, r2
 8018df2:	005b      	lsls	r3, r3, #1
 8018df4:	4413      	add	r3, r2
 8018df6:	00db      	lsls	r3, r3, #3
 8018df8:	440b      	add	r3, r1
 8018dfa:	3312      	adds	r3, #18
 8018dfc:	2200      	movs	r2, #0
 8018dfe:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8018e00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018e04:	4907      	ldr	r1, [pc, #28]	; (8018e24 <etharp_find_entry+0x2d4>)
 8018e06:	4613      	mov	r3, r2
 8018e08:	005b      	lsls	r3, r3, #1
 8018e0a:	4413      	add	r3, r2
 8018e0c:	00db      	lsls	r3, r3, #3
 8018e0e:	440b      	add	r3, r1
 8018e10:	3308      	adds	r3, #8
 8018e12:	687a      	ldr	r2, [r7, #4]
 8018e14:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8018e16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8018e1a:	4618      	mov	r0, r3
 8018e1c:	3728      	adds	r7, #40	; 0x28
 8018e1e:	46bd      	mov	sp, r7
 8018e20:	bd80      	pop	{r7, pc}
 8018e22:	bf00      	nop
 8018e24:	2000743c 	.word	0x2000743c
 8018e28:	08022d2c 	.word	0x08022d2c
 8018e2c:	08022d64 	.word	0x08022d64
 8018e30:	08022da4 	.word	0x08022da4
 8018e34:	08022dcc 	.word	0x08022dcc
 8018e38:	08022de4 	.word	0x08022de4
 8018e3c:	08022df8 	.word	0x08022df8

08018e40 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018e40:	b580      	push	{r7, lr}
 8018e42:	b088      	sub	sp, #32
 8018e44:	af02      	add	r7, sp, #8
 8018e46:	60f8      	str	r0, [r7, #12]
 8018e48:	60b9      	str	r1, [r7, #8]
 8018e4a:	607a      	str	r2, [r7, #4]
 8018e4c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8018e4e:	68fb      	ldr	r3, [r7, #12]
 8018e50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018e54:	2b06      	cmp	r3, #6
 8018e56:	d006      	beq.n	8018e66 <etharp_update_arp_entry+0x26>
 8018e58:	4b48      	ldr	r3, [pc, #288]	; (8018f7c <etharp_update_arp_entry+0x13c>)
 8018e5a:	f240 12a9 	movw	r2, #425	; 0x1a9
 8018e5e:	4948      	ldr	r1, [pc, #288]	; (8018f80 <etharp_update_arp_entry+0x140>)
 8018e60:	4848      	ldr	r0, [pc, #288]	; (8018f84 <etharp_update_arp_entry+0x144>)
 8018e62:	f003 fc65 	bl	801c730 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8018e66:	68bb      	ldr	r3, [r7, #8]
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d012      	beq.n	8018e92 <etharp_update_arp_entry+0x52>
 8018e6c:	68bb      	ldr	r3, [r7, #8]
 8018e6e:	681b      	ldr	r3, [r3, #0]
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d00e      	beq.n	8018e92 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018e74:	68bb      	ldr	r3, [r7, #8]
 8018e76:	681b      	ldr	r3, [r3, #0]
 8018e78:	68f9      	ldr	r1, [r7, #12]
 8018e7a:	4618      	mov	r0, r3
 8018e7c:	f001 fb9e 	bl	801a5bc <ip4_addr_isbroadcast_u32>
 8018e80:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d105      	bne.n	8018e92 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8018e86:	68bb      	ldr	r3, [r7, #8]
 8018e88:	681b      	ldr	r3, [r3, #0]
 8018e8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018e8e:	2be0      	cmp	r3, #224	; 0xe0
 8018e90:	d102      	bne.n	8018e98 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018e92:	f06f 030f 	mvn.w	r3, #15
 8018e96:	e06c      	b.n	8018f72 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8018e98:	78fb      	ldrb	r3, [r7, #3]
 8018e9a:	68fa      	ldr	r2, [r7, #12]
 8018e9c:	4619      	mov	r1, r3
 8018e9e:	68b8      	ldr	r0, [r7, #8]
 8018ea0:	f7ff fe56 	bl	8018b50 <etharp_find_entry>
 8018ea4:	4603      	mov	r3, r0
 8018ea6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018ea8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	da02      	bge.n	8018eb6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018eb0:	8afb      	ldrh	r3, [r7, #22]
 8018eb2:	b25b      	sxtb	r3, r3
 8018eb4:	e05d      	b.n	8018f72 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8018eb6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018eba:	4933      	ldr	r1, [pc, #204]	; (8018f88 <etharp_update_arp_entry+0x148>)
 8018ebc:	4613      	mov	r3, r2
 8018ebe:	005b      	lsls	r3, r3, #1
 8018ec0:	4413      	add	r3, r2
 8018ec2:	00db      	lsls	r3, r3, #3
 8018ec4:	440b      	add	r3, r1
 8018ec6:	3314      	adds	r3, #20
 8018ec8:	2202      	movs	r2, #2
 8018eca:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018ecc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018ed0:	492d      	ldr	r1, [pc, #180]	; (8018f88 <etharp_update_arp_entry+0x148>)
 8018ed2:	4613      	mov	r3, r2
 8018ed4:	005b      	lsls	r3, r3, #1
 8018ed6:	4413      	add	r3, r2
 8018ed8:	00db      	lsls	r3, r3, #3
 8018eda:	440b      	add	r3, r1
 8018edc:	3308      	adds	r3, #8
 8018ede:	68fa      	ldr	r2, [r7, #12]
 8018ee0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8018ee2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018ee6:	4613      	mov	r3, r2
 8018ee8:	005b      	lsls	r3, r3, #1
 8018eea:	4413      	add	r3, r2
 8018eec:	00db      	lsls	r3, r3, #3
 8018eee:	3308      	adds	r3, #8
 8018ef0:	4a25      	ldr	r2, [pc, #148]	; (8018f88 <etharp_update_arp_entry+0x148>)
 8018ef2:	4413      	add	r3, r2
 8018ef4:	3304      	adds	r3, #4
 8018ef6:	2206      	movs	r2, #6
 8018ef8:	6879      	ldr	r1, [r7, #4]
 8018efa:	4618      	mov	r0, r3
 8018efc:	f002 fcaa 	bl	801b854 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018f00:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018f04:	4920      	ldr	r1, [pc, #128]	; (8018f88 <etharp_update_arp_entry+0x148>)
 8018f06:	4613      	mov	r3, r2
 8018f08:	005b      	lsls	r3, r3, #1
 8018f0a:	4413      	add	r3, r2
 8018f0c:	00db      	lsls	r3, r3, #3
 8018f0e:	440b      	add	r3, r1
 8018f10:	3312      	adds	r3, #18
 8018f12:	2200      	movs	r2, #0
 8018f14:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8018f16:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018f1a:	491b      	ldr	r1, [pc, #108]	; (8018f88 <etharp_update_arp_entry+0x148>)
 8018f1c:	4613      	mov	r3, r2
 8018f1e:	005b      	lsls	r3, r3, #1
 8018f20:	4413      	add	r3, r2
 8018f22:	00db      	lsls	r3, r3, #3
 8018f24:	440b      	add	r3, r1
 8018f26:	681b      	ldr	r3, [r3, #0]
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	d021      	beq.n	8018f70 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8018f2c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018f30:	4915      	ldr	r1, [pc, #84]	; (8018f88 <etharp_update_arp_entry+0x148>)
 8018f32:	4613      	mov	r3, r2
 8018f34:	005b      	lsls	r3, r3, #1
 8018f36:	4413      	add	r3, r2
 8018f38:	00db      	lsls	r3, r3, #3
 8018f3a:	440b      	add	r3, r1
 8018f3c:	681b      	ldr	r3, [r3, #0]
 8018f3e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8018f40:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018f44:	4910      	ldr	r1, [pc, #64]	; (8018f88 <etharp_update_arp_entry+0x148>)
 8018f46:	4613      	mov	r3, r2
 8018f48:	005b      	lsls	r3, r3, #1
 8018f4a:	4413      	add	r3, r2
 8018f4c:	00db      	lsls	r3, r3, #3
 8018f4e:	440b      	add	r3, r1
 8018f50:	2200      	movs	r2, #0
 8018f52:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018f54:	68fb      	ldr	r3, [r7, #12]
 8018f56:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8018f5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018f5e:	9300      	str	r3, [sp, #0]
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	6939      	ldr	r1, [r7, #16]
 8018f64:	68f8      	ldr	r0, [r7, #12]
 8018f66:	f002 fbe1 	bl	801b72c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8018f6a:	6938      	ldr	r0, [r7, #16]
 8018f6c:	f7f7 f910 	bl	8010190 <pbuf_free>
  }
  return ERR_OK;
 8018f70:	2300      	movs	r3, #0
}
 8018f72:	4618      	mov	r0, r3
 8018f74:	3718      	adds	r7, #24
 8018f76:	46bd      	mov	sp, r7
 8018f78:	bd80      	pop	{r7, pc}
 8018f7a:	bf00      	nop
 8018f7c:	08022d2c 	.word	0x08022d2c
 8018f80:	08022e24 	.word	0x08022e24
 8018f84:	08022da4 	.word	0x08022da4
 8018f88:	2000743c 	.word	0x2000743c

08018f8c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018f8c:	b580      	push	{r7, lr}
 8018f8e:	b084      	sub	sp, #16
 8018f90:	af00      	add	r7, sp, #0
 8018f92:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018f94:	2300      	movs	r3, #0
 8018f96:	60fb      	str	r3, [r7, #12]
 8018f98:	e01e      	b.n	8018fd8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8018f9a:	4913      	ldr	r1, [pc, #76]	; (8018fe8 <etharp_cleanup_netif+0x5c>)
 8018f9c:	68fa      	ldr	r2, [r7, #12]
 8018f9e:	4613      	mov	r3, r2
 8018fa0:	005b      	lsls	r3, r3, #1
 8018fa2:	4413      	add	r3, r2
 8018fa4:	00db      	lsls	r3, r3, #3
 8018fa6:	440b      	add	r3, r1
 8018fa8:	3314      	adds	r3, #20
 8018faa:	781b      	ldrb	r3, [r3, #0]
 8018fac:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018fae:	7afb      	ldrb	r3, [r7, #11]
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	d00e      	beq.n	8018fd2 <etharp_cleanup_netif+0x46>
 8018fb4:	490c      	ldr	r1, [pc, #48]	; (8018fe8 <etharp_cleanup_netif+0x5c>)
 8018fb6:	68fa      	ldr	r2, [r7, #12]
 8018fb8:	4613      	mov	r3, r2
 8018fba:	005b      	lsls	r3, r3, #1
 8018fbc:	4413      	add	r3, r2
 8018fbe:	00db      	lsls	r3, r3, #3
 8018fc0:	440b      	add	r3, r1
 8018fc2:	3308      	adds	r3, #8
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	687a      	ldr	r2, [r7, #4]
 8018fc8:	429a      	cmp	r2, r3
 8018fca:	d102      	bne.n	8018fd2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018fcc:	68f8      	ldr	r0, [r7, #12]
 8018fce:	f7ff fce5 	bl	801899c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018fd2:	68fb      	ldr	r3, [r7, #12]
 8018fd4:	3301      	adds	r3, #1
 8018fd6:	60fb      	str	r3, [r7, #12]
 8018fd8:	68fb      	ldr	r3, [r7, #12]
 8018fda:	2b09      	cmp	r3, #9
 8018fdc:	dddd      	ble.n	8018f9a <etharp_cleanup_netif+0xe>
    }
  }
}
 8018fde:	bf00      	nop
 8018fe0:	bf00      	nop
 8018fe2:	3710      	adds	r7, #16
 8018fe4:	46bd      	mov	sp, r7
 8018fe6:	bd80      	pop	{r7, pc}
 8018fe8:	2000743c 	.word	0x2000743c

08018fec <etharp_get_entry>:
 * @param eth_ret return value: ETH address
 * @return 1 on valid index, 0 otherwise
 */
int
etharp_get_entry(size_t i, ip4_addr_t **ipaddr, struct netif **netif, struct eth_addr **eth_ret)
{
 8018fec:	b580      	push	{r7, lr}
 8018fee:	b084      	sub	sp, #16
 8018ff0:	af00      	add	r7, sp, #0
 8018ff2:	60f8      	str	r0, [r7, #12]
 8018ff4:	60b9      	str	r1, [r7, #8]
 8018ff6:	607a      	str	r2, [r7, #4]
 8018ff8:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018ffa:	68bb      	ldr	r3, [r7, #8]
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	d106      	bne.n	801900e <etharp_get_entry+0x22>
 8019000:	4b27      	ldr	r3, [pc, #156]	; (80190a0 <etharp_get_entry+0xb4>)
 8019002:	f240 2266 	movw	r2, #614	; 0x266
 8019006:	4927      	ldr	r1, [pc, #156]	; (80190a4 <etharp_get_entry+0xb8>)
 8019008:	4827      	ldr	r0, [pc, #156]	; (80190a8 <etharp_get_entry+0xbc>)
 801900a:	f003 fb91 	bl	801c730 <iprintf>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	2b00      	cmp	r3, #0
 8019012:	d106      	bne.n	8019022 <etharp_get_entry+0x36>
 8019014:	4b22      	ldr	r3, [pc, #136]	; (80190a0 <etharp_get_entry+0xb4>)
 8019016:	f240 2267 	movw	r2, #615	; 0x267
 801901a:	4924      	ldr	r1, [pc, #144]	; (80190ac <etharp_get_entry+0xc0>)
 801901c:	4822      	ldr	r0, [pc, #136]	; (80190a8 <etharp_get_entry+0xbc>)
 801901e:	f003 fb87 	bl	801c730 <iprintf>
  LWIP_ASSERT("eth_ret != NULL", eth_ret != NULL);
 8019022:	683b      	ldr	r3, [r7, #0]
 8019024:	2b00      	cmp	r3, #0
 8019026:	d106      	bne.n	8019036 <etharp_get_entry+0x4a>
 8019028:	4b1d      	ldr	r3, [pc, #116]	; (80190a0 <etharp_get_entry+0xb4>)
 801902a:	f44f 721a 	mov.w	r2, #616	; 0x268
 801902e:	4920      	ldr	r1, [pc, #128]	; (80190b0 <etharp_get_entry+0xc4>)
 8019030:	481d      	ldr	r0, [pc, #116]	; (80190a8 <etharp_get_entry+0xbc>)
 8019032:	f003 fb7d 	bl	801c730 <iprintf>

  if ((i < ARP_TABLE_SIZE) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
 8019036:	68fb      	ldr	r3, [r7, #12]
 8019038:	2b09      	cmp	r3, #9
 801903a:	d82c      	bhi.n	8019096 <etharp_get_entry+0xaa>
 801903c:	491d      	ldr	r1, [pc, #116]	; (80190b4 <etharp_get_entry+0xc8>)
 801903e:	68fa      	ldr	r2, [r7, #12]
 8019040:	4613      	mov	r3, r2
 8019042:	005b      	lsls	r3, r3, #1
 8019044:	4413      	add	r3, r2
 8019046:	00db      	lsls	r3, r3, #3
 8019048:	440b      	add	r3, r1
 801904a:	3314      	adds	r3, #20
 801904c:	781b      	ldrb	r3, [r3, #0]
 801904e:	2b01      	cmp	r3, #1
 8019050:	d921      	bls.n	8019096 <etharp_get_entry+0xaa>
    *ipaddr  = &arp_table[i].ipaddr;
 8019052:	68fa      	ldr	r2, [r7, #12]
 8019054:	4613      	mov	r3, r2
 8019056:	005b      	lsls	r3, r3, #1
 8019058:	4413      	add	r3, r2
 801905a:	00db      	lsls	r3, r3, #3
 801905c:	4a15      	ldr	r2, [pc, #84]	; (80190b4 <etharp_get_entry+0xc8>)
 801905e:	4413      	add	r3, r2
 8019060:	1d1a      	adds	r2, r3, #4
 8019062:	68bb      	ldr	r3, [r7, #8]
 8019064:	601a      	str	r2, [r3, #0]
    *netif   = arp_table[i].netif;
 8019066:	4913      	ldr	r1, [pc, #76]	; (80190b4 <etharp_get_entry+0xc8>)
 8019068:	68fa      	ldr	r2, [r7, #12]
 801906a:	4613      	mov	r3, r2
 801906c:	005b      	lsls	r3, r3, #1
 801906e:	4413      	add	r3, r2
 8019070:	00db      	lsls	r3, r3, #3
 8019072:	440b      	add	r3, r1
 8019074:	3308      	adds	r3, #8
 8019076:	681a      	ldr	r2, [r3, #0]
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	601a      	str	r2, [r3, #0]
    *eth_ret = &arp_table[i].ethaddr;
 801907c:	68fa      	ldr	r2, [r7, #12]
 801907e:	4613      	mov	r3, r2
 8019080:	005b      	lsls	r3, r3, #1
 8019082:	4413      	add	r3, r2
 8019084:	00db      	lsls	r3, r3, #3
 8019086:	3308      	adds	r3, #8
 8019088:	4a0a      	ldr	r2, [pc, #40]	; (80190b4 <etharp_get_entry+0xc8>)
 801908a:	4413      	add	r3, r2
 801908c:	1d1a      	adds	r2, r3, #4
 801908e:	683b      	ldr	r3, [r7, #0]
 8019090:	601a      	str	r2, [r3, #0]
    return 1;
 8019092:	2301      	movs	r3, #1
 8019094:	e000      	b.n	8019098 <etharp_get_entry+0xac>
  } else {
    return 0;
 8019096:	2300      	movs	r3, #0
  }
}
 8019098:	4618      	mov	r0, r3
 801909a:	3710      	adds	r7, #16
 801909c:	46bd      	mov	sp, r7
 801909e:	bd80      	pop	{r7, pc}
 80190a0:	08022d2c 	.word	0x08022d2c
 80190a4:	08022e6c 	.word	0x08022e6c
 80190a8:	08022da4 	.word	0x08022da4
 80190ac:	08022e7c 	.word	0x08022e7c
 80190b0:	08022e8c 	.word	0x08022e8c
 80190b4:	2000743c 	.word	0x2000743c

080190b8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80190b8:	b5b0      	push	{r4, r5, r7, lr}
 80190ba:	b08a      	sub	sp, #40	; 0x28
 80190bc:	af04      	add	r7, sp, #16
 80190be:	6078      	str	r0, [r7, #4]
 80190c0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80190c2:	683b      	ldr	r3, [r7, #0]
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	d107      	bne.n	80190d8 <etharp_input+0x20>
 80190c8:	4b4c      	ldr	r3, [pc, #304]	; (80191fc <etharp_input+0x144>)
 80190ca:	f240 228a 	movw	r2, #650	; 0x28a
 80190ce:	494c      	ldr	r1, [pc, #304]	; (8019200 <etharp_input+0x148>)
 80190d0:	484c      	ldr	r0, [pc, #304]	; (8019204 <etharp_input+0x14c>)
 80190d2:	f003 fb2d 	bl	801c730 <iprintf>
 80190d6:	e08d      	b.n	80191f4 <etharp_input+0x13c>

  hdr = (struct etharp_hdr *)p->payload;
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	685b      	ldr	r3, [r3, #4]
 80190dc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80190de:	693b      	ldr	r3, [r7, #16]
 80190e0:	881b      	ldrh	r3, [r3, #0]
 80190e2:	b29b      	uxth	r3, r3
 80190e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80190e8:	d10c      	bne.n	8019104 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80190ea:	693b      	ldr	r3, [r7, #16]
 80190ec:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80190ee:	2b06      	cmp	r3, #6
 80190f0:	d108      	bne.n	8019104 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80190f2:	693b      	ldr	r3, [r7, #16]
 80190f4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80190f6:	2b04      	cmp	r3, #4
 80190f8:	d104      	bne.n	8019104 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80190fa:	693b      	ldr	r3, [r7, #16]
 80190fc:	885b      	ldrh	r3, [r3, #2]
 80190fe:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8019100:	2b08      	cmp	r3, #8
 8019102:	d00f      	beq.n	8019124 <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 8019104:	4b40      	ldr	r3, [pc, #256]	; (8019208 <etharp_input+0x150>)
 8019106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019108:	3301      	adds	r3, #1
 801910a:	b29a      	uxth	r2, r3
 801910c:	4b3e      	ldr	r3, [pc, #248]	; (8019208 <etharp_input+0x150>)
 801910e:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 8019110:	4b3d      	ldr	r3, [pc, #244]	; (8019208 <etharp_input+0x150>)
 8019112:	8bdb      	ldrh	r3, [r3, #30]
 8019114:	3301      	adds	r3, #1
 8019116:	b29a      	uxth	r2, r3
 8019118:	4b3b      	ldr	r3, [pc, #236]	; (8019208 <etharp_input+0x150>)
 801911a:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 801911c:	6878      	ldr	r0, [r7, #4]
 801911e:	f7f7 f837 	bl	8010190 <pbuf_free>
    return;
 8019122:	e067      	b.n	80191f4 <etharp_input+0x13c>
  }
  ETHARP_STATS_INC(etharp.recv);
 8019124:	4b38      	ldr	r3, [pc, #224]	; (8019208 <etharp_input+0x150>)
 8019126:	8b5b      	ldrh	r3, [r3, #26]
 8019128:	3301      	adds	r3, #1
 801912a:	b29a      	uxth	r2, r3
 801912c:	4b36      	ldr	r3, [pc, #216]	; (8019208 <etharp_input+0x150>)
 801912e:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8019130:	693b      	ldr	r3, [r7, #16]
 8019132:	330e      	adds	r3, #14
 8019134:	681b      	ldr	r3, [r3, #0]
 8019136:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8019138:	693b      	ldr	r3, [r7, #16]
 801913a:	3318      	adds	r3, #24
 801913c:	681b      	ldr	r3, [r3, #0]
 801913e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019140:	683b      	ldr	r3, [r7, #0]
 8019142:	3304      	adds	r3, #4
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	2b00      	cmp	r3, #0
 8019148:	d102      	bne.n	8019150 <etharp_input+0x98>
    for_us = 0;
 801914a:	2300      	movs	r3, #0
 801914c:	75fb      	strb	r3, [r7, #23]
 801914e:	e009      	b.n	8019164 <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8019150:	68ba      	ldr	r2, [r7, #8]
 8019152:	683b      	ldr	r3, [r7, #0]
 8019154:	3304      	adds	r3, #4
 8019156:	681b      	ldr	r3, [r3, #0]
 8019158:	429a      	cmp	r2, r3
 801915a:	bf0c      	ite	eq
 801915c:	2301      	moveq	r3, #1
 801915e:	2300      	movne	r3, #0
 8019160:	b2db      	uxtb	r3, r3
 8019162:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8019164:	693b      	ldr	r3, [r7, #16]
 8019166:	f103 0208 	add.w	r2, r3, #8
 801916a:	7dfb      	ldrb	r3, [r7, #23]
 801916c:	2b00      	cmp	r3, #0
 801916e:	d001      	beq.n	8019174 <etharp_input+0xbc>
 8019170:	2301      	movs	r3, #1
 8019172:	e000      	b.n	8019176 <etharp_input+0xbe>
 8019174:	2302      	movs	r3, #2
 8019176:	f107 010c 	add.w	r1, r7, #12
 801917a:	6838      	ldr	r0, [r7, #0]
 801917c:	f7ff fe60 	bl	8018e40 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8019180:	693b      	ldr	r3, [r7, #16]
 8019182:	88db      	ldrh	r3, [r3, #6]
 8019184:	b29b      	uxth	r3, r3
 8019186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801918a:	d003      	beq.n	8019194 <etharp_input+0xdc>
 801918c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019190:	d01e      	beq.n	80191d0 <etharp_input+0x118>
 8019192:	e024      	b.n	80191de <etharp_input+0x126>
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
 8019194:	7dfb      	ldrb	r3, [r7, #23]
 8019196:	2b00      	cmp	r3, #0
 8019198:	d028      	beq.n	80191ec <etharp_input+0x134>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801919a:	683b      	ldr	r3, [r7, #0]
 801919c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80191a0:	693b      	ldr	r3, [r7, #16]
 80191a2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80191a6:	683b      	ldr	r3, [r7, #0]
 80191a8:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80191ac:	683b      	ldr	r3, [r7, #0]
 80191ae:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80191b0:	693a      	ldr	r2, [r7, #16]
 80191b2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80191b4:	2102      	movs	r1, #2
 80191b6:	9103      	str	r1, [sp, #12]
 80191b8:	f107 010c 	add.w	r1, r7, #12
 80191bc:	9102      	str	r1, [sp, #8]
 80191be:	9201      	str	r2, [sp, #4]
 80191c0:	9300      	str	r3, [sp, #0]
 80191c2:	462b      	mov	r3, r5
 80191c4:	4622      	mov	r2, r4
 80191c6:	4601      	mov	r1, r0
 80191c8:	6838      	ldr	r0, [r7, #0]
 80191ca:	f000 fb11 	bl	80197f0 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 80191ce:	e00d      	b.n	80191ec <etharp_input+0x134>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
      /* DHCP wants to know about ARP replies from any host with an
       * IP address also offered to us by the DHCP server. We do not
       * want to take a duplicate IP address on a single network.
       * @todo How should we handle redundant (fail-over) interfaces? */
      dhcp_arp_reply(netif, &sipaddr);
 80191d0:	f107 030c 	add.w	r3, r7, #12
 80191d4:	4619      	mov	r1, r3
 80191d6:	6838      	ldr	r0, [r7, #0]
 80191d8:	f7fe f954 	bl	8017484 <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
 80191dc:	e007      	b.n	80191ee <etharp_input+0x136>
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
 80191de:	4b0a      	ldr	r3, [pc, #40]	; (8019208 <etharp_input+0x150>)
 80191e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80191e2:	3301      	adds	r3, #1
 80191e4:	b29a      	uxth	r2, r3
 80191e6:	4b08      	ldr	r3, [pc, #32]	; (8019208 <etharp_input+0x150>)
 80191e8:	859a      	strh	r2, [r3, #44]	; 0x2c
      break;
 80191ea:	e000      	b.n	80191ee <etharp_input+0x136>
      break;
 80191ec:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80191ee:	6878      	ldr	r0, [r7, #4]
 80191f0:	f7f6 ffce 	bl	8010190 <pbuf_free>
}
 80191f4:	3718      	adds	r7, #24
 80191f6:	46bd      	mov	sp, r7
 80191f8:	bdb0      	pop	{r4, r5, r7, pc}
 80191fa:	bf00      	nop
 80191fc:	08022d2c 	.word	0x08022d2c
 8019200:	08022e7c 	.word	0x08022e7c
 8019204:	08022da4 	.word	0x08022da4
 8019208:	20007204 	.word	0x20007204

0801920c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801920c:	b580      	push	{r7, lr}
 801920e:	b086      	sub	sp, #24
 8019210:	af02      	add	r7, sp, #8
 8019212:	60f8      	str	r0, [r7, #12]
 8019214:	60b9      	str	r1, [r7, #8]
 8019216:	4613      	mov	r3, r2
 8019218:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801921a:	79fa      	ldrb	r2, [r7, #7]
 801921c:	4944      	ldr	r1, [pc, #272]	; (8019330 <etharp_output_to_arp_index+0x124>)
 801921e:	4613      	mov	r3, r2
 8019220:	005b      	lsls	r3, r3, #1
 8019222:	4413      	add	r3, r2
 8019224:	00db      	lsls	r3, r3, #3
 8019226:	440b      	add	r3, r1
 8019228:	3314      	adds	r3, #20
 801922a:	781b      	ldrb	r3, [r3, #0]
 801922c:	2b01      	cmp	r3, #1
 801922e:	d806      	bhi.n	801923e <etharp_output_to_arp_index+0x32>
 8019230:	4b40      	ldr	r3, [pc, #256]	; (8019334 <etharp_output_to_arp_index+0x128>)
 8019232:	f240 22ee 	movw	r2, #750	; 0x2ee
 8019236:	4940      	ldr	r1, [pc, #256]	; (8019338 <etharp_output_to_arp_index+0x12c>)
 8019238:	4840      	ldr	r0, [pc, #256]	; (801933c <etharp_output_to_arp_index+0x130>)
 801923a:	f003 fa79 	bl	801c730 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801923e:	79fa      	ldrb	r2, [r7, #7]
 8019240:	493b      	ldr	r1, [pc, #236]	; (8019330 <etharp_output_to_arp_index+0x124>)
 8019242:	4613      	mov	r3, r2
 8019244:	005b      	lsls	r3, r3, #1
 8019246:	4413      	add	r3, r2
 8019248:	00db      	lsls	r3, r3, #3
 801924a:	440b      	add	r3, r1
 801924c:	3314      	adds	r3, #20
 801924e:	781b      	ldrb	r3, [r3, #0]
 8019250:	2b02      	cmp	r3, #2
 8019252:	d153      	bne.n	80192fc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8019254:	79fa      	ldrb	r2, [r7, #7]
 8019256:	4936      	ldr	r1, [pc, #216]	; (8019330 <etharp_output_to_arp_index+0x124>)
 8019258:	4613      	mov	r3, r2
 801925a:	005b      	lsls	r3, r3, #1
 801925c:	4413      	add	r3, r2
 801925e:	00db      	lsls	r3, r3, #3
 8019260:	440b      	add	r3, r1
 8019262:	3312      	adds	r3, #18
 8019264:	881b      	ldrh	r3, [r3, #0]
 8019266:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801926a:	d919      	bls.n	80192a0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801926c:	79fa      	ldrb	r2, [r7, #7]
 801926e:	4613      	mov	r3, r2
 8019270:	005b      	lsls	r3, r3, #1
 8019272:	4413      	add	r3, r2
 8019274:	00db      	lsls	r3, r3, #3
 8019276:	4a2e      	ldr	r2, [pc, #184]	; (8019330 <etharp_output_to_arp_index+0x124>)
 8019278:	4413      	add	r3, r2
 801927a:	3304      	adds	r3, #4
 801927c:	4619      	mov	r1, r3
 801927e:	68f8      	ldr	r0, [r7, #12]
 8019280:	f000 fb72 	bl	8019968 <etharp_request>
 8019284:	4603      	mov	r3, r0
 8019286:	2b00      	cmp	r3, #0
 8019288:	d138      	bne.n	80192fc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801928a:	79fa      	ldrb	r2, [r7, #7]
 801928c:	4928      	ldr	r1, [pc, #160]	; (8019330 <etharp_output_to_arp_index+0x124>)
 801928e:	4613      	mov	r3, r2
 8019290:	005b      	lsls	r3, r3, #1
 8019292:	4413      	add	r3, r2
 8019294:	00db      	lsls	r3, r3, #3
 8019296:	440b      	add	r3, r1
 8019298:	3314      	adds	r3, #20
 801929a:	2203      	movs	r2, #3
 801929c:	701a      	strb	r2, [r3, #0]
 801929e:	e02d      	b.n	80192fc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80192a0:	79fa      	ldrb	r2, [r7, #7]
 80192a2:	4923      	ldr	r1, [pc, #140]	; (8019330 <etharp_output_to_arp_index+0x124>)
 80192a4:	4613      	mov	r3, r2
 80192a6:	005b      	lsls	r3, r3, #1
 80192a8:	4413      	add	r3, r2
 80192aa:	00db      	lsls	r3, r3, #3
 80192ac:	440b      	add	r3, r1
 80192ae:	3312      	adds	r3, #18
 80192b0:	881b      	ldrh	r3, [r3, #0]
 80192b2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80192b6:	d321      	bcc.n	80192fc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80192b8:	79fa      	ldrb	r2, [r7, #7]
 80192ba:	4613      	mov	r3, r2
 80192bc:	005b      	lsls	r3, r3, #1
 80192be:	4413      	add	r3, r2
 80192c0:	00db      	lsls	r3, r3, #3
 80192c2:	4a1b      	ldr	r2, [pc, #108]	; (8019330 <etharp_output_to_arp_index+0x124>)
 80192c4:	4413      	add	r3, r2
 80192c6:	1d19      	adds	r1, r3, #4
 80192c8:	79fa      	ldrb	r2, [r7, #7]
 80192ca:	4613      	mov	r3, r2
 80192cc:	005b      	lsls	r3, r3, #1
 80192ce:	4413      	add	r3, r2
 80192d0:	00db      	lsls	r3, r3, #3
 80192d2:	3308      	adds	r3, #8
 80192d4:	4a16      	ldr	r2, [pc, #88]	; (8019330 <etharp_output_to_arp_index+0x124>)
 80192d6:	4413      	add	r3, r2
 80192d8:	3304      	adds	r3, #4
 80192da:	461a      	mov	r2, r3
 80192dc:	68f8      	ldr	r0, [r7, #12]
 80192de:	f000 fb21 	bl	8019924 <etharp_request_dst>
 80192e2:	4603      	mov	r3, r0
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	d109      	bne.n	80192fc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80192e8:	79fa      	ldrb	r2, [r7, #7]
 80192ea:	4911      	ldr	r1, [pc, #68]	; (8019330 <etharp_output_to_arp_index+0x124>)
 80192ec:	4613      	mov	r3, r2
 80192ee:	005b      	lsls	r3, r3, #1
 80192f0:	4413      	add	r3, r2
 80192f2:	00db      	lsls	r3, r3, #3
 80192f4:	440b      	add	r3, r1
 80192f6:	3314      	adds	r3, #20
 80192f8:	2203      	movs	r2, #3
 80192fa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80192fc:	68fb      	ldr	r3, [r7, #12]
 80192fe:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8019302:	79fa      	ldrb	r2, [r7, #7]
 8019304:	4613      	mov	r3, r2
 8019306:	005b      	lsls	r3, r3, #1
 8019308:	4413      	add	r3, r2
 801930a:	00db      	lsls	r3, r3, #3
 801930c:	3308      	adds	r3, #8
 801930e:	4a08      	ldr	r2, [pc, #32]	; (8019330 <etharp_output_to_arp_index+0x124>)
 8019310:	4413      	add	r3, r2
 8019312:	3304      	adds	r3, #4
 8019314:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019318:	9200      	str	r2, [sp, #0]
 801931a:	460a      	mov	r2, r1
 801931c:	68b9      	ldr	r1, [r7, #8]
 801931e:	68f8      	ldr	r0, [r7, #12]
 8019320:	f002 fa04 	bl	801b72c <ethernet_output>
 8019324:	4603      	mov	r3, r0
}
 8019326:	4618      	mov	r0, r3
 8019328:	3710      	adds	r7, #16
 801932a:	46bd      	mov	sp, r7
 801932c:	bd80      	pop	{r7, pc}
 801932e:	bf00      	nop
 8019330:	2000743c 	.word	0x2000743c
 8019334:	08022d2c 	.word	0x08022d2c
 8019338:	08022e9c 	.word	0x08022e9c
 801933c:	08022da4 	.word	0x08022da4

08019340 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8019340:	b580      	push	{r7, lr}
 8019342:	b08a      	sub	sp, #40	; 0x28
 8019344:	af02      	add	r7, sp, #8
 8019346:	60f8      	str	r0, [r7, #12]
 8019348:	60b9      	str	r1, [r7, #8]
 801934a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019350:	68fb      	ldr	r3, [r7, #12]
 8019352:	2b00      	cmp	r3, #0
 8019354:	d106      	bne.n	8019364 <etharp_output+0x24>
 8019356:	4b76      	ldr	r3, [pc, #472]	; (8019530 <etharp_output+0x1f0>)
 8019358:	f240 321e 	movw	r2, #798	; 0x31e
 801935c:	4975      	ldr	r1, [pc, #468]	; (8019534 <etharp_output+0x1f4>)
 801935e:	4876      	ldr	r0, [pc, #472]	; (8019538 <etharp_output+0x1f8>)
 8019360:	f003 f9e6 	bl	801c730 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8019364:	68bb      	ldr	r3, [r7, #8]
 8019366:	2b00      	cmp	r3, #0
 8019368:	d106      	bne.n	8019378 <etharp_output+0x38>
 801936a:	4b71      	ldr	r3, [pc, #452]	; (8019530 <etharp_output+0x1f0>)
 801936c:	f240 321f 	movw	r2, #799	; 0x31f
 8019370:	4972      	ldr	r1, [pc, #456]	; (801953c <etharp_output+0x1fc>)
 8019372:	4871      	ldr	r0, [pc, #452]	; (8019538 <etharp_output+0x1f8>)
 8019374:	f003 f9dc 	bl	801c730 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	2b00      	cmp	r3, #0
 801937c:	d106      	bne.n	801938c <etharp_output+0x4c>
 801937e:	4b6c      	ldr	r3, [pc, #432]	; (8019530 <etharp_output+0x1f0>)
 8019380:	f44f 7248 	mov.w	r2, #800	; 0x320
 8019384:	496e      	ldr	r1, [pc, #440]	; (8019540 <etharp_output+0x200>)
 8019386:	486c      	ldr	r0, [pc, #432]	; (8019538 <etharp_output+0x1f8>)
 8019388:	f003 f9d2 	bl	801c730 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	681b      	ldr	r3, [r3, #0]
 8019390:	68f9      	ldr	r1, [r7, #12]
 8019392:	4618      	mov	r0, r3
 8019394:	f001 f912 	bl	801a5bc <ip4_addr_isbroadcast_u32>
 8019398:	4603      	mov	r3, r0
 801939a:	2b00      	cmp	r3, #0
 801939c:	d002      	beq.n	80193a4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801939e:	4b69      	ldr	r3, [pc, #420]	; (8019544 <etharp_output+0x204>)
 80193a0:	61fb      	str	r3, [r7, #28]
 80193a2:	e0b5      	b.n	8019510 <etharp_output+0x1d0>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80193ac:	2be0      	cmp	r3, #224	; 0xe0
 80193ae:	d118      	bne.n	80193e2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80193b0:	2301      	movs	r3, #1
 80193b2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80193b4:	2300      	movs	r3, #0
 80193b6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80193b8:	235e      	movs	r3, #94	; 0x5e
 80193ba:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	3301      	adds	r3, #1
 80193c0:	781b      	ldrb	r3, [r3, #0]
 80193c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80193c6:	b2db      	uxtb	r3, r3
 80193c8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	3302      	adds	r3, #2
 80193ce:	781b      	ldrb	r3, [r3, #0]
 80193d0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	3303      	adds	r3, #3
 80193d6:	781b      	ldrb	r3, [r3, #0]
 80193d8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80193da:	f107 0310 	add.w	r3, r7, #16
 80193de:	61fb      	str	r3, [r7, #28]
 80193e0:	e096      	b.n	8019510 <etharp_output+0x1d0>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	681a      	ldr	r2, [r3, #0]
 80193e6:	68fb      	ldr	r3, [r7, #12]
 80193e8:	3304      	adds	r3, #4
 80193ea:	681b      	ldr	r3, [r3, #0]
 80193ec:	405a      	eors	r2, r3
 80193ee:	68fb      	ldr	r3, [r7, #12]
 80193f0:	3308      	adds	r3, #8
 80193f2:	681b      	ldr	r3, [r3, #0]
 80193f4:	4013      	ands	r3, r2
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d012      	beq.n	8019420 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	681b      	ldr	r3, [r3, #0]
 80193fe:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019400:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8019404:	4293      	cmp	r3, r2
 8019406:	d00b      	beq.n	8019420 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8019408:	68fb      	ldr	r3, [r7, #12]
 801940a:	330c      	adds	r3, #12
 801940c:	681b      	ldr	r3, [r3, #0]
 801940e:	2b00      	cmp	r3, #0
 8019410:	d003      	beq.n	801941a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8019412:	68fb      	ldr	r3, [r7, #12]
 8019414:	330c      	adds	r3, #12
 8019416:	61bb      	str	r3, [r7, #24]
 8019418:	e002      	b.n	8019420 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801941a:	f06f 0303 	mvn.w	r3, #3
 801941e:	e083      	b.n	8019528 <etharp_output+0x1e8>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019420:	4b49      	ldr	r3, [pc, #292]	; (8019548 <etharp_output+0x208>)
 8019422:	781b      	ldrb	r3, [r3, #0]
 8019424:	4619      	mov	r1, r3
 8019426:	4a49      	ldr	r2, [pc, #292]	; (801954c <etharp_output+0x20c>)
 8019428:	460b      	mov	r3, r1
 801942a:	005b      	lsls	r3, r3, #1
 801942c:	440b      	add	r3, r1
 801942e:	00db      	lsls	r3, r3, #3
 8019430:	4413      	add	r3, r2
 8019432:	3314      	adds	r3, #20
 8019434:	781b      	ldrb	r3, [r3, #0]
 8019436:	2b01      	cmp	r3, #1
 8019438:	d92b      	bls.n	8019492 <etharp_output+0x152>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801943a:	4b43      	ldr	r3, [pc, #268]	; (8019548 <etharp_output+0x208>)
 801943c:	781b      	ldrb	r3, [r3, #0]
 801943e:	4619      	mov	r1, r3
 8019440:	4a42      	ldr	r2, [pc, #264]	; (801954c <etharp_output+0x20c>)
 8019442:	460b      	mov	r3, r1
 8019444:	005b      	lsls	r3, r3, #1
 8019446:	440b      	add	r3, r1
 8019448:	00db      	lsls	r3, r3, #3
 801944a:	4413      	add	r3, r2
 801944c:	3308      	adds	r3, #8
 801944e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019450:	68fa      	ldr	r2, [r7, #12]
 8019452:	429a      	cmp	r2, r3
 8019454:	d11d      	bne.n	8019492 <etharp_output+0x152>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8019456:	69bb      	ldr	r3, [r7, #24]
 8019458:	681a      	ldr	r2, [r3, #0]
 801945a:	4b3b      	ldr	r3, [pc, #236]	; (8019548 <etharp_output+0x208>)
 801945c:	781b      	ldrb	r3, [r3, #0]
 801945e:	4618      	mov	r0, r3
 8019460:	493a      	ldr	r1, [pc, #232]	; (801954c <etharp_output+0x20c>)
 8019462:	4603      	mov	r3, r0
 8019464:	005b      	lsls	r3, r3, #1
 8019466:	4403      	add	r3, r0
 8019468:	00db      	lsls	r3, r3, #3
 801946a:	440b      	add	r3, r1
 801946c:	3304      	adds	r3, #4
 801946e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8019470:	429a      	cmp	r2, r3
 8019472:	d10e      	bne.n	8019492 <etharp_output+0x152>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 8019474:	4b36      	ldr	r3, [pc, #216]	; (8019550 <etharp_output+0x210>)
 8019476:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8019478:	3301      	adds	r3, #1
 801947a:	b29a      	uxth	r2, r3
 801947c:	4b34      	ldr	r3, [pc, #208]	; (8019550 <etharp_output+0x210>)
 801947e:	85da      	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8019480:	4b31      	ldr	r3, [pc, #196]	; (8019548 <etharp_output+0x208>)
 8019482:	781b      	ldrb	r3, [r3, #0]
 8019484:	461a      	mov	r2, r3
 8019486:	68b9      	ldr	r1, [r7, #8]
 8019488:	68f8      	ldr	r0, [r7, #12]
 801948a:	f7ff febf 	bl	801920c <etharp_output_to_arp_index>
 801948e:	4603      	mov	r3, r0
 8019490:	e04a      	b.n	8019528 <etharp_output+0x1e8>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019492:	2300      	movs	r3, #0
 8019494:	75fb      	strb	r3, [r7, #23]
 8019496:	e031      	b.n	80194fc <etharp_output+0x1bc>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019498:	7dfa      	ldrb	r2, [r7, #23]
 801949a:	492c      	ldr	r1, [pc, #176]	; (801954c <etharp_output+0x20c>)
 801949c:	4613      	mov	r3, r2
 801949e:	005b      	lsls	r3, r3, #1
 80194a0:	4413      	add	r3, r2
 80194a2:	00db      	lsls	r3, r3, #3
 80194a4:	440b      	add	r3, r1
 80194a6:	3314      	adds	r3, #20
 80194a8:	781b      	ldrb	r3, [r3, #0]
 80194aa:	2b01      	cmp	r3, #1
 80194ac:	d923      	bls.n	80194f6 <etharp_output+0x1b6>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80194ae:	7dfa      	ldrb	r2, [r7, #23]
 80194b0:	4926      	ldr	r1, [pc, #152]	; (801954c <etharp_output+0x20c>)
 80194b2:	4613      	mov	r3, r2
 80194b4:	005b      	lsls	r3, r3, #1
 80194b6:	4413      	add	r3, r2
 80194b8:	00db      	lsls	r3, r3, #3
 80194ba:	440b      	add	r3, r1
 80194bc:	3308      	adds	r3, #8
 80194be:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80194c0:	68fa      	ldr	r2, [r7, #12]
 80194c2:	429a      	cmp	r2, r3
 80194c4:	d117      	bne.n	80194f6 <etharp_output+0x1b6>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80194c6:	69bb      	ldr	r3, [r7, #24]
 80194c8:	6819      	ldr	r1, [r3, #0]
 80194ca:	7dfa      	ldrb	r2, [r7, #23]
 80194cc:	481f      	ldr	r0, [pc, #124]	; (801954c <etharp_output+0x20c>)
 80194ce:	4613      	mov	r3, r2
 80194d0:	005b      	lsls	r3, r3, #1
 80194d2:	4413      	add	r3, r2
 80194d4:	00db      	lsls	r3, r3, #3
 80194d6:	4403      	add	r3, r0
 80194d8:	3304      	adds	r3, #4
 80194da:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80194dc:	4299      	cmp	r1, r3
 80194de:	d10a      	bne.n	80194f6 <etharp_output+0x1b6>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80194e0:	4a19      	ldr	r2, [pc, #100]	; (8019548 <etharp_output+0x208>)
 80194e2:	7dfb      	ldrb	r3, [r7, #23]
 80194e4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80194e6:	7dfb      	ldrb	r3, [r7, #23]
 80194e8:	461a      	mov	r2, r3
 80194ea:	68b9      	ldr	r1, [r7, #8]
 80194ec:	68f8      	ldr	r0, [r7, #12]
 80194ee:	f7ff fe8d 	bl	801920c <etharp_output_to_arp_index>
 80194f2:	4603      	mov	r3, r0
 80194f4:	e018      	b.n	8019528 <etharp_output+0x1e8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80194f6:	7dfb      	ldrb	r3, [r7, #23]
 80194f8:	3301      	adds	r3, #1
 80194fa:	75fb      	strb	r3, [r7, #23]
 80194fc:	7dfb      	ldrb	r3, [r7, #23]
 80194fe:	2b09      	cmp	r3, #9
 8019500:	d9ca      	bls.n	8019498 <etharp_output+0x158>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8019502:	68ba      	ldr	r2, [r7, #8]
 8019504:	69b9      	ldr	r1, [r7, #24]
 8019506:	68f8      	ldr	r0, [r7, #12]
 8019508:	f000 f824 	bl	8019554 <etharp_query>
 801950c:	4603      	mov	r3, r0
 801950e:	e00b      	b.n	8019528 <etharp_output+0x1e8>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8019510:	68fb      	ldr	r3, [r7, #12]
 8019512:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8019516:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801951a:	9300      	str	r3, [sp, #0]
 801951c:	69fb      	ldr	r3, [r7, #28]
 801951e:	68b9      	ldr	r1, [r7, #8]
 8019520:	68f8      	ldr	r0, [r7, #12]
 8019522:	f002 f903 	bl	801b72c <ethernet_output>
 8019526:	4603      	mov	r3, r0
}
 8019528:	4618      	mov	r0, r3
 801952a:	3720      	adds	r7, #32
 801952c:	46bd      	mov	sp, r7
 801952e:	bd80      	pop	{r7, pc}
 8019530:	08022d2c 	.word	0x08022d2c
 8019534:	08022e7c 	.word	0x08022e7c
 8019538:	08022da4 	.word	0x08022da4
 801953c:	08022ecc 	.word	0x08022ecc
 8019540:	08022e6c 	.word	0x08022e6c
 8019544:	08024540 	.word	0x08024540
 8019548:	2000752c 	.word	0x2000752c
 801954c:	2000743c 	.word	0x2000743c
 8019550:	20007204 	.word	0x20007204

08019554 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8019554:	b580      	push	{r7, lr}
 8019556:	b08c      	sub	sp, #48	; 0x30
 8019558:	af02      	add	r7, sp, #8
 801955a:	60f8      	str	r0, [r7, #12]
 801955c:	60b9      	str	r1, [r7, #8]
 801955e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8019560:	68fb      	ldr	r3, [r7, #12]
 8019562:	332a      	adds	r3, #42	; 0x2a
 8019564:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8019566:	23ff      	movs	r3, #255	; 0xff
 8019568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801956c:	2300      	movs	r3, #0
 801956e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019570:	68bb      	ldr	r3, [r7, #8]
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	68f9      	ldr	r1, [r7, #12]
 8019576:	4618      	mov	r0, r3
 8019578:	f001 f820 	bl	801a5bc <ip4_addr_isbroadcast_u32>
 801957c:	4603      	mov	r3, r0
 801957e:	2b00      	cmp	r3, #0
 8019580:	d10c      	bne.n	801959c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019582:	68bb      	ldr	r3, [r7, #8]
 8019584:	681b      	ldr	r3, [r3, #0]
 8019586:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801958a:	2be0      	cmp	r3, #224	; 0xe0
 801958c:	d006      	beq.n	801959c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801958e:	68bb      	ldr	r3, [r7, #8]
 8019590:	2b00      	cmp	r3, #0
 8019592:	d003      	beq.n	801959c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8019594:	68bb      	ldr	r3, [r7, #8]
 8019596:	681b      	ldr	r3, [r3, #0]
 8019598:	2b00      	cmp	r3, #0
 801959a:	d102      	bne.n	80195a2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801959c:	f06f 030f 	mvn.w	r3, #15
 80195a0:	e110      	b.n	80197c4 <etharp_query+0x270>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80195a2:	68fa      	ldr	r2, [r7, #12]
 80195a4:	2101      	movs	r1, #1
 80195a6:	68b8      	ldr	r0, [r7, #8]
 80195a8:	f7ff fad2 	bl	8018b50 <etharp_find_entry>
 80195ac:	4603      	mov	r3, r0
 80195ae:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80195b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	da0b      	bge.n	80195d0 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	2b00      	cmp	r3, #0
 80195bc:	d005      	beq.n	80195ca <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 80195be:	4b83      	ldr	r3, [pc, #524]	; (80197cc <etharp_query+0x278>)
 80195c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80195c2:	3301      	adds	r3, #1
 80195c4:	b29a      	uxth	r2, r3
 80195c6:	4b81      	ldr	r3, [pc, #516]	; (80197cc <etharp_query+0x278>)
 80195c8:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i_err;
 80195ca:	8a7b      	ldrh	r3, [r7, #18]
 80195cc:	b25b      	sxtb	r3, r3
 80195ce:	e0f9      	b.n	80197c4 <etharp_query+0x270>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80195d0:	8a7b      	ldrh	r3, [r7, #18]
 80195d2:	2b7e      	cmp	r3, #126	; 0x7e
 80195d4:	d906      	bls.n	80195e4 <etharp_query+0x90>
 80195d6:	4b7e      	ldr	r3, [pc, #504]	; (80197d0 <etharp_query+0x27c>)
 80195d8:	f240 32c1 	movw	r2, #961	; 0x3c1
 80195dc:	497d      	ldr	r1, [pc, #500]	; (80197d4 <etharp_query+0x280>)
 80195de:	487e      	ldr	r0, [pc, #504]	; (80197d8 <etharp_query+0x284>)
 80195e0:	f003 f8a6 	bl	801c730 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80195e4:	8a7b      	ldrh	r3, [r7, #18]
 80195e6:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80195e8:	7c7a      	ldrb	r2, [r7, #17]
 80195ea:	497c      	ldr	r1, [pc, #496]	; (80197dc <etharp_query+0x288>)
 80195ec:	4613      	mov	r3, r2
 80195ee:	005b      	lsls	r3, r3, #1
 80195f0:	4413      	add	r3, r2
 80195f2:	00db      	lsls	r3, r3, #3
 80195f4:	440b      	add	r3, r1
 80195f6:	3314      	adds	r3, #20
 80195f8:	781b      	ldrb	r3, [r3, #0]
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d115      	bne.n	801962a <etharp_query+0xd6>
    is_new_entry = 1;
 80195fe:	2301      	movs	r3, #1
 8019600:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8019602:	7c7a      	ldrb	r2, [r7, #17]
 8019604:	4975      	ldr	r1, [pc, #468]	; (80197dc <etharp_query+0x288>)
 8019606:	4613      	mov	r3, r2
 8019608:	005b      	lsls	r3, r3, #1
 801960a:	4413      	add	r3, r2
 801960c:	00db      	lsls	r3, r3, #3
 801960e:	440b      	add	r3, r1
 8019610:	3314      	adds	r3, #20
 8019612:	2201      	movs	r2, #1
 8019614:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8019616:	7c7a      	ldrb	r2, [r7, #17]
 8019618:	4970      	ldr	r1, [pc, #448]	; (80197dc <etharp_query+0x288>)
 801961a:	4613      	mov	r3, r2
 801961c:	005b      	lsls	r3, r3, #1
 801961e:	4413      	add	r3, r2
 8019620:	00db      	lsls	r3, r3, #3
 8019622:	440b      	add	r3, r1
 8019624:	3308      	adds	r3, #8
 8019626:	68fa      	ldr	r2, [r7, #12]
 8019628:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801962a:	7c7a      	ldrb	r2, [r7, #17]
 801962c:	496b      	ldr	r1, [pc, #428]	; (80197dc <etharp_query+0x288>)
 801962e:	4613      	mov	r3, r2
 8019630:	005b      	lsls	r3, r3, #1
 8019632:	4413      	add	r3, r2
 8019634:	00db      	lsls	r3, r3, #3
 8019636:	440b      	add	r3, r1
 8019638:	3314      	adds	r3, #20
 801963a:	781b      	ldrb	r3, [r3, #0]
 801963c:	2b01      	cmp	r3, #1
 801963e:	d011      	beq.n	8019664 <etharp_query+0x110>
 8019640:	7c7a      	ldrb	r2, [r7, #17]
 8019642:	4966      	ldr	r1, [pc, #408]	; (80197dc <etharp_query+0x288>)
 8019644:	4613      	mov	r3, r2
 8019646:	005b      	lsls	r3, r3, #1
 8019648:	4413      	add	r3, r2
 801964a:	00db      	lsls	r3, r3, #3
 801964c:	440b      	add	r3, r1
 801964e:	3314      	adds	r3, #20
 8019650:	781b      	ldrb	r3, [r3, #0]
 8019652:	2b01      	cmp	r3, #1
 8019654:	d806      	bhi.n	8019664 <etharp_query+0x110>
 8019656:	4b5e      	ldr	r3, [pc, #376]	; (80197d0 <etharp_query+0x27c>)
 8019658:	f240 32cd 	movw	r2, #973	; 0x3cd
 801965c:	4960      	ldr	r1, [pc, #384]	; (80197e0 <etharp_query+0x28c>)
 801965e:	485e      	ldr	r0, [pc, #376]	; (80197d8 <etharp_query+0x284>)
 8019660:	f003 f866 	bl	801c730 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8019664:	6a3b      	ldr	r3, [r7, #32]
 8019666:	2b00      	cmp	r3, #0
 8019668:	d102      	bne.n	8019670 <etharp_query+0x11c>
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	2b00      	cmp	r3, #0
 801966e:	d10c      	bne.n	801968a <etharp_query+0x136>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8019670:	68b9      	ldr	r1, [r7, #8]
 8019672:	68f8      	ldr	r0, [r7, #12]
 8019674:	f000 f978 	bl	8019968 <etharp_request>
 8019678:	4603      	mov	r3, r0
 801967a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801967e:	687b      	ldr	r3, [r7, #4]
 8019680:	2b00      	cmp	r3, #0
 8019682:	d102      	bne.n	801968a <etharp_query+0x136>
      return result;
 8019684:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019688:	e09c      	b.n	80197c4 <etharp_query+0x270>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	2b00      	cmp	r3, #0
 801968e:	d106      	bne.n	801969e <etharp_query+0x14a>
 8019690:	4b4f      	ldr	r3, [pc, #316]	; (80197d0 <etharp_query+0x27c>)
 8019692:	f240 32e1 	movw	r2, #993	; 0x3e1
 8019696:	4953      	ldr	r1, [pc, #332]	; (80197e4 <etharp_query+0x290>)
 8019698:	484f      	ldr	r0, [pc, #316]	; (80197d8 <etharp_query+0x284>)
 801969a:	f003 f849 	bl	801c730 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801969e:	7c7a      	ldrb	r2, [r7, #17]
 80196a0:	494e      	ldr	r1, [pc, #312]	; (80197dc <etharp_query+0x288>)
 80196a2:	4613      	mov	r3, r2
 80196a4:	005b      	lsls	r3, r3, #1
 80196a6:	4413      	add	r3, r2
 80196a8:	00db      	lsls	r3, r3, #3
 80196aa:	440b      	add	r3, r1
 80196ac:	3314      	adds	r3, #20
 80196ae:	781b      	ldrb	r3, [r3, #0]
 80196b0:	2b01      	cmp	r3, #1
 80196b2:	d917      	bls.n	80196e4 <etharp_query+0x190>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80196b4:	4a4c      	ldr	r2, [pc, #304]	; (80197e8 <etharp_query+0x294>)
 80196b6:	7c7b      	ldrb	r3, [r7, #17]
 80196b8:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80196ba:	7c7a      	ldrb	r2, [r7, #17]
 80196bc:	4613      	mov	r3, r2
 80196be:	005b      	lsls	r3, r3, #1
 80196c0:	4413      	add	r3, r2
 80196c2:	00db      	lsls	r3, r3, #3
 80196c4:	3308      	adds	r3, #8
 80196c6:	4a45      	ldr	r2, [pc, #276]	; (80197dc <etharp_query+0x288>)
 80196c8:	4413      	add	r3, r2
 80196ca:	3304      	adds	r3, #4
 80196cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80196d0:	9200      	str	r2, [sp, #0]
 80196d2:	697a      	ldr	r2, [r7, #20]
 80196d4:	6879      	ldr	r1, [r7, #4]
 80196d6:	68f8      	ldr	r0, [r7, #12]
 80196d8:	f002 f828 	bl	801b72c <ethernet_output>
 80196dc:	4603      	mov	r3, r0
 80196de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80196e2:	e06d      	b.n	80197c0 <etharp_query+0x26c>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80196e4:	7c7a      	ldrb	r2, [r7, #17]
 80196e6:	493d      	ldr	r1, [pc, #244]	; (80197dc <etharp_query+0x288>)
 80196e8:	4613      	mov	r3, r2
 80196ea:	005b      	lsls	r3, r3, #1
 80196ec:	4413      	add	r3, r2
 80196ee:	00db      	lsls	r3, r3, #3
 80196f0:	440b      	add	r3, r1
 80196f2:	3314      	adds	r3, #20
 80196f4:	781b      	ldrb	r3, [r3, #0]
 80196f6:	2b01      	cmp	r3, #1
 80196f8:	d162      	bne.n	80197c0 <etharp_query+0x26c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80196fa:	2300      	movs	r3, #0
 80196fc:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019702:	e01c      	b.n	801973e <etharp_query+0x1ea>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8019704:	69fb      	ldr	r3, [r7, #28]
 8019706:	895a      	ldrh	r2, [r3, #10]
 8019708:	69fb      	ldr	r3, [r7, #28]
 801970a:	891b      	ldrh	r3, [r3, #8]
 801970c:	429a      	cmp	r2, r3
 801970e:	d10a      	bne.n	8019726 <etharp_query+0x1d2>
 8019710:	69fb      	ldr	r3, [r7, #28]
 8019712:	681b      	ldr	r3, [r3, #0]
 8019714:	2b00      	cmp	r3, #0
 8019716:	d006      	beq.n	8019726 <etharp_query+0x1d2>
 8019718:	4b2d      	ldr	r3, [pc, #180]	; (80197d0 <etharp_query+0x27c>)
 801971a:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801971e:	4933      	ldr	r1, [pc, #204]	; (80197ec <etharp_query+0x298>)
 8019720:	482d      	ldr	r0, [pc, #180]	; (80197d8 <etharp_query+0x284>)
 8019722:	f003 f805 	bl	801c730 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8019726:	69fb      	ldr	r3, [r7, #28]
 8019728:	7b1b      	ldrb	r3, [r3, #12]
 801972a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801972e:	2b00      	cmp	r3, #0
 8019730:	d002      	beq.n	8019738 <etharp_query+0x1e4>
        copy_needed = 1;
 8019732:	2301      	movs	r3, #1
 8019734:	61bb      	str	r3, [r7, #24]
        break;
 8019736:	e005      	b.n	8019744 <etharp_query+0x1f0>
      }
      p = p->next;
 8019738:	69fb      	ldr	r3, [r7, #28]
 801973a:	681b      	ldr	r3, [r3, #0]
 801973c:	61fb      	str	r3, [r7, #28]
    while (p) {
 801973e:	69fb      	ldr	r3, [r7, #28]
 8019740:	2b00      	cmp	r3, #0
 8019742:	d1df      	bne.n	8019704 <etharp_query+0x1b0>
    }
    if (copy_needed) {
 8019744:	69bb      	ldr	r3, [r7, #24]
 8019746:	2b00      	cmp	r3, #0
 8019748:	d007      	beq.n	801975a <etharp_query+0x206>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801974a:	687a      	ldr	r2, [r7, #4]
 801974c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8019750:	200e      	movs	r0, #14
 8019752:	f7f7 f8c1 	bl	80108d8 <pbuf_clone>
 8019756:	61f8      	str	r0, [r7, #28]
 8019758:	e004      	b.n	8019764 <etharp_query+0x210>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801975e:	69f8      	ldr	r0, [r7, #28]
 8019760:	f7f6 fdb6 	bl	80102d0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8019764:	69fb      	ldr	r3, [r7, #28]
 8019766:	2b00      	cmp	r3, #0
 8019768:	d021      	beq.n	80197ae <etharp_query+0x25a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801976a:	7c7a      	ldrb	r2, [r7, #17]
 801976c:	491b      	ldr	r1, [pc, #108]	; (80197dc <etharp_query+0x288>)
 801976e:	4613      	mov	r3, r2
 8019770:	005b      	lsls	r3, r3, #1
 8019772:	4413      	add	r3, r2
 8019774:	00db      	lsls	r3, r3, #3
 8019776:	440b      	add	r3, r1
 8019778:	681b      	ldr	r3, [r3, #0]
 801977a:	2b00      	cmp	r3, #0
 801977c:	d00a      	beq.n	8019794 <etharp_query+0x240>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801977e:	7c7a      	ldrb	r2, [r7, #17]
 8019780:	4916      	ldr	r1, [pc, #88]	; (80197dc <etharp_query+0x288>)
 8019782:	4613      	mov	r3, r2
 8019784:	005b      	lsls	r3, r3, #1
 8019786:	4413      	add	r3, r2
 8019788:	00db      	lsls	r3, r3, #3
 801978a:	440b      	add	r3, r1
 801978c:	681b      	ldr	r3, [r3, #0]
 801978e:	4618      	mov	r0, r3
 8019790:	f7f6 fcfe 	bl	8010190 <pbuf_free>
      }
      arp_table[i].q = p;
 8019794:	7c7a      	ldrb	r2, [r7, #17]
 8019796:	4911      	ldr	r1, [pc, #68]	; (80197dc <etharp_query+0x288>)
 8019798:	4613      	mov	r3, r2
 801979a:	005b      	lsls	r3, r3, #1
 801979c:	4413      	add	r3, r2
 801979e:	00db      	lsls	r3, r3, #3
 80197a0:	440b      	add	r3, r1
 80197a2:	69fa      	ldr	r2, [r7, #28]
 80197a4:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80197a6:	2300      	movs	r3, #0
 80197a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80197ac:	e008      	b.n	80197c0 <etharp_query+0x26c>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 80197ae:	4b07      	ldr	r3, [pc, #28]	; (80197cc <etharp_query+0x278>)
 80197b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80197b2:	3301      	adds	r3, #1
 80197b4:	b29a      	uxth	r2, r3
 80197b6:	4b05      	ldr	r3, [pc, #20]	; (80197cc <etharp_query+0x278>)
 80197b8:	849a      	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80197ba:	23ff      	movs	r3, #255	; 0xff
 80197bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80197c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80197c4:	4618      	mov	r0, r3
 80197c6:	3728      	adds	r7, #40	; 0x28
 80197c8:	46bd      	mov	sp, r7
 80197ca:	bd80      	pop	{r7, pc}
 80197cc:	20007204 	.word	0x20007204
 80197d0:	08022d2c 	.word	0x08022d2c
 80197d4:	08022ed8 	.word	0x08022ed8
 80197d8:	08022da4 	.word	0x08022da4
 80197dc:	2000743c 	.word	0x2000743c
 80197e0:	08022ee8 	.word	0x08022ee8
 80197e4:	08022ecc 	.word	0x08022ecc
 80197e8:	2000752c 	.word	0x2000752c
 80197ec:	08022f10 	.word	0x08022f10

080197f0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80197f0:	b580      	push	{r7, lr}
 80197f2:	b08a      	sub	sp, #40	; 0x28
 80197f4:	af02      	add	r7, sp, #8
 80197f6:	60f8      	str	r0, [r7, #12]
 80197f8:	60b9      	str	r1, [r7, #8]
 80197fa:	607a      	str	r2, [r7, #4]
 80197fc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80197fe:	2300      	movs	r3, #0
 8019800:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019802:	68fb      	ldr	r3, [r7, #12]
 8019804:	2b00      	cmp	r3, #0
 8019806:	d106      	bne.n	8019816 <etharp_raw+0x26>
 8019808:	4b40      	ldr	r3, [pc, #256]	; (801990c <etharp_raw+0x11c>)
 801980a:	f240 4257 	movw	r2, #1111	; 0x457
 801980e:	4940      	ldr	r1, [pc, #256]	; (8019910 <etharp_raw+0x120>)
 8019810:	4840      	ldr	r0, [pc, #256]	; (8019914 <etharp_raw+0x124>)
 8019812:	f002 ff8d 	bl	801c730 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8019816:	f44f 7220 	mov.w	r2, #640	; 0x280
 801981a:	211c      	movs	r1, #28
 801981c:	200e      	movs	r0, #14
 801981e:	f7f6 f9d3 	bl	800fbc8 <pbuf_alloc>
 8019822:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8019824:	69bb      	ldr	r3, [r7, #24]
 8019826:	2b00      	cmp	r3, #0
 8019828:	d108      	bne.n	801983c <etharp_raw+0x4c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 801982a:	4b3b      	ldr	r3, [pc, #236]	; (8019918 <etharp_raw+0x128>)
 801982c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801982e:	3301      	adds	r3, #1
 8019830:	b29a      	uxth	r2, r3
 8019832:	4b39      	ldr	r3, [pc, #228]	; (8019918 <etharp_raw+0x128>)
 8019834:	849a      	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
 8019836:	f04f 33ff 	mov.w	r3, #4294967295
 801983a:	e063      	b.n	8019904 <etharp_raw+0x114>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801983c:	69bb      	ldr	r3, [r7, #24]
 801983e:	895b      	ldrh	r3, [r3, #10]
 8019840:	2b1b      	cmp	r3, #27
 8019842:	d806      	bhi.n	8019852 <etharp_raw+0x62>
 8019844:	4b31      	ldr	r3, [pc, #196]	; (801990c <etharp_raw+0x11c>)
 8019846:	f240 4262 	movw	r2, #1122	; 0x462
 801984a:	4934      	ldr	r1, [pc, #208]	; (801991c <etharp_raw+0x12c>)
 801984c:	4831      	ldr	r0, [pc, #196]	; (8019914 <etharp_raw+0x124>)
 801984e:	f002 ff6f 	bl	801c730 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8019852:	69bb      	ldr	r3, [r7, #24]
 8019854:	685b      	ldr	r3, [r3, #4]
 8019856:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8019858:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801985a:	4618      	mov	r0, r3
 801985c:	f7f4 fe02 	bl	800e464 <lwip_htons>
 8019860:	4603      	mov	r3, r0
 8019862:	461a      	mov	r2, r3
 8019864:	697b      	ldr	r3, [r7, #20]
 8019866:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8019868:	68fb      	ldr	r3, [r7, #12]
 801986a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801986e:	2b06      	cmp	r3, #6
 8019870:	d006      	beq.n	8019880 <etharp_raw+0x90>
 8019872:	4b26      	ldr	r3, [pc, #152]	; (801990c <etharp_raw+0x11c>)
 8019874:	f240 4269 	movw	r2, #1129	; 0x469
 8019878:	4929      	ldr	r1, [pc, #164]	; (8019920 <etharp_raw+0x130>)
 801987a:	4826      	ldr	r0, [pc, #152]	; (8019914 <etharp_raw+0x124>)
 801987c:	f002 ff58 	bl	801c730 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8019880:	697b      	ldr	r3, [r7, #20]
 8019882:	3308      	adds	r3, #8
 8019884:	2206      	movs	r2, #6
 8019886:	6839      	ldr	r1, [r7, #0]
 8019888:	4618      	mov	r0, r3
 801988a:	f001 ffe3 	bl	801b854 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801988e:	697b      	ldr	r3, [r7, #20]
 8019890:	3312      	adds	r3, #18
 8019892:	2206      	movs	r2, #6
 8019894:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019896:	4618      	mov	r0, r3
 8019898:	f001 ffdc 	bl	801b854 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801989c:	697b      	ldr	r3, [r7, #20]
 801989e:	330e      	adds	r3, #14
 80198a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80198a2:	6812      	ldr	r2, [r2, #0]
 80198a4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80198a6:	697b      	ldr	r3, [r7, #20]
 80198a8:	3318      	adds	r3, #24
 80198aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80198ac:	6812      	ldr	r2, [r2, #0]
 80198ae:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80198b0:	697b      	ldr	r3, [r7, #20]
 80198b2:	2200      	movs	r2, #0
 80198b4:	701a      	strb	r2, [r3, #0]
 80198b6:	2200      	movs	r2, #0
 80198b8:	f042 0201 	orr.w	r2, r2, #1
 80198bc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80198be:	697b      	ldr	r3, [r7, #20]
 80198c0:	2200      	movs	r2, #0
 80198c2:	f042 0208 	orr.w	r2, r2, #8
 80198c6:	709a      	strb	r2, [r3, #2]
 80198c8:	2200      	movs	r2, #0
 80198ca:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80198cc:	697b      	ldr	r3, [r7, #20]
 80198ce:	2206      	movs	r2, #6
 80198d0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80198d2:	697b      	ldr	r3, [r7, #20]
 80198d4:	2204      	movs	r2, #4
 80198d6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80198d8:	f640 0306 	movw	r3, #2054	; 0x806
 80198dc:	9300      	str	r3, [sp, #0]
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	68ba      	ldr	r2, [r7, #8]
 80198e2:	69b9      	ldr	r1, [r7, #24]
 80198e4:	68f8      	ldr	r0, [r7, #12]
 80198e6:	f001 ff21 	bl	801b72c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 80198ea:	4b0b      	ldr	r3, [pc, #44]	; (8019918 <etharp_raw+0x128>)
 80198ec:	8b1b      	ldrh	r3, [r3, #24]
 80198ee:	3301      	adds	r3, #1
 80198f0:	b29a      	uxth	r2, r3
 80198f2:	4b09      	ldr	r3, [pc, #36]	; (8019918 <etharp_raw+0x128>)
 80198f4:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 80198f6:	69b8      	ldr	r0, [r7, #24]
 80198f8:	f7f6 fc4a 	bl	8010190 <pbuf_free>
  p = NULL;
 80198fc:	2300      	movs	r3, #0
 80198fe:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8019900:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019904:	4618      	mov	r0, r3
 8019906:	3720      	adds	r7, #32
 8019908:	46bd      	mov	sp, r7
 801990a:	bd80      	pop	{r7, pc}
 801990c:	08022d2c 	.word	0x08022d2c
 8019910:	08022e7c 	.word	0x08022e7c
 8019914:	08022da4 	.word	0x08022da4
 8019918:	20007204 	.word	0x20007204
 801991c:	08022f2c 	.word	0x08022f2c
 8019920:	08022f60 	.word	0x08022f60

08019924 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8019924:	b580      	push	{r7, lr}
 8019926:	b088      	sub	sp, #32
 8019928:	af04      	add	r7, sp, #16
 801992a:	60f8      	str	r0, [r7, #12]
 801992c:	60b9      	str	r1, [r7, #8]
 801992e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019930:	68fb      	ldr	r3, [r7, #12]
 8019932:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8019936:	68fb      	ldr	r3, [r7, #12]
 8019938:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801993c:	68fb      	ldr	r3, [r7, #12]
 801993e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019940:	2201      	movs	r2, #1
 8019942:	9203      	str	r2, [sp, #12]
 8019944:	68ba      	ldr	r2, [r7, #8]
 8019946:	9202      	str	r2, [sp, #8]
 8019948:	4a06      	ldr	r2, [pc, #24]	; (8019964 <etharp_request_dst+0x40>)
 801994a:	9201      	str	r2, [sp, #4]
 801994c:	9300      	str	r3, [sp, #0]
 801994e:	4603      	mov	r3, r0
 8019950:	687a      	ldr	r2, [r7, #4]
 8019952:	68f8      	ldr	r0, [r7, #12]
 8019954:	f7ff ff4c 	bl	80197f0 <etharp_raw>
 8019958:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801995a:	4618      	mov	r0, r3
 801995c:	3710      	adds	r7, #16
 801995e:	46bd      	mov	sp, r7
 8019960:	bd80      	pop	{r7, pc}
 8019962:	bf00      	nop
 8019964:	08024548 	.word	0x08024548

08019968 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8019968:	b580      	push	{r7, lr}
 801996a:	b082      	sub	sp, #8
 801996c:	af00      	add	r7, sp, #0
 801996e:	6078      	str	r0, [r7, #4]
 8019970:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8019972:	4a05      	ldr	r2, [pc, #20]	; (8019988 <etharp_request+0x20>)
 8019974:	6839      	ldr	r1, [r7, #0]
 8019976:	6878      	ldr	r0, [r7, #4]
 8019978:	f7ff ffd4 	bl	8019924 <etharp_request_dst>
 801997c:	4603      	mov	r3, r0
}
 801997e:	4618      	mov	r0, r3
 8019980:	3708      	adds	r7, #8
 8019982:	46bd      	mov	sp, r7
 8019984:	bd80      	pop	{r7, pc}
 8019986:	bf00      	nop
 8019988:	08024540 	.word	0x08024540

0801998c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801998c:	b580      	push	{r7, lr}
 801998e:	b08e      	sub	sp, #56	; 0x38
 8019990:	af04      	add	r7, sp, #16
 8019992:	6078      	str	r0, [r7, #4]
 8019994:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
 8019996:	4ba8      	ldr	r3, [pc, #672]	; (8019c38 <icmp_input+0x2ac>)
 8019998:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801999c:	3301      	adds	r3, #1
 801999e:	b29a      	uxth	r2, r3
 80199a0:	4ba5      	ldr	r3, [pc, #660]	; (8019c38 <icmp_input+0x2ac>)
 80199a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);
 80199a6:	4ba4      	ldr	r3, [pc, #656]	; (8019c38 <icmp_input+0x2ac>)
 80199a8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80199ac:	3301      	adds	r3, #1
 80199ae:	4aa2      	ldr	r2, [pc, #648]	; (8019c38 <icmp_input+0x2ac>)
 80199b0:	f8c2 314c 	str.w	r3, [r2, #332]	; 0x14c

  iphdr_in = ip4_current_header();
 80199b4:	4ba1      	ldr	r3, [pc, #644]	; (8019c3c <icmp_input+0x2b0>)
 80199b6:	689b      	ldr	r3, [r3, #8]
 80199b8:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80199ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199bc:	781b      	ldrb	r3, [r3, #0]
 80199be:	f003 030f 	and.w	r3, r3, #15
 80199c2:	b2db      	uxtb	r3, r3
 80199c4:	009b      	lsls	r3, r3, #2
 80199c6:	b2db      	uxtb	r3, r3
 80199c8:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80199ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80199cc:	2b13      	cmp	r3, #19
 80199ce:	f240 817a 	bls.w	8019cc6 <icmp_input+0x33a>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80199d2:	687b      	ldr	r3, [r7, #4]
 80199d4:	895b      	ldrh	r3, [r3, #10]
 80199d6:	2b03      	cmp	r3, #3
 80199d8:	f240 8177 	bls.w	8019cca <icmp_input+0x33e>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	685b      	ldr	r3, [r3, #4]
 80199e0:	781b      	ldrb	r3, [r3, #0]
 80199e2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80199e6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80199ea:	2b00      	cmp	r3, #0
 80199ec:	d002      	beq.n	80199f4 <icmp_input+0x68>
 80199ee:	2b08      	cmp	r3, #8
 80199f0:	d008      	beq.n	8019a04 <icmp_input+0x78>
 80199f2:	e0d9      	b.n	8019ba8 <icmp_input+0x21c>
    case ICMP_ER:
      /* This is OK, echo reply might have been parsed by a raw PCB
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
 80199f4:	4b90      	ldr	r3, [pc, #576]	; (8019c38 <icmp_input+0x2ac>)
 80199f6:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80199fa:	3301      	adds	r3, #1
 80199fc:	4a8e      	ldr	r2, [pc, #568]	; (8019c38 <icmp_input+0x2ac>)
 80199fe:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
      break;
 8019a02:	e15c      	b.n	8019cbe <icmp_input+0x332>
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
 8019a04:	4b8c      	ldr	r3, [pc, #560]	; (8019c38 <icmp_input+0x2ac>)
 8019a06:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8019a0a:	3301      	adds	r3, #1
 8019a0c:	4a8a      	ldr	r2, [pc, #552]	; (8019c38 <icmp_input+0x2ac>)
 8019a0e:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
      src = ip4_current_dest_addr();
 8019a12:	4b8b      	ldr	r3, [pc, #556]	; (8019c40 <icmp_input+0x2b4>)
 8019a14:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019a16:	4b89      	ldr	r3, [pc, #548]	; (8019c3c <icmp_input+0x2b0>)
 8019a18:	695b      	ldr	r3, [r3, #20]
 8019a1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019a1e:	2be0      	cmp	r3, #224	; 0xe0
 8019a20:	f000 8169 	beq.w	8019cf6 <icmp_input+0x36a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8019a24:	4b85      	ldr	r3, [pc, #532]	; (8019c3c <icmp_input+0x2b0>)
 8019a26:	695b      	ldr	r3, [r3, #20]
 8019a28:	4a84      	ldr	r2, [pc, #528]	; (8019c3c <icmp_input+0x2b0>)
 8019a2a:	6812      	ldr	r2, [r2, #0]
 8019a2c:	4611      	mov	r1, r2
 8019a2e:	4618      	mov	r0, r3
 8019a30:	f000 fdc4 	bl	801a5bc <ip4_addr_isbroadcast_u32>
 8019a34:	4603      	mov	r3, r0
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	f040 815f 	bne.w	8019cfa <icmp_input+0x36e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	891b      	ldrh	r3, [r3, #8]
 8019a40:	2b07      	cmp	r3, #7
 8019a42:	f240 8144 	bls.w	8019cce <icmp_input+0x342>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019a46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019a48:	330e      	adds	r3, #14
 8019a4a:	4619      	mov	r1, r3
 8019a4c:	6878      	ldr	r0, [r7, #4]
 8019a4e:	f7f6 fb09 	bl	8010064 <pbuf_add_header>
 8019a52:	4603      	mov	r3, r0
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	d04b      	beq.n	8019af0 <icmp_input+0x164>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	891a      	ldrh	r2, [r3, #8]
 8019a5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019a5e:	4413      	add	r3, r2
 8019a60:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	891b      	ldrh	r3, [r3, #8]
 8019a66:	8b7a      	ldrh	r2, [r7, #26]
 8019a68:	429a      	cmp	r2, r3
 8019a6a:	f0c0 8148 	bcc.w	8019cfe <icmp_input+0x372>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8019a6e:	8b7b      	ldrh	r3, [r7, #26]
 8019a70:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019a74:	4619      	mov	r1, r3
 8019a76:	200e      	movs	r0, #14
 8019a78:	f7f6 f8a6 	bl	800fbc8 <pbuf_alloc>
 8019a7c:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8019a7e:	697b      	ldr	r3, [r7, #20]
 8019a80:	2b00      	cmp	r3, #0
 8019a82:	f000 813e 	beq.w	8019d02 <icmp_input+0x376>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8019a86:	697b      	ldr	r3, [r7, #20]
 8019a88:	895b      	ldrh	r3, [r3, #10]
 8019a8a:	461a      	mov	r2, r3
 8019a8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019a8e:	3308      	adds	r3, #8
 8019a90:	429a      	cmp	r2, r3
 8019a92:	d203      	bcs.n	8019a9c <icmp_input+0x110>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8019a94:	6978      	ldr	r0, [r7, #20]
 8019a96:	f7f6 fb7b 	bl	8010190 <pbuf_free>
          goto icmperr;
 8019a9a:	e133      	b.n	8019d04 <icmp_input+0x378>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8019a9c:	697b      	ldr	r3, [r7, #20]
 8019a9e:	685b      	ldr	r3, [r3, #4]
 8019aa0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019aa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019aa4:	4618      	mov	r0, r3
 8019aa6:	f001 fed5 	bl	801b854 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019aaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019aac:	4619      	mov	r1, r3
 8019aae:	6978      	ldr	r0, [r7, #20]
 8019ab0:	f7f6 fae8 	bl	8010084 <pbuf_remove_header>
 8019ab4:	4603      	mov	r3, r0
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d009      	beq.n	8019ace <icmp_input+0x142>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019aba:	4b62      	ldr	r3, [pc, #392]	; (8019c44 <icmp_input+0x2b8>)
 8019abc:	22b6      	movs	r2, #182	; 0xb6
 8019abe:	4962      	ldr	r1, [pc, #392]	; (8019c48 <icmp_input+0x2bc>)
 8019ac0:	4862      	ldr	r0, [pc, #392]	; (8019c4c <icmp_input+0x2c0>)
 8019ac2:	f002 fe35 	bl	801c730 <iprintf>
          pbuf_free(r);
 8019ac6:	6978      	ldr	r0, [r7, #20]
 8019ac8:	f7f6 fb62 	bl	8010190 <pbuf_free>
          goto icmperr;
 8019acc:	e11a      	b.n	8019d04 <icmp_input+0x378>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019ace:	6879      	ldr	r1, [r7, #4]
 8019ad0:	6978      	ldr	r0, [r7, #20]
 8019ad2:	f7f6 fc85 	bl	80103e0 <pbuf_copy>
 8019ad6:	4603      	mov	r3, r0
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d003      	beq.n	8019ae4 <icmp_input+0x158>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8019adc:	6978      	ldr	r0, [r7, #20]
 8019ade:	f7f6 fb57 	bl	8010190 <pbuf_free>
          goto icmperr;
 8019ae2:	e10f      	b.n	8019d04 <icmp_input+0x378>
        }
        /* free the original p */
        pbuf_free(p);
 8019ae4:	6878      	ldr	r0, [r7, #4]
 8019ae6:	f7f6 fb53 	bl	8010190 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019aea:	697b      	ldr	r3, [r7, #20]
 8019aec:	607b      	str	r3, [r7, #4]
 8019aee:	e00f      	b.n	8019b10 <icmp_input+0x184>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019af0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019af2:	330e      	adds	r3, #14
 8019af4:	4619      	mov	r1, r3
 8019af6:	6878      	ldr	r0, [r7, #4]
 8019af8:	f7f6 fac4 	bl	8010084 <pbuf_remove_header>
 8019afc:	4603      	mov	r3, r0
 8019afe:	2b00      	cmp	r3, #0
 8019b00:	d006      	beq.n	8019b10 <icmp_input+0x184>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8019b02:	4b50      	ldr	r3, [pc, #320]	; (8019c44 <icmp_input+0x2b8>)
 8019b04:	22c7      	movs	r2, #199	; 0xc7
 8019b06:	4952      	ldr	r1, [pc, #328]	; (8019c50 <icmp_input+0x2c4>)
 8019b08:	4850      	ldr	r0, [pc, #320]	; (8019c4c <icmp_input+0x2c0>)
 8019b0a:	f002 fe11 	bl	801c730 <iprintf>
          goto icmperr;
 8019b0e:	e0f9      	b.n	8019d04 <icmp_input+0x378>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	685b      	ldr	r3, [r3, #4]
 8019b14:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8019b16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019b18:	4619      	mov	r1, r3
 8019b1a:	6878      	ldr	r0, [r7, #4]
 8019b1c:	f7f6 faa2 	bl	8010064 <pbuf_add_header>
 8019b20:	4603      	mov	r3, r0
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	f040 80ca 	bne.w	8019cbc <icmp_input+0x330>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8019b28:	687b      	ldr	r3, [r7, #4]
 8019b2a:	685b      	ldr	r3, [r3, #4]
 8019b2c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8019b2e:	69fb      	ldr	r3, [r7, #28]
 8019b30:	681a      	ldr	r2, [r3, #0]
 8019b32:	68fb      	ldr	r3, [r7, #12]
 8019b34:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8019b36:	4b41      	ldr	r3, [pc, #260]	; (8019c3c <icmp_input+0x2b0>)
 8019b38:	691a      	ldr	r2, [r3, #16]
 8019b3a:	68fb      	ldr	r3, [r7, #12]
 8019b3c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8019b3e:	693b      	ldr	r3, [r7, #16]
 8019b40:	2200      	movs	r2, #0
 8019b42:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8019b44:	693b      	ldr	r3, [r7, #16]
 8019b46:	2200      	movs	r2, #0
 8019b48:	709a      	strb	r2, [r3, #2]
 8019b4a:	2200      	movs	r2, #0
 8019b4c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8019b4e:	68fb      	ldr	r3, [r7, #12]
 8019b50:	22ff      	movs	r2, #255	; 0xff
 8019b52:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8019b54:	68fb      	ldr	r3, [r7, #12]
 8019b56:	2200      	movs	r2, #0
 8019b58:	729a      	strb	r2, [r3, #10]
 8019b5a:	2200      	movs	r2, #0
 8019b5c:	72da      	strb	r2, [r3, #11]
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
        }
#endif /* CHECKSUM_GEN_IP */

        ICMP_STATS_INC(icmp.xmit);
 8019b5e:	4b36      	ldr	r3, [pc, #216]	; (8019c38 <icmp_input+0x2ac>)
 8019b60:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019b64:	3301      	adds	r3, #1
 8019b66:	b29a      	uxth	r2, r3
 8019b68:	4b33      	ldr	r3, [pc, #204]	; (8019c38 <icmp_input+0x2ac>)
 8019b6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        /* increase number of messages attempted to send */
        MIB2_STATS_INC(mib2.icmpoutmsgs);
 8019b6e:	4b32      	ldr	r3, [pc, #200]	; (8019c38 <icmp_input+0x2ac>)
 8019b70:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8019b74:	3301      	adds	r3, #1
 8019b76:	4a30      	ldr	r2, [pc, #192]	; (8019c38 <icmp_input+0x2ac>)
 8019b78:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);
 8019b7c:	4b2e      	ldr	r3, [pc, #184]	; (8019c38 <icmp_input+0x2ac>)
 8019b7e:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8019b82:	3301      	adds	r3, #1
 8019b84:	4a2c      	ldr	r2, [pc, #176]	; (8019c38 <icmp_input+0x2ac>)
 8019b86:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019b8a:	683b      	ldr	r3, [r7, #0]
 8019b8c:	9302      	str	r3, [sp, #8]
 8019b8e:	2301      	movs	r3, #1
 8019b90:	9301      	str	r3, [sp, #4]
 8019b92:	2300      	movs	r3, #0
 8019b94:	9300      	str	r3, [sp, #0]
 8019b96:	23ff      	movs	r3, #255	; 0xff
 8019b98:	2200      	movs	r2, #0
 8019b9a:	69f9      	ldr	r1, [r7, #28]
 8019b9c:	6878      	ldr	r0, [r7, #4]
 8019b9e:	f000 fc05 	bl	801a3ac <ip4_output_if>
 8019ba2:	4603      	mov	r3, r0
 8019ba4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8019ba6:	e089      	b.n	8019cbc <icmp_input+0x330>
    default:
      if (type == ICMP_DUR) {
 8019ba8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019bac:	2b03      	cmp	r3, #3
 8019bae:	d107      	bne.n	8019bc0 <icmp_input+0x234>
        MIB2_STATS_INC(mib2.icmpindestunreachs);
 8019bb0:	4b21      	ldr	r3, [pc, #132]	; (8019c38 <icmp_input+0x2ac>)
 8019bb2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8019bb6:	3301      	adds	r3, #1
 8019bb8:	4a1f      	ldr	r2, [pc, #124]	; (8019c38 <icmp_input+0x2ac>)
 8019bba:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8019bbe:	e06c      	b.n	8019c9a <icmp_input+0x30e>
      } else if (type == ICMP_TE) {
 8019bc0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019bc4:	2b0b      	cmp	r3, #11
 8019bc6:	d107      	bne.n	8019bd8 <icmp_input+0x24c>
        MIB2_STATS_INC(mib2.icmpintimeexcds);
 8019bc8:	4b1b      	ldr	r3, [pc, #108]	; (8019c38 <icmp_input+0x2ac>)
 8019bca:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8019bce:	3301      	adds	r3, #1
 8019bd0:	4a19      	ldr	r2, [pc, #100]	; (8019c38 <icmp_input+0x2ac>)
 8019bd2:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
 8019bd6:	e060      	b.n	8019c9a <icmp_input+0x30e>
      } else if (type == ICMP_PP) {
 8019bd8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019bdc:	2b0c      	cmp	r3, #12
 8019bde:	d107      	bne.n	8019bf0 <icmp_input+0x264>
        MIB2_STATS_INC(mib2.icmpinparmprobs);
 8019be0:	4b15      	ldr	r3, [pc, #84]	; (8019c38 <icmp_input+0x2ac>)
 8019be2:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8019be6:	3301      	adds	r3, #1
 8019be8:	4a13      	ldr	r2, [pc, #76]	; (8019c38 <icmp_input+0x2ac>)
 8019bea:	f8c2 315c 	str.w	r3, [r2, #348]	; 0x15c
 8019bee:	e054      	b.n	8019c9a <icmp_input+0x30e>
      } else if (type == ICMP_SQ) {
 8019bf0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019bf4:	2b04      	cmp	r3, #4
 8019bf6:	d107      	bne.n	8019c08 <icmp_input+0x27c>
        MIB2_STATS_INC(mib2.icmpinsrcquenchs);
 8019bf8:	4b0f      	ldr	r3, [pc, #60]	; (8019c38 <icmp_input+0x2ac>)
 8019bfa:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8019bfe:	3301      	adds	r3, #1
 8019c00:	4a0d      	ldr	r2, [pc, #52]	; (8019c38 <icmp_input+0x2ac>)
 8019c02:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
 8019c06:	e048      	b.n	8019c9a <icmp_input+0x30e>
      } else if (type == ICMP_RD) {
 8019c08:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019c0c:	2b05      	cmp	r3, #5
 8019c0e:	d107      	bne.n	8019c20 <icmp_input+0x294>
        MIB2_STATS_INC(mib2.icmpinredirects);
 8019c10:	4b09      	ldr	r3, [pc, #36]	; (8019c38 <icmp_input+0x2ac>)
 8019c12:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8019c16:	3301      	adds	r3, #1
 8019c18:	4a07      	ldr	r2, [pc, #28]	; (8019c38 <icmp_input+0x2ac>)
 8019c1a:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164
 8019c1e:	e03c      	b.n	8019c9a <icmp_input+0x30e>
      } else if (type == ICMP_TS) {
 8019c20:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019c24:	2b0d      	cmp	r3, #13
 8019c26:	d115      	bne.n	8019c54 <icmp_input+0x2c8>
        MIB2_STATS_INC(mib2.icmpintimestamps);
 8019c28:	4b03      	ldr	r3, [pc, #12]	; (8019c38 <icmp_input+0x2ac>)
 8019c2a:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8019c2e:	3301      	adds	r3, #1
 8019c30:	4a01      	ldr	r2, [pc, #4]	; (8019c38 <icmp_input+0x2ac>)
 8019c32:	f8c2 3170 	str.w	r3, [r2, #368]	; 0x170
 8019c36:	e030      	b.n	8019c9a <icmp_input+0x30e>
 8019c38:	20007204 	.word	0x20007204
 8019c3c:	20003be8 	.word	0x20003be8
 8019c40:	20003bfc 	.word	0x20003bfc
 8019c44:	08022fa4 	.word	0x08022fa4
 8019c48:	08022fdc 	.word	0x08022fdc
 8019c4c:	08023014 	.word	0x08023014
 8019c50:	0802303c 	.word	0x0802303c
      } else if (type == ICMP_TSR) {
 8019c54:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019c58:	2b0e      	cmp	r3, #14
 8019c5a:	d107      	bne.n	8019c6c <icmp_input+0x2e0>
        MIB2_STATS_INC(mib2.icmpintimestampreps);
 8019c5c:	4b34      	ldr	r3, [pc, #208]	; (8019d30 <icmp_input+0x3a4>)
 8019c5e:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8019c62:	3301      	adds	r3, #1
 8019c64:	4a32      	ldr	r2, [pc, #200]	; (8019d30 <icmp_input+0x3a4>)
 8019c66:	f8c2 3174 	str.w	r3, [r2, #372]	; 0x174
 8019c6a:	e016      	b.n	8019c9a <icmp_input+0x30e>
      } else if (type == ICMP_AM) {
 8019c6c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019c70:	2b11      	cmp	r3, #17
 8019c72:	d107      	bne.n	8019c84 <icmp_input+0x2f8>
        MIB2_STATS_INC(mib2.icmpinaddrmasks);
 8019c74:	4b2e      	ldr	r3, [pc, #184]	; (8019d30 <icmp_input+0x3a4>)
 8019c76:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8019c7a:	3301      	adds	r3, #1
 8019c7c:	4a2c      	ldr	r2, [pc, #176]	; (8019d30 <icmp_input+0x3a4>)
 8019c7e:	f8c2 3178 	str.w	r3, [r2, #376]	; 0x178
 8019c82:	e00a      	b.n	8019c9a <icmp_input+0x30e>
      } else if (type == ICMP_AMR) {
 8019c84:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019c88:	2b12      	cmp	r3, #18
 8019c8a:	d106      	bne.n	8019c9a <icmp_input+0x30e>
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
 8019c8c:	4b28      	ldr	r3, [pc, #160]	; (8019d30 <icmp_input+0x3a4>)
 8019c8e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8019c92:	3301      	adds	r3, #1
 8019c94:	4a26      	ldr	r2, [pc, #152]	; (8019d30 <icmp_input+0x3a4>)
 8019c96:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
 8019c9a:	4b25      	ldr	r3, [pc, #148]	; (8019d30 <icmp_input+0x3a4>)
 8019c9c:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8019ca0:	3301      	adds	r3, #1
 8019ca2:	b29a      	uxth	r2, r3
 8019ca4:	4b22      	ldr	r3, [pc, #136]	; (8019d30 <icmp_input+0x3a4>)
 8019ca6:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
      ICMP_STATS_INC(icmp.drop);
 8019caa:	4b21      	ldr	r3, [pc, #132]	; (8019d30 <icmp_input+0x3a4>)
 8019cac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019cb0:	3301      	adds	r3, #1
 8019cb2:	b29a      	uxth	r2, r3
 8019cb4:	4b1e      	ldr	r3, [pc, #120]	; (8019d30 <icmp_input+0x3a4>)
 8019cb6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8019cba:	e000      	b.n	8019cbe <icmp_input+0x332>
      break;
 8019cbc:	bf00      	nop
  }
  pbuf_free(p);
 8019cbe:	6878      	ldr	r0, [r7, #4]
 8019cc0:	f7f6 fa66 	bl	8010190 <pbuf_free>
  return;
 8019cc4:	e031      	b.n	8019d2a <icmp_input+0x39e>
    goto lenerr;
 8019cc6:	bf00      	nop
 8019cc8:	e002      	b.n	8019cd0 <icmp_input+0x344>
    goto lenerr;
 8019cca:	bf00      	nop
 8019ccc:	e000      	b.n	8019cd0 <icmp_input+0x344>
        goto lenerr;
 8019cce:	bf00      	nop
lenerr:
  pbuf_free(p);
 8019cd0:	6878      	ldr	r0, [r7, #4]
 8019cd2:	f7f6 fa5d 	bl	8010190 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 8019cd6:	4b16      	ldr	r3, [pc, #88]	; (8019d30 <icmp_input+0x3a4>)
 8019cd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8019cdc:	3301      	adds	r3, #1
 8019cde:	b29a      	uxth	r2, r3
 8019ce0:	4b13      	ldr	r3, [pc, #76]	; (8019d30 <icmp_input+0x3a4>)
 8019ce2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
 8019ce6:	4b12      	ldr	r3, [pc, #72]	; (8019d30 <icmp_input+0x3a4>)
 8019ce8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8019cec:	3301      	adds	r3, #1
 8019cee:	4a10      	ldr	r2, [pc, #64]	; (8019d30 <icmp_input+0x3a4>)
 8019cf0:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
  return;
 8019cf4:	e019      	b.n	8019d2a <icmp_input+0x39e>
        goto icmperr;
 8019cf6:	bf00      	nop
 8019cf8:	e004      	b.n	8019d04 <icmp_input+0x378>
        goto icmperr;
 8019cfa:	bf00      	nop
 8019cfc:	e002      	b.n	8019d04 <icmp_input+0x378>
          goto icmperr;
 8019cfe:	bf00      	nop
 8019d00:	e000      	b.n	8019d04 <icmp_input+0x378>
          goto icmperr;
 8019d02:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8019d04:	6878      	ldr	r0, [r7, #4]
 8019d06:	f7f6 fa43 	bl	8010190 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 8019d0a:	4b09      	ldr	r3, [pc, #36]	; (8019d30 <icmp_input+0x3a4>)
 8019d0c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	; 0x74
 8019d10:	3301      	adds	r3, #1
 8019d12:	b29a      	uxth	r2, r3
 8019d14:	4b06      	ldr	r3, [pc, #24]	; (8019d30 <icmp_input+0x3a4>)
 8019d16:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
 8019d1a:	4b05      	ldr	r3, [pc, #20]	; (8019d30 <icmp_input+0x3a4>)
 8019d1c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8019d20:	3301      	adds	r3, #1
 8019d22:	4a03      	ldr	r2, [pc, #12]	; (8019d30 <icmp_input+0x3a4>)
 8019d24:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
  return;
 8019d28:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8019d2a:	3728      	adds	r7, #40	; 0x28
 8019d2c:	46bd      	mov	sp, r7
 8019d2e:	bd80      	pop	{r7, pc}
 8019d30:	20007204 	.word	0x20007204

08019d34 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019d34:	b580      	push	{r7, lr}
 8019d36:	b082      	sub	sp, #8
 8019d38:	af00      	add	r7, sp, #0
 8019d3a:	6078      	str	r0, [r7, #4]
 8019d3c:	460b      	mov	r3, r1
 8019d3e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
 8019d40:	4b08      	ldr	r3, [pc, #32]	; (8019d64 <icmp_dest_unreach+0x30>)
 8019d42:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8019d46:	3301      	adds	r3, #1
 8019d48:	4a06      	ldr	r2, [pc, #24]	; (8019d64 <icmp_dest_unreach+0x30>)
 8019d4a:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
  icmp_send_response(p, ICMP_DUR, t);
 8019d4e:	78fb      	ldrb	r3, [r7, #3]
 8019d50:	461a      	mov	r2, r3
 8019d52:	2103      	movs	r1, #3
 8019d54:	6878      	ldr	r0, [r7, #4]
 8019d56:	f000 f821 	bl	8019d9c <icmp_send_response>
}
 8019d5a:	bf00      	nop
 8019d5c:	3708      	adds	r7, #8
 8019d5e:	46bd      	mov	sp, r7
 8019d60:	bd80      	pop	{r7, pc}
 8019d62:	bf00      	nop
 8019d64:	20007204 	.word	0x20007204

08019d68 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019d68:	b580      	push	{r7, lr}
 8019d6a:	b082      	sub	sp, #8
 8019d6c:	af00      	add	r7, sp, #0
 8019d6e:	6078      	str	r0, [r7, #4]
 8019d70:	460b      	mov	r3, r1
 8019d72:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
 8019d74:	4b08      	ldr	r3, [pc, #32]	; (8019d98 <icmp_time_exceeded+0x30>)
 8019d76:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8019d7a:	3301      	adds	r3, #1
 8019d7c:	4a06      	ldr	r2, [pc, #24]	; (8019d98 <icmp_time_exceeded+0x30>)
 8019d7e:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
  icmp_send_response(p, ICMP_TE, t);
 8019d82:	78fb      	ldrb	r3, [r7, #3]
 8019d84:	461a      	mov	r2, r3
 8019d86:	210b      	movs	r1, #11
 8019d88:	6878      	ldr	r0, [r7, #4]
 8019d8a:	f000 f807 	bl	8019d9c <icmp_send_response>
}
 8019d8e:	bf00      	nop
 8019d90:	3708      	adds	r7, #8
 8019d92:	46bd      	mov	sp, r7
 8019d94:	bd80      	pop	{r7, pc}
 8019d96:	bf00      	nop
 8019d98:	20007204 	.word	0x20007204

08019d9c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8019d9c:	b580      	push	{r7, lr}
 8019d9e:	b08c      	sub	sp, #48	; 0x30
 8019da0:	af04      	add	r7, sp, #16
 8019da2:	6078      	str	r0, [r7, #4]
 8019da4:	460b      	mov	r3, r1
 8019da6:	70fb      	strb	r3, [r7, #3]
 8019da8:	4613      	mov	r3, r2
 8019daa:	70bb      	strb	r3, [r7, #2]
  struct icmp_echo_hdr *icmphdr;
  ip4_addr_t iphdr_src;
  struct netif *netif;

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);
 8019dac:	4b37      	ldr	r3, [pc, #220]	; (8019e8c <icmp_send_response+0xf0>)
 8019dae:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8019db2:	3301      	adds	r3, #1
 8019db4:	4a35      	ldr	r2, [pc, #212]	; (8019e8c <icmp_send_response+0xf0>)
 8019db6:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019dba:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019dbe:	2124      	movs	r1, #36	; 0x24
 8019dc0:	2022      	movs	r0, #34	; 0x22
 8019dc2:	f7f5 ff01 	bl	800fbc8 <pbuf_alloc>
 8019dc6:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8019dc8:	69fb      	ldr	r3, [r7, #28]
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	d107      	bne.n	8019dde <icmp_send_response+0x42>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
 8019dce:	4b2f      	ldr	r3, [pc, #188]	; (8019e8c <icmp_send_response+0xf0>)
 8019dd0:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8019dd4:	3301      	adds	r3, #1
 8019dd6:	4a2d      	ldr	r2, [pc, #180]	; (8019e8c <icmp_send_response+0xf0>)
 8019dd8:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
 8019ddc:	e053      	b.n	8019e86 <icmp_send_response+0xea>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8019dde:	69fb      	ldr	r3, [r7, #28]
 8019de0:	895b      	ldrh	r3, [r3, #10]
 8019de2:	2b23      	cmp	r3, #35	; 0x23
 8019de4:	d806      	bhi.n	8019df4 <icmp_send_response+0x58>
 8019de6:	4b2a      	ldr	r3, [pc, #168]	; (8019e90 <icmp_send_response+0xf4>)
 8019de8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8019dec:	4929      	ldr	r1, [pc, #164]	; (8019e94 <icmp_send_response+0xf8>)
 8019dee:	482a      	ldr	r0, [pc, #168]	; (8019e98 <icmp_send_response+0xfc>)
 8019df0:	f002 fc9e 	bl	801c730 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	685b      	ldr	r3, [r3, #4]
 8019df8:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019dfa:	69fb      	ldr	r3, [r7, #28]
 8019dfc:	685b      	ldr	r3, [r3, #4]
 8019dfe:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8019e00:	697b      	ldr	r3, [r7, #20]
 8019e02:	78fa      	ldrb	r2, [r7, #3]
 8019e04:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8019e06:	697b      	ldr	r3, [r7, #20]
 8019e08:	78ba      	ldrb	r2, [r7, #2]
 8019e0a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8019e0c:	697b      	ldr	r3, [r7, #20]
 8019e0e:	2200      	movs	r2, #0
 8019e10:	711a      	strb	r2, [r3, #4]
 8019e12:	2200      	movs	r2, #0
 8019e14:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8019e16:	697b      	ldr	r3, [r7, #20]
 8019e18:	2200      	movs	r2, #0
 8019e1a:	719a      	strb	r2, [r3, #6]
 8019e1c:	2200      	movs	r2, #0
 8019e1e:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8019e20:	69fb      	ldr	r3, [r7, #28]
 8019e22:	685b      	ldr	r3, [r3, #4]
 8019e24:	f103 0008 	add.w	r0, r3, #8
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	685b      	ldr	r3, [r3, #4]
 8019e2c:	221c      	movs	r2, #28
 8019e2e:	4619      	mov	r1, r3
 8019e30:	f001 fd10 	bl	801b854 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8019e34:	69bb      	ldr	r3, [r7, #24]
 8019e36:	68db      	ldr	r3, [r3, #12]
 8019e38:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8019e3a:	f107 030c 	add.w	r3, r7, #12
 8019e3e:	4618      	mov	r0, r3
 8019e40:	f000 f82c 	bl	8019e9c <ip4_route>
 8019e44:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8019e46:	693b      	ldr	r3, [r7, #16]
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	d019      	beq.n	8019e80 <icmp_send_response+0xe4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8019e4c:	697b      	ldr	r3, [r7, #20]
 8019e4e:	2200      	movs	r2, #0
 8019e50:	709a      	strb	r2, [r3, #2]
 8019e52:	2200      	movs	r2, #0
 8019e54:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 8019e56:	4b0d      	ldr	r3, [pc, #52]	; (8019e8c <icmp_send_response+0xf0>)
 8019e58:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019e5c:	3301      	adds	r3, #1
 8019e5e:	b29a      	uxth	r2, r3
 8019e60:	4b0a      	ldr	r3, [pc, #40]	; (8019e8c <icmp_send_response+0xf0>)
 8019e62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8019e66:	f107 020c 	add.w	r2, r7, #12
 8019e6a:	693b      	ldr	r3, [r7, #16]
 8019e6c:	9302      	str	r3, [sp, #8]
 8019e6e:	2301      	movs	r3, #1
 8019e70:	9301      	str	r3, [sp, #4]
 8019e72:	2300      	movs	r3, #0
 8019e74:	9300      	str	r3, [sp, #0]
 8019e76:	23ff      	movs	r3, #255	; 0xff
 8019e78:	2100      	movs	r1, #0
 8019e7a:	69f8      	ldr	r0, [r7, #28]
 8019e7c:	f000 fa96 	bl	801a3ac <ip4_output_if>
  }
  pbuf_free(q);
 8019e80:	69f8      	ldr	r0, [r7, #28]
 8019e82:	f7f6 f985 	bl	8010190 <pbuf_free>
}
 8019e86:	3720      	adds	r7, #32
 8019e88:	46bd      	mov	sp, r7
 8019e8a:	bd80      	pop	{r7, pc}
 8019e8c:	20007204 	.word	0x20007204
 8019e90:	08022fa4 	.word	0x08022fa4
 8019e94:	08023070 	.word	0x08023070
 8019e98:	08023014 	.word	0x08023014

08019e9c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8019e9c:	b480      	push	{r7}
 8019e9e:	b085      	sub	sp, #20
 8019ea0:	af00      	add	r7, sp, #0
 8019ea2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8019ea4:	4b3a      	ldr	r3, [pc, #232]	; (8019f90 <ip4_route+0xf4>)
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	60fb      	str	r3, [r7, #12]
 8019eaa:	e036      	b.n	8019f1a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019eac:	68fb      	ldr	r3, [r7, #12]
 8019eae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019eb2:	f003 0301 	and.w	r3, r3, #1
 8019eb6:	b2db      	uxtb	r3, r3
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	d02b      	beq.n	8019f14 <ip4_route+0x78>
 8019ebc:	68fb      	ldr	r3, [r7, #12]
 8019ebe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019ec2:	089b      	lsrs	r3, r3, #2
 8019ec4:	f003 0301 	and.w	r3, r3, #1
 8019ec8:	b2db      	uxtb	r3, r3
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	d022      	beq.n	8019f14 <ip4_route+0x78>
 8019ece:	68fb      	ldr	r3, [r7, #12]
 8019ed0:	3304      	adds	r3, #4
 8019ed2:	681b      	ldr	r3, [r3, #0]
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	d01d      	beq.n	8019f14 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	681a      	ldr	r2, [r3, #0]
 8019edc:	68fb      	ldr	r3, [r7, #12]
 8019ede:	3304      	adds	r3, #4
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	405a      	eors	r2, r3
 8019ee4:	68fb      	ldr	r3, [r7, #12]
 8019ee6:	3308      	adds	r3, #8
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	4013      	ands	r3, r2
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	d101      	bne.n	8019ef4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	e047      	b.n	8019f84 <ip4_route+0xe8>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019ef4:	68fb      	ldr	r3, [r7, #12]
 8019ef6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019efa:	f003 0302 	and.w	r3, r3, #2
 8019efe:	2b00      	cmp	r3, #0
 8019f00:	d108      	bne.n	8019f14 <ip4_route+0x78>
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	681a      	ldr	r2, [r3, #0]
 8019f06:	68fb      	ldr	r3, [r7, #12]
 8019f08:	330c      	adds	r3, #12
 8019f0a:	681b      	ldr	r3, [r3, #0]
 8019f0c:	429a      	cmp	r2, r3
 8019f0e:	d101      	bne.n	8019f14 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8019f10:	68fb      	ldr	r3, [r7, #12]
 8019f12:	e037      	b.n	8019f84 <ip4_route+0xe8>
  NETIF_FOREACH(netif) {
 8019f14:	68fb      	ldr	r3, [r7, #12]
 8019f16:	681b      	ldr	r3, [r3, #0]
 8019f18:	60fb      	str	r3, [r7, #12]
 8019f1a:	68fb      	ldr	r3, [r7, #12]
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	d1c5      	bne.n	8019eac <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019f20:	4b1c      	ldr	r3, [pc, #112]	; (8019f94 <ip4_route+0xf8>)
 8019f22:	681b      	ldr	r3, [r3, #0]
 8019f24:	2b00      	cmp	r3, #0
 8019f26:	d01a      	beq.n	8019f5e <ip4_route+0xc2>
 8019f28:	4b1a      	ldr	r3, [pc, #104]	; (8019f94 <ip4_route+0xf8>)
 8019f2a:	681b      	ldr	r3, [r3, #0]
 8019f2c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019f30:	f003 0301 	and.w	r3, r3, #1
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	d012      	beq.n	8019f5e <ip4_route+0xc2>
 8019f38:	4b16      	ldr	r3, [pc, #88]	; (8019f94 <ip4_route+0xf8>)
 8019f3a:	681b      	ldr	r3, [r3, #0]
 8019f3c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019f40:	f003 0304 	and.w	r3, r3, #4
 8019f44:	2b00      	cmp	r3, #0
 8019f46:	d00a      	beq.n	8019f5e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019f48:	4b12      	ldr	r3, [pc, #72]	; (8019f94 <ip4_route+0xf8>)
 8019f4a:	681b      	ldr	r3, [r3, #0]
 8019f4c:	3304      	adds	r3, #4
 8019f4e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	d004      	beq.n	8019f5e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	681b      	ldr	r3, [r3, #0]
 8019f58:	b2db      	uxtb	r3, r3
 8019f5a:	2b7f      	cmp	r3, #127	; 0x7f
 8019f5c:	d110      	bne.n	8019f80 <ip4_route+0xe4>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 8019f5e:	4b0e      	ldr	r3, [pc, #56]	; (8019f98 <ip4_route+0xfc>)
 8019f60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8019f64:	3301      	adds	r3, #1
 8019f66:	b29a      	uxth	r2, r3
 8019f68:	4b0b      	ldr	r3, [pc, #44]	; (8019f98 <ip4_route+0xfc>)
 8019f6a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
 8019f6e:	4b0a      	ldr	r3, [pc, #40]	; (8019f98 <ip4_route+0xfc>)
 8019f70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8019f74:	3301      	adds	r3, #1
 8019f76:	4a08      	ldr	r2, [pc, #32]	; (8019f98 <ip4_route+0xfc>)
 8019f78:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    return NULL;
 8019f7c:	2300      	movs	r3, #0
 8019f7e:	e001      	b.n	8019f84 <ip4_route+0xe8>
  }

  return netif_default;
 8019f80:	4b04      	ldr	r3, [pc, #16]	; (8019f94 <ip4_route+0xf8>)
 8019f82:	681b      	ldr	r3, [r3, #0]
}
 8019f84:	4618      	mov	r0, r3
 8019f86:	3714      	adds	r7, #20
 8019f88:	46bd      	mov	sp, r7
 8019f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f8e:	4770      	bx	lr
 8019f90:	200071f8 	.word	0x200071f8
 8019f94:	200071fc 	.word	0x200071fc
 8019f98:	20007204 	.word	0x20007204

08019f9c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8019f9c:	b580      	push	{r7, lr}
 8019f9e:	b082      	sub	sp, #8
 8019fa0:	af00      	add	r7, sp, #0
 8019fa2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019faa:	f003 0301 	and.w	r3, r3, #1
 8019fae:	b2db      	uxtb	r3, r3
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	d016      	beq.n	8019fe2 <ip4_input_accept+0x46>
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	3304      	adds	r3, #4
 8019fb8:	681b      	ldr	r3, [r3, #0]
 8019fba:	2b00      	cmp	r3, #0
 8019fbc:	d011      	beq.n	8019fe2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019fbe:	4b0b      	ldr	r3, [pc, #44]	; (8019fec <ip4_input_accept+0x50>)
 8019fc0:	695a      	ldr	r2, [r3, #20]
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	3304      	adds	r3, #4
 8019fc6:	681b      	ldr	r3, [r3, #0]
 8019fc8:	429a      	cmp	r2, r3
 8019fca:	d008      	beq.n	8019fde <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019fcc:	4b07      	ldr	r3, [pc, #28]	; (8019fec <ip4_input_accept+0x50>)
 8019fce:	695b      	ldr	r3, [r3, #20]
 8019fd0:	6879      	ldr	r1, [r7, #4]
 8019fd2:	4618      	mov	r0, r3
 8019fd4:	f000 faf2 	bl	801a5bc <ip4_addr_isbroadcast_u32>
 8019fd8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	d001      	beq.n	8019fe2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8019fde:	2301      	movs	r3, #1
 8019fe0:	e000      	b.n	8019fe4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8019fe2:	2300      	movs	r3, #0
}
 8019fe4:	4618      	mov	r0, r3
 8019fe6:	3708      	adds	r7, #8
 8019fe8:	46bd      	mov	sp, r7
 8019fea:	bd80      	pop	{r7, pc}
 8019fec:	20003be8 	.word	0x20003be8

08019ff0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8019ff0:	b580      	push	{r7, lr}
 8019ff2:	b088      	sub	sp, #32
 8019ff4:	af00      	add	r7, sp, #0
 8019ff6:	6078      	str	r0, [r7, #4]
 8019ff8:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8019ffa:	2301      	movs	r3, #1
 8019ffc:	617b      	str	r3, [r7, #20]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 8019ffe:	4b9b      	ldr	r3, [pc, #620]	; (801a26c <ip4_input+0x27c>)
 801a000:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801a004:	3301      	adds	r3, #1
 801a006:	b29a      	uxth	r2, r3
 801a008:	4b98      	ldr	r3, [pc, #608]	; (801a26c <ip4_input+0x27c>)
 801a00a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);
 801a00e:	4b97      	ldr	r3, [pc, #604]	; (801a26c <ip4_input+0x27c>)
 801a010:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 801a014:	3301      	adds	r3, #1
 801a016:	4a95      	ldr	r2, [pc, #596]	; (801a26c <ip4_input+0x27c>)
 801a018:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	685b      	ldr	r3, [r3, #4]
 801a020:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801a022:	69fb      	ldr	r3, [r7, #28]
 801a024:	781b      	ldrb	r3, [r3, #0]
 801a026:	091b      	lsrs	r3, r3, #4
 801a028:	b2db      	uxtb	r3, r3
 801a02a:	2b04      	cmp	r3, #4
 801a02c:	d01b      	beq.n	801a066 <ip4_input+0x76>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801a02e:	6878      	ldr	r0, [r7, #4]
 801a030:	f7f6 f8ae 	bl	8010190 <pbuf_free>
    IP_STATS_INC(ip.err);
 801a034:	4b8d      	ldr	r3, [pc, #564]	; (801a26c <ip4_input+0x27c>)
 801a036:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801a03a:	3301      	adds	r3, #1
 801a03c:	b29a      	uxth	r2, r3
 801a03e:	4b8b      	ldr	r3, [pc, #556]	; (801a26c <ip4_input+0x27c>)
 801a040:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 801a044:	4b89      	ldr	r3, [pc, #548]	; (801a26c <ip4_input+0x27c>)
 801a046:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801a04a:	3301      	adds	r3, #1
 801a04c:	b29a      	uxth	r2, r3
 801a04e:	4b87      	ldr	r3, [pc, #540]	; (801a26c <ip4_input+0x27c>)
 801a050:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
 801a054:	4b85      	ldr	r3, [pc, #532]	; (801a26c <ip4_input+0x27c>)
 801a056:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a05a:	3301      	adds	r3, #1
 801a05c:	4a83      	ldr	r2, [pc, #524]	; (801a26c <ip4_input+0x27c>)
 801a05e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    return ERR_OK;
 801a062:	2300      	movs	r3, #0
 801a064:	e199      	b.n	801a39a <ip4_input+0x3aa>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801a066:	69fb      	ldr	r3, [r7, #28]
 801a068:	781b      	ldrb	r3, [r3, #0]
 801a06a:	f003 030f 	and.w	r3, r3, #15
 801a06e:	b2db      	uxtb	r3, r3
 801a070:	009b      	lsls	r3, r3, #2
 801a072:	b2db      	uxtb	r3, r3
 801a074:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801a076:	69fb      	ldr	r3, [r7, #28]
 801a078:	885b      	ldrh	r3, [r3, #2]
 801a07a:	b29b      	uxth	r3, r3
 801a07c:	4618      	mov	r0, r3
 801a07e:	f7f4 f9f1 	bl	800e464 <lwip_htons>
 801a082:	4603      	mov	r3, r0
 801a084:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	891b      	ldrh	r3, [r3, #8]
 801a08a:	8a3a      	ldrh	r2, [r7, #16]
 801a08c:	429a      	cmp	r2, r3
 801a08e:	d204      	bcs.n	801a09a <ip4_input+0xaa>
    pbuf_realloc(p, iphdr_len);
 801a090:	8a3b      	ldrh	r3, [r7, #16]
 801a092:	4619      	mov	r1, r3
 801a094:	6878      	ldr	r0, [r7, #4]
 801a096:	f7f5 fef5 	bl	800fe84 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	895b      	ldrh	r3, [r3, #10]
 801a09e:	8a7a      	ldrh	r2, [r7, #18]
 801a0a0:	429a      	cmp	r2, r3
 801a0a2:	d807      	bhi.n	801a0b4 <ip4_input+0xc4>
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	891b      	ldrh	r3, [r3, #8]
 801a0a8:	8a3a      	ldrh	r2, [r7, #16]
 801a0aa:	429a      	cmp	r2, r3
 801a0ac:	d802      	bhi.n	801a0b4 <ip4_input+0xc4>
 801a0ae:	8a7b      	ldrh	r3, [r7, #18]
 801a0b0:	2b13      	cmp	r3, #19
 801a0b2:	d81b      	bhi.n	801a0ec <ip4_input+0xfc>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801a0b4:	6878      	ldr	r0, [r7, #4]
 801a0b6:	f7f6 f86b 	bl	8010190 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 801a0ba:	4b6c      	ldr	r3, [pc, #432]	; (801a26c <ip4_input+0x27c>)
 801a0bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801a0c0:	3301      	adds	r3, #1
 801a0c2:	b29a      	uxth	r2, r3
 801a0c4:	4b69      	ldr	r3, [pc, #420]	; (801a26c <ip4_input+0x27c>)
 801a0c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 801a0ca:	4b68      	ldr	r3, [pc, #416]	; (801a26c <ip4_input+0x27c>)
 801a0cc:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801a0d0:	3301      	adds	r3, #1
 801a0d2:	b29a      	uxth	r2, r3
 801a0d4:	4b65      	ldr	r3, [pc, #404]	; (801a26c <ip4_input+0x27c>)
 801a0d6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
 801a0da:	4b64      	ldr	r3, [pc, #400]	; (801a26c <ip4_input+0x27c>)
 801a0dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801a0e0:	3301      	adds	r3, #1
 801a0e2:	4a62      	ldr	r2, [pc, #392]	; (801a26c <ip4_input+0x27c>)
 801a0e4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    return ERR_OK;
 801a0e8:	2300      	movs	r3, #0
 801a0ea:	e156      	b.n	801a39a <ip4_input+0x3aa>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801a0ec:	69fb      	ldr	r3, [r7, #28]
 801a0ee:	691b      	ldr	r3, [r3, #16]
 801a0f0:	4a5f      	ldr	r2, [pc, #380]	; (801a270 <ip4_input+0x280>)
 801a0f2:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801a0f4:	69fb      	ldr	r3, [r7, #28]
 801a0f6:	68db      	ldr	r3, [r3, #12]
 801a0f8:	4a5d      	ldr	r2, [pc, #372]	; (801a270 <ip4_input+0x280>)
 801a0fa:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a0fc:	4b5c      	ldr	r3, [pc, #368]	; (801a270 <ip4_input+0x280>)
 801a0fe:	695b      	ldr	r3, [r3, #20]
 801a100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a104:	2be0      	cmp	r3, #224	; 0xe0
 801a106:	d112      	bne.n	801a12e <ip4_input+0x13e>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801a108:	683b      	ldr	r3, [r7, #0]
 801a10a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a10e:	f003 0301 	and.w	r3, r3, #1
 801a112:	b2db      	uxtb	r3, r3
 801a114:	2b00      	cmp	r3, #0
 801a116:	d007      	beq.n	801a128 <ip4_input+0x138>
 801a118:	683b      	ldr	r3, [r7, #0]
 801a11a:	3304      	adds	r3, #4
 801a11c:	681b      	ldr	r3, [r3, #0]
 801a11e:	2b00      	cmp	r3, #0
 801a120:	d002      	beq.n	801a128 <ip4_input+0x138>
      netif = inp;
 801a122:	683b      	ldr	r3, [r7, #0]
 801a124:	61bb      	str	r3, [r7, #24]
 801a126:	e02a      	b.n	801a17e <ip4_input+0x18e>
    } else {
      netif = NULL;
 801a128:	2300      	movs	r3, #0
 801a12a:	61bb      	str	r3, [r7, #24]
 801a12c:	e027      	b.n	801a17e <ip4_input+0x18e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801a12e:	6838      	ldr	r0, [r7, #0]
 801a130:	f7ff ff34 	bl	8019f9c <ip4_input_accept>
 801a134:	4603      	mov	r3, r0
 801a136:	2b00      	cmp	r3, #0
 801a138:	d002      	beq.n	801a140 <ip4_input+0x150>
      netif = inp;
 801a13a:	683b      	ldr	r3, [r7, #0]
 801a13c:	61bb      	str	r3, [r7, #24]
 801a13e:	e01e      	b.n	801a17e <ip4_input+0x18e>
    } else {
      netif = NULL;
 801a140:	2300      	movs	r3, #0
 801a142:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801a144:	4b4a      	ldr	r3, [pc, #296]	; (801a270 <ip4_input+0x280>)
 801a146:	695b      	ldr	r3, [r3, #20]
 801a148:	b2db      	uxtb	r3, r3
 801a14a:	2b7f      	cmp	r3, #127	; 0x7f
 801a14c:	d017      	beq.n	801a17e <ip4_input+0x18e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801a14e:	4b49      	ldr	r3, [pc, #292]	; (801a274 <ip4_input+0x284>)
 801a150:	681b      	ldr	r3, [r3, #0]
 801a152:	61bb      	str	r3, [r7, #24]
 801a154:	e00e      	b.n	801a174 <ip4_input+0x184>
          if (netif == inp) {
 801a156:	69ba      	ldr	r2, [r7, #24]
 801a158:	683b      	ldr	r3, [r7, #0]
 801a15a:	429a      	cmp	r2, r3
 801a15c:	d006      	beq.n	801a16c <ip4_input+0x17c>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801a15e:	69b8      	ldr	r0, [r7, #24]
 801a160:	f7ff ff1c 	bl	8019f9c <ip4_input_accept>
 801a164:	4603      	mov	r3, r0
 801a166:	2b00      	cmp	r3, #0
 801a168:	d108      	bne.n	801a17c <ip4_input+0x18c>
 801a16a:	e000      	b.n	801a16e <ip4_input+0x17e>
            continue;
 801a16c:	bf00      	nop
        NETIF_FOREACH(netif) {
 801a16e:	69bb      	ldr	r3, [r7, #24]
 801a170:	681b      	ldr	r3, [r3, #0]
 801a172:	61bb      	str	r3, [r7, #24]
 801a174:	69bb      	ldr	r3, [r7, #24]
 801a176:	2b00      	cmp	r3, #0
 801a178:	d1ed      	bne.n	801a156 <ip4_input+0x166>
 801a17a:	e000      	b.n	801a17e <ip4_input+0x18e>
            break;
 801a17c:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801a17e:	69bb      	ldr	r3, [r7, #24]
 801a180:	2b00      	cmp	r3, #0
 801a182:	d111      	bne.n	801a1a8 <ip4_input+0x1b8>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801a184:	69fb      	ldr	r3, [r7, #28]
 801a186:	7a5b      	ldrb	r3, [r3, #9]
 801a188:	2b11      	cmp	r3, #17
 801a18a:	d10d      	bne.n	801a1a8 <ip4_input+0x1b8>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801a18c:	8a7b      	ldrh	r3, [r7, #18]
 801a18e:	69fa      	ldr	r2, [r7, #28]
 801a190:	4413      	add	r3, r2
 801a192:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801a194:	68fb      	ldr	r3, [r7, #12]
 801a196:	885b      	ldrh	r3, [r3, #2]
 801a198:	b29b      	uxth	r3, r3
 801a19a:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801a19e:	d103      	bne.n	801a1a8 <ip4_input+0x1b8>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801a1a0:	683b      	ldr	r3, [r7, #0]
 801a1a2:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801a1a4:	2300      	movs	r3, #0
 801a1a6:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801a1a8:	697b      	ldr	r3, [r7, #20]
 801a1aa:	2b00      	cmp	r3, #0
 801a1ac:	d02d      	beq.n	801a20a <ip4_input+0x21a>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801a1ae:	4b30      	ldr	r3, [pc, #192]	; (801a270 <ip4_input+0x280>)
 801a1b0:	691b      	ldr	r3, [r3, #16]
 801a1b2:	2b00      	cmp	r3, #0
 801a1b4:	d029      	beq.n	801a20a <ip4_input+0x21a>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a1b6:	4b2e      	ldr	r3, [pc, #184]	; (801a270 <ip4_input+0x280>)
 801a1b8:	691b      	ldr	r3, [r3, #16]
 801a1ba:	6839      	ldr	r1, [r7, #0]
 801a1bc:	4618      	mov	r0, r3
 801a1be:	f000 f9fd 	bl	801a5bc <ip4_addr_isbroadcast_u32>
 801a1c2:	4603      	mov	r3, r0
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	d105      	bne.n	801a1d4 <ip4_input+0x1e4>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801a1c8:	4b29      	ldr	r3, [pc, #164]	; (801a270 <ip4_input+0x280>)
 801a1ca:	691b      	ldr	r3, [r3, #16]
 801a1cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801a1d0:	2be0      	cmp	r3, #224	; 0xe0
 801a1d2:	d11a      	bne.n	801a20a <ip4_input+0x21a>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801a1d4:	6878      	ldr	r0, [r7, #4]
 801a1d6:	f7f5 ffdb 	bl	8010190 <pbuf_free>
      IP_STATS_INC(ip.drop);
 801a1da:	4b24      	ldr	r3, [pc, #144]	; (801a26c <ip4_input+0x27c>)
 801a1dc:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801a1e0:	3301      	adds	r3, #1
 801a1e2:	b29a      	uxth	r2, r3
 801a1e4:	4b21      	ldr	r3, [pc, #132]	; (801a26c <ip4_input+0x27c>)
 801a1e6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
 801a1ea:	4b20      	ldr	r3, [pc, #128]	; (801a26c <ip4_input+0x27c>)
 801a1ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801a1f0:	3301      	adds	r3, #1
 801a1f2:	4a1e      	ldr	r2, [pc, #120]	; (801a26c <ip4_input+0x27c>)
 801a1f4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
      MIB2_STATS_INC(mib2.ipindiscards);
 801a1f8:	4b1c      	ldr	r3, [pc, #112]	; (801a26c <ip4_input+0x27c>)
 801a1fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801a1fe:	3301      	adds	r3, #1
 801a200:	4a1a      	ldr	r2, [pc, #104]	; (801a26c <ip4_input+0x27c>)
 801a202:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
      return ERR_OK;
 801a206:	2300      	movs	r3, #0
 801a208:	e0c7      	b.n	801a39a <ip4_input+0x3aa>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801a20a:	69bb      	ldr	r3, [r7, #24]
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	d11a      	bne.n	801a246 <ip4_input+0x256>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 801a210:	4b16      	ldr	r3, [pc, #88]	; (801a26c <ip4_input+0x27c>)
 801a212:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801a216:	3301      	adds	r3, #1
 801a218:	b29a      	uxth	r2, r3
 801a21a:	4b14      	ldr	r3, [pc, #80]	; (801a26c <ip4_input+0x27c>)
 801a21c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
 801a220:	4b12      	ldr	r3, [pc, #72]	; (801a26c <ip4_input+0x27c>)
 801a222:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801a226:	3301      	adds	r3, #1
 801a228:	4a10      	ldr	r2, [pc, #64]	; (801a26c <ip4_input+0x27c>)
 801a22a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
      MIB2_STATS_INC(mib2.ipindiscards);
 801a22e:	4b0f      	ldr	r3, [pc, #60]	; (801a26c <ip4_input+0x27c>)
 801a230:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801a234:	3301      	adds	r3, #1
 801a236:	4a0d      	ldr	r2, [pc, #52]	; (801a26c <ip4_input+0x27c>)
 801a238:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    }
    pbuf_free(p);
 801a23c:	6878      	ldr	r0, [r7, #4]
 801a23e:	f7f5 ffa7 	bl	8010190 <pbuf_free>
    return ERR_OK;
 801a242:	2300      	movs	r3, #0
 801a244:	e0a9      	b.n	801a39a <ip4_input+0x3aa>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801a246:	69fb      	ldr	r3, [r7, #28]
 801a248:	88db      	ldrh	r3, [r3, #6]
 801a24a:	b29b      	uxth	r3, r3
 801a24c:	461a      	mov	r2, r3
 801a24e:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801a252:	4013      	ands	r3, r2
 801a254:	2b00      	cmp	r3, #0
 801a256:	d012      	beq.n	801a27e <ip4_input+0x28e>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801a258:	6878      	ldr	r0, [r7, #4]
 801a25a:	f000 fe2f 	bl	801aebc <ip4_reass>
 801a25e:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801a260:	687b      	ldr	r3, [r7, #4]
 801a262:	2b00      	cmp	r3, #0
 801a264:	d108      	bne.n	801a278 <ip4_input+0x288>
      return ERR_OK;
 801a266:	2300      	movs	r3, #0
 801a268:	e097      	b.n	801a39a <ip4_input+0x3aa>
 801a26a:	bf00      	nop
 801a26c:	20007204 	.word	0x20007204
 801a270:	20003be8 	.word	0x20003be8
 801a274:	200071f8 	.word	0x200071f8
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	685b      	ldr	r3, [r3, #4]
 801a27c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801a27e:	4a49      	ldr	r2, [pc, #292]	; (801a3a4 <ip4_input+0x3b4>)
 801a280:	69bb      	ldr	r3, [r7, #24]
 801a282:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801a284:	4a47      	ldr	r2, [pc, #284]	; (801a3a4 <ip4_input+0x3b4>)
 801a286:	683b      	ldr	r3, [r7, #0]
 801a288:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801a28a:	4a46      	ldr	r2, [pc, #280]	; (801a3a4 <ip4_input+0x3b4>)
 801a28c:	69fb      	ldr	r3, [r7, #28]
 801a28e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801a290:	69fb      	ldr	r3, [r7, #28]
 801a292:	781b      	ldrb	r3, [r3, #0]
 801a294:	f003 030f 	and.w	r3, r3, #15
 801a298:	b2db      	uxtb	r3, r3
 801a29a:	009b      	lsls	r3, r3, #2
 801a29c:	b2db      	uxtb	r3, r3
 801a29e:	b29a      	uxth	r2, r3
 801a2a0:	4b40      	ldr	r3, [pc, #256]	; (801a3a4 <ip4_input+0x3b4>)
 801a2a2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801a2a4:	8a7b      	ldrh	r3, [r7, #18]
 801a2a6:	4619      	mov	r1, r3
 801a2a8:	6878      	ldr	r0, [r7, #4]
 801a2aa:	f7f5 feeb 	bl	8010084 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801a2ae:	69fb      	ldr	r3, [r7, #28]
 801a2b0:	7a5b      	ldrb	r3, [r3, #9]
 801a2b2:	2b11      	cmp	r3, #17
 801a2b4:	d006      	beq.n	801a2c4 <ip4_input+0x2d4>
 801a2b6:	2b11      	cmp	r3, #17
 801a2b8:	dc28      	bgt.n	801a30c <ip4_input+0x31c>
 801a2ba:	2b01      	cmp	r3, #1
 801a2bc:	d01a      	beq.n	801a2f4 <ip4_input+0x304>
 801a2be:	2b06      	cmp	r3, #6
 801a2c0:	d00c      	beq.n	801a2dc <ip4_input+0x2ec>
 801a2c2:	e023      	b.n	801a30c <ip4_input+0x31c>
#if LWIP_UDP
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
 801a2c4:	4b38      	ldr	r3, [pc, #224]	; (801a3a8 <ip4_input+0x3b8>)
 801a2c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801a2ca:	3301      	adds	r3, #1
 801a2cc:	4a36      	ldr	r2, [pc, #216]	; (801a3a8 <ip4_input+0x3b8>)
 801a2ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
        udp_input(p, inp);
 801a2d2:	6839      	ldr	r1, [r7, #0]
 801a2d4:	6878      	ldr	r0, [r7, #4]
 801a2d6:	f7fb ffcf 	bl	8016278 <udp_input>
        break;
 801a2da:	e04b      	b.n	801a374 <ip4_input+0x384>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
 801a2dc:	4b32      	ldr	r3, [pc, #200]	; (801a3a8 <ip4_input+0x3b8>)
 801a2de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801a2e2:	3301      	adds	r3, #1
 801a2e4:	4a30      	ldr	r2, [pc, #192]	; (801a3a8 <ip4_input+0x3b8>)
 801a2e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
        tcp_input(p, inp);
 801a2ea:	6839      	ldr	r1, [r7, #0]
 801a2ec:	6878      	ldr	r0, [r7, #4]
 801a2ee:	f7f7 ff31 	bl	8012154 <tcp_input>
        break;
 801a2f2:	e03f      	b.n	801a374 <ip4_input+0x384>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
 801a2f4:	4b2c      	ldr	r3, [pc, #176]	; (801a3a8 <ip4_input+0x3b8>)
 801a2f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801a2fa:	3301      	adds	r3, #1
 801a2fc:	4a2a      	ldr	r2, [pc, #168]	; (801a3a8 <ip4_input+0x3b8>)
 801a2fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
        icmp_input(p, inp);
 801a302:	6839      	ldr	r1, [r7, #0]
 801a304:	6878      	ldr	r0, [r7, #4]
 801a306:	f7ff fb41 	bl	801998c <icmp_input>
        break;
 801a30a:	e033      	b.n	801a374 <ip4_input+0x384>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a30c:	4b25      	ldr	r3, [pc, #148]	; (801a3a4 <ip4_input+0x3b4>)
 801a30e:	695b      	ldr	r3, [r3, #20]
 801a310:	69b9      	ldr	r1, [r7, #24]
 801a312:	4618      	mov	r0, r3
 801a314:	f000 f952 	bl	801a5bc <ip4_addr_isbroadcast_u32>
 801a318:	4603      	mov	r3, r0
 801a31a:	2b00      	cmp	r3, #0
 801a31c:	d10f      	bne.n	801a33e <ip4_input+0x34e>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a31e:	4b21      	ldr	r3, [pc, #132]	; (801a3a4 <ip4_input+0x3b4>)
 801a320:	695b      	ldr	r3, [r3, #20]
 801a322:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801a326:	2be0      	cmp	r3, #224	; 0xe0
 801a328:	d009      	beq.n	801a33e <ip4_input+0x34e>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801a32a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a32e:	4619      	mov	r1, r3
 801a330:	6878      	ldr	r0, [r7, #4]
 801a332:	f7f5 ff1a 	bl	801016a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801a336:	2102      	movs	r1, #2
 801a338:	6878      	ldr	r0, [r7, #4]
 801a33a:	f7ff fcfb 	bl	8019d34 <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 801a33e:	4b1a      	ldr	r3, [pc, #104]	; (801a3a8 <ip4_input+0x3b8>)
 801a340:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801a344:	3301      	adds	r3, #1
 801a346:	b29a      	uxth	r2, r3
 801a348:	4b17      	ldr	r3, [pc, #92]	; (801a3a8 <ip4_input+0x3b8>)
 801a34a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 801a34e:	4b16      	ldr	r3, [pc, #88]	; (801a3a8 <ip4_input+0x3b8>)
 801a350:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801a354:	3301      	adds	r3, #1
 801a356:	b29a      	uxth	r2, r3
 801a358:	4b13      	ldr	r3, [pc, #76]	; (801a3a8 <ip4_input+0x3b8>)
 801a35a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
 801a35e:	4b12      	ldr	r3, [pc, #72]	; (801a3a8 <ip4_input+0x3b8>)
 801a360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801a364:	3301      	adds	r3, #1
 801a366:	4a10      	ldr	r2, [pc, #64]	; (801a3a8 <ip4_input+0x3b8>)
 801a368:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
        }
        pbuf_free(p);
 801a36c:	6878      	ldr	r0, [r7, #4]
 801a36e:	f7f5 ff0f 	bl	8010190 <pbuf_free>
        break;
 801a372:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801a374:	4b0b      	ldr	r3, [pc, #44]	; (801a3a4 <ip4_input+0x3b4>)
 801a376:	2200      	movs	r2, #0
 801a378:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801a37a:	4b0a      	ldr	r3, [pc, #40]	; (801a3a4 <ip4_input+0x3b4>)
 801a37c:	2200      	movs	r2, #0
 801a37e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801a380:	4b08      	ldr	r3, [pc, #32]	; (801a3a4 <ip4_input+0x3b4>)
 801a382:	2200      	movs	r2, #0
 801a384:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801a386:	4b07      	ldr	r3, [pc, #28]	; (801a3a4 <ip4_input+0x3b4>)
 801a388:	2200      	movs	r2, #0
 801a38a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801a38c:	4b05      	ldr	r3, [pc, #20]	; (801a3a4 <ip4_input+0x3b4>)
 801a38e:	2200      	movs	r2, #0
 801a390:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801a392:	4b04      	ldr	r3, [pc, #16]	; (801a3a4 <ip4_input+0x3b4>)
 801a394:	2200      	movs	r2, #0
 801a396:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801a398:	2300      	movs	r3, #0
}
 801a39a:	4618      	mov	r0, r3
 801a39c:	3720      	adds	r7, #32
 801a39e:	46bd      	mov	sp, r7
 801a3a0:	bd80      	pop	{r7, pc}
 801a3a2:	bf00      	nop
 801a3a4:	20003be8 	.word	0x20003be8
 801a3a8:	20007204 	.word	0x20007204

0801a3ac <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801a3ac:	b580      	push	{r7, lr}
 801a3ae:	b08a      	sub	sp, #40	; 0x28
 801a3b0:	af04      	add	r7, sp, #16
 801a3b2:	60f8      	str	r0, [r7, #12]
 801a3b4:	60b9      	str	r1, [r7, #8]
 801a3b6:	607a      	str	r2, [r7, #4]
 801a3b8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801a3ba:	68bb      	ldr	r3, [r7, #8]
 801a3bc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	2b00      	cmp	r3, #0
 801a3c2:	d009      	beq.n	801a3d8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801a3c4:	68bb      	ldr	r3, [r7, #8]
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	d003      	beq.n	801a3d2 <ip4_output_if+0x26>
 801a3ca:	68bb      	ldr	r3, [r7, #8]
 801a3cc:	681b      	ldr	r3, [r3, #0]
 801a3ce:	2b00      	cmp	r3, #0
 801a3d0:	d102      	bne.n	801a3d8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801a3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3d4:	3304      	adds	r3, #4
 801a3d6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801a3d8:	78fa      	ldrb	r2, [r7, #3]
 801a3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a3dc:	9302      	str	r3, [sp, #8]
 801a3de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a3e2:	9301      	str	r3, [sp, #4]
 801a3e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a3e8:	9300      	str	r3, [sp, #0]
 801a3ea:	4613      	mov	r3, r2
 801a3ec:	687a      	ldr	r2, [r7, #4]
 801a3ee:	6979      	ldr	r1, [r7, #20]
 801a3f0:	68f8      	ldr	r0, [r7, #12]
 801a3f2:	f000 f805 	bl	801a400 <ip4_output_if_src>
 801a3f6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801a3f8:	4618      	mov	r0, r3
 801a3fa:	3718      	adds	r7, #24
 801a3fc:	46bd      	mov	sp, r7
 801a3fe:	bd80      	pop	{r7, pc}

0801a400 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801a400:	b580      	push	{r7, lr}
 801a402:	b088      	sub	sp, #32
 801a404:	af00      	add	r7, sp, #0
 801a406:	60f8      	str	r0, [r7, #12]
 801a408:	60b9      	str	r1, [r7, #8]
 801a40a:	607a      	str	r2, [r7, #4]
 801a40c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801a40e:	68fb      	ldr	r3, [r7, #12]
 801a410:	7b9b      	ldrb	r3, [r3, #14]
 801a412:	2b01      	cmp	r3, #1
 801a414:	d006      	beq.n	801a424 <ip4_output_if_src+0x24>
 801a416:	4b62      	ldr	r3, [pc, #392]	; (801a5a0 <ip4_output_if_src+0x1a0>)
 801a418:	f44f 7255 	mov.w	r2, #852	; 0x354
 801a41c:	4961      	ldr	r1, [pc, #388]	; (801a5a4 <ip4_output_if_src+0x1a4>)
 801a41e:	4862      	ldr	r0, [pc, #392]	; (801a5a8 <ip4_output_if_src+0x1a8>)
 801a420:	f002 f986 	bl	801c730 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);
 801a424:	4b61      	ldr	r3, [pc, #388]	; (801a5ac <ip4_output_if_src+0x1ac>)
 801a426:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801a42a:	3301      	adds	r3, #1
 801a42c:	4a5f      	ldr	r2, [pc, #380]	; (801a5ac <ip4_output_if_src+0x1ac>)
 801a42e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	2b00      	cmp	r3, #0
 801a436:	d06f      	beq.n	801a518 <ip4_output_if_src+0x118>
    u16_t ip_hlen = IP_HLEN;
 801a438:	2314      	movs	r3, #20
 801a43a:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801a43c:	2114      	movs	r1, #20
 801a43e:	68f8      	ldr	r0, [r7, #12]
 801a440:	f7f5 fe10 	bl	8010064 <pbuf_add_header>
 801a444:	4603      	mov	r3, r0
 801a446:	2b00      	cmp	r3, #0
 801a448:	d011      	beq.n	801a46e <ip4_output_if_src+0x6e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 801a44a:	4b58      	ldr	r3, [pc, #352]	; (801a5ac <ip4_output_if_src+0x1ac>)
 801a44c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801a450:	3301      	adds	r3, #1
 801a452:	b29a      	uxth	r2, r3
 801a454:	4b55      	ldr	r3, [pc, #340]	; (801a5ac <ip4_output_if_src+0x1ac>)
 801a456:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
 801a45a:	4b54      	ldr	r3, [pc, #336]	; (801a5ac <ip4_output_if_src+0x1ac>)
 801a45c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801a460:	3301      	adds	r3, #1
 801a462:	4a52      	ldr	r2, [pc, #328]	; (801a5ac <ip4_output_if_src+0x1ac>)
 801a464:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      return ERR_BUF;
 801a468:	f06f 0301 	mvn.w	r3, #1
 801a46c:	e093      	b.n	801a596 <ip4_output_if_src+0x196>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801a46e:	68fb      	ldr	r3, [r7, #12]
 801a470:	685b      	ldr	r3, [r3, #4]
 801a472:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801a474:	68fb      	ldr	r3, [r7, #12]
 801a476:	895b      	ldrh	r3, [r3, #10]
 801a478:	2b13      	cmp	r3, #19
 801a47a:	d806      	bhi.n	801a48a <ip4_output_if_src+0x8a>
 801a47c:	4b48      	ldr	r3, [pc, #288]	; (801a5a0 <ip4_output_if_src+0x1a0>)
 801a47e:	f44f 7262 	mov.w	r2, #904	; 0x388
 801a482:	494b      	ldr	r1, [pc, #300]	; (801a5b0 <ip4_output_if_src+0x1b0>)
 801a484:	4848      	ldr	r0, [pc, #288]	; (801a5a8 <ip4_output_if_src+0x1a8>)
 801a486:	f002 f953 	bl	801c730 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801a48a:	69fb      	ldr	r3, [r7, #28]
 801a48c:	78fa      	ldrb	r2, [r7, #3]
 801a48e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801a490:	69fb      	ldr	r3, [r7, #28]
 801a492:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a496:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	681a      	ldr	r2, [r3, #0]
 801a49c:	69fb      	ldr	r3, [r7, #28]
 801a49e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801a4a0:	8b7b      	ldrh	r3, [r7, #26]
 801a4a2:	089b      	lsrs	r3, r3, #2
 801a4a4:	b29b      	uxth	r3, r3
 801a4a6:	b2db      	uxtb	r3, r3
 801a4a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a4ac:	b2da      	uxtb	r2, r3
 801a4ae:	69fb      	ldr	r3, [r7, #28]
 801a4b0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801a4b2:	69fb      	ldr	r3, [r7, #28]
 801a4b4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a4b8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801a4ba:	68fb      	ldr	r3, [r7, #12]
 801a4bc:	891b      	ldrh	r3, [r3, #8]
 801a4be:	4618      	mov	r0, r3
 801a4c0:	f7f3 ffd0 	bl	800e464 <lwip_htons>
 801a4c4:	4603      	mov	r3, r0
 801a4c6:	461a      	mov	r2, r3
 801a4c8:	69fb      	ldr	r3, [r7, #28]
 801a4ca:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801a4cc:	69fb      	ldr	r3, [r7, #28]
 801a4ce:	2200      	movs	r2, #0
 801a4d0:	719a      	strb	r2, [r3, #6]
 801a4d2:	2200      	movs	r2, #0
 801a4d4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801a4d6:	4b37      	ldr	r3, [pc, #220]	; (801a5b4 <ip4_output_if_src+0x1b4>)
 801a4d8:	881b      	ldrh	r3, [r3, #0]
 801a4da:	4618      	mov	r0, r3
 801a4dc:	f7f3 ffc2 	bl	800e464 <lwip_htons>
 801a4e0:	4603      	mov	r3, r0
 801a4e2:	461a      	mov	r2, r3
 801a4e4:	69fb      	ldr	r3, [r7, #28]
 801a4e6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801a4e8:	4b32      	ldr	r3, [pc, #200]	; (801a5b4 <ip4_output_if_src+0x1b4>)
 801a4ea:	881b      	ldrh	r3, [r3, #0]
 801a4ec:	3301      	adds	r3, #1
 801a4ee:	b29a      	uxth	r2, r3
 801a4f0:	4b30      	ldr	r3, [pc, #192]	; (801a5b4 <ip4_output_if_src+0x1b4>)
 801a4f2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801a4f4:	68bb      	ldr	r3, [r7, #8]
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	d104      	bne.n	801a504 <ip4_output_if_src+0x104>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801a4fa:	4b2f      	ldr	r3, [pc, #188]	; (801a5b8 <ip4_output_if_src+0x1b8>)
 801a4fc:	681a      	ldr	r2, [r3, #0]
 801a4fe:	69fb      	ldr	r3, [r7, #28]
 801a500:	60da      	str	r2, [r3, #12]
 801a502:	e003      	b.n	801a50c <ip4_output_if_src+0x10c>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801a504:	68bb      	ldr	r3, [r7, #8]
 801a506:	681a      	ldr	r2, [r3, #0]
 801a508:	69fb      	ldr	r3, [r7, #28]
 801a50a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801a50c:	69fb      	ldr	r3, [r7, #28]
 801a50e:	2200      	movs	r2, #0
 801a510:	729a      	strb	r2, [r3, #10]
 801a512:	2200      	movs	r2, #0
 801a514:	72da      	strb	r2, [r3, #11]
 801a516:	e01e      	b.n	801a556 <ip4_output_if_src+0x156>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801a518:	68fb      	ldr	r3, [r7, #12]
 801a51a:	895b      	ldrh	r3, [r3, #10]
 801a51c:	2b13      	cmp	r3, #19
 801a51e:	d811      	bhi.n	801a544 <ip4_output_if_src+0x144>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 801a520:	4b22      	ldr	r3, [pc, #136]	; (801a5ac <ip4_output_if_src+0x1ac>)
 801a522:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801a526:	3301      	adds	r3, #1
 801a528:	b29a      	uxth	r2, r3
 801a52a:	4b20      	ldr	r3, [pc, #128]	; (801a5ac <ip4_output_if_src+0x1ac>)
 801a52c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
 801a530:	4b1e      	ldr	r3, [pc, #120]	; (801a5ac <ip4_output_if_src+0x1ac>)
 801a532:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801a536:	3301      	adds	r3, #1
 801a538:	4a1c      	ldr	r2, [pc, #112]	; (801a5ac <ip4_output_if_src+0x1ac>)
 801a53a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      return ERR_BUF;
 801a53e:	f06f 0301 	mvn.w	r3, #1
 801a542:	e028      	b.n	801a596 <ip4_output_if_src+0x196>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801a544:	68fb      	ldr	r3, [r7, #12]
 801a546:	685b      	ldr	r3, [r3, #4]
 801a548:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801a54a:	69fb      	ldr	r3, [r7, #28]
 801a54c:	691b      	ldr	r3, [r3, #16]
 801a54e:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801a550:	f107 0314 	add.w	r3, r7, #20
 801a554:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 801a556:	4b15      	ldr	r3, [pc, #84]	; (801a5ac <ip4_output_if_src+0x1ac>)
 801a558:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a55c:	3301      	adds	r3, #1
 801a55e:	b29a      	uxth	r2, r3
 801a560:	4b12      	ldr	r3, [pc, #72]	; (801a5ac <ip4_output_if_src+0x1ac>)
 801a562:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801a566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d00c      	beq.n	801a588 <ip4_output_if_src+0x188>
 801a56e:	68fb      	ldr	r3, [r7, #12]
 801a570:	891a      	ldrh	r2, [r3, #8]
 801a572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a576:	429a      	cmp	r2, r3
 801a578:	d906      	bls.n	801a588 <ip4_output_if_src+0x188>
    return ip4_frag(p, netif, dest);
 801a57a:	687a      	ldr	r2, [r7, #4]
 801a57c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a57e:	68f8      	ldr	r0, [r7, #12]
 801a580:	f000 febc 	bl	801b2fc <ip4_frag>
 801a584:	4603      	mov	r3, r0
 801a586:	e006      	b.n	801a596 <ip4_output_if_src+0x196>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801a588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a58a:	695b      	ldr	r3, [r3, #20]
 801a58c:	687a      	ldr	r2, [r7, #4]
 801a58e:	68f9      	ldr	r1, [r7, #12]
 801a590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a592:	4798      	blx	r3
 801a594:	4603      	mov	r3, r0
}
 801a596:	4618      	mov	r0, r3
 801a598:	3720      	adds	r7, #32
 801a59a:	46bd      	mov	sp, r7
 801a59c:	bd80      	pop	{r7, pc}
 801a59e:	bf00      	nop
 801a5a0:	0802309c 	.word	0x0802309c
 801a5a4:	080230d0 	.word	0x080230d0
 801a5a8:	080230dc 	.word	0x080230dc
 801a5ac:	20007204 	.word	0x20007204
 801a5b0:	08023104 	.word	0x08023104
 801a5b4:	2000752e 	.word	0x2000752e
 801a5b8:	08024538 	.word	0x08024538

0801a5bc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801a5bc:	b480      	push	{r7}
 801a5be:	b085      	sub	sp, #20
 801a5c0:	af00      	add	r7, sp, #0
 801a5c2:	6078      	str	r0, [r7, #4]
 801a5c4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801a5c6:	687b      	ldr	r3, [r7, #4]
 801a5c8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a5d0:	d002      	beq.n	801a5d8 <ip4_addr_isbroadcast_u32+0x1c>
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	d101      	bne.n	801a5dc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801a5d8:	2301      	movs	r3, #1
 801a5da:	e02a      	b.n	801a632 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801a5dc:	683b      	ldr	r3, [r7, #0]
 801a5de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a5e2:	f003 0302 	and.w	r3, r3, #2
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	d101      	bne.n	801a5ee <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801a5ea:	2300      	movs	r3, #0
 801a5ec:	e021      	b.n	801a632 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801a5ee:	683b      	ldr	r3, [r7, #0]
 801a5f0:	3304      	adds	r3, #4
 801a5f2:	681b      	ldr	r3, [r3, #0]
 801a5f4:	687a      	ldr	r2, [r7, #4]
 801a5f6:	429a      	cmp	r2, r3
 801a5f8:	d101      	bne.n	801a5fe <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801a5fa:	2300      	movs	r3, #0
 801a5fc:	e019      	b.n	801a632 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801a5fe:	68fa      	ldr	r2, [r7, #12]
 801a600:	683b      	ldr	r3, [r7, #0]
 801a602:	3304      	adds	r3, #4
 801a604:	681b      	ldr	r3, [r3, #0]
 801a606:	405a      	eors	r2, r3
 801a608:	683b      	ldr	r3, [r7, #0]
 801a60a:	3308      	adds	r3, #8
 801a60c:	681b      	ldr	r3, [r3, #0]
 801a60e:	4013      	ands	r3, r2
 801a610:	2b00      	cmp	r3, #0
 801a612:	d10d      	bne.n	801a630 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a614:	683b      	ldr	r3, [r7, #0]
 801a616:	3308      	adds	r3, #8
 801a618:	681b      	ldr	r3, [r3, #0]
 801a61a:	43da      	mvns	r2, r3
 801a61c:	687b      	ldr	r3, [r7, #4]
 801a61e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801a620:	683b      	ldr	r3, [r7, #0]
 801a622:	3308      	adds	r3, #8
 801a624:	681b      	ldr	r3, [r3, #0]
 801a626:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a628:	429a      	cmp	r2, r3
 801a62a:	d101      	bne.n	801a630 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801a62c:	2301      	movs	r3, #1
 801a62e:	e000      	b.n	801a632 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801a630:	2300      	movs	r3, #0
  }
}
 801a632:	4618      	mov	r0, r3
 801a634:	3714      	adds	r7, #20
 801a636:	46bd      	mov	sp, r7
 801a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a63c:	4770      	bx	lr
	...

0801a640 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801a640:	b580      	push	{r7, lr}
 801a642:	b08a      	sub	sp, #40	; 0x28
 801a644:	af00      	add	r7, sp, #0
 801a646:	6078      	str	r0, [r7, #4]
 801a648:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801a64a:	f107 030c 	add.w	r3, r7, #12
 801a64e:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	781b      	ldrb	r3, [r3, #0]
 801a654:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 801a658:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a65c:	3301      	adds	r3, #1
 801a65e:	4a89      	ldr	r2, [pc, #548]	; (801a884 <ip4addr_aton+0x244>)
 801a660:	4413      	add	r3, r2
 801a662:	781b      	ldrb	r3, [r3, #0]
 801a664:	f003 0304 	and.w	r3, r3, #4
 801a668:	2b00      	cmp	r3, #0
 801a66a:	d101      	bne.n	801a670 <ip4addr_aton+0x30>
      return 0;
 801a66c:	2300      	movs	r3, #0
 801a66e:	e105      	b.n	801a87c <ip4addr_aton+0x23c>
    }
    val = 0;
 801a670:	2300      	movs	r3, #0
 801a672:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 801a674:	230a      	movs	r3, #10
 801a676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 801a67a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a67e:	2b30      	cmp	r3, #48	; 0x30
 801a680:	d11c      	bne.n	801a6bc <ip4addr_aton+0x7c>
      c = *++cp;
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	3301      	adds	r3, #1
 801a686:	607b      	str	r3, [r7, #4]
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	781b      	ldrb	r3, [r3, #0]
 801a68c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 801a690:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a694:	2b78      	cmp	r3, #120	; 0x78
 801a696:	d003      	beq.n	801a6a0 <ip4addr_aton+0x60>
 801a698:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a69c:	2b58      	cmp	r3, #88	; 0x58
 801a69e:	d10a      	bne.n	801a6b6 <ip4addr_aton+0x76>
        base = 16;
 801a6a0:	2310      	movs	r3, #16
 801a6a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	3301      	adds	r3, #1
 801a6aa:	607b      	str	r3, [r7, #4]
 801a6ac:	687b      	ldr	r3, [r7, #4]
 801a6ae:	781b      	ldrb	r3, [r3, #0]
 801a6b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801a6b4:	e002      	b.n	801a6bc <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801a6b6:	2308      	movs	r3, #8
 801a6b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 801a6bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a6c0:	3301      	adds	r3, #1
 801a6c2:	4a70      	ldr	r2, [pc, #448]	; (801a884 <ip4addr_aton+0x244>)
 801a6c4:	4413      	add	r3, r2
 801a6c6:	781b      	ldrb	r3, [r3, #0]
 801a6c8:	f003 0304 	and.w	r3, r3, #4
 801a6cc:	2b00      	cmp	r3, #0
 801a6ce:	d011      	beq.n	801a6f4 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 801a6d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a6d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a6d6:	fb03 f202 	mul.w	r2, r3, r2
 801a6da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a6de:	4413      	add	r3, r2
 801a6e0:	3b30      	subs	r3, #48	; 0x30
 801a6e2:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	3301      	adds	r3, #1
 801a6e8:	607b      	str	r3, [r7, #4]
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	781b      	ldrb	r3, [r3, #0]
 801a6ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801a6f2:	e7e3      	b.n	801a6bc <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801a6f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a6f8:	2b10      	cmp	r3, #16
 801a6fa:	d127      	bne.n	801a74c <ip4addr_aton+0x10c>
 801a6fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a700:	3301      	adds	r3, #1
 801a702:	4a60      	ldr	r2, [pc, #384]	; (801a884 <ip4addr_aton+0x244>)
 801a704:	4413      	add	r3, r2
 801a706:	781b      	ldrb	r3, [r3, #0]
 801a708:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	d01d      	beq.n	801a74c <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801a710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a712:	011b      	lsls	r3, r3, #4
 801a714:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a718:	f102 010a 	add.w	r1, r2, #10
 801a71c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a720:	3201      	adds	r2, #1
 801a722:	4858      	ldr	r0, [pc, #352]	; (801a884 <ip4addr_aton+0x244>)
 801a724:	4402      	add	r2, r0
 801a726:	7812      	ldrb	r2, [r2, #0]
 801a728:	f002 0203 	and.w	r2, r2, #3
 801a72c:	2a02      	cmp	r2, #2
 801a72e:	d101      	bne.n	801a734 <ip4addr_aton+0xf4>
 801a730:	2261      	movs	r2, #97	; 0x61
 801a732:	e000      	b.n	801a736 <ip4addr_aton+0xf6>
 801a734:	2241      	movs	r2, #65	; 0x41
 801a736:	1a8a      	subs	r2, r1, r2
 801a738:	4313      	orrs	r3, r2
 801a73a:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	3301      	adds	r3, #1
 801a740:	607b      	str	r3, [r7, #4]
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	781b      	ldrb	r3, [r3, #0]
 801a746:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 801a74a:	e7b7      	b.n	801a6bc <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 801a74c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a750:	2b2e      	cmp	r3, #46	; 0x2e
 801a752:	d114      	bne.n	801a77e <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801a754:	f107 030c 	add.w	r3, r7, #12
 801a758:	330c      	adds	r3, #12
 801a75a:	69fa      	ldr	r2, [r7, #28]
 801a75c:	429a      	cmp	r2, r3
 801a75e:	d301      	bcc.n	801a764 <ip4addr_aton+0x124>
        return 0;
 801a760:	2300      	movs	r3, #0
 801a762:	e08b      	b.n	801a87c <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801a764:	69fb      	ldr	r3, [r7, #28]
 801a766:	1d1a      	adds	r2, r3, #4
 801a768:	61fa      	str	r2, [r7, #28]
 801a76a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a76c:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	3301      	adds	r3, #1
 801a772:	607b      	str	r3, [r7, #4]
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	781b      	ldrb	r3, [r3, #0]
 801a778:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 801a77c:	e76c      	b.n	801a658 <ip4addr_aton+0x18>
    } else {
      break;
 801a77e:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801a780:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a784:	2b00      	cmp	r3, #0
 801a786:	d00b      	beq.n	801a7a0 <ip4addr_aton+0x160>
 801a788:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a78c:	3301      	adds	r3, #1
 801a78e:	4a3d      	ldr	r2, [pc, #244]	; (801a884 <ip4addr_aton+0x244>)
 801a790:	4413      	add	r3, r2
 801a792:	781b      	ldrb	r3, [r3, #0]
 801a794:	f003 0308 	and.w	r3, r3, #8
 801a798:	2b00      	cmp	r3, #0
 801a79a:	d101      	bne.n	801a7a0 <ip4addr_aton+0x160>
    return 0;
 801a79c:	2300      	movs	r3, #0
 801a79e:	e06d      	b.n	801a87c <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801a7a0:	f107 030c 	add.w	r3, r7, #12
 801a7a4:	69fa      	ldr	r2, [r7, #28]
 801a7a6:	1ad3      	subs	r3, r2, r3
 801a7a8:	109b      	asrs	r3, r3, #2
 801a7aa:	3301      	adds	r3, #1
 801a7ac:	2b04      	cmp	r3, #4
 801a7ae:	d853      	bhi.n	801a858 <ip4addr_aton+0x218>
 801a7b0:	a201      	add	r2, pc, #4	; (adr r2, 801a7b8 <ip4addr_aton+0x178>)
 801a7b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a7b6:	bf00      	nop
 801a7b8:	0801a7cd 	.word	0x0801a7cd
 801a7bc:	0801a867 	.word	0x0801a867
 801a7c0:	0801a7d1 	.word	0x0801a7d1
 801a7c4:	0801a7f3 	.word	0x0801a7f3
 801a7c8:	0801a821 	.word	0x0801a821

    case 0:
      return 0;       /* initial nondigit */
 801a7cc:	2300      	movs	r3, #0
 801a7ce:	e055      	b.n	801a87c <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 801a7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801a7d6:	d301      	bcc.n	801a7dc <ip4addr_aton+0x19c>
        return 0;
 801a7d8:	2300      	movs	r3, #0
 801a7da:	e04f      	b.n	801a87c <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 801a7dc:	68fb      	ldr	r3, [r7, #12]
 801a7de:	2bff      	cmp	r3, #255	; 0xff
 801a7e0:	d901      	bls.n	801a7e6 <ip4addr_aton+0x1a6>
        return 0;
 801a7e2:	2300      	movs	r3, #0
 801a7e4:	e04a      	b.n	801a87c <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801a7e6:	68fb      	ldr	r3, [r7, #12]
 801a7e8:	061b      	lsls	r3, r3, #24
 801a7ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a7ec:	4313      	orrs	r3, r2
 801a7ee:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801a7f0:	e03a      	b.n	801a868 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801a7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a7f8:	d301      	bcc.n	801a7fe <ip4addr_aton+0x1be>
        return 0;
 801a7fa:	2300      	movs	r3, #0
 801a7fc:	e03e      	b.n	801a87c <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801a7fe:	68fb      	ldr	r3, [r7, #12]
 801a800:	2bff      	cmp	r3, #255	; 0xff
 801a802:	d802      	bhi.n	801a80a <ip4addr_aton+0x1ca>
 801a804:	693b      	ldr	r3, [r7, #16]
 801a806:	2bff      	cmp	r3, #255	; 0xff
 801a808:	d901      	bls.n	801a80e <ip4addr_aton+0x1ce>
        return 0;
 801a80a:	2300      	movs	r3, #0
 801a80c:	e036      	b.n	801a87c <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801a80e:	68fb      	ldr	r3, [r7, #12]
 801a810:	061a      	lsls	r2, r3, #24
 801a812:	693b      	ldr	r3, [r7, #16]
 801a814:	041b      	lsls	r3, r3, #16
 801a816:	4313      	orrs	r3, r2
 801a818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a81a:	4313      	orrs	r3, r2
 801a81c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801a81e:	e023      	b.n	801a868 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801a820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a822:	2bff      	cmp	r3, #255	; 0xff
 801a824:	d901      	bls.n	801a82a <ip4addr_aton+0x1ea>
        return 0;
 801a826:	2300      	movs	r3, #0
 801a828:	e028      	b.n	801a87c <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801a82a:	68fb      	ldr	r3, [r7, #12]
 801a82c:	2bff      	cmp	r3, #255	; 0xff
 801a82e:	d805      	bhi.n	801a83c <ip4addr_aton+0x1fc>
 801a830:	693b      	ldr	r3, [r7, #16]
 801a832:	2bff      	cmp	r3, #255	; 0xff
 801a834:	d802      	bhi.n	801a83c <ip4addr_aton+0x1fc>
 801a836:	697b      	ldr	r3, [r7, #20]
 801a838:	2bff      	cmp	r3, #255	; 0xff
 801a83a:	d901      	bls.n	801a840 <ip4addr_aton+0x200>
        return 0;
 801a83c:	2300      	movs	r3, #0
 801a83e:	e01d      	b.n	801a87c <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801a840:	68fb      	ldr	r3, [r7, #12]
 801a842:	061a      	lsls	r2, r3, #24
 801a844:	693b      	ldr	r3, [r7, #16]
 801a846:	041b      	lsls	r3, r3, #16
 801a848:	431a      	orrs	r2, r3
 801a84a:	697b      	ldr	r3, [r7, #20]
 801a84c:	021b      	lsls	r3, r3, #8
 801a84e:	4313      	orrs	r3, r2
 801a850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a852:	4313      	orrs	r3, r2
 801a854:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801a856:	e007      	b.n	801a868 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 801a858:	4b0b      	ldr	r3, [pc, #44]	; (801a888 <ip4addr_aton+0x248>)
 801a85a:	22f9      	movs	r2, #249	; 0xf9
 801a85c:	490b      	ldr	r1, [pc, #44]	; (801a88c <ip4addr_aton+0x24c>)
 801a85e:	480c      	ldr	r0, [pc, #48]	; (801a890 <ip4addr_aton+0x250>)
 801a860:	f001 ff66 	bl	801c730 <iprintf>
      break;
 801a864:	e000      	b.n	801a868 <ip4addr_aton+0x228>
      break;
 801a866:	bf00      	nop
  }
  if (addr) {
 801a868:	683b      	ldr	r3, [r7, #0]
 801a86a:	2b00      	cmp	r3, #0
 801a86c:	d005      	beq.n	801a87a <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801a86e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a870:	f7f3 fe0d 	bl	800e48e <lwip_htonl>
 801a874:	4602      	mov	r2, r0
 801a876:	683b      	ldr	r3, [r7, #0]
 801a878:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801a87a:	2301      	movs	r3, #1
}
 801a87c:	4618      	mov	r0, r3
 801a87e:	3728      	adds	r7, #40	; 0x28
 801a880:	46bd      	mov	sp, r7
 801a882:	bd80      	pop	{r7, pc}
 801a884:	0802454e 	.word	0x0802454e
 801a888:	08023134 	.word	0x08023134
 801a88c:	08023170 	.word	0x08023170
 801a890:	0802317c 	.word	0x0802317c

0801a894 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801a894:	b580      	push	{r7, lr}
 801a896:	b084      	sub	sp, #16
 801a898:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801a89a:	2300      	movs	r3, #0
 801a89c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801a89e:	4b12      	ldr	r3, [pc, #72]	; (801a8e8 <ip_reass_tmr+0x54>)
 801a8a0:	681b      	ldr	r3, [r3, #0]
 801a8a2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801a8a4:	e018      	b.n	801a8d8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801a8a6:	68fb      	ldr	r3, [r7, #12]
 801a8a8:	7fdb      	ldrb	r3, [r3, #31]
 801a8aa:	2b00      	cmp	r3, #0
 801a8ac:	d00b      	beq.n	801a8c6 <ip_reass_tmr+0x32>
      r->timer--;
 801a8ae:	68fb      	ldr	r3, [r7, #12]
 801a8b0:	7fdb      	ldrb	r3, [r3, #31]
 801a8b2:	3b01      	subs	r3, #1
 801a8b4:	b2da      	uxtb	r2, r3
 801a8b6:	68fb      	ldr	r3, [r7, #12]
 801a8b8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801a8ba:	68fb      	ldr	r3, [r7, #12]
 801a8bc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801a8be:	68fb      	ldr	r3, [r7, #12]
 801a8c0:	681b      	ldr	r3, [r3, #0]
 801a8c2:	60fb      	str	r3, [r7, #12]
 801a8c4:	e008      	b.n	801a8d8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801a8c6:	68fb      	ldr	r3, [r7, #12]
 801a8c8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801a8ca:	68fb      	ldr	r3, [r7, #12]
 801a8cc:	681b      	ldr	r3, [r3, #0]
 801a8ce:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801a8d0:	68b9      	ldr	r1, [r7, #8]
 801a8d2:	6878      	ldr	r0, [r7, #4]
 801a8d4:	f000 f80a 	bl	801a8ec <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801a8d8:	68fb      	ldr	r3, [r7, #12]
 801a8da:	2b00      	cmp	r3, #0
 801a8dc:	d1e3      	bne.n	801a8a6 <ip_reass_tmr+0x12>
    }
  }
}
 801a8de:	bf00      	nop
 801a8e0:	bf00      	nop
 801a8e2:	3710      	adds	r7, #16
 801a8e4:	46bd      	mov	sp, r7
 801a8e6:	bd80      	pop	{r7, pc}
 801a8e8:	20007530 	.word	0x20007530

0801a8ec <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a8ec:	b580      	push	{r7, lr}
 801a8ee:	b088      	sub	sp, #32
 801a8f0:	af00      	add	r7, sp, #0
 801a8f2:	6078      	str	r0, [r7, #4]
 801a8f4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801a8f6:	2300      	movs	r3, #0
 801a8f8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801a8fa:	683a      	ldr	r2, [r7, #0]
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	429a      	cmp	r2, r3
 801a900:	d105      	bne.n	801a90e <ip_reass_free_complete_datagram+0x22>
 801a902:	4b48      	ldr	r3, [pc, #288]	; (801aa24 <ip_reass_free_complete_datagram+0x138>)
 801a904:	22ab      	movs	r2, #171	; 0xab
 801a906:	4948      	ldr	r1, [pc, #288]	; (801aa28 <ip_reass_free_complete_datagram+0x13c>)
 801a908:	4848      	ldr	r0, [pc, #288]	; (801aa2c <ip_reass_free_complete_datagram+0x140>)
 801a90a:	f001 ff11 	bl	801c730 <iprintf>
  if (prev != NULL) {
 801a90e:	683b      	ldr	r3, [r7, #0]
 801a910:	2b00      	cmp	r3, #0
 801a912:	d00a      	beq.n	801a92a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801a914:	683b      	ldr	r3, [r7, #0]
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	687a      	ldr	r2, [r7, #4]
 801a91a:	429a      	cmp	r2, r3
 801a91c:	d005      	beq.n	801a92a <ip_reass_free_complete_datagram+0x3e>
 801a91e:	4b41      	ldr	r3, [pc, #260]	; (801aa24 <ip_reass_free_complete_datagram+0x138>)
 801a920:	22ad      	movs	r2, #173	; 0xad
 801a922:	4943      	ldr	r1, [pc, #268]	; (801aa30 <ip_reass_free_complete_datagram+0x144>)
 801a924:	4841      	ldr	r0, [pc, #260]	; (801aa2c <ip_reass_free_complete_datagram+0x140>)
 801a926:	f001 ff03 	bl	801c730 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
 801a92a:	4b42      	ldr	r3, [pc, #264]	; (801aa34 <ip_reass_free_complete_datagram+0x148>)
 801a92c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 801a930:	3301      	adds	r3, #1
 801a932:	4a40      	ldr	r2, [pc, #256]	; (801aa34 <ip_reass_free_complete_datagram+0x148>)
 801a934:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	685b      	ldr	r3, [r3, #4]
 801a93c:	685b      	ldr	r3, [r3, #4]
 801a93e:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801a940:	697b      	ldr	r3, [r7, #20]
 801a942:	889b      	ldrh	r3, [r3, #4]
 801a944:	b29b      	uxth	r3, r3
 801a946:	2b00      	cmp	r3, #0
 801a948:	d12a      	bne.n	801a9a0 <ip_reass_free_complete_datagram+0xb4>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	685b      	ldr	r3, [r3, #4]
 801a94e:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801a950:	697b      	ldr	r3, [r7, #20]
 801a952:	681a      	ldr	r2, [r3, #0]
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801a958:	69bb      	ldr	r3, [r7, #24]
 801a95a:	6858      	ldr	r0, [r3, #4]
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	3308      	adds	r3, #8
 801a960:	2214      	movs	r2, #20
 801a962:	4619      	mov	r1, r3
 801a964:	f000 ff76 	bl	801b854 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801a968:	2101      	movs	r1, #1
 801a96a:	69b8      	ldr	r0, [r7, #24]
 801a96c:	f7ff f9fc 	bl	8019d68 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801a970:	69b8      	ldr	r0, [r7, #24]
 801a972:	f7f5 fc95 	bl	80102a0 <pbuf_clen>
 801a976:	4603      	mov	r3, r0
 801a978:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a97a:	8bfa      	ldrh	r2, [r7, #30]
 801a97c:	8a7b      	ldrh	r3, [r7, #18]
 801a97e:	4413      	add	r3, r2
 801a980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a984:	db05      	blt.n	801a992 <ip_reass_free_complete_datagram+0xa6>
 801a986:	4b27      	ldr	r3, [pc, #156]	; (801aa24 <ip_reass_free_complete_datagram+0x138>)
 801a988:	22bc      	movs	r2, #188	; 0xbc
 801a98a:	492b      	ldr	r1, [pc, #172]	; (801aa38 <ip_reass_free_complete_datagram+0x14c>)
 801a98c:	4827      	ldr	r0, [pc, #156]	; (801aa2c <ip_reass_free_complete_datagram+0x140>)
 801a98e:	f001 fecf 	bl	801c730 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a992:	8bfa      	ldrh	r2, [r7, #30]
 801a994:	8a7b      	ldrh	r3, [r7, #18]
 801a996:	4413      	add	r3, r2
 801a998:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801a99a:	69b8      	ldr	r0, [r7, #24]
 801a99c:	f7f5 fbf8 	bl	8010190 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	685b      	ldr	r3, [r3, #4]
 801a9a4:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801a9a6:	e01f      	b.n	801a9e8 <ip_reass_free_complete_datagram+0xfc>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801a9a8:	69bb      	ldr	r3, [r7, #24]
 801a9aa:	685b      	ldr	r3, [r3, #4]
 801a9ac:	617b      	str	r3, [r7, #20]
    pcur = p;
 801a9ae:	69bb      	ldr	r3, [r7, #24]
 801a9b0:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801a9b2:	697b      	ldr	r3, [r7, #20]
 801a9b4:	681b      	ldr	r3, [r3, #0]
 801a9b6:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801a9b8:	68f8      	ldr	r0, [r7, #12]
 801a9ba:	f7f5 fc71 	bl	80102a0 <pbuf_clen>
 801a9be:	4603      	mov	r3, r0
 801a9c0:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a9c2:	8bfa      	ldrh	r2, [r7, #30]
 801a9c4:	8a7b      	ldrh	r3, [r7, #18]
 801a9c6:	4413      	add	r3, r2
 801a9c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a9cc:	db05      	blt.n	801a9da <ip_reass_free_complete_datagram+0xee>
 801a9ce:	4b15      	ldr	r3, [pc, #84]	; (801aa24 <ip_reass_free_complete_datagram+0x138>)
 801a9d0:	22cc      	movs	r2, #204	; 0xcc
 801a9d2:	4919      	ldr	r1, [pc, #100]	; (801aa38 <ip_reass_free_complete_datagram+0x14c>)
 801a9d4:	4815      	ldr	r0, [pc, #84]	; (801aa2c <ip_reass_free_complete_datagram+0x140>)
 801a9d6:	f001 feab 	bl	801c730 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a9da:	8bfa      	ldrh	r2, [r7, #30]
 801a9dc:	8a7b      	ldrh	r3, [r7, #18]
 801a9de:	4413      	add	r3, r2
 801a9e0:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801a9e2:	68f8      	ldr	r0, [r7, #12]
 801a9e4:	f7f5 fbd4 	bl	8010190 <pbuf_free>
  while (p != NULL) {
 801a9e8:	69bb      	ldr	r3, [r7, #24]
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d1dc      	bne.n	801a9a8 <ip_reass_free_complete_datagram+0xbc>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801a9ee:	6839      	ldr	r1, [r7, #0]
 801a9f0:	6878      	ldr	r0, [r7, #4]
 801a9f2:	f000 f8cb 	bl	801ab8c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801a9f6:	4b11      	ldr	r3, [pc, #68]	; (801aa3c <ip_reass_free_complete_datagram+0x150>)
 801a9f8:	881b      	ldrh	r3, [r3, #0]
 801a9fa:	8bfa      	ldrh	r2, [r7, #30]
 801a9fc:	429a      	cmp	r2, r3
 801a9fe:	d905      	bls.n	801aa0c <ip_reass_free_complete_datagram+0x120>
 801aa00:	4b08      	ldr	r3, [pc, #32]	; (801aa24 <ip_reass_free_complete_datagram+0x138>)
 801aa02:	22d2      	movs	r2, #210	; 0xd2
 801aa04:	490e      	ldr	r1, [pc, #56]	; (801aa40 <ip_reass_free_complete_datagram+0x154>)
 801aa06:	4809      	ldr	r0, [pc, #36]	; (801aa2c <ip_reass_free_complete_datagram+0x140>)
 801aa08:	f001 fe92 	bl	801c730 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801aa0c:	4b0b      	ldr	r3, [pc, #44]	; (801aa3c <ip_reass_free_complete_datagram+0x150>)
 801aa0e:	881a      	ldrh	r2, [r3, #0]
 801aa10:	8bfb      	ldrh	r3, [r7, #30]
 801aa12:	1ad3      	subs	r3, r2, r3
 801aa14:	b29a      	uxth	r2, r3
 801aa16:	4b09      	ldr	r3, [pc, #36]	; (801aa3c <ip_reass_free_complete_datagram+0x150>)
 801aa18:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801aa1a:	8bfb      	ldrh	r3, [r7, #30]
}
 801aa1c:	4618      	mov	r0, r3
 801aa1e:	3720      	adds	r7, #32
 801aa20:	46bd      	mov	sp, r7
 801aa22:	bd80      	pop	{r7, pc}
 801aa24:	080231a4 	.word	0x080231a4
 801aa28:	080231e0 	.word	0x080231e0
 801aa2c:	080231ec 	.word	0x080231ec
 801aa30:	08023214 	.word	0x08023214
 801aa34:	20007204 	.word	0x20007204
 801aa38:	08023228 	.word	0x08023228
 801aa3c:	20007534 	.word	0x20007534
 801aa40:	08023248 	.word	0x08023248

0801aa44 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801aa44:	b580      	push	{r7, lr}
 801aa46:	b08a      	sub	sp, #40	; 0x28
 801aa48:	af00      	add	r7, sp, #0
 801aa4a:	6078      	str	r0, [r7, #4]
 801aa4c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801aa4e:	2300      	movs	r3, #0
 801aa50:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801aa52:	2300      	movs	r3, #0
 801aa54:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801aa56:	2300      	movs	r3, #0
 801aa58:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801aa5a:	2300      	movs	r3, #0
 801aa5c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801aa5e:	2300      	movs	r3, #0
 801aa60:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801aa62:	4b28      	ldr	r3, [pc, #160]	; (801ab04 <ip_reass_remove_oldest_datagram+0xc0>)
 801aa64:	681b      	ldr	r3, [r3, #0]
 801aa66:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801aa68:	e030      	b.n	801aacc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801aa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa6c:	695a      	ldr	r2, [r3, #20]
 801aa6e:	687b      	ldr	r3, [r7, #4]
 801aa70:	68db      	ldr	r3, [r3, #12]
 801aa72:	429a      	cmp	r2, r3
 801aa74:	d10c      	bne.n	801aa90 <ip_reass_remove_oldest_datagram+0x4c>
 801aa76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa78:	699a      	ldr	r2, [r3, #24]
 801aa7a:	687b      	ldr	r3, [r7, #4]
 801aa7c:	691b      	ldr	r3, [r3, #16]
 801aa7e:	429a      	cmp	r2, r3
 801aa80:	d106      	bne.n	801aa90 <ip_reass_remove_oldest_datagram+0x4c>
 801aa82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa84:	899a      	ldrh	r2, [r3, #12]
 801aa86:	687b      	ldr	r3, [r7, #4]
 801aa88:	889b      	ldrh	r3, [r3, #4]
 801aa8a:	b29b      	uxth	r3, r3
 801aa8c:	429a      	cmp	r2, r3
 801aa8e:	d014      	beq.n	801aaba <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801aa90:	693b      	ldr	r3, [r7, #16]
 801aa92:	3301      	adds	r3, #1
 801aa94:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801aa96:	6a3b      	ldr	r3, [r7, #32]
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	d104      	bne.n	801aaa6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801aa9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aa9e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801aaa0:	69fb      	ldr	r3, [r7, #28]
 801aaa2:	61bb      	str	r3, [r7, #24]
 801aaa4:	e009      	b.n	801aaba <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801aaa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aaa8:	7fda      	ldrb	r2, [r3, #31]
 801aaaa:	6a3b      	ldr	r3, [r7, #32]
 801aaac:	7fdb      	ldrb	r3, [r3, #31]
 801aaae:	429a      	cmp	r2, r3
 801aab0:	d803      	bhi.n	801aaba <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801aab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aab4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801aab6:	69fb      	ldr	r3, [r7, #28]
 801aab8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801aaba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aabc:	681b      	ldr	r3, [r3, #0]
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	d001      	beq.n	801aac6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801aac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aac4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801aac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aac8:	681b      	ldr	r3, [r3, #0]
 801aaca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801aacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aace:	2b00      	cmp	r3, #0
 801aad0:	d1cb      	bne.n	801aa6a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801aad2:	6a3b      	ldr	r3, [r7, #32]
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d008      	beq.n	801aaea <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801aad8:	69b9      	ldr	r1, [r7, #24]
 801aada:	6a38      	ldr	r0, [r7, #32]
 801aadc:	f7ff ff06 	bl	801a8ec <ip_reass_free_complete_datagram>
 801aae0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801aae2:	697a      	ldr	r2, [r7, #20]
 801aae4:	68fb      	ldr	r3, [r7, #12]
 801aae6:	4413      	add	r3, r2
 801aae8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801aaea:	697a      	ldr	r2, [r7, #20]
 801aaec:	683b      	ldr	r3, [r7, #0]
 801aaee:	429a      	cmp	r2, r3
 801aaf0:	da02      	bge.n	801aaf8 <ip_reass_remove_oldest_datagram+0xb4>
 801aaf2:	693b      	ldr	r3, [r7, #16]
 801aaf4:	2b01      	cmp	r3, #1
 801aaf6:	dcac      	bgt.n	801aa52 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801aaf8:	697b      	ldr	r3, [r7, #20]
}
 801aafa:	4618      	mov	r0, r3
 801aafc:	3728      	adds	r7, #40	; 0x28
 801aafe:	46bd      	mov	sp, r7
 801ab00:	bd80      	pop	{r7, pc}
 801ab02:	bf00      	nop
 801ab04:	20007530 	.word	0x20007530

0801ab08 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801ab08:	b580      	push	{r7, lr}
 801ab0a:	b084      	sub	sp, #16
 801ab0c:	af00      	add	r7, sp, #0
 801ab0e:	6078      	str	r0, [r7, #4]
 801ab10:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ab12:	2004      	movs	r0, #4
 801ab14:	f7f4 fcb8 	bl	800f488 <memp_malloc>
 801ab18:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801ab1a:	68fb      	ldr	r3, [r7, #12]
 801ab1c:	2b00      	cmp	r3, #0
 801ab1e:	d116      	bne.n	801ab4e <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801ab20:	6839      	ldr	r1, [r7, #0]
 801ab22:	6878      	ldr	r0, [r7, #4]
 801ab24:	f7ff ff8e 	bl	801aa44 <ip_reass_remove_oldest_datagram>
 801ab28:	4602      	mov	r2, r0
 801ab2a:	683b      	ldr	r3, [r7, #0]
 801ab2c:	4293      	cmp	r3, r2
 801ab2e:	dc03      	bgt.n	801ab38 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ab30:	2004      	movs	r0, #4
 801ab32:	f7f4 fca9 	bl	800f488 <memp_malloc>
 801ab36:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801ab38:	68fb      	ldr	r3, [r7, #12]
 801ab3a:	2b00      	cmp	r3, #0
 801ab3c:	d107      	bne.n	801ab4e <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 801ab3e:	4b11      	ldr	r3, [pc, #68]	; (801ab84 <ip_reass_enqueue_new_datagram+0x7c>)
 801ab40:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801ab42:	3301      	adds	r3, #1
 801ab44:	b29a      	uxth	r2, r3
 801ab46:	4b0f      	ldr	r3, [pc, #60]	; (801ab84 <ip_reass_enqueue_new_datagram+0x7c>)
 801ab48:	879a      	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801ab4a:	2300      	movs	r3, #0
 801ab4c:	e016      	b.n	801ab7c <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801ab4e:	2220      	movs	r2, #32
 801ab50:	2100      	movs	r1, #0
 801ab52:	68f8      	ldr	r0, [r7, #12]
 801ab54:	f000 fea6 	bl	801b8a4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801ab58:	68fb      	ldr	r3, [r7, #12]
 801ab5a:	220f      	movs	r2, #15
 801ab5c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801ab5e:	4b0a      	ldr	r3, [pc, #40]	; (801ab88 <ip_reass_enqueue_new_datagram+0x80>)
 801ab60:	681a      	ldr	r2, [r3, #0]
 801ab62:	68fb      	ldr	r3, [r7, #12]
 801ab64:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801ab66:	4a08      	ldr	r2, [pc, #32]	; (801ab88 <ip_reass_enqueue_new_datagram+0x80>)
 801ab68:	68fb      	ldr	r3, [r7, #12]
 801ab6a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801ab6c:	68fb      	ldr	r3, [r7, #12]
 801ab6e:	3308      	adds	r3, #8
 801ab70:	2214      	movs	r2, #20
 801ab72:	6879      	ldr	r1, [r7, #4]
 801ab74:	4618      	mov	r0, r3
 801ab76:	f000 fe6d 	bl	801b854 <memcpy>
  return ipr;
 801ab7a:	68fb      	ldr	r3, [r7, #12]
}
 801ab7c:	4618      	mov	r0, r3
 801ab7e:	3710      	adds	r7, #16
 801ab80:	46bd      	mov	sp, r7
 801ab82:	bd80      	pop	{r7, pc}
 801ab84:	20007204 	.word	0x20007204
 801ab88:	20007530 	.word	0x20007530

0801ab8c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801ab8c:	b580      	push	{r7, lr}
 801ab8e:	b082      	sub	sp, #8
 801ab90:	af00      	add	r7, sp, #0
 801ab92:	6078      	str	r0, [r7, #4]
 801ab94:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801ab96:	4b10      	ldr	r3, [pc, #64]	; (801abd8 <ip_reass_dequeue_datagram+0x4c>)
 801ab98:	681b      	ldr	r3, [r3, #0]
 801ab9a:	687a      	ldr	r2, [r7, #4]
 801ab9c:	429a      	cmp	r2, r3
 801ab9e:	d104      	bne.n	801abaa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	681b      	ldr	r3, [r3, #0]
 801aba4:	4a0c      	ldr	r2, [pc, #48]	; (801abd8 <ip_reass_dequeue_datagram+0x4c>)
 801aba6:	6013      	str	r3, [r2, #0]
 801aba8:	e00d      	b.n	801abc6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801abaa:	683b      	ldr	r3, [r7, #0]
 801abac:	2b00      	cmp	r3, #0
 801abae:	d106      	bne.n	801abbe <ip_reass_dequeue_datagram+0x32>
 801abb0:	4b0a      	ldr	r3, [pc, #40]	; (801abdc <ip_reass_dequeue_datagram+0x50>)
 801abb2:	f240 1245 	movw	r2, #325	; 0x145
 801abb6:	490a      	ldr	r1, [pc, #40]	; (801abe0 <ip_reass_dequeue_datagram+0x54>)
 801abb8:	480a      	ldr	r0, [pc, #40]	; (801abe4 <ip_reass_dequeue_datagram+0x58>)
 801abba:	f001 fdb9 	bl	801c730 <iprintf>
    prev->next = ipr->next;
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	681a      	ldr	r2, [r3, #0]
 801abc2:	683b      	ldr	r3, [r7, #0]
 801abc4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801abc6:	6879      	ldr	r1, [r7, #4]
 801abc8:	2004      	movs	r0, #4
 801abca:	f7f4 fcaf 	bl	800f52c <memp_free>
}
 801abce:	bf00      	nop
 801abd0:	3708      	adds	r7, #8
 801abd2:	46bd      	mov	sp, r7
 801abd4:	bd80      	pop	{r7, pc}
 801abd6:	bf00      	nop
 801abd8:	20007530 	.word	0x20007530
 801abdc:	080231a4 	.word	0x080231a4
 801abe0:	0802326c 	.word	0x0802326c
 801abe4:	080231ec 	.word	0x080231ec

0801abe8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801abe8:	b580      	push	{r7, lr}
 801abea:	b08c      	sub	sp, #48	; 0x30
 801abec:	af00      	add	r7, sp, #0
 801abee:	60f8      	str	r0, [r7, #12]
 801abf0:	60b9      	str	r1, [r7, #8]
 801abf2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801abf4:	2300      	movs	r3, #0
 801abf6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801abf8:	2301      	movs	r3, #1
 801abfa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801abfc:	68bb      	ldr	r3, [r7, #8]
 801abfe:	685b      	ldr	r3, [r3, #4]
 801ac00:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801ac02:	69fb      	ldr	r3, [r7, #28]
 801ac04:	885b      	ldrh	r3, [r3, #2]
 801ac06:	b29b      	uxth	r3, r3
 801ac08:	4618      	mov	r0, r3
 801ac0a:	f7f3 fc2b 	bl	800e464 <lwip_htons>
 801ac0e:	4603      	mov	r3, r0
 801ac10:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801ac12:	69fb      	ldr	r3, [r7, #28]
 801ac14:	781b      	ldrb	r3, [r3, #0]
 801ac16:	f003 030f 	and.w	r3, r3, #15
 801ac1a:	b2db      	uxtb	r3, r3
 801ac1c:	009b      	lsls	r3, r3, #2
 801ac1e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801ac20:	7e7b      	ldrb	r3, [r7, #25]
 801ac22:	b29b      	uxth	r3, r3
 801ac24:	8b7a      	ldrh	r2, [r7, #26]
 801ac26:	429a      	cmp	r2, r3
 801ac28:	d202      	bcs.n	801ac30 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ac2a:	f04f 33ff 	mov.w	r3, #4294967295
 801ac2e:	e135      	b.n	801ae9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801ac30:	7e7b      	ldrb	r3, [r7, #25]
 801ac32:	b29b      	uxth	r3, r3
 801ac34:	8b7a      	ldrh	r2, [r7, #26]
 801ac36:	1ad3      	subs	r3, r2, r3
 801ac38:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801ac3a:	69fb      	ldr	r3, [r7, #28]
 801ac3c:	88db      	ldrh	r3, [r3, #6]
 801ac3e:	b29b      	uxth	r3, r3
 801ac40:	4618      	mov	r0, r3
 801ac42:	f7f3 fc0f 	bl	800e464 <lwip_htons>
 801ac46:	4603      	mov	r3, r0
 801ac48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ac4c:	b29b      	uxth	r3, r3
 801ac4e:	00db      	lsls	r3, r3, #3
 801ac50:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801ac52:	68bb      	ldr	r3, [r7, #8]
 801ac54:	685b      	ldr	r3, [r3, #4]
 801ac56:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801ac58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac5a:	2200      	movs	r2, #0
 801ac5c:	701a      	strb	r2, [r3, #0]
 801ac5e:	2200      	movs	r2, #0
 801ac60:	705a      	strb	r2, [r3, #1]
 801ac62:	2200      	movs	r2, #0
 801ac64:	709a      	strb	r2, [r3, #2]
 801ac66:	2200      	movs	r2, #0
 801ac68:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801ac6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac6c:	8afa      	ldrh	r2, [r7, #22]
 801ac6e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801ac70:	8afa      	ldrh	r2, [r7, #22]
 801ac72:	8b7b      	ldrh	r3, [r7, #26]
 801ac74:	4413      	add	r3, r2
 801ac76:	b29a      	uxth	r2, r3
 801ac78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac7a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801ac7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac7e:	88db      	ldrh	r3, [r3, #6]
 801ac80:	b29b      	uxth	r3, r3
 801ac82:	8afa      	ldrh	r2, [r7, #22]
 801ac84:	429a      	cmp	r2, r3
 801ac86:	d902      	bls.n	801ac8e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ac88:	f04f 33ff 	mov.w	r3, #4294967295
 801ac8c:	e106      	b.n	801ae9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801ac8e:	68fb      	ldr	r3, [r7, #12]
 801ac90:	685b      	ldr	r3, [r3, #4]
 801ac92:	627b      	str	r3, [r7, #36]	; 0x24
 801ac94:	e068      	b.n	801ad68 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801ac96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac98:	685b      	ldr	r3, [r3, #4]
 801ac9a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801ac9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac9e:	889b      	ldrh	r3, [r3, #4]
 801aca0:	b29a      	uxth	r2, r3
 801aca2:	693b      	ldr	r3, [r7, #16]
 801aca4:	889b      	ldrh	r3, [r3, #4]
 801aca6:	b29b      	uxth	r3, r3
 801aca8:	429a      	cmp	r2, r3
 801acaa:	d235      	bcs.n	801ad18 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801acac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801acb0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801acb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	d020      	beq.n	801acfa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801acb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acba:	889b      	ldrh	r3, [r3, #4]
 801acbc:	b29a      	uxth	r2, r3
 801acbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acc0:	88db      	ldrh	r3, [r3, #6]
 801acc2:	b29b      	uxth	r3, r3
 801acc4:	429a      	cmp	r2, r3
 801acc6:	d307      	bcc.n	801acd8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801acc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acca:	88db      	ldrh	r3, [r3, #6]
 801accc:	b29a      	uxth	r2, r3
 801acce:	693b      	ldr	r3, [r7, #16]
 801acd0:	889b      	ldrh	r3, [r3, #4]
 801acd2:	b29b      	uxth	r3, r3
 801acd4:	429a      	cmp	r2, r3
 801acd6:	d902      	bls.n	801acde <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801acd8:	f04f 33ff 	mov.w	r3, #4294967295
 801acdc:	e0de      	b.n	801ae9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801acde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ace0:	68ba      	ldr	r2, [r7, #8]
 801ace2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801ace4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ace6:	88db      	ldrh	r3, [r3, #6]
 801ace8:	b29a      	uxth	r2, r3
 801acea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acec:	889b      	ldrh	r3, [r3, #4]
 801acee:	b29b      	uxth	r3, r3
 801acf0:	429a      	cmp	r2, r3
 801acf2:	d03d      	beq.n	801ad70 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801acf4:	2300      	movs	r3, #0
 801acf6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801acf8:	e03a      	b.n	801ad70 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801acfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801acfc:	88db      	ldrh	r3, [r3, #6]
 801acfe:	b29a      	uxth	r2, r3
 801ad00:	693b      	ldr	r3, [r7, #16]
 801ad02:	889b      	ldrh	r3, [r3, #4]
 801ad04:	b29b      	uxth	r3, r3
 801ad06:	429a      	cmp	r2, r3
 801ad08:	d902      	bls.n	801ad10 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ad0a:	f04f 33ff 	mov.w	r3, #4294967295
 801ad0e:	e0c5      	b.n	801ae9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801ad10:	68fb      	ldr	r3, [r7, #12]
 801ad12:	68ba      	ldr	r2, [r7, #8]
 801ad14:	605a      	str	r2, [r3, #4]
      break;
 801ad16:	e02b      	b.n	801ad70 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801ad18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad1a:	889b      	ldrh	r3, [r3, #4]
 801ad1c:	b29a      	uxth	r2, r3
 801ad1e:	693b      	ldr	r3, [r7, #16]
 801ad20:	889b      	ldrh	r3, [r3, #4]
 801ad22:	b29b      	uxth	r3, r3
 801ad24:	429a      	cmp	r2, r3
 801ad26:	d102      	bne.n	801ad2e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ad28:	f04f 33ff 	mov.w	r3, #4294967295
 801ad2c:	e0b6      	b.n	801ae9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801ad2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad30:	889b      	ldrh	r3, [r3, #4]
 801ad32:	b29a      	uxth	r2, r3
 801ad34:	693b      	ldr	r3, [r7, #16]
 801ad36:	88db      	ldrh	r3, [r3, #6]
 801ad38:	b29b      	uxth	r3, r3
 801ad3a:	429a      	cmp	r2, r3
 801ad3c:	d202      	bcs.n	801ad44 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ad3e:	f04f 33ff 	mov.w	r3, #4294967295
 801ad42:	e0ab      	b.n	801ae9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801ad44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad46:	2b00      	cmp	r3, #0
 801ad48:	d009      	beq.n	801ad5e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801ad4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad4c:	88db      	ldrh	r3, [r3, #6]
 801ad4e:	b29a      	uxth	r2, r3
 801ad50:	693b      	ldr	r3, [r7, #16]
 801ad52:	889b      	ldrh	r3, [r3, #4]
 801ad54:	b29b      	uxth	r3, r3
 801ad56:	429a      	cmp	r2, r3
 801ad58:	d001      	beq.n	801ad5e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801ad5a:	2300      	movs	r3, #0
 801ad5c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801ad5e:	693b      	ldr	r3, [r7, #16]
 801ad60:	681b      	ldr	r3, [r3, #0]
 801ad62:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801ad64:	693b      	ldr	r3, [r7, #16]
 801ad66:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801ad68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad6a:	2b00      	cmp	r3, #0
 801ad6c:	d193      	bne.n	801ac96 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801ad6e:	e000      	b.n	801ad72 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801ad70:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801ad72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	d12d      	bne.n	801add4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801ad78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad7a:	2b00      	cmp	r3, #0
 801ad7c:	d01c      	beq.n	801adb8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801ad7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad80:	88db      	ldrh	r3, [r3, #6]
 801ad82:	b29a      	uxth	r2, r3
 801ad84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad86:	889b      	ldrh	r3, [r3, #4]
 801ad88:	b29b      	uxth	r3, r3
 801ad8a:	429a      	cmp	r2, r3
 801ad8c:	d906      	bls.n	801ad9c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801ad8e:	4b45      	ldr	r3, [pc, #276]	; (801aea4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ad90:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801ad94:	4944      	ldr	r1, [pc, #272]	; (801aea8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801ad96:	4845      	ldr	r0, [pc, #276]	; (801aeac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ad98:	f001 fcca 	bl	801c730 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801ad9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad9e:	68ba      	ldr	r2, [r7, #8]
 801ada0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801ada2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ada4:	88db      	ldrh	r3, [r3, #6]
 801ada6:	b29a      	uxth	r2, r3
 801ada8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801adaa:	889b      	ldrh	r3, [r3, #4]
 801adac:	b29b      	uxth	r3, r3
 801adae:	429a      	cmp	r2, r3
 801adb0:	d010      	beq.n	801add4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801adb2:	2300      	movs	r3, #0
 801adb4:	623b      	str	r3, [r7, #32]
 801adb6:	e00d      	b.n	801add4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801adb8:	68fb      	ldr	r3, [r7, #12]
 801adba:	685b      	ldr	r3, [r3, #4]
 801adbc:	2b00      	cmp	r3, #0
 801adbe:	d006      	beq.n	801adce <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801adc0:	4b38      	ldr	r3, [pc, #224]	; (801aea4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801adc2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801adc6:	493a      	ldr	r1, [pc, #232]	; (801aeb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801adc8:	4838      	ldr	r0, [pc, #224]	; (801aeac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801adca:	f001 fcb1 	bl	801c730 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801adce:	68fb      	ldr	r3, [r7, #12]
 801add0:	68ba      	ldr	r2, [r7, #8]
 801add2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	2b00      	cmp	r3, #0
 801add8:	d105      	bne.n	801ade6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801adda:	68fb      	ldr	r3, [r7, #12]
 801addc:	7f9b      	ldrb	r3, [r3, #30]
 801adde:	f003 0301 	and.w	r3, r3, #1
 801ade2:	2b00      	cmp	r3, #0
 801ade4:	d059      	beq.n	801ae9a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801ade6:	6a3b      	ldr	r3, [r7, #32]
 801ade8:	2b00      	cmp	r3, #0
 801adea:	d04f      	beq.n	801ae8c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801adec:	68fb      	ldr	r3, [r7, #12]
 801adee:	685b      	ldr	r3, [r3, #4]
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	d006      	beq.n	801ae02 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801adf4:	68fb      	ldr	r3, [r7, #12]
 801adf6:	685b      	ldr	r3, [r3, #4]
 801adf8:	685b      	ldr	r3, [r3, #4]
 801adfa:	889b      	ldrh	r3, [r3, #4]
 801adfc:	b29b      	uxth	r3, r3
 801adfe:	2b00      	cmp	r3, #0
 801ae00:	d002      	beq.n	801ae08 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801ae02:	2300      	movs	r3, #0
 801ae04:	623b      	str	r3, [r7, #32]
 801ae06:	e041      	b.n	801ae8c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801ae08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae0a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801ae0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae0e:	681b      	ldr	r3, [r3, #0]
 801ae10:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801ae12:	e012      	b.n	801ae3a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801ae14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae16:	685b      	ldr	r3, [r3, #4]
 801ae18:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801ae1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae1c:	88db      	ldrh	r3, [r3, #6]
 801ae1e:	b29a      	uxth	r2, r3
 801ae20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae22:	889b      	ldrh	r3, [r3, #4]
 801ae24:	b29b      	uxth	r3, r3
 801ae26:	429a      	cmp	r2, r3
 801ae28:	d002      	beq.n	801ae30 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801ae2a:	2300      	movs	r3, #0
 801ae2c:	623b      	str	r3, [r7, #32]
            break;
 801ae2e:	e007      	b.n	801ae40 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801ae30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae32:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801ae34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae36:	681b      	ldr	r3, [r3, #0]
 801ae38:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801ae3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	d1e9      	bne.n	801ae14 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801ae40:	6a3b      	ldr	r3, [r7, #32]
 801ae42:	2b00      	cmp	r3, #0
 801ae44:	d022      	beq.n	801ae8c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801ae46:	68fb      	ldr	r3, [r7, #12]
 801ae48:	685b      	ldr	r3, [r3, #4]
 801ae4a:	2b00      	cmp	r3, #0
 801ae4c:	d106      	bne.n	801ae5c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801ae4e:	4b15      	ldr	r3, [pc, #84]	; (801aea4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ae50:	f240 12df 	movw	r2, #479	; 0x1df
 801ae54:	4917      	ldr	r1, [pc, #92]	; (801aeb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ae56:	4815      	ldr	r0, [pc, #84]	; (801aeac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ae58:	f001 fc6a 	bl	801c730 <iprintf>
          LWIP_ASSERT("sanity check",
 801ae5c:	68fb      	ldr	r3, [r7, #12]
 801ae5e:	685b      	ldr	r3, [r3, #4]
 801ae60:	685b      	ldr	r3, [r3, #4]
 801ae62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ae64:	429a      	cmp	r2, r3
 801ae66:	d106      	bne.n	801ae76 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801ae68:	4b0e      	ldr	r3, [pc, #56]	; (801aea4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ae6a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801ae6e:	4911      	ldr	r1, [pc, #68]	; (801aeb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ae70:	480e      	ldr	r0, [pc, #56]	; (801aeac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ae72:	f001 fc5d 	bl	801c730 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801ae76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae78:	681b      	ldr	r3, [r3, #0]
 801ae7a:	2b00      	cmp	r3, #0
 801ae7c:	d006      	beq.n	801ae8c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801ae7e:	4b09      	ldr	r3, [pc, #36]	; (801aea4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ae80:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801ae84:	490c      	ldr	r1, [pc, #48]	; (801aeb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801ae86:	4809      	ldr	r0, [pc, #36]	; (801aeac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ae88:	f001 fc52 	bl	801c730 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801ae8c:	6a3b      	ldr	r3, [r7, #32]
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	bf14      	ite	ne
 801ae92:	2301      	movne	r3, #1
 801ae94:	2300      	moveq	r3, #0
 801ae96:	b2db      	uxtb	r3, r3
 801ae98:	e000      	b.n	801ae9c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801ae9a:	2300      	movs	r3, #0
}
 801ae9c:	4618      	mov	r0, r3
 801ae9e:	3730      	adds	r7, #48	; 0x30
 801aea0:	46bd      	mov	sp, r7
 801aea2:	bd80      	pop	{r7, pc}
 801aea4:	080231a4 	.word	0x080231a4
 801aea8:	08023288 	.word	0x08023288
 801aeac:	080231ec 	.word	0x080231ec
 801aeb0:	080232a8 	.word	0x080232a8
 801aeb4:	080232e0 	.word	0x080232e0
 801aeb8:	080232f0 	.word	0x080232f0

0801aebc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801aebc:	b580      	push	{r7, lr}
 801aebe:	b08e      	sub	sp, #56	; 0x38
 801aec0:	af00      	add	r7, sp, #0
 801aec2:	6078      	str	r0, [r7, #4]
  u16_t offset, len, clen;
  u8_t hlen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 801aec4:	4b94      	ldr	r3, [pc, #592]	; (801b118 <ip4_reass+0x25c>)
 801aec6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801aec8:	3301      	adds	r3, #1
 801aeca:	b29a      	uxth	r2, r3
 801aecc:	4b92      	ldr	r3, [pc, #584]	; (801b118 <ip4_reass+0x25c>)
 801aece:	865a      	strh	r2, [r3, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);
 801aed0:	4b91      	ldr	r3, [pc, #580]	; (801b118 <ip4_reass+0x25c>)
 801aed2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 801aed6:	3301      	adds	r3, #1
 801aed8:	4a8f      	ldr	r2, [pc, #572]	; (801b118 <ip4_reass+0x25c>)
 801aeda:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

  fraghdr = (struct ip_hdr *)p->payload;
 801aede:	687b      	ldr	r3, [r7, #4]
 801aee0:	685b      	ldr	r3, [r3, #4]
 801aee2:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801aee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aee6:	781b      	ldrb	r3, [r3, #0]
 801aee8:	f003 030f 	and.w	r3, r3, #15
 801aeec:	b2db      	uxtb	r3, r3
 801aeee:	009b      	lsls	r3, r3, #2
 801aef0:	b2db      	uxtb	r3, r3
 801aef2:	2b14      	cmp	r3, #20
 801aef4:	d008      	beq.n	801af08 <ip4_reass+0x4c>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 801aef6:	4b88      	ldr	r3, [pc, #544]	; (801b118 <ip4_reass+0x25c>)
 801aef8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801aefc:	3301      	adds	r3, #1
 801aefe:	b29a      	uxth	r2, r3
 801af00:	4b85      	ldr	r3, [pc, #532]	; (801b118 <ip4_reass+0x25c>)
 801af02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    goto nullreturn;
 801af06:	e183      	b.n	801b210 <ip4_reass+0x354>
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801af08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af0a:	88db      	ldrh	r3, [r3, #6]
 801af0c:	b29b      	uxth	r3, r3
 801af0e:	4618      	mov	r0, r3
 801af10:	f7f3 faa8 	bl	800e464 <lwip_htons>
 801af14:	4603      	mov	r3, r0
 801af16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801af1a:	b29b      	uxth	r3, r3
 801af1c:	00db      	lsls	r3, r3, #3
 801af1e:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801af20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af22:	885b      	ldrh	r3, [r3, #2]
 801af24:	b29b      	uxth	r3, r3
 801af26:	4618      	mov	r0, r3
 801af28:	f7f3 fa9c 	bl	800e464 <lwip_htons>
 801af2c:	4603      	mov	r3, r0
 801af2e:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801af30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af32:	781b      	ldrb	r3, [r3, #0]
 801af34:	f003 030f 	and.w	r3, r3, #15
 801af38:	b2db      	uxtb	r3, r3
 801af3a:	009b      	lsls	r3, r3, #2
 801af3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801af40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801af44:	b29b      	uxth	r3, r3
 801af46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801af48:	429a      	cmp	r2, r3
 801af4a:	f0c0 815e 	bcc.w	801b20a <ip4_reass+0x34e>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801af4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801af52:	b29b      	uxth	r3, r3
 801af54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801af56:	1ad3      	subs	r3, r2, r3
 801af58:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801af5a:	6878      	ldr	r0, [r7, #4]
 801af5c:	f7f5 f9a0 	bl	80102a0 <pbuf_clen>
 801af60:	4603      	mov	r3, r0
 801af62:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801af64:	4b6d      	ldr	r3, [pc, #436]	; (801b11c <ip4_reass+0x260>)
 801af66:	881b      	ldrh	r3, [r3, #0]
 801af68:	461a      	mov	r2, r3
 801af6a:	8c3b      	ldrh	r3, [r7, #32]
 801af6c:	4413      	add	r3, r2
 801af6e:	2b0a      	cmp	r3, #10
 801af70:	dd15      	ble.n	801af9e <ip4_reass+0xe2>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801af72:	8c3b      	ldrh	r3, [r7, #32]
 801af74:	4619      	mov	r1, r3
 801af76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801af78:	f7ff fd64 	bl	801aa44 <ip_reass_remove_oldest_datagram>
 801af7c:	4603      	mov	r3, r0
 801af7e:	2b00      	cmp	r3, #0
 801af80:	d006      	beq.n	801af90 <ip4_reass+0xd4>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801af82:	4b66      	ldr	r3, [pc, #408]	; (801b11c <ip4_reass+0x260>)
 801af84:	881b      	ldrh	r3, [r3, #0]
 801af86:	461a      	mov	r2, r3
 801af88:	8c3b      	ldrh	r3, [r7, #32]
 801af8a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801af8c:	2b0a      	cmp	r3, #10
 801af8e:	dd06      	ble.n	801af9e <ip4_reass+0xe2>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
                                   ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 801af90:	4b61      	ldr	r3, [pc, #388]	; (801b118 <ip4_reass+0x25c>)
 801af92:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 801af94:	3301      	adds	r3, #1
 801af96:	b29a      	uxth	r2, r3
 801af98:	4b5f      	ldr	r3, [pc, #380]	; (801b118 <ip4_reass+0x25c>)
 801af9a:	879a      	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 801af9c:	e138      	b.n	801b210 <ip4_reass+0x354>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801af9e:	4b60      	ldr	r3, [pc, #384]	; (801b120 <ip4_reass+0x264>)
 801afa0:	681b      	ldr	r3, [r3, #0]
 801afa2:	633b      	str	r3, [r7, #48]	; 0x30
 801afa4:	e01e      	b.n	801afe4 <ip4_reass+0x128>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801afa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afa8:	695a      	ldr	r2, [r3, #20]
 801afaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afac:	68db      	ldr	r3, [r3, #12]
 801afae:	429a      	cmp	r2, r3
 801afb0:	d115      	bne.n	801afde <ip4_reass+0x122>
 801afb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afb4:	699a      	ldr	r2, [r3, #24]
 801afb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afb8:	691b      	ldr	r3, [r3, #16]
 801afba:	429a      	cmp	r2, r3
 801afbc:	d10f      	bne.n	801afde <ip4_reass+0x122>
 801afbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afc0:	899a      	ldrh	r2, [r3, #12]
 801afc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afc4:	889b      	ldrh	r3, [r3, #4]
 801afc6:	b29b      	uxth	r3, r3
 801afc8:	429a      	cmp	r2, r3
 801afca:	d108      	bne.n	801afde <ip4_reass+0x122>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 801afcc:	4b52      	ldr	r3, [pc, #328]	; (801b118 <ip4_reass+0x25c>)
 801afce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801afd2:	3301      	adds	r3, #1
 801afd4:	b29a      	uxth	r2, r3
 801afd6:	4b50      	ldr	r3, [pc, #320]	; (801b118 <ip4_reass+0x25c>)
 801afd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      break;
 801afdc:	e005      	b.n	801afea <ip4_reass+0x12e>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801afde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afe0:	681b      	ldr	r3, [r3, #0]
 801afe2:	633b      	str	r3, [r7, #48]	; 0x30
 801afe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afe6:	2b00      	cmp	r3, #0
 801afe8:	d1dd      	bne.n	801afa6 <ip4_reass+0xea>
    }
  }

  if (ipr == NULL) {
 801afea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afec:	2b00      	cmp	r3, #0
 801afee:	d109      	bne.n	801b004 <ip4_reass+0x148>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801aff0:	8c3b      	ldrh	r3, [r7, #32]
 801aff2:	4619      	mov	r1, r3
 801aff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801aff6:	f7ff fd87 	bl	801ab08 <ip_reass_enqueue_new_datagram>
 801affa:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801affc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801affe:	2b00      	cmp	r3, #0
 801b000:	d11c      	bne.n	801b03c <ip4_reass+0x180>
      goto nullreturn;
 801b002:	e105      	b.n	801b210 <ip4_reass+0x354>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b006:	88db      	ldrh	r3, [r3, #6]
 801b008:	b29b      	uxth	r3, r3
 801b00a:	4618      	mov	r0, r3
 801b00c:	f7f3 fa2a 	bl	800e464 <lwip_htons>
 801b010:	4603      	mov	r3, r0
 801b012:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b016:	2b00      	cmp	r3, #0
 801b018:	d110      	bne.n	801b03c <ip4_reass+0x180>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801b01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b01c:	89db      	ldrh	r3, [r3, #14]
 801b01e:	4618      	mov	r0, r3
 801b020:	f7f3 fa20 	bl	800e464 <lwip_htons>
 801b024:	4603      	mov	r3, r0
 801b026:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b02a:	2b00      	cmp	r3, #0
 801b02c:	d006      	beq.n	801b03c <ip4_reass+0x180>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801b02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b030:	3308      	adds	r3, #8
 801b032:	2214      	movs	r2, #20
 801b034:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b036:	4618      	mov	r0, r3
 801b038:	f000 fc0c 	bl	801b854 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801b03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b03e:	88db      	ldrh	r3, [r3, #6]
 801b040:	b29b      	uxth	r3, r3
 801b042:	f003 0320 	and.w	r3, r3, #32
 801b046:	2b00      	cmp	r3, #0
 801b048:	bf0c      	ite	eq
 801b04a:	2301      	moveq	r3, #1
 801b04c:	2300      	movne	r3, #0
 801b04e:	b2db      	uxtb	r3, r3
 801b050:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801b052:	69fb      	ldr	r3, [r7, #28]
 801b054:	2b00      	cmp	r3, #0
 801b056:	d00e      	beq.n	801b076 <ip4_reass+0x1ba>
    u16_t datagram_len = (u16_t)(offset + len);
 801b058:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801b05a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b05c:	4413      	add	r3, r2
 801b05e:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801b060:	8b7a      	ldrh	r2, [r7, #26]
 801b062:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b064:	429a      	cmp	r2, r3
 801b066:	f0c0 80ae 	bcc.w	801b1c6 <ip4_reass+0x30a>
 801b06a:	8b7b      	ldrh	r3, [r7, #26]
 801b06c:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801b070:	4293      	cmp	r3, r2
 801b072:	f200 80a8 	bhi.w	801b1c6 <ip4_reass+0x30a>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801b076:	69fa      	ldr	r2, [r7, #28]
 801b078:	6879      	ldr	r1, [r7, #4]
 801b07a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b07c:	f7ff fdb4 	bl	801abe8 <ip_reass_chain_frag_into_datagram_and_validate>
 801b080:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801b082:	697b      	ldr	r3, [r7, #20]
 801b084:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b088:	f000 809f 	beq.w	801b1ca <ip4_reass+0x30e>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801b08c:	4b23      	ldr	r3, [pc, #140]	; (801b11c <ip4_reass+0x260>)
 801b08e:	881a      	ldrh	r2, [r3, #0]
 801b090:	8c3b      	ldrh	r3, [r7, #32]
 801b092:	4413      	add	r3, r2
 801b094:	b29a      	uxth	r2, r3
 801b096:	4b21      	ldr	r3, [pc, #132]	; (801b11c <ip4_reass+0x260>)
 801b098:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801b09a:	69fb      	ldr	r3, [r7, #28]
 801b09c:	2b00      	cmp	r3, #0
 801b09e:	d00d      	beq.n	801b0bc <ip4_reass+0x200>
    u16_t datagram_len = (u16_t)(offset + len);
 801b0a0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801b0a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b0a4:	4413      	add	r3, r2
 801b0a6:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801b0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b0aa:	8a7a      	ldrh	r2, [r7, #18]
 801b0ac:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801b0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b0b0:	7f9b      	ldrb	r3, [r3, #30]
 801b0b2:	f043 0301 	orr.w	r3, r3, #1
 801b0b6:	b2da      	uxtb	r2, r3
 801b0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b0ba:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801b0bc:	697b      	ldr	r3, [r7, #20]
 801b0be:	2b01      	cmp	r3, #1
 801b0c0:	d17f      	bne.n	801b1c2 <ip4_reass+0x306>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801b0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b0c4:	8b9b      	ldrh	r3, [r3, #28]
 801b0c6:	3314      	adds	r3, #20
 801b0c8:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801b0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b0cc:	685b      	ldr	r3, [r3, #4]
 801b0ce:	685b      	ldr	r3, [r3, #4]
 801b0d0:	681b      	ldr	r3, [r3, #0]
 801b0d2:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801b0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b0d6:	685b      	ldr	r3, [r3, #4]
 801b0d8:	685b      	ldr	r3, [r3, #4]
 801b0da:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801b0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b0de:	3308      	adds	r3, #8
 801b0e0:	2214      	movs	r2, #20
 801b0e2:	4619      	mov	r1, r3
 801b0e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b0e6:	f000 fbb5 	bl	801b854 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801b0ea:	8a3b      	ldrh	r3, [r7, #16]
 801b0ec:	4618      	mov	r0, r3
 801b0ee:	f7f3 f9b9 	bl	800e464 <lwip_htons>
 801b0f2:	4603      	mov	r3, r0
 801b0f4:	461a      	mov	r2, r3
 801b0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0f8:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801b0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b0fc:	2200      	movs	r2, #0
 801b0fe:	719a      	strb	r2, [r3, #6]
 801b100:	2200      	movs	r2, #0
 801b102:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801b104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b106:	2200      	movs	r2, #0
 801b108:	729a      	strb	r2, [r3, #10]
 801b10a:	2200      	movs	r2, #0
 801b10c:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801b10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b110:	685b      	ldr	r3, [r3, #4]
 801b112:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801b114:	e014      	b.n	801b140 <ip4_reass+0x284>
 801b116:	bf00      	nop
 801b118:	20007204 	.word	0x20007204
 801b11c:	20007534 	.word	0x20007534
 801b120:	20007530 	.word	0x20007530
      iprh = (struct ip_reass_helper *)r->payload;
 801b124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b126:	685b      	ldr	r3, [r3, #4]
 801b128:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801b12a:	2114      	movs	r1, #20
 801b12c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801b12e:	f7f4 ffa9 	bl	8010084 <pbuf_remove_header>
      pbuf_cat(p, r);
 801b132:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b134:	6878      	ldr	r0, [r7, #4]
 801b136:	f7f5 f8ed 	bl	8010314 <pbuf_cat>
      r = iprh->next_pbuf;
 801b13a:	68fb      	ldr	r3, [r7, #12]
 801b13c:	681b      	ldr	r3, [r3, #0]
 801b13e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801b140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b142:	2b00      	cmp	r3, #0
 801b144:	d1ee      	bne.n	801b124 <ip4_reass+0x268>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801b146:	4b39      	ldr	r3, [pc, #228]	; (801b22c <ip4_reass+0x370>)
 801b148:	681b      	ldr	r3, [r3, #0]
 801b14a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b14c:	429a      	cmp	r2, r3
 801b14e:	d102      	bne.n	801b156 <ip4_reass+0x29a>
      ipr_prev = NULL;
 801b150:	2300      	movs	r3, #0
 801b152:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b154:	e010      	b.n	801b178 <ip4_reass+0x2bc>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b156:	4b35      	ldr	r3, [pc, #212]	; (801b22c <ip4_reass+0x370>)
 801b158:	681b      	ldr	r3, [r3, #0]
 801b15a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b15c:	e007      	b.n	801b16e <ip4_reass+0x2b2>
        if (ipr_prev->next == ipr) {
 801b15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b160:	681b      	ldr	r3, [r3, #0]
 801b162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b164:	429a      	cmp	r2, r3
 801b166:	d006      	beq.n	801b176 <ip4_reass+0x2ba>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b16a:	681b      	ldr	r3, [r3, #0]
 801b16c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b170:	2b00      	cmp	r3, #0
 801b172:	d1f4      	bne.n	801b15e <ip4_reass+0x2a2>
 801b174:	e000      	b.n	801b178 <ip4_reass+0x2bc>
          break;
 801b176:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801b178:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b17a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b17c:	f7ff fd06 	bl	801ab8c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801b180:	6878      	ldr	r0, [r7, #4]
 801b182:	f7f5 f88d 	bl	80102a0 <pbuf_clen>
 801b186:	4603      	mov	r3, r0
 801b188:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801b18a:	4b29      	ldr	r3, [pc, #164]	; (801b230 <ip4_reass+0x374>)
 801b18c:	881b      	ldrh	r3, [r3, #0]
 801b18e:	8c3a      	ldrh	r2, [r7, #32]
 801b190:	429a      	cmp	r2, r3
 801b192:	d906      	bls.n	801b1a2 <ip4_reass+0x2e6>
 801b194:	4b27      	ldr	r3, [pc, #156]	; (801b234 <ip4_reass+0x378>)
 801b196:	f240 229b 	movw	r2, #667	; 0x29b
 801b19a:	4927      	ldr	r1, [pc, #156]	; (801b238 <ip4_reass+0x37c>)
 801b19c:	4827      	ldr	r0, [pc, #156]	; (801b23c <ip4_reass+0x380>)
 801b19e:	f001 fac7 	bl	801c730 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801b1a2:	4b23      	ldr	r3, [pc, #140]	; (801b230 <ip4_reass+0x374>)
 801b1a4:	881a      	ldrh	r2, [r3, #0]
 801b1a6:	8c3b      	ldrh	r3, [r7, #32]
 801b1a8:	1ad3      	subs	r3, r2, r3
 801b1aa:	b29a      	uxth	r2, r3
 801b1ac:	4b20      	ldr	r3, [pc, #128]	; (801b230 <ip4_reass+0x374>)
 801b1ae:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);
 801b1b0:	4b23      	ldr	r3, [pc, #140]	; (801b240 <ip4_reass+0x384>)
 801b1b2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 801b1b6:	3301      	adds	r3, #1
 801b1b8:	4a21      	ldr	r2, [pc, #132]	; (801b240 <ip4_reass+0x384>)
 801b1ba:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    /* Return the pbuf chain */
    return p;
 801b1be:	687b      	ldr	r3, [r7, #4]
 801b1c0:	e030      	b.n	801b224 <ip4_reass+0x368>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801b1c2:	2300      	movs	r3, #0
 801b1c4:	e02e      	b.n	801b224 <ip4_reass+0x368>
      goto nullreturn_ipr;
 801b1c6:	bf00      	nop
 801b1c8:	e000      	b.n	801b1cc <ip4_reass+0x310>
    goto nullreturn_ipr;
 801b1ca:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801b1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b1ce:	2b00      	cmp	r3, #0
 801b1d0:	d106      	bne.n	801b1e0 <ip4_reass+0x324>
 801b1d2:	4b18      	ldr	r3, [pc, #96]	; (801b234 <ip4_reass+0x378>)
 801b1d4:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801b1d8:	491a      	ldr	r1, [pc, #104]	; (801b244 <ip4_reass+0x388>)
 801b1da:	4818      	ldr	r0, [pc, #96]	; (801b23c <ip4_reass+0x380>)
 801b1dc:	f001 faa8 	bl	801c730 <iprintf>
  if (ipr->p == NULL) {
 801b1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b1e2:	685b      	ldr	r3, [r3, #4]
 801b1e4:	2b00      	cmp	r3, #0
 801b1e6:	d112      	bne.n	801b20e <ip4_reass+0x352>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801b1e8:	4b10      	ldr	r3, [pc, #64]	; (801b22c <ip4_reass+0x370>)
 801b1ea:	681b      	ldr	r3, [r3, #0]
 801b1ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b1ee:	429a      	cmp	r2, r3
 801b1f0:	d006      	beq.n	801b200 <ip4_reass+0x344>
 801b1f2:	4b10      	ldr	r3, [pc, #64]	; (801b234 <ip4_reass+0x378>)
 801b1f4:	f240 22ab 	movw	r2, #683	; 0x2ab
 801b1f8:	4913      	ldr	r1, [pc, #76]	; (801b248 <ip4_reass+0x38c>)
 801b1fa:	4810      	ldr	r0, [pc, #64]	; (801b23c <ip4_reass+0x380>)
 801b1fc:	f001 fa98 	bl	801c730 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801b200:	2100      	movs	r1, #0
 801b202:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b204:	f7ff fcc2 	bl	801ab8c <ip_reass_dequeue_datagram>
 801b208:	e002      	b.n	801b210 <ip4_reass+0x354>
    goto nullreturn;
 801b20a:	bf00      	nop
 801b20c:	e000      	b.n	801b210 <ip4_reass+0x354>
  }

nullreturn:
 801b20e:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 801b210:	4b0b      	ldr	r3, [pc, #44]	; (801b240 <ip4_reass+0x384>)
 801b212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801b214:	3301      	adds	r3, #1
 801b216:	b29a      	uxth	r2, r3
 801b218:	4b09      	ldr	r3, [pc, #36]	; (801b240 <ip4_reass+0x384>)
 801b21a:	86da      	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
 801b21c:	6878      	ldr	r0, [r7, #4]
 801b21e:	f7f4 ffb7 	bl	8010190 <pbuf_free>
  return NULL;
 801b222:	2300      	movs	r3, #0
}
 801b224:	4618      	mov	r0, r3
 801b226:	3738      	adds	r7, #56	; 0x38
 801b228:	46bd      	mov	sp, r7
 801b22a:	bd80      	pop	{r7, pc}
 801b22c:	20007530 	.word	0x20007530
 801b230:	20007534 	.word	0x20007534
 801b234:	080231a4 	.word	0x080231a4
 801b238:	08023314 	.word	0x08023314
 801b23c:	080231ec 	.word	0x080231ec
 801b240:	20007204 	.word	0x20007204
 801b244:	08023330 	.word	0x08023330
 801b248:	0802333c 	.word	0x0802333c

0801b24c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801b24c:	b580      	push	{r7, lr}
 801b24e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801b250:	2005      	movs	r0, #5
 801b252:	f7f4 f919 	bl	800f488 <memp_malloc>
 801b256:	4603      	mov	r3, r0
}
 801b258:	4618      	mov	r0, r3
 801b25a:	bd80      	pop	{r7, pc}

0801b25c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801b25c:	b580      	push	{r7, lr}
 801b25e:	b082      	sub	sp, #8
 801b260:	af00      	add	r7, sp, #0
 801b262:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	2b00      	cmp	r3, #0
 801b268:	d106      	bne.n	801b278 <ip_frag_free_pbuf_custom_ref+0x1c>
 801b26a:	4b07      	ldr	r3, [pc, #28]	; (801b288 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801b26c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801b270:	4906      	ldr	r1, [pc, #24]	; (801b28c <ip_frag_free_pbuf_custom_ref+0x30>)
 801b272:	4807      	ldr	r0, [pc, #28]	; (801b290 <ip_frag_free_pbuf_custom_ref+0x34>)
 801b274:	f001 fa5c 	bl	801c730 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801b278:	6879      	ldr	r1, [r7, #4]
 801b27a:	2005      	movs	r0, #5
 801b27c:	f7f4 f956 	bl	800f52c <memp_free>
}
 801b280:	bf00      	nop
 801b282:	3708      	adds	r7, #8
 801b284:	46bd      	mov	sp, r7
 801b286:	bd80      	pop	{r7, pc}
 801b288:	080231a4 	.word	0x080231a4
 801b28c:	0802335c 	.word	0x0802335c
 801b290:	080231ec 	.word	0x080231ec

0801b294 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801b294:	b580      	push	{r7, lr}
 801b296:	b084      	sub	sp, #16
 801b298:	af00      	add	r7, sp, #0
 801b29a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801b2a0:	68fb      	ldr	r3, [r7, #12]
 801b2a2:	2b00      	cmp	r3, #0
 801b2a4:	d106      	bne.n	801b2b4 <ipfrag_free_pbuf_custom+0x20>
 801b2a6:	4b11      	ldr	r3, [pc, #68]	; (801b2ec <ipfrag_free_pbuf_custom+0x58>)
 801b2a8:	f240 22ce 	movw	r2, #718	; 0x2ce
 801b2ac:	4910      	ldr	r1, [pc, #64]	; (801b2f0 <ipfrag_free_pbuf_custom+0x5c>)
 801b2ae:	4811      	ldr	r0, [pc, #68]	; (801b2f4 <ipfrag_free_pbuf_custom+0x60>)
 801b2b0:	f001 fa3e 	bl	801c730 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801b2b4:	68fa      	ldr	r2, [r7, #12]
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	429a      	cmp	r2, r3
 801b2ba:	d006      	beq.n	801b2ca <ipfrag_free_pbuf_custom+0x36>
 801b2bc:	4b0b      	ldr	r3, [pc, #44]	; (801b2ec <ipfrag_free_pbuf_custom+0x58>)
 801b2be:	f240 22cf 	movw	r2, #719	; 0x2cf
 801b2c2:	490d      	ldr	r1, [pc, #52]	; (801b2f8 <ipfrag_free_pbuf_custom+0x64>)
 801b2c4:	480b      	ldr	r0, [pc, #44]	; (801b2f4 <ipfrag_free_pbuf_custom+0x60>)
 801b2c6:	f001 fa33 	bl	801c730 <iprintf>
  if (pcr->original != NULL) {
 801b2ca:	68fb      	ldr	r3, [r7, #12]
 801b2cc:	695b      	ldr	r3, [r3, #20]
 801b2ce:	2b00      	cmp	r3, #0
 801b2d0:	d004      	beq.n	801b2dc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801b2d2:	68fb      	ldr	r3, [r7, #12]
 801b2d4:	695b      	ldr	r3, [r3, #20]
 801b2d6:	4618      	mov	r0, r3
 801b2d8:	f7f4 ff5a 	bl	8010190 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801b2dc:	68f8      	ldr	r0, [r7, #12]
 801b2de:	f7ff ffbd 	bl	801b25c <ip_frag_free_pbuf_custom_ref>
}
 801b2e2:	bf00      	nop
 801b2e4:	3710      	adds	r7, #16
 801b2e6:	46bd      	mov	sp, r7
 801b2e8:	bd80      	pop	{r7, pc}
 801b2ea:	bf00      	nop
 801b2ec:	080231a4 	.word	0x080231a4
 801b2f0:	08023368 	.word	0x08023368
 801b2f4:	080231ec 	.word	0x080231ec
 801b2f8:	08023374 	.word	0x08023374

0801b2fc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801b2fc:	b580      	push	{r7, lr}
 801b2fe:	b094      	sub	sp, #80	; 0x50
 801b300:	af02      	add	r7, sp, #8
 801b302:	60f8      	str	r0, [r7, #12]
 801b304:	60b9      	str	r1, [r7, #8]
 801b306:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801b308:	2300      	movs	r3, #0
 801b30a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801b30e:	68bb      	ldr	r3, [r7, #8]
 801b310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b312:	3b14      	subs	r3, #20
 801b314:	2b00      	cmp	r3, #0
 801b316:	da00      	bge.n	801b31a <ip4_frag+0x1e>
 801b318:	3307      	adds	r3, #7
 801b31a:	10db      	asrs	r3, r3, #3
 801b31c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801b31e:	2314      	movs	r3, #20
 801b320:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801b322:	68fb      	ldr	r3, [r7, #12]
 801b324:	685b      	ldr	r3, [r3, #4]
 801b326:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801b328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b32a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801b32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b32e:	781b      	ldrb	r3, [r3, #0]
 801b330:	f003 030f 	and.w	r3, r3, #15
 801b334:	b2db      	uxtb	r3, r3
 801b336:	009b      	lsls	r3, r3, #2
 801b338:	b2db      	uxtb	r3, r3
 801b33a:	2b14      	cmp	r3, #20
 801b33c:	d002      	beq.n	801b344 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801b33e:	f06f 0305 	mvn.w	r3, #5
 801b342:	e124      	b.n	801b58e <ip4_frag+0x292>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801b344:	68fb      	ldr	r3, [r7, #12]
 801b346:	895b      	ldrh	r3, [r3, #10]
 801b348:	2b13      	cmp	r3, #19
 801b34a:	d809      	bhi.n	801b360 <ip4_frag+0x64>
 801b34c:	4b92      	ldr	r3, [pc, #584]	; (801b598 <ip4_frag+0x29c>)
 801b34e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801b352:	4992      	ldr	r1, [pc, #584]	; (801b59c <ip4_frag+0x2a0>)
 801b354:	4892      	ldr	r0, [pc, #584]	; (801b5a0 <ip4_frag+0x2a4>)
 801b356:	f001 f9eb 	bl	801c730 <iprintf>
 801b35a:	f06f 0305 	mvn.w	r3, #5
 801b35e:	e116      	b.n	801b58e <ip4_frag+0x292>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801b360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b362:	88db      	ldrh	r3, [r3, #6]
 801b364:	b29b      	uxth	r3, r3
 801b366:	4618      	mov	r0, r3
 801b368:	f7f3 f87c 	bl	800e464 <lwip_htons>
 801b36c:	4603      	mov	r3, r0
 801b36e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801b370:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b372:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b376:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801b37a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b37c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b380:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801b382:	68fb      	ldr	r3, [r7, #12]
 801b384:	891b      	ldrh	r3, [r3, #8]
 801b386:	3b14      	subs	r3, #20
 801b388:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801b38c:	e0e7      	b.n	801b55e <ip4_frag+0x262>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801b38e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b390:	00db      	lsls	r3, r3, #3
 801b392:	b29b      	uxth	r3, r3
 801b394:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b398:	4293      	cmp	r3, r2
 801b39a:	bf28      	it	cs
 801b39c:	4613      	movcs	r3, r2
 801b39e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801b3a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b3a4:	2114      	movs	r1, #20
 801b3a6:	200e      	movs	r0, #14
 801b3a8:	f7f4 fc0e 	bl	800fbc8 <pbuf_alloc>
 801b3ac:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801b3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3b0:	2b00      	cmp	r3, #0
 801b3b2:	f000 80e2 	beq.w	801b57a <ip4_frag+0x27e>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801b3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3b8:	895b      	ldrh	r3, [r3, #10]
 801b3ba:	2b13      	cmp	r3, #19
 801b3bc:	d806      	bhi.n	801b3cc <ip4_frag+0xd0>
 801b3be:	4b76      	ldr	r3, [pc, #472]	; (801b598 <ip4_frag+0x29c>)
 801b3c0:	f44f 7249 	mov.w	r2, #804	; 0x324
 801b3c4:	4977      	ldr	r1, [pc, #476]	; (801b5a4 <ip4_frag+0x2a8>)
 801b3c6:	4876      	ldr	r0, [pc, #472]	; (801b5a0 <ip4_frag+0x2a4>)
 801b3c8:	f001 f9b2 	bl	801c730 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801b3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3ce:	685b      	ldr	r3, [r3, #4]
 801b3d0:	2214      	movs	r2, #20
 801b3d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b3d4:	4618      	mov	r0, r3
 801b3d6:	f000 fa3d 	bl	801b854 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801b3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3dc:	685b      	ldr	r3, [r3, #4]
 801b3de:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801b3e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b3e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801b3e6:	e064      	b.n	801b4b2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801b3e8:	68fb      	ldr	r3, [r7, #12]
 801b3ea:	895a      	ldrh	r2, [r3, #10]
 801b3ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b3ee:	1ad3      	subs	r3, r2, r3
 801b3f0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801b3f2:	68fb      	ldr	r3, [r7, #12]
 801b3f4:	895b      	ldrh	r3, [r3, #10]
 801b3f6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b3f8:	429a      	cmp	r2, r3
 801b3fa:	d906      	bls.n	801b40a <ip4_frag+0x10e>
 801b3fc:	4b66      	ldr	r3, [pc, #408]	; (801b598 <ip4_frag+0x29c>)
 801b3fe:	f240 322d 	movw	r2, #813	; 0x32d
 801b402:	4969      	ldr	r1, [pc, #420]	; (801b5a8 <ip4_frag+0x2ac>)
 801b404:	4866      	ldr	r0, [pc, #408]	; (801b5a0 <ip4_frag+0x2a4>)
 801b406:	f001 f993 	bl	801c730 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801b40a:	8bfa      	ldrh	r2, [r7, #30]
 801b40c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b410:	4293      	cmp	r3, r2
 801b412:	bf28      	it	cs
 801b414:	4613      	movcs	r3, r2
 801b416:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801b41a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b41e:	2b00      	cmp	r3, #0
 801b420:	d105      	bne.n	801b42e <ip4_frag+0x132>
        poff = 0;
 801b422:	2300      	movs	r3, #0
 801b424:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801b426:	68fb      	ldr	r3, [r7, #12]
 801b428:	681b      	ldr	r3, [r3, #0]
 801b42a:	60fb      	str	r3, [r7, #12]
        continue;
 801b42c:	e041      	b.n	801b4b2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801b42e:	f7ff ff0d 	bl	801b24c <ip_frag_alloc_pbuf_custom_ref>
 801b432:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801b434:	69bb      	ldr	r3, [r7, #24]
 801b436:	2b00      	cmp	r3, #0
 801b438:	d103      	bne.n	801b442 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801b43a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b43c:	f7f4 fea8 	bl	8010190 <pbuf_free>
        goto memerr;
 801b440:	e09c      	b.n	801b57c <ip4_frag+0x280>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b442:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801b444:	68fb      	ldr	r3, [r7, #12]
 801b446:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801b448:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801b44a:	4413      	add	r3, r2
 801b44c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801b450:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801b454:	9201      	str	r2, [sp, #4]
 801b456:	9300      	str	r3, [sp, #0]
 801b458:	4603      	mov	r3, r0
 801b45a:	2241      	movs	r2, #65	; 0x41
 801b45c:	2000      	movs	r0, #0
 801b45e:	f7f4 fcdd 	bl	800fe1c <pbuf_alloced_custom>
 801b462:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801b464:	697b      	ldr	r3, [r7, #20]
 801b466:	2b00      	cmp	r3, #0
 801b468:	d106      	bne.n	801b478 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801b46a:	69b8      	ldr	r0, [r7, #24]
 801b46c:	f7ff fef6 	bl	801b25c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801b470:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b472:	f7f4 fe8d 	bl	8010190 <pbuf_free>
        goto memerr;
 801b476:	e081      	b.n	801b57c <ip4_frag+0x280>
      }
      pbuf_ref(p);
 801b478:	68f8      	ldr	r0, [r7, #12]
 801b47a:	f7f4 ff29 	bl	80102d0 <pbuf_ref>
      pcr->original = p;
 801b47e:	69bb      	ldr	r3, [r7, #24]
 801b480:	68fa      	ldr	r2, [r7, #12]
 801b482:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801b484:	69bb      	ldr	r3, [r7, #24]
 801b486:	4a49      	ldr	r2, [pc, #292]	; (801b5ac <ip4_frag+0x2b0>)
 801b488:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801b48a:	6979      	ldr	r1, [r7, #20]
 801b48c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b48e:	f7f4 ff41 	bl	8010314 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801b492:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801b496:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b49a:	1ad3      	subs	r3, r2, r3
 801b49c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801b4a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b4a4:	2b00      	cmp	r3, #0
 801b4a6:	d004      	beq.n	801b4b2 <ip4_frag+0x1b6>
        poff = 0;
 801b4a8:	2300      	movs	r3, #0
 801b4aa:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801b4ac:	68fb      	ldr	r3, [r7, #12]
 801b4ae:	681b      	ldr	r3, [r3, #0]
 801b4b0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801b4b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801b4b6:	2b00      	cmp	r3, #0
 801b4b8:	d196      	bne.n	801b3e8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801b4ba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801b4bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801b4c0:	4413      	add	r3, r2
 801b4c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801b4c4:	68bb      	ldr	r3, [r7, #8]
 801b4c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b4c8:	f1a3 0213 	sub.w	r2, r3, #19
 801b4cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b4d0:	429a      	cmp	r2, r3
 801b4d2:	bfcc      	ite	gt
 801b4d4:	2301      	movgt	r3, #1
 801b4d6:	2300      	movle	r3, #0
 801b4d8:	b2db      	uxtb	r3, r3
 801b4da:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801b4dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801b4e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b4e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801b4e6:	6a3b      	ldr	r3, [r7, #32]
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	d002      	beq.n	801b4f2 <ip4_frag+0x1f6>
 801b4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	d003      	beq.n	801b4fa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801b4f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b4f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801b4f8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801b4fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801b4fc:	4618      	mov	r0, r3
 801b4fe:	f7f2 ffb1 	bl	800e464 <lwip_htons>
 801b502:	4603      	mov	r3, r0
 801b504:	461a      	mov	r2, r3
 801b506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b508:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801b50a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b50c:	3314      	adds	r3, #20
 801b50e:	b29b      	uxth	r3, r3
 801b510:	4618      	mov	r0, r3
 801b512:	f7f2 ffa7 	bl	800e464 <lwip_htons>
 801b516:	4603      	mov	r3, r0
 801b518:	461a      	mov	r2, r3
 801b51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b51c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801b51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b520:	2200      	movs	r2, #0
 801b522:	729a      	strb	r2, [r3, #10]
 801b524:	2200      	movs	r2, #0
 801b526:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801b528:	68bb      	ldr	r3, [r7, #8]
 801b52a:	695b      	ldr	r3, [r3, #20]
 801b52c:	687a      	ldr	r2, [r7, #4]
 801b52e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b530:	68b8      	ldr	r0, [r7, #8]
 801b532:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 801b534:	4b1e      	ldr	r3, [pc, #120]	; (801b5b0 <ip4_frag+0x2b4>)
 801b536:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801b538:	3301      	adds	r3, #1
 801b53a:	b29a      	uxth	r2, r3
 801b53c:	4b1c      	ldr	r3, [pc, #112]	; (801b5b0 <ip4_frag+0x2b4>)
 801b53e:	861a      	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801b540:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b542:	f7f4 fe25 	bl	8010190 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801b546:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b54a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b54c:	1ad3      	subs	r3, r2, r3
 801b54e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801b552:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801b556:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b558:	4413      	add	r3, r2
 801b55a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801b55e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b562:	2b00      	cmp	r3, #0
 801b564:	f47f af13 	bne.w	801b38e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
 801b568:	4b11      	ldr	r3, [pc, #68]	; (801b5b0 <ip4_frag+0x2b4>)
 801b56a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 801b56e:	3301      	adds	r3, #1
 801b570:	4a0f      	ldr	r2, [pc, #60]	; (801b5b0 <ip4_frag+0x2b4>)
 801b572:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
  return ERR_OK;
 801b576:	2300      	movs	r3, #0
 801b578:	e009      	b.n	801b58e <ip4_frag+0x292>
      goto memerr;
 801b57a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
 801b57c:	4b0c      	ldr	r3, [pc, #48]	; (801b5b0 <ip4_frag+0x2b4>)
 801b57e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 801b582:	3301      	adds	r3, #1
 801b584:	4a0a      	ldr	r2, [pc, #40]	; (801b5b0 <ip4_frag+0x2b4>)
 801b586:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
  return ERR_MEM;
 801b58a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b58e:	4618      	mov	r0, r3
 801b590:	3748      	adds	r7, #72	; 0x48
 801b592:	46bd      	mov	sp, r7
 801b594:	bd80      	pop	{r7, pc}
 801b596:	bf00      	nop
 801b598:	080231a4 	.word	0x080231a4
 801b59c:	08023380 	.word	0x08023380
 801b5a0:	080231ec 	.word	0x080231ec
 801b5a4:	0802339c 	.word	0x0802339c
 801b5a8:	080233bc 	.word	0x080233bc
 801b5ac:	0801b295 	.word	0x0801b295
 801b5b0:	20007204 	.word	0x20007204

0801b5b4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801b5b4:	b580      	push	{r7, lr}
 801b5b6:	b086      	sub	sp, #24
 801b5b8:	af00      	add	r7, sp, #0
 801b5ba:	6078      	str	r0, [r7, #4]
 801b5bc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801b5be:	230e      	movs	r3, #14
 801b5c0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	895b      	ldrh	r3, [r3, #10]
 801b5c6:	2b0e      	cmp	r3, #14
 801b5c8:	d811      	bhi.n	801b5ee <ethernet_input+0x3a>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 801b5ca:	4b56      	ldr	r3, [pc, #344]	; (801b724 <ethernet_input+0x170>)
 801b5cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b5ce:	3301      	adds	r3, #1
 801b5d0:	b29a      	uxth	r2, r3
 801b5d2:	4b54      	ldr	r3, [pc, #336]	; (801b724 <ethernet_input+0x170>)
 801b5d4:	851a      	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 801b5d6:	4b53      	ldr	r3, [pc, #332]	; (801b724 <ethernet_input+0x170>)
 801b5d8:	8bdb      	ldrh	r3, [r3, #30]
 801b5da:	3301      	adds	r3, #1
 801b5dc:	b29a      	uxth	r2, r3
 801b5de:	4b51      	ldr	r3, [pc, #324]	; (801b724 <ethernet_input+0x170>)
 801b5e0:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
 801b5e2:	683b      	ldr	r3, [r7, #0]
 801b5e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b5e6:	1c5a      	adds	r2, r3, #1
 801b5e8:	683b      	ldr	r3, [r7, #0]
 801b5ea:	651a      	str	r2, [r3, #80]	; 0x50
    goto free_and_return;
 801b5ec:	e092      	b.n	801b714 <ethernet_input+0x160>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	7bdb      	ldrb	r3, [r3, #15]
 801b5f2:	2b00      	cmp	r3, #0
 801b5f4:	d106      	bne.n	801b604 <ethernet_input+0x50>
    p->if_idx = netif_get_index(netif);
 801b5f6:	683b      	ldr	r3, [r7, #0]
 801b5f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801b5fc:	3301      	adds	r3, #1
 801b5fe:	b2da      	uxtb	r2, r3
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	685b      	ldr	r3, [r3, #4]
 801b608:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801b60a:	693b      	ldr	r3, [r7, #16]
 801b60c:	7b1a      	ldrb	r2, [r3, #12]
 801b60e:	7b5b      	ldrb	r3, [r3, #13]
 801b610:	021b      	lsls	r3, r3, #8
 801b612:	4313      	orrs	r3, r2
 801b614:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801b616:	693b      	ldr	r3, [r7, #16]
 801b618:	781b      	ldrb	r3, [r3, #0]
 801b61a:	f003 0301 	and.w	r3, r3, #1
 801b61e:	2b00      	cmp	r3, #0
 801b620:	d023      	beq.n	801b66a <ethernet_input+0xb6>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801b622:	693b      	ldr	r3, [r7, #16]
 801b624:	781b      	ldrb	r3, [r3, #0]
 801b626:	2b01      	cmp	r3, #1
 801b628:	d10f      	bne.n	801b64a <ethernet_input+0x96>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b62a:	693b      	ldr	r3, [r7, #16]
 801b62c:	785b      	ldrb	r3, [r3, #1]
 801b62e:	2b00      	cmp	r3, #0
 801b630:	d11b      	bne.n	801b66a <ethernet_input+0xb6>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801b632:	693b      	ldr	r3, [r7, #16]
 801b634:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b636:	2b5e      	cmp	r3, #94	; 0x5e
 801b638:	d117      	bne.n	801b66a <ethernet_input+0xb6>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801b63a:	687b      	ldr	r3, [r7, #4]
 801b63c:	7b5b      	ldrb	r3, [r3, #13]
 801b63e:	f043 0310 	orr.w	r3, r3, #16
 801b642:	b2da      	uxtb	r2, r3
 801b644:	687b      	ldr	r3, [r7, #4]
 801b646:	735a      	strb	r2, [r3, #13]
 801b648:	e00f      	b.n	801b66a <ethernet_input+0xb6>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801b64a:	693b      	ldr	r3, [r7, #16]
 801b64c:	2206      	movs	r2, #6
 801b64e:	4936      	ldr	r1, [pc, #216]	; (801b728 <ethernet_input+0x174>)
 801b650:	4618      	mov	r0, r3
 801b652:	f000 f8ef 	bl	801b834 <memcmp>
 801b656:	4603      	mov	r3, r0
 801b658:	2b00      	cmp	r3, #0
 801b65a:	d106      	bne.n	801b66a <ethernet_input+0xb6>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	7b5b      	ldrb	r3, [r3, #13]
 801b660:	f043 0308 	orr.w	r3, r3, #8
 801b664:	b2da      	uxtb	r2, r3
 801b666:	687b      	ldr	r3, [r7, #4]
 801b668:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801b66a:	89fb      	ldrh	r3, [r7, #14]
 801b66c:	2b08      	cmp	r3, #8
 801b66e:	d003      	beq.n	801b678 <ethernet_input+0xc4>
 801b670:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801b674:	d014      	beq.n	801b6a0 <ethernet_input+0xec>
 801b676:	e034      	b.n	801b6e2 <ethernet_input+0x12e>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b678:	683b      	ldr	r3, [r7, #0]
 801b67a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b67e:	f003 0308 	and.w	r3, r3, #8
 801b682:	2b00      	cmp	r3, #0
 801b684:	d041      	beq.n	801b70a <ethernet_input+0x156>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b686:	8afb      	ldrh	r3, [r7, #22]
 801b688:	4619      	mov	r1, r3
 801b68a:	6878      	ldr	r0, [r7, #4]
 801b68c:	f7f4 fcfa 	bl	8010084 <pbuf_remove_header>
 801b690:	4603      	mov	r3, r0
 801b692:	2b00      	cmp	r3, #0
 801b694:	d13b      	bne.n	801b70e <ethernet_input+0x15a>
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 801b696:	6839      	ldr	r1, [r7, #0]
 801b698:	6878      	ldr	r0, [r7, #4]
 801b69a:	f7fe fca9 	bl	8019ff0 <ip4_input>
      }
      break;
 801b69e:	e032      	b.n	801b706 <ethernet_input+0x152>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b6a0:	683b      	ldr	r3, [r7, #0]
 801b6a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b6a6:	f003 0308 	and.w	r3, r3, #8
 801b6aa:	2b00      	cmp	r3, #0
 801b6ac:	d031      	beq.n	801b712 <ethernet_input+0x15e>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b6ae:	8afb      	ldrh	r3, [r7, #22]
 801b6b0:	4619      	mov	r1, r3
 801b6b2:	6878      	ldr	r0, [r7, #4]
 801b6b4:	f7f4 fce6 	bl	8010084 <pbuf_remove_header>
 801b6b8:	4603      	mov	r3, r0
 801b6ba:	2b00      	cmp	r3, #0
 801b6bc:	d00c      	beq.n	801b6d8 <ethernet_input+0x124>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 801b6be:	4b19      	ldr	r3, [pc, #100]	; (801b724 <ethernet_input+0x170>)
 801b6c0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801b6c2:	3301      	adds	r3, #1
 801b6c4:	b29a      	uxth	r2, r3
 801b6c6:	4b17      	ldr	r3, [pc, #92]	; (801b724 <ethernet_input+0x170>)
 801b6c8:	845a      	strh	r2, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 801b6ca:	4b16      	ldr	r3, [pc, #88]	; (801b724 <ethernet_input+0x170>)
 801b6cc:	8bdb      	ldrh	r3, [r3, #30]
 801b6ce:	3301      	adds	r3, #1
 801b6d0:	b29a      	uxth	r2, r3
 801b6d2:	4b14      	ldr	r3, [pc, #80]	; (801b724 <ethernet_input+0x170>)
 801b6d4:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 801b6d6:	e01d      	b.n	801b714 <ethernet_input+0x160>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 801b6d8:	6839      	ldr	r1, [r7, #0]
 801b6da:	6878      	ldr	r0, [r7, #4]
 801b6dc:	f7fd fcec 	bl	80190b8 <etharp_input>
      }
      break;
 801b6e0:	e011      	b.n	801b706 <ethernet_input+0x152>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 801b6e2:	4b10      	ldr	r3, [pc, #64]	; (801b724 <ethernet_input+0x170>)
 801b6e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b6e6:	3301      	adds	r3, #1
 801b6e8:	b29a      	uxth	r2, r3
 801b6ea:	4b0e      	ldr	r3, [pc, #56]	; (801b724 <ethernet_input+0x170>)
 801b6ec:	851a      	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 801b6ee:	4b0d      	ldr	r3, [pc, #52]	; (801b724 <ethernet_input+0x170>)
 801b6f0:	8bdb      	ldrh	r3, [r3, #30]
 801b6f2:	3301      	adds	r3, #1
 801b6f4:	b29a      	uxth	r2, r3
 801b6f6:	4b0b      	ldr	r3, [pc, #44]	; (801b724 <ethernet_input+0x170>)
 801b6f8:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
 801b6fa:	683b      	ldr	r3, [r7, #0]
 801b6fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b6fe:	1c5a      	adds	r2, r3, #1
 801b700:	683b      	ldr	r3, [r7, #0]
 801b702:	655a      	str	r2, [r3, #84]	; 0x54
      goto free_and_return;
 801b704:	e006      	b.n	801b714 <ethernet_input+0x160>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801b706:	2300      	movs	r3, #0
 801b708:	e008      	b.n	801b71c <ethernet_input+0x168>
        goto free_and_return;
 801b70a:	bf00      	nop
 801b70c:	e002      	b.n	801b714 <ethernet_input+0x160>
        goto free_and_return;
 801b70e:	bf00      	nop
 801b710:	e000      	b.n	801b714 <ethernet_input+0x160>
        goto free_and_return;
 801b712:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801b714:	6878      	ldr	r0, [r7, #4]
 801b716:	f7f4 fd3b 	bl	8010190 <pbuf_free>
  return ERR_OK;
 801b71a:	2300      	movs	r3, #0
}
 801b71c:	4618      	mov	r0, r3
 801b71e:	3718      	adds	r7, #24
 801b720:	46bd      	mov	sp, r7
 801b722:	bd80      	pop	{r7, pc}
 801b724:	20007204 	.word	0x20007204
 801b728:	08024540 	.word	0x08024540

0801b72c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801b72c:	b580      	push	{r7, lr}
 801b72e:	b086      	sub	sp, #24
 801b730:	af00      	add	r7, sp, #0
 801b732:	60f8      	str	r0, [r7, #12]
 801b734:	60b9      	str	r1, [r7, #8]
 801b736:	607a      	str	r2, [r7, #4]
 801b738:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801b73a:	8c3b      	ldrh	r3, [r7, #32]
 801b73c:	4618      	mov	r0, r3
 801b73e:	f7f2 fe91 	bl	800e464 <lwip_htons>
 801b742:	4603      	mov	r3, r0
 801b744:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801b746:	210e      	movs	r1, #14
 801b748:	68b8      	ldr	r0, [r7, #8]
 801b74a:	f7f4 fc8b 	bl	8010064 <pbuf_add_header>
 801b74e:	4603      	mov	r3, r0
 801b750:	2b00      	cmp	r3, #0
 801b752:	d125      	bne.n	801b7a0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801b754:	68bb      	ldr	r3, [r7, #8]
 801b756:	685b      	ldr	r3, [r3, #4]
 801b758:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801b75a:	693b      	ldr	r3, [r7, #16]
 801b75c:	8afa      	ldrh	r2, [r7, #22]
 801b75e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801b760:	693b      	ldr	r3, [r7, #16]
 801b762:	2206      	movs	r2, #6
 801b764:	6839      	ldr	r1, [r7, #0]
 801b766:	4618      	mov	r0, r3
 801b768:	f000 f874 	bl	801b854 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801b76c:	693b      	ldr	r3, [r7, #16]
 801b76e:	3306      	adds	r3, #6
 801b770:	2206      	movs	r2, #6
 801b772:	6879      	ldr	r1, [r7, #4]
 801b774:	4618      	mov	r0, r3
 801b776:	f000 f86d 	bl	801b854 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801b77a:	68fb      	ldr	r3, [r7, #12]
 801b77c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b780:	2b06      	cmp	r3, #6
 801b782:	d006      	beq.n	801b792 <ethernet_output+0x66>
 801b784:	4b0d      	ldr	r3, [pc, #52]	; (801b7bc <ethernet_output+0x90>)
 801b786:	f44f 7299 	mov.w	r2, #306	; 0x132
 801b78a:	490d      	ldr	r1, [pc, #52]	; (801b7c0 <ethernet_output+0x94>)
 801b78c:	480d      	ldr	r0, [pc, #52]	; (801b7c4 <ethernet_output+0x98>)
 801b78e:	f000 ffcf 	bl	801c730 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801b792:	68fb      	ldr	r3, [r7, #12]
 801b794:	699b      	ldr	r3, [r3, #24]
 801b796:	68b9      	ldr	r1, [r7, #8]
 801b798:	68f8      	ldr	r0, [r7, #12]
 801b79a:	4798      	blx	r3
 801b79c:	4603      	mov	r3, r0
 801b79e:	e008      	b.n	801b7b2 <ethernet_output+0x86>
      goto pbuf_header_failed;
 801b7a0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 801b7a2:	4b09      	ldr	r3, [pc, #36]	; (801b7c8 <ethernet_output+0x9c>)
 801b7a4:	895b      	ldrh	r3, [r3, #10]
 801b7a6:	3301      	adds	r3, #1
 801b7a8:	b29a      	uxth	r2, r3
 801b7aa:	4b07      	ldr	r3, [pc, #28]	; (801b7c8 <ethernet_output+0x9c>)
 801b7ac:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 801b7ae:	f06f 0301 	mvn.w	r3, #1
}
 801b7b2:	4618      	mov	r0, r3
 801b7b4:	3718      	adds	r7, #24
 801b7b6:	46bd      	mov	sp, r7
 801b7b8:	bd80      	pop	{r7, pc}
 801b7ba:	bf00      	nop
 801b7bc:	080233cc 	.word	0x080233cc
 801b7c0:	08023404 	.word	0x08023404
 801b7c4:	08023438 	.word	0x08023438
 801b7c8:	20007204 	.word	0x20007204

0801b7cc <calloc>:
 801b7cc:	4b02      	ldr	r3, [pc, #8]	; (801b7d8 <calloc+0xc>)
 801b7ce:	460a      	mov	r2, r1
 801b7d0:	4601      	mov	r1, r0
 801b7d2:	6818      	ldr	r0, [r3, #0]
 801b7d4:	f000 b86e 	b.w	801b8b4 <_calloc_r>
 801b7d8:	20000068 	.word	0x20000068

0801b7dc <__libc_init_array>:
 801b7dc:	b570      	push	{r4, r5, r6, lr}
 801b7de:	4d0d      	ldr	r5, [pc, #52]	; (801b814 <__libc_init_array+0x38>)
 801b7e0:	4c0d      	ldr	r4, [pc, #52]	; (801b818 <__libc_init_array+0x3c>)
 801b7e2:	1b64      	subs	r4, r4, r5
 801b7e4:	10a4      	asrs	r4, r4, #2
 801b7e6:	2600      	movs	r6, #0
 801b7e8:	42a6      	cmp	r6, r4
 801b7ea:	d109      	bne.n	801b800 <__libc_init_array+0x24>
 801b7ec:	4d0b      	ldr	r5, [pc, #44]	; (801b81c <__libc_init_array+0x40>)
 801b7ee:	4c0c      	ldr	r4, [pc, #48]	; (801b820 <__libc_init_array+0x44>)
 801b7f0:	f004 fc00 	bl	801fff4 <_init>
 801b7f4:	1b64      	subs	r4, r4, r5
 801b7f6:	10a4      	asrs	r4, r4, #2
 801b7f8:	2600      	movs	r6, #0
 801b7fa:	42a6      	cmp	r6, r4
 801b7fc:	d105      	bne.n	801b80a <__libc_init_array+0x2e>
 801b7fe:	bd70      	pop	{r4, r5, r6, pc}
 801b800:	f855 3b04 	ldr.w	r3, [r5], #4
 801b804:	4798      	blx	r3
 801b806:	3601      	adds	r6, #1
 801b808:	e7ee      	b.n	801b7e8 <__libc_init_array+0xc>
 801b80a:	f855 3b04 	ldr.w	r3, [r5], #4
 801b80e:	4798      	blx	r3
 801b810:	3601      	adds	r6, #1
 801b812:	e7f2      	b.n	801b7fa <__libc_init_array+0x1e>
 801b814:	08024a58 	.word	0x08024a58
 801b818:	08024a58 	.word	0x08024a58
 801b81c:	08024a58 	.word	0x08024a58
 801b820:	08024a5c 	.word	0x08024a5c

0801b824 <malloc>:
 801b824:	4b02      	ldr	r3, [pc, #8]	; (801b830 <malloc+0xc>)
 801b826:	4601      	mov	r1, r0
 801b828:	6818      	ldr	r0, [r3, #0]
 801b82a:	f000 b8c5 	b.w	801b9b8 <_malloc_r>
 801b82e:	bf00      	nop
 801b830:	20000068 	.word	0x20000068

0801b834 <memcmp>:
 801b834:	b510      	push	{r4, lr}
 801b836:	3901      	subs	r1, #1
 801b838:	4402      	add	r2, r0
 801b83a:	4290      	cmp	r0, r2
 801b83c:	d101      	bne.n	801b842 <memcmp+0xe>
 801b83e:	2000      	movs	r0, #0
 801b840:	e005      	b.n	801b84e <memcmp+0x1a>
 801b842:	7803      	ldrb	r3, [r0, #0]
 801b844:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b848:	42a3      	cmp	r3, r4
 801b84a:	d001      	beq.n	801b850 <memcmp+0x1c>
 801b84c:	1b18      	subs	r0, r3, r4
 801b84e:	bd10      	pop	{r4, pc}
 801b850:	3001      	adds	r0, #1
 801b852:	e7f2      	b.n	801b83a <memcmp+0x6>

0801b854 <memcpy>:
 801b854:	440a      	add	r2, r1
 801b856:	4291      	cmp	r1, r2
 801b858:	f100 33ff 	add.w	r3, r0, #4294967295
 801b85c:	d100      	bne.n	801b860 <memcpy+0xc>
 801b85e:	4770      	bx	lr
 801b860:	b510      	push	{r4, lr}
 801b862:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b866:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b86a:	4291      	cmp	r1, r2
 801b86c:	d1f9      	bne.n	801b862 <memcpy+0xe>
 801b86e:	bd10      	pop	{r4, pc}

0801b870 <memmove>:
 801b870:	4288      	cmp	r0, r1
 801b872:	b510      	push	{r4, lr}
 801b874:	eb01 0402 	add.w	r4, r1, r2
 801b878:	d902      	bls.n	801b880 <memmove+0x10>
 801b87a:	4284      	cmp	r4, r0
 801b87c:	4623      	mov	r3, r4
 801b87e:	d807      	bhi.n	801b890 <memmove+0x20>
 801b880:	1e43      	subs	r3, r0, #1
 801b882:	42a1      	cmp	r1, r4
 801b884:	d008      	beq.n	801b898 <memmove+0x28>
 801b886:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b88a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b88e:	e7f8      	b.n	801b882 <memmove+0x12>
 801b890:	4402      	add	r2, r0
 801b892:	4601      	mov	r1, r0
 801b894:	428a      	cmp	r2, r1
 801b896:	d100      	bne.n	801b89a <memmove+0x2a>
 801b898:	bd10      	pop	{r4, pc}
 801b89a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b89e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b8a2:	e7f7      	b.n	801b894 <memmove+0x24>

0801b8a4 <memset>:
 801b8a4:	4402      	add	r2, r0
 801b8a6:	4603      	mov	r3, r0
 801b8a8:	4293      	cmp	r3, r2
 801b8aa:	d100      	bne.n	801b8ae <memset+0xa>
 801b8ac:	4770      	bx	lr
 801b8ae:	f803 1b01 	strb.w	r1, [r3], #1
 801b8b2:	e7f9      	b.n	801b8a8 <memset+0x4>

0801b8b4 <_calloc_r>:
 801b8b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b8b6:	fba1 2402 	umull	r2, r4, r1, r2
 801b8ba:	b94c      	cbnz	r4, 801b8d0 <_calloc_r+0x1c>
 801b8bc:	4611      	mov	r1, r2
 801b8be:	9201      	str	r2, [sp, #4]
 801b8c0:	f000 f87a 	bl	801b9b8 <_malloc_r>
 801b8c4:	9a01      	ldr	r2, [sp, #4]
 801b8c6:	4605      	mov	r5, r0
 801b8c8:	b930      	cbnz	r0, 801b8d8 <_calloc_r+0x24>
 801b8ca:	4628      	mov	r0, r5
 801b8cc:	b003      	add	sp, #12
 801b8ce:	bd30      	pop	{r4, r5, pc}
 801b8d0:	220c      	movs	r2, #12
 801b8d2:	6002      	str	r2, [r0, #0]
 801b8d4:	2500      	movs	r5, #0
 801b8d6:	e7f8      	b.n	801b8ca <_calloc_r+0x16>
 801b8d8:	4621      	mov	r1, r4
 801b8da:	f7ff ffe3 	bl	801b8a4 <memset>
 801b8de:	e7f4      	b.n	801b8ca <_calloc_r+0x16>

0801b8e0 <_free_r>:
 801b8e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b8e2:	2900      	cmp	r1, #0
 801b8e4:	d044      	beq.n	801b970 <_free_r+0x90>
 801b8e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b8ea:	9001      	str	r0, [sp, #4]
 801b8ec:	2b00      	cmp	r3, #0
 801b8ee:	f1a1 0404 	sub.w	r4, r1, #4
 801b8f2:	bfb8      	it	lt
 801b8f4:	18e4      	addlt	r4, r4, r3
 801b8f6:	f003 f8cf 	bl	801ea98 <__malloc_lock>
 801b8fa:	4a1e      	ldr	r2, [pc, #120]	; (801b974 <_free_r+0x94>)
 801b8fc:	9801      	ldr	r0, [sp, #4]
 801b8fe:	6813      	ldr	r3, [r2, #0]
 801b900:	b933      	cbnz	r3, 801b910 <_free_r+0x30>
 801b902:	6063      	str	r3, [r4, #4]
 801b904:	6014      	str	r4, [r2, #0]
 801b906:	b003      	add	sp, #12
 801b908:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b90c:	f003 b8ca 	b.w	801eaa4 <__malloc_unlock>
 801b910:	42a3      	cmp	r3, r4
 801b912:	d908      	bls.n	801b926 <_free_r+0x46>
 801b914:	6825      	ldr	r5, [r4, #0]
 801b916:	1961      	adds	r1, r4, r5
 801b918:	428b      	cmp	r3, r1
 801b91a:	bf01      	itttt	eq
 801b91c:	6819      	ldreq	r1, [r3, #0]
 801b91e:	685b      	ldreq	r3, [r3, #4]
 801b920:	1949      	addeq	r1, r1, r5
 801b922:	6021      	streq	r1, [r4, #0]
 801b924:	e7ed      	b.n	801b902 <_free_r+0x22>
 801b926:	461a      	mov	r2, r3
 801b928:	685b      	ldr	r3, [r3, #4]
 801b92a:	b10b      	cbz	r3, 801b930 <_free_r+0x50>
 801b92c:	42a3      	cmp	r3, r4
 801b92e:	d9fa      	bls.n	801b926 <_free_r+0x46>
 801b930:	6811      	ldr	r1, [r2, #0]
 801b932:	1855      	adds	r5, r2, r1
 801b934:	42a5      	cmp	r5, r4
 801b936:	d10b      	bne.n	801b950 <_free_r+0x70>
 801b938:	6824      	ldr	r4, [r4, #0]
 801b93a:	4421      	add	r1, r4
 801b93c:	1854      	adds	r4, r2, r1
 801b93e:	42a3      	cmp	r3, r4
 801b940:	6011      	str	r1, [r2, #0]
 801b942:	d1e0      	bne.n	801b906 <_free_r+0x26>
 801b944:	681c      	ldr	r4, [r3, #0]
 801b946:	685b      	ldr	r3, [r3, #4]
 801b948:	6053      	str	r3, [r2, #4]
 801b94a:	4421      	add	r1, r4
 801b94c:	6011      	str	r1, [r2, #0]
 801b94e:	e7da      	b.n	801b906 <_free_r+0x26>
 801b950:	d902      	bls.n	801b958 <_free_r+0x78>
 801b952:	230c      	movs	r3, #12
 801b954:	6003      	str	r3, [r0, #0]
 801b956:	e7d6      	b.n	801b906 <_free_r+0x26>
 801b958:	6825      	ldr	r5, [r4, #0]
 801b95a:	1961      	adds	r1, r4, r5
 801b95c:	428b      	cmp	r3, r1
 801b95e:	bf04      	itt	eq
 801b960:	6819      	ldreq	r1, [r3, #0]
 801b962:	685b      	ldreq	r3, [r3, #4]
 801b964:	6063      	str	r3, [r4, #4]
 801b966:	bf04      	itt	eq
 801b968:	1949      	addeq	r1, r1, r5
 801b96a:	6021      	streq	r1, [r4, #0]
 801b96c:	6054      	str	r4, [r2, #4]
 801b96e:	e7ca      	b.n	801b906 <_free_r+0x26>
 801b970:	b003      	add	sp, #12
 801b972:	bd30      	pop	{r4, r5, pc}
 801b974:	20007538 	.word	0x20007538

0801b978 <sbrk_aligned>:
 801b978:	b570      	push	{r4, r5, r6, lr}
 801b97a:	4e0e      	ldr	r6, [pc, #56]	; (801b9b4 <sbrk_aligned+0x3c>)
 801b97c:	460c      	mov	r4, r1
 801b97e:	6831      	ldr	r1, [r6, #0]
 801b980:	4605      	mov	r5, r0
 801b982:	b911      	cbnz	r1, 801b98a <sbrk_aligned+0x12>
 801b984:	f000 ff2a 	bl	801c7dc <_sbrk_r>
 801b988:	6030      	str	r0, [r6, #0]
 801b98a:	4621      	mov	r1, r4
 801b98c:	4628      	mov	r0, r5
 801b98e:	f000 ff25 	bl	801c7dc <_sbrk_r>
 801b992:	1c43      	adds	r3, r0, #1
 801b994:	d00a      	beq.n	801b9ac <sbrk_aligned+0x34>
 801b996:	1cc4      	adds	r4, r0, #3
 801b998:	f024 0403 	bic.w	r4, r4, #3
 801b99c:	42a0      	cmp	r0, r4
 801b99e:	d007      	beq.n	801b9b0 <sbrk_aligned+0x38>
 801b9a0:	1a21      	subs	r1, r4, r0
 801b9a2:	4628      	mov	r0, r5
 801b9a4:	f000 ff1a 	bl	801c7dc <_sbrk_r>
 801b9a8:	3001      	adds	r0, #1
 801b9aa:	d101      	bne.n	801b9b0 <sbrk_aligned+0x38>
 801b9ac:	f04f 34ff 	mov.w	r4, #4294967295
 801b9b0:	4620      	mov	r0, r4
 801b9b2:	bd70      	pop	{r4, r5, r6, pc}
 801b9b4:	2000753c 	.word	0x2000753c

0801b9b8 <_malloc_r>:
 801b9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b9bc:	1ccd      	adds	r5, r1, #3
 801b9be:	f025 0503 	bic.w	r5, r5, #3
 801b9c2:	3508      	adds	r5, #8
 801b9c4:	2d0c      	cmp	r5, #12
 801b9c6:	bf38      	it	cc
 801b9c8:	250c      	movcc	r5, #12
 801b9ca:	2d00      	cmp	r5, #0
 801b9cc:	4607      	mov	r7, r0
 801b9ce:	db01      	blt.n	801b9d4 <_malloc_r+0x1c>
 801b9d0:	42a9      	cmp	r1, r5
 801b9d2:	d905      	bls.n	801b9e0 <_malloc_r+0x28>
 801b9d4:	230c      	movs	r3, #12
 801b9d6:	603b      	str	r3, [r7, #0]
 801b9d8:	2600      	movs	r6, #0
 801b9da:	4630      	mov	r0, r6
 801b9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b9e0:	4e2e      	ldr	r6, [pc, #184]	; (801ba9c <_malloc_r+0xe4>)
 801b9e2:	f003 f859 	bl	801ea98 <__malloc_lock>
 801b9e6:	6833      	ldr	r3, [r6, #0]
 801b9e8:	461c      	mov	r4, r3
 801b9ea:	bb34      	cbnz	r4, 801ba3a <_malloc_r+0x82>
 801b9ec:	4629      	mov	r1, r5
 801b9ee:	4638      	mov	r0, r7
 801b9f0:	f7ff ffc2 	bl	801b978 <sbrk_aligned>
 801b9f4:	1c43      	adds	r3, r0, #1
 801b9f6:	4604      	mov	r4, r0
 801b9f8:	d14d      	bne.n	801ba96 <_malloc_r+0xde>
 801b9fa:	6834      	ldr	r4, [r6, #0]
 801b9fc:	4626      	mov	r6, r4
 801b9fe:	2e00      	cmp	r6, #0
 801ba00:	d140      	bne.n	801ba84 <_malloc_r+0xcc>
 801ba02:	6823      	ldr	r3, [r4, #0]
 801ba04:	4631      	mov	r1, r6
 801ba06:	4638      	mov	r0, r7
 801ba08:	eb04 0803 	add.w	r8, r4, r3
 801ba0c:	f000 fee6 	bl	801c7dc <_sbrk_r>
 801ba10:	4580      	cmp	r8, r0
 801ba12:	d13a      	bne.n	801ba8a <_malloc_r+0xd2>
 801ba14:	6821      	ldr	r1, [r4, #0]
 801ba16:	3503      	adds	r5, #3
 801ba18:	1a6d      	subs	r5, r5, r1
 801ba1a:	f025 0503 	bic.w	r5, r5, #3
 801ba1e:	3508      	adds	r5, #8
 801ba20:	2d0c      	cmp	r5, #12
 801ba22:	bf38      	it	cc
 801ba24:	250c      	movcc	r5, #12
 801ba26:	4629      	mov	r1, r5
 801ba28:	4638      	mov	r0, r7
 801ba2a:	f7ff ffa5 	bl	801b978 <sbrk_aligned>
 801ba2e:	3001      	adds	r0, #1
 801ba30:	d02b      	beq.n	801ba8a <_malloc_r+0xd2>
 801ba32:	6823      	ldr	r3, [r4, #0]
 801ba34:	442b      	add	r3, r5
 801ba36:	6023      	str	r3, [r4, #0]
 801ba38:	e00e      	b.n	801ba58 <_malloc_r+0xa0>
 801ba3a:	6822      	ldr	r2, [r4, #0]
 801ba3c:	1b52      	subs	r2, r2, r5
 801ba3e:	d41e      	bmi.n	801ba7e <_malloc_r+0xc6>
 801ba40:	2a0b      	cmp	r2, #11
 801ba42:	d916      	bls.n	801ba72 <_malloc_r+0xba>
 801ba44:	1961      	adds	r1, r4, r5
 801ba46:	42a3      	cmp	r3, r4
 801ba48:	6025      	str	r5, [r4, #0]
 801ba4a:	bf18      	it	ne
 801ba4c:	6059      	strne	r1, [r3, #4]
 801ba4e:	6863      	ldr	r3, [r4, #4]
 801ba50:	bf08      	it	eq
 801ba52:	6031      	streq	r1, [r6, #0]
 801ba54:	5162      	str	r2, [r4, r5]
 801ba56:	604b      	str	r3, [r1, #4]
 801ba58:	4638      	mov	r0, r7
 801ba5a:	f104 060b 	add.w	r6, r4, #11
 801ba5e:	f003 f821 	bl	801eaa4 <__malloc_unlock>
 801ba62:	f026 0607 	bic.w	r6, r6, #7
 801ba66:	1d23      	adds	r3, r4, #4
 801ba68:	1af2      	subs	r2, r6, r3
 801ba6a:	d0b6      	beq.n	801b9da <_malloc_r+0x22>
 801ba6c:	1b9b      	subs	r3, r3, r6
 801ba6e:	50a3      	str	r3, [r4, r2]
 801ba70:	e7b3      	b.n	801b9da <_malloc_r+0x22>
 801ba72:	6862      	ldr	r2, [r4, #4]
 801ba74:	42a3      	cmp	r3, r4
 801ba76:	bf0c      	ite	eq
 801ba78:	6032      	streq	r2, [r6, #0]
 801ba7a:	605a      	strne	r2, [r3, #4]
 801ba7c:	e7ec      	b.n	801ba58 <_malloc_r+0xa0>
 801ba7e:	4623      	mov	r3, r4
 801ba80:	6864      	ldr	r4, [r4, #4]
 801ba82:	e7b2      	b.n	801b9ea <_malloc_r+0x32>
 801ba84:	4634      	mov	r4, r6
 801ba86:	6876      	ldr	r6, [r6, #4]
 801ba88:	e7b9      	b.n	801b9fe <_malloc_r+0x46>
 801ba8a:	230c      	movs	r3, #12
 801ba8c:	603b      	str	r3, [r7, #0]
 801ba8e:	4638      	mov	r0, r7
 801ba90:	f003 f808 	bl	801eaa4 <__malloc_unlock>
 801ba94:	e7a1      	b.n	801b9da <_malloc_r+0x22>
 801ba96:	6025      	str	r5, [r4, #0]
 801ba98:	e7de      	b.n	801ba58 <_malloc_r+0xa0>
 801ba9a:	bf00      	nop
 801ba9c:	20007538 	.word	0x20007538

0801baa0 <__cvt>:
 801baa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801baa2:	ed2d 8b02 	vpush	{d8}
 801baa6:	eeb0 8b40 	vmov.f64	d8, d0
 801baaa:	b085      	sub	sp, #20
 801baac:	4617      	mov	r7, r2
 801baae:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801bab0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801bab2:	ee18 2a90 	vmov	r2, s17
 801bab6:	f025 0520 	bic.w	r5, r5, #32
 801baba:	2a00      	cmp	r2, #0
 801babc:	bfb6      	itet	lt
 801babe:	222d      	movlt	r2, #45	; 0x2d
 801bac0:	2200      	movge	r2, #0
 801bac2:	eeb1 8b40 	vneglt.f64	d8, d0
 801bac6:	2d46      	cmp	r5, #70	; 0x46
 801bac8:	460c      	mov	r4, r1
 801baca:	701a      	strb	r2, [r3, #0]
 801bacc:	d004      	beq.n	801bad8 <__cvt+0x38>
 801bace:	2d45      	cmp	r5, #69	; 0x45
 801bad0:	d100      	bne.n	801bad4 <__cvt+0x34>
 801bad2:	3401      	adds	r4, #1
 801bad4:	2102      	movs	r1, #2
 801bad6:	e000      	b.n	801bada <__cvt+0x3a>
 801bad8:	2103      	movs	r1, #3
 801bada:	ab03      	add	r3, sp, #12
 801badc:	9301      	str	r3, [sp, #4]
 801bade:	ab02      	add	r3, sp, #8
 801bae0:	9300      	str	r3, [sp, #0]
 801bae2:	4622      	mov	r2, r4
 801bae4:	4633      	mov	r3, r6
 801bae6:	eeb0 0b48 	vmov.f64	d0, d8
 801baea:	f001 fdd1 	bl	801d690 <_dtoa_r>
 801baee:	2d47      	cmp	r5, #71	; 0x47
 801baf0:	d101      	bne.n	801baf6 <__cvt+0x56>
 801baf2:	07fb      	lsls	r3, r7, #31
 801baf4:	d51a      	bpl.n	801bb2c <__cvt+0x8c>
 801baf6:	2d46      	cmp	r5, #70	; 0x46
 801baf8:	eb00 0204 	add.w	r2, r0, r4
 801bafc:	d10c      	bne.n	801bb18 <__cvt+0x78>
 801bafe:	7803      	ldrb	r3, [r0, #0]
 801bb00:	2b30      	cmp	r3, #48	; 0x30
 801bb02:	d107      	bne.n	801bb14 <__cvt+0x74>
 801bb04:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801bb08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb0c:	bf1c      	itt	ne
 801bb0e:	f1c4 0401 	rsbne	r4, r4, #1
 801bb12:	6034      	strne	r4, [r6, #0]
 801bb14:	6833      	ldr	r3, [r6, #0]
 801bb16:	441a      	add	r2, r3
 801bb18:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801bb1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb20:	bf08      	it	eq
 801bb22:	9203      	streq	r2, [sp, #12]
 801bb24:	2130      	movs	r1, #48	; 0x30
 801bb26:	9b03      	ldr	r3, [sp, #12]
 801bb28:	4293      	cmp	r3, r2
 801bb2a:	d307      	bcc.n	801bb3c <__cvt+0x9c>
 801bb2c:	9b03      	ldr	r3, [sp, #12]
 801bb2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bb30:	1a1b      	subs	r3, r3, r0
 801bb32:	6013      	str	r3, [r2, #0]
 801bb34:	b005      	add	sp, #20
 801bb36:	ecbd 8b02 	vpop	{d8}
 801bb3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb3c:	1c5c      	adds	r4, r3, #1
 801bb3e:	9403      	str	r4, [sp, #12]
 801bb40:	7019      	strb	r1, [r3, #0]
 801bb42:	e7f0      	b.n	801bb26 <__cvt+0x86>

0801bb44 <__exponent>:
 801bb44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bb46:	4603      	mov	r3, r0
 801bb48:	2900      	cmp	r1, #0
 801bb4a:	bfb8      	it	lt
 801bb4c:	4249      	neglt	r1, r1
 801bb4e:	f803 2b02 	strb.w	r2, [r3], #2
 801bb52:	bfb4      	ite	lt
 801bb54:	222d      	movlt	r2, #45	; 0x2d
 801bb56:	222b      	movge	r2, #43	; 0x2b
 801bb58:	2909      	cmp	r1, #9
 801bb5a:	7042      	strb	r2, [r0, #1]
 801bb5c:	dd2a      	ble.n	801bbb4 <__exponent+0x70>
 801bb5e:	f10d 0407 	add.w	r4, sp, #7
 801bb62:	46a4      	mov	ip, r4
 801bb64:	270a      	movs	r7, #10
 801bb66:	46a6      	mov	lr, r4
 801bb68:	460a      	mov	r2, r1
 801bb6a:	fb91 f6f7 	sdiv	r6, r1, r7
 801bb6e:	fb07 1516 	mls	r5, r7, r6, r1
 801bb72:	3530      	adds	r5, #48	; 0x30
 801bb74:	2a63      	cmp	r2, #99	; 0x63
 801bb76:	f104 34ff 	add.w	r4, r4, #4294967295
 801bb7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801bb7e:	4631      	mov	r1, r6
 801bb80:	dcf1      	bgt.n	801bb66 <__exponent+0x22>
 801bb82:	3130      	adds	r1, #48	; 0x30
 801bb84:	f1ae 0502 	sub.w	r5, lr, #2
 801bb88:	f804 1c01 	strb.w	r1, [r4, #-1]
 801bb8c:	1c44      	adds	r4, r0, #1
 801bb8e:	4629      	mov	r1, r5
 801bb90:	4561      	cmp	r1, ip
 801bb92:	d30a      	bcc.n	801bbaa <__exponent+0x66>
 801bb94:	f10d 0209 	add.w	r2, sp, #9
 801bb98:	eba2 020e 	sub.w	r2, r2, lr
 801bb9c:	4565      	cmp	r5, ip
 801bb9e:	bf88      	it	hi
 801bba0:	2200      	movhi	r2, #0
 801bba2:	4413      	add	r3, r2
 801bba4:	1a18      	subs	r0, r3, r0
 801bba6:	b003      	add	sp, #12
 801bba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bbaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bbae:	f804 2f01 	strb.w	r2, [r4, #1]!
 801bbb2:	e7ed      	b.n	801bb90 <__exponent+0x4c>
 801bbb4:	2330      	movs	r3, #48	; 0x30
 801bbb6:	3130      	adds	r1, #48	; 0x30
 801bbb8:	7083      	strb	r3, [r0, #2]
 801bbba:	70c1      	strb	r1, [r0, #3]
 801bbbc:	1d03      	adds	r3, r0, #4
 801bbbe:	e7f1      	b.n	801bba4 <__exponent+0x60>

0801bbc0 <_printf_float>:
 801bbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbc4:	b08b      	sub	sp, #44	; 0x2c
 801bbc6:	460c      	mov	r4, r1
 801bbc8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801bbcc:	4616      	mov	r6, r2
 801bbce:	461f      	mov	r7, r3
 801bbd0:	4605      	mov	r5, r0
 801bbd2:	f002 ff47 	bl	801ea64 <_localeconv_r>
 801bbd6:	f8d0 b000 	ldr.w	fp, [r0]
 801bbda:	4658      	mov	r0, fp
 801bbdc:	f7e4 fb30 	bl	8000240 <strlen>
 801bbe0:	2300      	movs	r3, #0
 801bbe2:	9308      	str	r3, [sp, #32]
 801bbe4:	f8d8 3000 	ldr.w	r3, [r8]
 801bbe8:	f894 9018 	ldrb.w	r9, [r4, #24]
 801bbec:	6822      	ldr	r2, [r4, #0]
 801bbee:	3307      	adds	r3, #7
 801bbf0:	f023 0307 	bic.w	r3, r3, #7
 801bbf4:	f103 0108 	add.w	r1, r3, #8
 801bbf8:	f8c8 1000 	str.w	r1, [r8]
 801bbfc:	4682      	mov	sl, r0
 801bbfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bc02:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801bc06:	ed9f 7b98 	vldr	d7, [pc, #608]	; 801be68 <_printf_float+0x2a8>
 801bc0a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801bc0e:	eeb0 6bc0 	vabs.f64	d6, d0
 801bc12:	eeb4 6b47 	vcmp.f64	d6, d7
 801bc16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc1a:	dd24      	ble.n	801bc66 <_printf_float+0xa6>
 801bc1c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801bc20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc24:	d502      	bpl.n	801bc2c <_printf_float+0x6c>
 801bc26:	232d      	movs	r3, #45	; 0x2d
 801bc28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bc2c:	4b90      	ldr	r3, [pc, #576]	; (801be70 <_printf_float+0x2b0>)
 801bc2e:	4891      	ldr	r0, [pc, #580]	; (801be74 <_printf_float+0x2b4>)
 801bc30:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801bc34:	bf94      	ite	ls
 801bc36:	4698      	movls	r8, r3
 801bc38:	4680      	movhi	r8, r0
 801bc3a:	2303      	movs	r3, #3
 801bc3c:	6123      	str	r3, [r4, #16]
 801bc3e:	f022 0204 	bic.w	r2, r2, #4
 801bc42:	2300      	movs	r3, #0
 801bc44:	6022      	str	r2, [r4, #0]
 801bc46:	9304      	str	r3, [sp, #16]
 801bc48:	9700      	str	r7, [sp, #0]
 801bc4a:	4633      	mov	r3, r6
 801bc4c:	aa09      	add	r2, sp, #36	; 0x24
 801bc4e:	4621      	mov	r1, r4
 801bc50:	4628      	mov	r0, r5
 801bc52:	f000 f9d3 	bl	801bffc <_printf_common>
 801bc56:	3001      	adds	r0, #1
 801bc58:	f040 808a 	bne.w	801bd70 <_printf_float+0x1b0>
 801bc5c:	f04f 30ff 	mov.w	r0, #4294967295
 801bc60:	b00b      	add	sp, #44	; 0x2c
 801bc62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc66:	eeb4 0b40 	vcmp.f64	d0, d0
 801bc6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc6e:	d709      	bvc.n	801bc84 <_printf_float+0xc4>
 801bc70:	ee10 3a90 	vmov	r3, s1
 801bc74:	2b00      	cmp	r3, #0
 801bc76:	bfbc      	itt	lt
 801bc78:	232d      	movlt	r3, #45	; 0x2d
 801bc7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801bc7e:	487e      	ldr	r0, [pc, #504]	; (801be78 <_printf_float+0x2b8>)
 801bc80:	4b7e      	ldr	r3, [pc, #504]	; (801be7c <_printf_float+0x2bc>)
 801bc82:	e7d5      	b.n	801bc30 <_printf_float+0x70>
 801bc84:	6863      	ldr	r3, [r4, #4]
 801bc86:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801bc8a:	9104      	str	r1, [sp, #16]
 801bc8c:	1c59      	adds	r1, r3, #1
 801bc8e:	d13c      	bne.n	801bd0a <_printf_float+0x14a>
 801bc90:	2306      	movs	r3, #6
 801bc92:	6063      	str	r3, [r4, #4]
 801bc94:	2300      	movs	r3, #0
 801bc96:	9303      	str	r3, [sp, #12]
 801bc98:	ab08      	add	r3, sp, #32
 801bc9a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801bc9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801bca2:	ab07      	add	r3, sp, #28
 801bca4:	6861      	ldr	r1, [r4, #4]
 801bca6:	9300      	str	r3, [sp, #0]
 801bca8:	6022      	str	r2, [r4, #0]
 801bcaa:	f10d 031b 	add.w	r3, sp, #27
 801bcae:	4628      	mov	r0, r5
 801bcb0:	f7ff fef6 	bl	801baa0 <__cvt>
 801bcb4:	9b04      	ldr	r3, [sp, #16]
 801bcb6:	9907      	ldr	r1, [sp, #28]
 801bcb8:	2b47      	cmp	r3, #71	; 0x47
 801bcba:	4680      	mov	r8, r0
 801bcbc:	d108      	bne.n	801bcd0 <_printf_float+0x110>
 801bcbe:	1cc8      	adds	r0, r1, #3
 801bcc0:	db02      	blt.n	801bcc8 <_printf_float+0x108>
 801bcc2:	6863      	ldr	r3, [r4, #4]
 801bcc4:	4299      	cmp	r1, r3
 801bcc6:	dd41      	ble.n	801bd4c <_printf_float+0x18c>
 801bcc8:	f1a9 0902 	sub.w	r9, r9, #2
 801bccc:	fa5f f989 	uxtb.w	r9, r9
 801bcd0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801bcd4:	d820      	bhi.n	801bd18 <_printf_float+0x158>
 801bcd6:	3901      	subs	r1, #1
 801bcd8:	464a      	mov	r2, r9
 801bcda:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801bcde:	9107      	str	r1, [sp, #28]
 801bce0:	f7ff ff30 	bl	801bb44 <__exponent>
 801bce4:	9a08      	ldr	r2, [sp, #32]
 801bce6:	9004      	str	r0, [sp, #16]
 801bce8:	1813      	adds	r3, r2, r0
 801bcea:	2a01      	cmp	r2, #1
 801bcec:	6123      	str	r3, [r4, #16]
 801bcee:	dc02      	bgt.n	801bcf6 <_printf_float+0x136>
 801bcf0:	6822      	ldr	r2, [r4, #0]
 801bcf2:	07d2      	lsls	r2, r2, #31
 801bcf4:	d501      	bpl.n	801bcfa <_printf_float+0x13a>
 801bcf6:	3301      	adds	r3, #1
 801bcf8:	6123      	str	r3, [r4, #16]
 801bcfa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801bcfe:	2b00      	cmp	r3, #0
 801bd00:	d0a2      	beq.n	801bc48 <_printf_float+0x88>
 801bd02:	232d      	movs	r3, #45	; 0x2d
 801bd04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bd08:	e79e      	b.n	801bc48 <_printf_float+0x88>
 801bd0a:	9904      	ldr	r1, [sp, #16]
 801bd0c:	2947      	cmp	r1, #71	; 0x47
 801bd0e:	d1c1      	bne.n	801bc94 <_printf_float+0xd4>
 801bd10:	2b00      	cmp	r3, #0
 801bd12:	d1bf      	bne.n	801bc94 <_printf_float+0xd4>
 801bd14:	2301      	movs	r3, #1
 801bd16:	e7bc      	b.n	801bc92 <_printf_float+0xd2>
 801bd18:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801bd1c:	d118      	bne.n	801bd50 <_printf_float+0x190>
 801bd1e:	2900      	cmp	r1, #0
 801bd20:	6863      	ldr	r3, [r4, #4]
 801bd22:	dd0b      	ble.n	801bd3c <_printf_float+0x17c>
 801bd24:	6121      	str	r1, [r4, #16]
 801bd26:	b913      	cbnz	r3, 801bd2e <_printf_float+0x16e>
 801bd28:	6822      	ldr	r2, [r4, #0]
 801bd2a:	07d0      	lsls	r0, r2, #31
 801bd2c:	d502      	bpl.n	801bd34 <_printf_float+0x174>
 801bd2e:	3301      	adds	r3, #1
 801bd30:	440b      	add	r3, r1
 801bd32:	6123      	str	r3, [r4, #16]
 801bd34:	2300      	movs	r3, #0
 801bd36:	65a1      	str	r1, [r4, #88]	; 0x58
 801bd38:	9304      	str	r3, [sp, #16]
 801bd3a:	e7de      	b.n	801bcfa <_printf_float+0x13a>
 801bd3c:	b913      	cbnz	r3, 801bd44 <_printf_float+0x184>
 801bd3e:	6822      	ldr	r2, [r4, #0]
 801bd40:	07d2      	lsls	r2, r2, #31
 801bd42:	d501      	bpl.n	801bd48 <_printf_float+0x188>
 801bd44:	3302      	adds	r3, #2
 801bd46:	e7f4      	b.n	801bd32 <_printf_float+0x172>
 801bd48:	2301      	movs	r3, #1
 801bd4a:	e7f2      	b.n	801bd32 <_printf_float+0x172>
 801bd4c:	f04f 0967 	mov.w	r9, #103	; 0x67
 801bd50:	9b08      	ldr	r3, [sp, #32]
 801bd52:	4299      	cmp	r1, r3
 801bd54:	db05      	blt.n	801bd62 <_printf_float+0x1a2>
 801bd56:	6823      	ldr	r3, [r4, #0]
 801bd58:	6121      	str	r1, [r4, #16]
 801bd5a:	07d8      	lsls	r0, r3, #31
 801bd5c:	d5ea      	bpl.n	801bd34 <_printf_float+0x174>
 801bd5e:	1c4b      	adds	r3, r1, #1
 801bd60:	e7e7      	b.n	801bd32 <_printf_float+0x172>
 801bd62:	2900      	cmp	r1, #0
 801bd64:	bfd4      	ite	le
 801bd66:	f1c1 0202 	rsble	r2, r1, #2
 801bd6a:	2201      	movgt	r2, #1
 801bd6c:	4413      	add	r3, r2
 801bd6e:	e7e0      	b.n	801bd32 <_printf_float+0x172>
 801bd70:	6823      	ldr	r3, [r4, #0]
 801bd72:	055a      	lsls	r2, r3, #21
 801bd74:	d407      	bmi.n	801bd86 <_printf_float+0x1c6>
 801bd76:	6923      	ldr	r3, [r4, #16]
 801bd78:	4642      	mov	r2, r8
 801bd7a:	4631      	mov	r1, r6
 801bd7c:	4628      	mov	r0, r5
 801bd7e:	47b8      	blx	r7
 801bd80:	3001      	adds	r0, #1
 801bd82:	d12a      	bne.n	801bdda <_printf_float+0x21a>
 801bd84:	e76a      	b.n	801bc5c <_printf_float+0x9c>
 801bd86:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801bd8a:	f240 80e2 	bls.w	801bf52 <_printf_float+0x392>
 801bd8e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801bd92:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801bd96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd9a:	d133      	bne.n	801be04 <_printf_float+0x244>
 801bd9c:	4a38      	ldr	r2, [pc, #224]	; (801be80 <_printf_float+0x2c0>)
 801bd9e:	2301      	movs	r3, #1
 801bda0:	4631      	mov	r1, r6
 801bda2:	4628      	mov	r0, r5
 801bda4:	47b8      	blx	r7
 801bda6:	3001      	adds	r0, #1
 801bda8:	f43f af58 	beq.w	801bc5c <_printf_float+0x9c>
 801bdac:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801bdb0:	429a      	cmp	r2, r3
 801bdb2:	db02      	blt.n	801bdba <_printf_float+0x1fa>
 801bdb4:	6823      	ldr	r3, [r4, #0]
 801bdb6:	07d8      	lsls	r0, r3, #31
 801bdb8:	d50f      	bpl.n	801bdda <_printf_float+0x21a>
 801bdba:	4653      	mov	r3, sl
 801bdbc:	465a      	mov	r2, fp
 801bdbe:	4631      	mov	r1, r6
 801bdc0:	4628      	mov	r0, r5
 801bdc2:	47b8      	blx	r7
 801bdc4:	3001      	adds	r0, #1
 801bdc6:	f43f af49 	beq.w	801bc5c <_printf_float+0x9c>
 801bdca:	f04f 0800 	mov.w	r8, #0
 801bdce:	f104 091a 	add.w	r9, r4, #26
 801bdd2:	9b08      	ldr	r3, [sp, #32]
 801bdd4:	3b01      	subs	r3, #1
 801bdd6:	4543      	cmp	r3, r8
 801bdd8:	dc09      	bgt.n	801bdee <_printf_float+0x22e>
 801bdda:	6823      	ldr	r3, [r4, #0]
 801bddc:	079b      	lsls	r3, r3, #30
 801bdde:	f100 8108 	bmi.w	801bff2 <_printf_float+0x432>
 801bde2:	68e0      	ldr	r0, [r4, #12]
 801bde4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bde6:	4298      	cmp	r0, r3
 801bde8:	bfb8      	it	lt
 801bdea:	4618      	movlt	r0, r3
 801bdec:	e738      	b.n	801bc60 <_printf_float+0xa0>
 801bdee:	2301      	movs	r3, #1
 801bdf0:	464a      	mov	r2, r9
 801bdf2:	4631      	mov	r1, r6
 801bdf4:	4628      	mov	r0, r5
 801bdf6:	47b8      	blx	r7
 801bdf8:	3001      	adds	r0, #1
 801bdfa:	f43f af2f 	beq.w	801bc5c <_printf_float+0x9c>
 801bdfe:	f108 0801 	add.w	r8, r8, #1
 801be02:	e7e6      	b.n	801bdd2 <_printf_float+0x212>
 801be04:	9b07      	ldr	r3, [sp, #28]
 801be06:	2b00      	cmp	r3, #0
 801be08:	dc3c      	bgt.n	801be84 <_printf_float+0x2c4>
 801be0a:	4a1d      	ldr	r2, [pc, #116]	; (801be80 <_printf_float+0x2c0>)
 801be0c:	2301      	movs	r3, #1
 801be0e:	4631      	mov	r1, r6
 801be10:	4628      	mov	r0, r5
 801be12:	47b8      	blx	r7
 801be14:	3001      	adds	r0, #1
 801be16:	f43f af21 	beq.w	801bc5c <_printf_float+0x9c>
 801be1a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801be1e:	4313      	orrs	r3, r2
 801be20:	d102      	bne.n	801be28 <_printf_float+0x268>
 801be22:	6823      	ldr	r3, [r4, #0]
 801be24:	07d9      	lsls	r1, r3, #31
 801be26:	d5d8      	bpl.n	801bdda <_printf_float+0x21a>
 801be28:	4653      	mov	r3, sl
 801be2a:	465a      	mov	r2, fp
 801be2c:	4631      	mov	r1, r6
 801be2e:	4628      	mov	r0, r5
 801be30:	47b8      	blx	r7
 801be32:	3001      	adds	r0, #1
 801be34:	f43f af12 	beq.w	801bc5c <_printf_float+0x9c>
 801be38:	f04f 0900 	mov.w	r9, #0
 801be3c:	f104 0a1a 	add.w	sl, r4, #26
 801be40:	9b07      	ldr	r3, [sp, #28]
 801be42:	425b      	negs	r3, r3
 801be44:	454b      	cmp	r3, r9
 801be46:	dc01      	bgt.n	801be4c <_printf_float+0x28c>
 801be48:	9b08      	ldr	r3, [sp, #32]
 801be4a:	e795      	b.n	801bd78 <_printf_float+0x1b8>
 801be4c:	2301      	movs	r3, #1
 801be4e:	4652      	mov	r2, sl
 801be50:	4631      	mov	r1, r6
 801be52:	4628      	mov	r0, r5
 801be54:	47b8      	blx	r7
 801be56:	3001      	adds	r0, #1
 801be58:	f43f af00 	beq.w	801bc5c <_printf_float+0x9c>
 801be5c:	f109 0901 	add.w	r9, r9, #1
 801be60:	e7ee      	b.n	801be40 <_printf_float+0x280>
 801be62:	bf00      	nop
 801be64:	f3af 8000 	nop.w
 801be68:	ffffffff 	.word	0xffffffff
 801be6c:	7fefffff 	.word	0x7fefffff
 801be70:	08024654 	.word	0x08024654
 801be74:	08024658 	.word	0x08024658
 801be78:	08024660 	.word	0x08024660
 801be7c:	0802465c 	.word	0x0802465c
 801be80:	08024664 	.word	0x08024664
 801be84:	9a08      	ldr	r2, [sp, #32]
 801be86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801be88:	429a      	cmp	r2, r3
 801be8a:	bfa8      	it	ge
 801be8c:	461a      	movge	r2, r3
 801be8e:	2a00      	cmp	r2, #0
 801be90:	4691      	mov	r9, r2
 801be92:	dc38      	bgt.n	801bf06 <_printf_float+0x346>
 801be94:	2300      	movs	r3, #0
 801be96:	9305      	str	r3, [sp, #20]
 801be98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801be9c:	f104 021a 	add.w	r2, r4, #26
 801bea0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801bea2:	9905      	ldr	r1, [sp, #20]
 801bea4:	9304      	str	r3, [sp, #16]
 801bea6:	eba3 0309 	sub.w	r3, r3, r9
 801beaa:	428b      	cmp	r3, r1
 801beac:	dc33      	bgt.n	801bf16 <_printf_float+0x356>
 801beae:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801beb2:	429a      	cmp	r2, r3
 801beb4:	db3c      	blt.n	801bf30 <_printf_float+0x370>
 801beb6:	6823      	ldr	r3, [r4, #0]
 801beb8:	07da      	lsls	r2, r3, #31
 801beba:	d439      	bmi.n	801bf30 <_printf_float+0x370>
 801bebc:	9b08      	ldr	r3, [sp, #32]
 801bebe:	9a04      	ldr	r2, [sp, #16]
 801bec0:	9907      	ldr	r1, [sp, #28]
 801bec2:	1a9a      	subs	r2, r3, r2
 801bec4:	eba3 0901 	sub.w	r9, r3, r1
 801bec8:	4591      	cmp	r9, r2
 801beca:	bfa8      	it	ge
 801becc:	4691      	movge	r9, r2
 801bece:	f1b9 0f00 	cmp.w	r9, #0
 801bed2:	dc35      	bgt.n	801bf40 <_printf_float+0x380>
 801bed4:	f04f 0800 	mov.w	r8, #0
 801bed8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801bedc:	f104 0a1a 	add.w	sl, r4, #26
 801bee0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801bee4:	1a9b      	subs	r3, r3, r2
 801bee6:	eba3 0309 	sub.w	r3, r3, r9
 801beea:	4543      	cmp	r3, r8
 801beec:	f77f af75 	ble.w	801bdda <_printf_float+0x21a>
 801bef0:	2301      	movs	r3, #1
 801bef2:	4652      	mov	r2, sl
 801bef4:	4631      	mov	r1, r6
 801bef6:	4628      	mov	r0, r5
 801bef8:	47b8      	blx	r7
 801befa:	3001      	adds	r0, #1
 801befc:	f43f aeae 	beq.w	801bc5c <_printf_float+0x9c>
 801bf00:	f108 0801 	add.w	r8, r8, #1
 801bf04:	e7ec      	b.n	801bee0 <_printf_float+0x320>
 801bf06:	4613      	mov	r3, r2
 801bf08:	4631      	mov	r1, r6
 801bf0a:	4642      	mov	r2, r8
 801bf0c:	4628      	mov	r0, r5
 801bf0e:	47b8      	blx	r7
 801bf10:	3001      	adds	r0, #1
 801bf12:	d1bf      	bne.n	801be94 <_printf_float+0x2d4>
 801bf14:	e6a2      	b.n	801bc5c <_printf_float+0x9c>
 801bf16:	2301      	movs	r3, #1
 801bf18:	4631      	mov	r1, r6
 801bf1a:	4628      	mov	r0, r5
 801bf1c:	9204      	str	r2, [sp, #16]
 801bf1e:	47b8      	blx	r7
 801bf20:	3001      	adds	r0, #1
 801bf22:	f43f ae9b 	beq.w	801bc5c <_printf_float+0x9c>
 801bf26:	9b05      	ldr	r3, [sp, #20]
 801bf28:	9a04      	ldr	r2, [sp, #16]
 801bf2a:	3301      	adds	r3, #1
 801bf2c:	9305      	str	r3, [sp, #20]
 801bf2e:	e7b7      	b.n	801bea0 <_printf_float+0x2e0>
 801bf30:	4653      	mov	r3, sl
 801bf32:	465a      	mov	r2, fp
 801bf34:	4631      	mov	r1, r6
 801bf36:	4628      	mov	r0, r5
 801bf38:	47b8      	blx	r7
 801bf3a:	3001      	adds	r0, #1
 801bf3c:	d1be      	bne.n	801bebc <_printf_float+0x2fc>
 801bf3e:	e68d      	b.n	801bc5c <_printf_float+0x9c>
 801bf40:	9a04      	ldr	r2, [sp, #16]
 801bf42:	464b      	mov	r3, r9
 801bf44:	4442      	add	r2, r8
 801bf46:	4631      	mov	r1, r6
 801bf48:	4628      	mov	r0, r5
 801bf4a:	47b8      	blx	r7
 801bf4c:	3001      	adds	r0, #1
 801bf4e:	d1c1      	bne.n	801bed4 <_printf_float+0x314>
 801bf50:	e684      	b.n	801bc5c <_printf_float+0x9c>
 801bf52:	9a08      	ldr	r2, [sp, #32]
 801bf54:	2a01      	cmp	r2, #1
 801bf56:	dc01      	bgt.n	801bf5c <_printf_float+0x39c>
 801bf58:	07db      	lsls	r3, r3, #31
 801bf5a:	d537      	bpl.n	801bfcc <_printf_float+0x40c>
 801bf5c:	2301      	movs	r3, #1
 801bf5e:	4642      	mov	r2, r8
 801bf60:	4631      	mov	r1, r6
 801bf62:	4628      	mov	r0, r5
 801bf64:	47b8      	blx	r7
 801bf66:	3001      	adds	r0, #1
 801bf68:	f43f ae78 	beq.w	801bc5c <_printf_float+0x9c>
 801bf6c:	4653      	mov	r3, sl
 801bf6e:	465a      	mov	r2, fp
 801bf70:	4631      	mov	r1, r6
 801bf72:	4628      	mov	r0, r5
 801bf74:	47b8      	blx	r7
 801bf76:	3001      	adds	r0, #1
 801bf78:	f43f ae70 	beq.w	801bc5c <_printf_float+0x9c>
 801bf7c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801bf80:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801bf84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf88:	d01b      	beq.n	801bfc2 <_printf_float+0x402>
 801bf8a:	9b08      	ldr	r3, [sp, #32]
 801bf8c:	f108 0201 	add.w	r2, r8, #1
 801bf90:	3b01      	subs	r3, #1
 801bf92:	4631      	mov	r1, r6
 801bf94:	4628      	mov	r0, r5
 801bf96:	47b8      	blx	r7
 801bf98:	3001      	adds	r0, #1
 801bf9a:	d10e      	bne.n	801bfba <_printf_float+0x3fa>
 801bf9c:	e65e      	b.n	801bc5c <_printf_float+0x9c>
 801bf9e:	2301      	movs	r3, #1
 801bfa0:	464a      	mov	r2, r9
 801bfa2:	4631      	mov	r1, r6
 801bfa4:	4628      	mov	r0, r5
 801bfa6:	47b8      	blx	r7
 801bfa8:	3001      	adds	r0, #1
 801bfaa:	f43f ae57 	beq.w	801bc5c <_printf_float+0x9c>
 801bfae:	f108 0801 	add.w	r8, r8, #1
 801bfb2:	9b08      	ldr	r3, [sp, #32]
 801bfb4:	3b01      	subs	r3, #1
 801bfb6:	4543      	cmp	r3, r8
 801bfb8:	dcf1      	bgt.n	801bf9e <_printf_float+0x3de>
 801bfba:	9b04      	ldr	r3, [sp, #16]
 801bfbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801bfc0:	e6db      	b.n	801bd7a <_printf_float+0x1ba>
 801bfc2:	f04f 0800 	mov.w	r8, #0
 801bfc6:	f104 091a 	add.w	r9, r4, #26
 801bfca:	e7f2      	b.n	801bfb2 <_printf_float+0x3f2>
 801bfcc:	2301      	movs	r3, #1
 801bfce:	4642      	mov	r2, r8
 801bfd0:	e7df      	b.n	801bf92 <_printf_float+0x3d2>
 801bfd2:	2301      	movs	r3, #1
 801bfd4:	464a      	mov	r2, r9
 801bfd6:	4631      	mov	r1, r6
 801bfd8:	4628      	mov	r0, r5
 801bfda:	47b8      	blx	r7
 801bfdc:	3001      	adds	r0, #1
 801bfde:	f43f ae3d 	beq.w	801bc5c <_printf_float+0x9c>
 801bfe2:	f108 0801 	add.w	r8, r8, #1
 801bfe6:	68e3      	ldr	r3, [r4, #12]
 801bfe8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bfea:	1a5b      	subs	r3, r3, r1
 801bfec:	4543      	cmp	r3, r8
 801bfee:	dcf0      	bgt.n	801bfd2 <_printf_float+0x412>
 801bff0:	e6f7      	b.n	801bde2 <_printf_float+0x222>
 801bff2:	f04f 0800 	mov.w	r8, #0
 801bff6:	f104 0919 	add.w	r9, r4, #25
 801bffa:	e7f4      	b.n	801bfe6 <_printf_float+0x426>

0801bffc <_printf_common>:
 801bffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c000:	4616      	mov	r6, r2
 801c002:	4699      	mov	r9, r3
 801c004:	688a      	ldr	r2, [r1, #8]
 801c006:	690b      	ldr	r3, [r1, #16]
 801c008:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c00c:	4293      	cmp	r3, r2
 801c00e:	bfb8      	it	lt
 801c010:	4613      	movlt	r3, r2
 801c012:	6033      	str	r3, [r6, #0]
 801c014:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c018:	4607      	mov	r7, r0
 801c01a:	460c      	mov	r4, r1
 801c01c:	b10a      	cbz	r2, 801c022 <_printf_common+0x26>
 801c01e:	3301      	adds	r3, #1
 801c020:	6033      	str	r3, [r6, #0]
 801c022:	6823      	ldr	r3, [r4, #0]
 801c024:	0699      	lsls	r1, r3, #26
 801c026:	bf42      	ittt	mi
 801c028:	6833      	ldrmi	r3, [r6, #0]
 801c02a:	3302      	addmi	r3, #2
 801c02c:	6033      	strmi	r3, [r6, #0]
 801c02e:	6825      	ldr	r5, [r4, #0]
 801c030:	f015 0506 	ands.w	r5, r5, #6
 801c034:	d106      	bne.n	801c044 <_printf_common+0x48>
 801c036:	f104 0a19 	add.w	sl, r4, #25
 801c03a:	68e3      	ldr	r3, [r4, #12]
 801c03c:	6832      	ldr	r2, [r6, #0]
 801c03e:	1a9b      	subs	r3, r3, r2
 801c040:	42ab      	cmp	r3, r5
 801c042:	dc26      	bgt.n	801c092 <_printf_common+0x96>
 801c044:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c048:	1e13      	subs	r3, r2, #0
 801c04a:	6822      	ldr	r2, [r4, #0]
 801c04c:	bf18      	it	ne
 801c04e:	2301      	movne	r3, #1
 801c050:	0692      	lsls	r2, r2, #26
 801c052:	d42b      	bmi.n	801c0ac <_printf_common+0xb0>
 801c054:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c058:	4649      	mov	r1, r9
 801c05a:	4638      	mov	r0, r7
 801c05c:	47c0      	blx	r8
 801c05e:	3001      	adds	r0, #1
 801c060:	d01e      	beq.n	801c0a0 <_printf_common+0xa4>
 801c062:	6823      	ldr	r3, [r4, #0]
 801c064:	68e5      	ldr	r5, [r4, #12]
 801c066:	6832      	ldr	r2, [r6, #0]
 801c068:	f003 0306 	and.w	r3, r3, #6
 801c06c:	2b04      	cmp	r3, #4
 801c06e:	bf08      	it	eq
 801c070:	1aad      	subeq	r5, r5, r2
 801c072:	68a3      	ldr	r3, [r4, #8]
 801c074:	6922      	ldr	r2, [r4, #16]
 801c076:	bf0c      	ite	eq
 801c078:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c07c:	2500      	movne	r5, #0
 801c07e:	4293      	cmp	r3, r2
 801c080:	bfc4      	itt	gt
 801c082:	1a9b      	subgt	r3, r3, r2
 801c084:	18ed      	addgt	r5, r5, r3
 801c086:	2600      	movs	r6, #0
 801c088:	341a      	adds	r4, #26
 801c08a:	42b5      	cmp	r5, r6
 801c08c:	d11a      	bne.n	801c0c4 <_printf_common+0xc8>
 801c08e:	2000      	movs	r0, #0
 801c090:	e008      	b.n	801c0a4 <_printf_common+0xa8>
 801c092:	2301      	movs	r3, #1
 801c094:	4652      	mov	r2, sl
 801c096:	4649      	mov	r1, r9
 801c098:	4638      	mov	r0, r7
 801c09a:	47c0      	blx	r8
 801c09c:	3001      	adds	r0, #1
 801c09e:	d103      	bne.n	801c0a8 <_printf_common+0xac>
 801c0a0:	f04f 30ff 	mov.w	r0, #4294967295
 801c0a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c0a8:	3501      	adds	r5, #1
 801c0aa:	e7c6      	b.n	801c03a <_printf_common+0x3e>
 801c0ac:	18e1      	adds	r1, r4, r3
 801c0ae:	1c5a      	adds	r2, r3, #1
 801c0b0:	2030      	movs	r0, #48	; 0x30
 801c0b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c0b6:	4422      	add	r2, r4
 801c0b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c0bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c0c0:	3302      	adds	r3, #2
 801c0c2:	e7c7      	b.n	801c054 <_printf_common+0x58>
 801c0c4:	2301      	movs	r3, #1
 801c0c6:	4622      	mov	r2, r4
 801c0c8:	4649      	mov	r1, r9
 801c0ca:	4638      	mov	r0, r7
 801c0cc:	47c0      	blx	r8
 801c0ce:	3001      	adds	r0, #1
 801c0d0:	d0e6      	beq.n	801c0a0 <_printf_common+0xa4>
 801c0d2:	3601      	adds	r6, #1
 801c0d4:	e7d9      	b.n	801c08a <_printf_common+0x8e>
	...

0801c0d8 <_printf_i>:
 801c0d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c0dc:	7e0f      	ldrb	r7, [r1, #24]
 801c0de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c0e0:	2f78      	cmp	r7, #120	; 0x78
 801c0e2:	4691      	mov	r9, r2
 801c0e4:	4680      	mov	r8, r0
 801c0e6:	460c      	mov	r4, r1
 801c0e8:	469a      	mov	sl, r3
 801c0ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801c0ee:	d807      	bhi.n	801c100 <_printf_i+0x28>
 801c0f0:	2f62      	cmp	r7, #98	; 0x62
 801c0f2:	d80a      	bhi.n	801c10a <_printf_i+0x32>
 801c0f4:	2f00      	cmp	r7, #0
 801c0f6:	f000 80d8 	beq.w	801c2aa <_printf_i+0x1d2>
 801c0fa:	2f58      	cmp	r7, #88	; 0x58
 801c0fc:	f000 80a3 	beq.w	801c246 <_printf_i+0x16e>
 801c100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c104:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c108:	e03a      	b.n	801c180 <_printf_i+0xa8>
 801c10a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c10e:	2b15      	cmp	r3, #21
 801c110:	d8f6      	bhi.n	801c100 <_printf_i+0x28>
 801c112:	a101      	add	r1, pc, #4	; (adr r1, 801c118 <_printf_i+0x40>)
 801c114:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c118:	0801c171 	.word	0x0801c171
 801c11c:	0801c185 	.word	0x0801c185
 801c120:	0801c101 	.word	0x0801c101
 801c124:	0801c101 	.word	0x0801c101
 801c128:	0801c101 	.word	0x0801c101
 801c12c:	0801c101 	.word	0x0801c101
 801c130:	0801c185 	.word	0x0801c185
 801c134:	0801c101 	.word	0x0801c101
 801c138:	0801c101 	.word	0x0801c101
 801c13c:	0801c101 	.word	0x0801c101
 801c140:	0801c101 	.word	0x0801c101
 801c144:	0801c291 	.word	0x0801c291
 801c148:	0801c1b5 	.word	0x0801c1b5
 801c14c:	0801c273 	.word	0x0801c273
 801c150:	0801c101 	.word	0x0801c101
 801c154:	0801c101 	.word	0x0801c101
 801c158:	0801c2b3 	.word	0x0801c2b3
 801c15c:	0801c101 	.word	0x0801c101
 801c160:	0801c1b5 	.word	0x0801c1b5
 801c164:	0801c101 	.word	0x0801c101
 801c168:	0801c101 	.word	0x0801c101
 801c16c:	0801c27b 	.word	0x0801c27b
 801c170:	682b      	ldr	r3, [r5, #0]
 801c172:	1d1a      	adds	r2, r3, #4
 801c174:	681b      	ldr	r3, [r3, #0]
 801c176:	602a      	str	r2, [r5, #0]
 801c178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c17c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c180:	2301      	movs	r3, #1
 801c182:	e0a3      	b.n	801c2cc <_printf_i+0x1f4>
 801c184:	6820      	ldr	r0, [r4, #0]
 801c186:	6829      	ldr	r1, [r5, #0]
 801c188:	0606      	lsls	r6, r0, #24
 801c18a:	f101 0304 	add.w	r3, r1, #4
 801c18e:	d50a      	bpl.n	801c1a6 <_printf_i+0xce>
 801c190:	680e      	ldr	r6, [r1, #0]
 801c192:	602b      	str	r3, [r5, #0]
 801c194:	2e00      	cmp	r6, #0
 801c196:	da03      	bge.n	801c1a0 <_printf_i+0xc8>
 801c198:	232d      	movs	r3, #45	; 0x2d
 801c19a:	4276      	negs	r6, r6
 801c19c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c1a0:	485e      	ldr	r0, [pc, #376]	; (801c31c <_printf_i+0x244>)
 801c1a2:	230a      	movs	r3, #10
 801c1a4:	e019      	b.n	801c1da <_printf_i+0x102>
 801c1a6:	680e      	ldr	r6, [r1, #0]
 801c1a8:	602b      	str	r3, [r5, #0]
 801c1aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 801c1ae:	bf18      	it	ne
 801c1b0:	b236      	sxthne	r6, r6
 801c1b2:	e7ef      	b.n	801c194 <_printf_i+0xbc>
 801c1b4:	682b      	ldr	r3, [r5, #0]
 801c1b6:	6820      	ldr	r0, [r4, #0]
 801c1b8:	1d19      	adds	r1, r3, #4
 801c1ba:	6029      	str	r1, [r5, #0]
 801c1bc:	0601      	lsls	r1, r0, #24
 801c1be:	d501      	bpl.n	801c1c4 <_printf_i+0xec>
 801c1c0:	681e      	ldr	r6, [r3, #0]
 801c1c2:	e002      	b.n	801c1ca <_printf_i+0xf2>
 801c1c4:	0646      	lsls	r6, r0, #25
 801c1c6:	d5fb      	bpl.n	801c1c0 <_printf_i+0xe8>
 801c1c8:	881e      	ldrh	r6, [r3, #0]
 801c1ca:	4854      	ldr	r0, [pc, #336]	; (801c31c <_printf_i+0x244>)
 801c1cc:	2f6f      	cmp	r7, #111	; 0x6f
 801c1ce:	bf0c      	ite	eq
 801c1d0:	2308      	moveq	r3, #8
 801c1d2:	230a      	movne	r3, #10
 801c1d4:	2100      	movs	r1, #0
 801c1d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c1da:	6865      	ldr	r5, [r4, #4]
 801c1dc:	60a5      	str	r5, [r4, #8]
 801c1de:	2d00      	cmp	r5, #0
 801c1e0:	bfa2      	ittt	ge
 801c1e2:	6821      	ldrge	r1, [r4, #0]
 801c1e4:	f021 0104 	bicge.w	r1, r1, #4
 801c1e8:	6021      	strge	r1, [r4, #0]
 801c1ea:	b90e      	cbnz	r6, 801c1f0 <_printf_i+0x118>
 801c1ec:	2d00      	cmp	r5, #0
 801c1ee:	d04d      	beq.n	801c28c <_printf_i+0x1b4>
 801c1f0:	4615      	mov	r5, r2
 801c1f2:	fbb6 f1f3 	udiv	r1, r6, r3
 801c1f6:	fb03 6711 	mls	r7, r3, r1, r6
 801c1fa:	5dc7      	ldrb	r7, [r0, r7]
 801c1fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c200:	4637      	mov	r7, r6
 801c202:	42bb      	cmp	r3, r7
 801c204:	460e      	mov	r6, r1
 801c206:	d9f4      	bls.n	801c1f2 <_printf_i+0x11a>
 801c208:	2b08      	cmp	r3, #8
 801c20a:	d10b      	bne.n	801c224 <_printf_i+0x14c>
 801c20c:	6823      	ldr	r3, [r4, #0]
 801c20e:	07de      	lsls	r6, r3, #31
 801c210:	d508      	bpl.n	801c224 <_printf_i+0x14c>
 801c212:	6923      	ldr	r3, [r4, #16]
 801c214:	6861      	ldr	r1, [r4, #4]
 801c216:	4299      	cmp	r1, r3
 801c218:	bfde      	ittt	le
 801c21a:	2330      	movle	r3, #48	; 0x30
 801c21c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c220:	f105 35ff 	addle.w	r5, r5, #4294967295
 801c224:	1b52      	subs	r2, r2, r5
 801c226:	6122      	str	r2, [r4, #16]
 801c228:	f8cd a000 	str.w	sl, [sp]
 801c22c:	464b      	mov	r3, r9
 801c22e:	aa03      	add	r2, sp, #12
 801c230:	4621      	mov	r1, r4
 801c232:	4640      	mov	r0, r8
 801c234:	f7ff fee2 	bl	801bffc <_printf_common>
 801c238:	3001      	adds	r0, #1
 801c23a:	d14c      	bne.n	801c2d6 <_printf_i+0x1fe>
 801c23c:	f04f 30ff 	mov.w	r0, #4294967295
 801c240:	b004      	add	sp, #16
 801c242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c246:	4835      	ldr	r0, [pc, #212]	; (801c31c <_printf_i+0x244>)
 801c248:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801c24c:	6829      	ldr	r1, [r5, #0]
 801c24e:	6823      	ldr	r3, [r4, #0]
 801c250:	f851 6b04 	ldr.w	r6, [r1], #4
 801c254:	6029      	str	r1, [r5, #0]
 801c256:	061d      	lsls	r5, r3, #24
 801c258:	d514      	bpl.n	801c284 <_printf_i+0x1ac>
 801c25a:	07df      	lsls	r7, r3, #31
 801c25c:	bf44      	itt	mi
 801c25e:	f043 0320 	orrmi.w	r3, r3, #32
 801c262:	6023      	strmi	r3, [r4, #0]
 801c264:	b91e      	cbnz	r6, 801c26e <_printf_i+0x196>
 801c266:	6823      	ldr	r3, [r4, #0]
 801c268:	f023 0320 	bic.w	r3, r3, #32
 801c26c:	6023      	str	r3, [r4, #0]
 801c26e:	2310      	movs	r3, #16
 801c270:	e7b0      	b.n	801c1d4 <_printf_i+0xfc>
 801c272:	6823      	ldr	r3, [r4, #0]
 801c274:	f043 0320 	orr.w	r3, r3, #32
 801c278:	6023      	str	r3, [r4, #0]
 801c27a:	2378      	movs	r3, #120	; 0x78
 801c27c:	4828      	ldr	r0, [pc, #160]	; (801c320 <_printf_i+0x248>)
 801c27e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c282:	e7e3      	b.n	801c24c <_printf_i+0x174>
 801c284:	0659      	lsls	r1, r3, #25
 801c286:	bf48      	it	mi
 801c288:	b2b6      	uxthmi	r6, r6
 801c28a:	e7e6      	b.n	801c25a <_printf_i+0x182>
 801c28c:	4615      	mov	r5, r2
 801c28e:	e7bb      	b.n	801c208 <_printf_i+0x130>
 801c290:	682b      	ldr	r3, [r5, #0]
 801c292:	6826      	ldr	r6, [r4, #0]
 801c294:	6961      	ldr	r1, [r4, #20]
 801c296:	1d18      	adds	r0, r3, #4
 801c298:	6028      	str	r0, [r5, #0]
 801c29a:	0635      	lsls	r5, r6, #24
 801c29c:	681b      	ldr	r3, [r3, #0]
 801c29e:	d501      	bpl.n	801c2a4 <_printf_i+0x1cc>
 801c2a0:	6019      	str	r1, [r3, #0]
 801c2a2:	e002      	b.n	801c2aa <_printf_i+0x1d2>
 801c2a4:	0670      	lsls	r0, r6, #25
 801c2a6:	d5fb      	bpl.n	801c2a0 <_printf_i+0x1c8>
 801c2a8:	8019      	strh	r1, [r3, #0]
 801c2aa:	2300      	movs	r3, #0
 801c2ac:	6123      	str	r3, [r4, #16]
 801c2ae:	4615      	mov	r5, r2
 801c2b0:	e7ba      	b.n	801c228 <_printf_i+0x150>
 801c2b2:	682b      	ldr	r3, [r5, #0]
 801c2b4:	1d1a      	adds	r2, r3, #4
 801c2b6:	602a      	str	r2, [r5, #0]
 801c2b8:	681d      	ldr	r5, [r3, #0]
 801c2ba:	6862      	ldr	r2, [r4, #4]
 801c2bc:	2100      	movs	r1, #0
 801c2be:	4628      	mov	r0, r5
 801c2c0:	f7e3 ffc6 	bl	8000250 <memchr>
 801c2c4:	b108      	cbz	r0, 801c2ca <_printf_i+0x1f2>
 801c2c6:	1b40      	subs	r0, r0, r5
 801c2c8:	6060      	str	r0, [r4, #4]
 801c2ca:	6863      	ldr	r3, [r4, #4]
 801c2cc:	6123      	str	r3, [r4, #16]
 801c2ce:	2300      	movs	r3, #0
 801c2d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c2d4:	e7a8      	b.n	801c228 <_printf_i+0x150>
 801c2d6:	6923      	ldr	r3, [r4, #16]
 801c2d8:	462a      	mov	r2, r5
 801c2da:	4649      	mov	r1, r9
 801c2dc:	4640      	mov	r0, r8
 801c2de:	47d0      	blx	sl
 801c2e0:	3001      	adds	r0, #1
 801c2e2:	d0ab      	beq.n	801c23c <_printf_i+0x164>
 801c2e4:	6823      	ldr	r3, [r4, #0]
 801c2e6:	079b      	lsls	r3, r3, #30
 801c2e8:	d413      	bmi.n	801c312 <_printf_i+0x23a>
 801c2ea:	68e0      	ldr	r0, [r4, #12]
 801c2ec:	9b03      	ldr	r3, [sp, #12]
 801c2ee:	4298      	cmp	r0, r3
 801c2f0:	bfb8      	it	lt
 801c2f2:	4618      	movlt	r0, r3
 801c2f4:	e7a4      	b.n	801c240 <_printf_i+0x168>
 801c2f6:	2301      	movs	r3, #1
 801c2f8:	4632      	mov	r2, r6
 801c2fa:	4649      	mov	r1, r9
 801c2fc:	4640      	mov	r0, r8
 801c2fe:	47d0      	blx	sl
 801c300:	3001      	adds	r0, #1
 801c302:	d09b      	beq.n	801c23c <_printf_i+0x164>
 801c304:	3501      	adds	r5, #1
 801c306:	68e3      	ldr	r3, [r4, #12]
 801c308:	9903      	ldr	r1, [sp, #12]
 801c30a:	1a5b      	subs	r3, r3, r1
 801c30c:	42ab      	cmp	r3, r5
 801c30e:	dcf2      	bgt.n	801c2f6 <_printf_i+0x21e>
 801c310:	e7eb      	b.n	801c2ea <_printf_i+0x212>
 801c312:	2500      	movs	r5, #0
 801c314:	f104 0619 	add.w	r6, r4, #25
 801c318:	e7f5      	b.n	801c306 <_printf_i+0x22e>
 801c31a:	bf00      	nop
 801c31c:	08024666 	.word	0x08024666
 801c320:	08024677 	.word	0x08024677

0801c324 <_scanf_float>:
 801c324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c328:	b087      	sub	sp, #28
 801c32a:	4617      	mov	r7, r2
 801c32c:	9303      	str	r3, [sp, #12]
 801c32e:	688b      	ldr	r3, [r1, #8]
 801c330:	1e5a      	subs	r2, r3, #1
 801c332:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801c336:	bf83      	ittte	hi
 801c338:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801c33c:	195b      	addhi	r3, r3, r5
 801c33e:	9302      	strhi	r3, [sp, #8]
 801c340:	2300      	movls	r3, #0
 801c342:	bf86      	itte	hi
 801c344:	f240 135d 	movwhi	r3, #349	; 0x15d
 801c348:	608b      	strhi	r3, [r1, #8]
 801c34a:	9302      	strls	r3, [sp, #8]
 801c34c:	680b      	ldr	r3, [r1, #0]
 801c34e:	468b      	mov	fp, r1
 801c350:	2500      	movs	r5, #0
 801c352:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801c356:	f84b 3b1c 	str.w	r3, [fp], #28
 801c35a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801c35e:	4680      	mov	r8, r0
 801c360:	460c      	mov	r4, r1
 801c362:	465e      	mov	r6, fp
 801c364:	46aa      	mov	sl, r5
 801c366:	46a9      	mov	r9, r5
 801c368:	9501      	str	r5, [sp, #4]
 801c36a:	68a2      	ldr	r2, [r4, #8]
 801c36c:	b152      	cbz	r2, 801c384 <_scanf_float+0x60>
 801c36e:	683b      	ldr	r3, [r7, #0]
 801c370:	781b      	ldrb	r3, [r3, #0]
 801c372:	2b4e      	cmp	r3, #78	; 0x4e
 801c374:	d864      	bhi.n	801c440 <_scanf_float+0x11c>
 801c376:	2b40      	cmp	r3, #64	; 0x40
 801c378:	d83c      	bhi.n	801c3f4 <_scanf_float+0xd0>
 801c37a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801c37e:	b2c8      	uxtb	r0, r1
 801c380:	280e      	cmp	r0, #14
 801c382:	d93a      	bls.n	801c3fa <_scanf_float+0xd6>
 801c384:	f1b9 0f00 	cmp.w	r9, #0
 801c388:	d003      	beq.n	801c392 <_scanf_float+0x6e>
 801c38a:	6823      	ldr	r3, [r4, #0]
 801c38c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c390:	6023      	str	r3, [r4, #0]
 801c392:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c396:	f1ba 0f01 	cmp.w	sl, #1
 801c39a:	f200 8113 	bhi.w	801c5c4 <_scanf_float+0x2a0>
 801c39e:	455e      	cmp	r6, fp
 801c3a0:	f200 8105 	bhi.w	801c5ae <_scanf_float+0x28a>
 801c3a4:	2501      	movs	r5, #1
 801c3a6:	4628      	mov	r0, r5
 801c3a8:	b007      	add	sp, #28
 801c3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3ae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801c3b2:	2a0d      	cmp	r2, #13
 801c3b4:	d8e6      	bhi.n	801c384 <_scanf_float+0x60>
 801c3b6:	a101      	add	r1, pc, #4	; (adr r1, 801c3bc <_scanf_float+0x98>)
 801c3b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801c3bc:	0801c4fb 	.word	0x0801c4fb
 801c3c0:	0801c385 	.word	0x0801c385
 801c3c4:	0801c385 	.word	0x0801c385
 801c3c8:	0801c385 	.word	0x0801c385
 801c3cc:	0801c55b 	.word	0x0801c55b
 801c3d0:	0801c533 	.word	0x0801c533
 801c3d4:	0801c385 	.word	0x0801c385
 801c3d8:	0801c385 	.word	0x0801c385
 801c3dc:	0801c509 	.word	0x0801c509
 801c3e0:	0801c385 	.word	0x0801c385
 801c3e4:	0801c385 	.word	0x0801c385
 801c3e8:	0801c385 	.word	0x0801c385
 801c3ec:	0801c385 	.word	0x0801c385
 801c3f0:	0801c4c1 	.word	0x0801c4c1
 801c3f4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801c3f8:	e7db      	b.n	801c3b2 <_scanf_float+0x8e>
 801c3fa:	290e      	cmp	r1, #14
 801c3fc:	d8c2      	bhi.n	801c384 <_scanf_float+0x60>
 801c3fe:	a001      	add	r0, pc, #4	; (adr r0, 801c404 <_scanf_float+0xe0>)
 801c400:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801c404:	0801c4b3 	.word	0x0801c4b3
 801c408:	0801c385 	.word	0x0801c385
 801c40c:	0801c4b3 	.word	0x0801c4b3
 801c410:	0801c547 	.word	0x0801c547
 801c414:	0801c385 	.word	0x0801c385
 801c418:	0801c461 	.word	0x0801c461
 801c41c:	0801c49d 	.word	0x0801c49d
 801c420:	0801c49d 	.word	0x0801c49d
 801c424:	0801c49d 	.word	0x0801c49d
 801c428:	0801c49d 	.word	0x0801c49d
 801c42c:	0801c49d 	.word	0x0801c49d
 801c430:	0801c49d 	.word	0x0801c49d
 801c434:	0801c49d 	.word	0x0801c49d
 801c438:	0801c49d 	.word	0x0801c49d
 801c43c:	0801c49d 	.word	0x0801c49d
 801c440:	2b6e      	cmp	r3, #110	; 0x6e
 801c442:	d809      	bhi.n	801c458 <_scanf_float+0x134>
 801c444:	2b60      	cmp	r3, #96	; 0x60
 801c446:	d8b2      	bhi.n	801c3ae <_scanf_float+0x8a>
 801c448:	2b54      	cmp	r3, #84	; 0x54
 801c44a:	d077      	beq.n	801c53c <_scanf_float+0x218>
 801c44c:	2b59      	cmp	r3, #89	; 0x59
 801c44e:	d199      	bne.n	801c384 <_scanf_float+0x60>
 801c450:	2d07      	cmp	r5, #7
 801c452:	d197      	bne.n	801c384 <_scanf_float+0x60>
 801c454:	2508      	movs	r5, #8
 801c456:	e029      	b.n	801c4ac <_scanf_float+0x188>
 801c458:	2b74      	cmp	r3, #116	; 0x74
 801c45a:	d06f      	beq.n	801c53c <_scanf_float+0x218>
 801c45c:	2b79      	cmp	r3, #121	; 0x79
 801c45e:	e7f6      	b.n	801c44e <_scanf_float+0x12a>
 801c460:	6821      	ldr	r1, [r4, #0]
 801c462:	05c8      	lsls	r0, r1, #23
 801c464:	d51a      	bpl.n	801c49c <_scanf_float+0x178>
 801c466:	9b02      	ldr	r3, [sp, #8]
 801c468:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801c46c:	6021      	str	r1, [r4, #0]
 801c46e:	f109 0901 	add.w	r9, r9, #1
 801c472:	b11b      	cbz	r3, 801c47c <_scanf_float+0x158>
 801c474:	3b01      	subs	r3, #1
 801c476:	3201      	adds	r2, #1
 801c478:	9302      	str	r3, [sp, #8]
 801c47a:	60a2      	str	r2, [r4, #8]
 801c47c:	68a3      	ldr	r3, [r4, #8]
 801c47e:	3b01      	subs	r3, #1
 801c480:	60a3      	str	r3, [r4, #8]
 801c482:	6923      	ldr	r3, [r4, #16]
 801c484:	3301      	adds	r3, #1
 801c486:	6123      	str	r3, [r4, #16]
 801c488:	687b      	ldr	r3, [r7, #4]
 801c48a:	3b01      	subs	r3, #1
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	607b      	str	r3, [r7, #4]
 801c490:	f340 8084 	ble.w	801c59c <_scanf_float+0x278>
 801c494:	683b      	ldr	r3, [r7, #0]
 801c496:	3301      	adds	r3, #1
 801c498:	603b      	str	r3, [r7, #0]
 801c49a:	e766      	b.n	801c36a <_scanf_float+0x46>
 801c49c:	eb1a 0f05 	cmn.w	sl, r5
 801c4a0:	f47f af70 	bne.w	801c384 <_scanf_float+0x60>
 801c4a4:	6822      	ldr	r2, [r4, #0]
 801c4a6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801c4aa:	6022      	str	r2, [r4, #0]
 801c4ac:	f806 3b01 	strb.w	r3, [r6], #1
 801c4b0:	e7e4      	b.n	801c47c <_scanf_float+0x158>
 801c4b2:	6822      	ldr	r2, [r4, #0]
 801c4b4:	0610      	lsls	r0, r2, #24
 801c4b6:	f57f af65 	bpl.w	801c384 <_scanf_float+0x60>
 801c4ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801c4be:	e7f4      	b.n	801c4aa <_scanf_float+0x186>
 801c4c0:	f1ba 0f00 	cmp.w	sl, #0
 801c4c4:	d10e      	bne.n	801c4e4 <_scanf_float+0x1c0>
 801c4c6:	f1b9 0f00 	cmp.w	r9, #0
 801c4ca:	d10e      	bne.n	801c4ea <_scanf_float+0x1c6>
 801c4cc:	6822      	ldr	r2, [r4, #0]
 801c4ce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801c4d2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801c4d6:	d108      	bne.n	801c4ea <_scanf_float+0x1c6>
 801c4d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c4dc:	6022      	str	r2, [r4, #0]
 801c4de:	f04f 0a01 	mov.w	sl, #1
 801c4e2:	e7e3      	b.n	801c4ac <_scanf_float+0x188>
 801c4e4:	f1ba 0f02 	cmp.w	sl, #2
 801c4e8:	d055      	beq.n	801c596 <_scanf_float+0x272>
 801c4ea:	2d01      	cmp	r5, #1
 801c4ec:	d002      	beq.n	801c4f4 <_scanf_float+0x1d0>
 801c4ee:	2d04      	cmp	r5, #4
 801c4f0:	f47f af48 	bne.w	801c384 <_scanf_float+0x60>
 801c4f4:	3501      	adds	r5, #1
 801c4f6:	b2ed      	uxtb	r5, r5
 801c4f8:	e7d8      	b.n	801c4ac <_scanf_float+0x188>
 801c4fa:	f1ba 0f01 	cmp.w	sl, #1
 801c4fe:	f47f af41 	bne.w	801c384 <_scanf_float+0x60>
 801c502:	f04f 0a02 	mov.w	sl, #2
 801c506:	e7d1      	b.n	801c4ac <_scanf_float+0x188>
 801c508:	b97d      	cbnz	r5, 801c52a <_scanf_float+0x206>
 801c50a:	f1b9 0f00 	cmp.w	r9, #0
 801c50e:	f47f af3c 	bne.w	801c38a <_scanf_float+0x66>
 801c512:	6822      	ldr	r2, [r4, #0]
 801c514:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801c518:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801c51c:	f47f af39 	bne.w	801c392 <_scanf_float+0x6e>
 801c520:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c524:	6022      	str	r2, [r4, #0]
 801c526:	2501      	movs	r5, #1
 801c528:	e7c0      	b.n	801c4ac <_scanf_float+0x188>
 801c52a:	2d03      	cmp	r5, #3
 801c52c:	d0e2      	beq.n	801c4f4 <_scanf_float+0x1d0>
 801c52e:	2d05      	cmp	r5, #5
 801c530:	e7de      	b.n	801c4f0 <_scanf_float+0x1cc>
 801c532:	2d02      	cmp	r5, #2
 801c534:	f47f af26 	bne.w	801c384 <_scanf_float+0x60>
 801c538:	2503      	movs	r5, #3
 801c53a:	e7b7      	b.n	801c4ac <_scanf_float+0x188>
 801c53c:	2d06      	cmp	r5, #6
 801c53e:	f47f af21 	bne.w	801c384 <_scanf_float+0x60>
 801c542:	2507      	movs	r5, #7
 801c544:	e7b2      	b.n	801c4ac <_scanf_float+0x188>
 801c546:	6822      	ldr	r2, [r4, #0]
 801c548:	0591      	lsls	r1, r2, #22
 801c54a:	f57f af1b 	bpl.w	801c384 <_scanf_float+0x60>
 801c54e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801c552:	6022      	str	r2, [r4, #0]
 801c554:	f8cd 9004 	str.w	r9, [sp, #4]
 801c558:	e7a8      	b.n	801c4ac <_scanf_float+0x188>
 801c55a:	6822      	ldr	r2, [r4, #0]
 801c55c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801c560:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801c564:	d006      	beq.n	801c574 <_scanf_float+0x250>
 801c566:	0550      	lsls	r0, r2, #21
 801c568:	f57f af0c 	bpl.w	801c384 <_scanf_float+0x60>
 801c56c:	f1b9 0f00 	cmp.w	r9, #0
 801c570:	f43f af0f 	beq.w	801c392 <_scanf_float+0x6e>
 801c574:	0591      	lsls	r1, r2, #22
 801c576:	bf58      	it	pl
 801c578:	9901      	ldrpl	r1, [sp, #4]
 801c57a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801c57e:	bf58      	it	pl
 801c580:	eba9 0101 	subpl.w	r1, r9, r1
 801c584:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801c588:	bf58      	it	pl
 801c58a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801c58e:	6022      	str	r2, [r4, #0]
 801c590:	f04f 0900 	mov.w	r9, #0
 801c594:	e78a      	b.n	801c4ac <_scanf_float+0x188>
 801c596:	f04f 0a03 	mov.w	sl, #3
 801c59a:	e787      	b.n	801c4ac <_scanf_float+0x188>
 801c59c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801c5a0:	4639      	mov	r1, r7
 801c5a2:	4640      	mov	r0, r8
 801c5a4:	4798      	blx	r3
 801c5a6:	2800      	cmp	r0, #0
 801c5a8:	f43f aedf 	beq.w	801c36a <_scanf_float+0x46>
 801c5ac:	e6ea      	b.n	801c384 <_scanf_float+0x60>
 801c5ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c5b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c5b6:	463a      	mov	r2, r7
 801c5b8:	4640      	mov	r0, r8
 801c5ba:	4798      	blx	r3
 801c5bc:	6923      	ldr	r3, [r4, #16]
 801c5be:	3b01      	subs	r3, #1
 801c5c0:	6123      	str	r3, [r4, #16]
 801c5c2:	e6ec      	b.n	801c39e <_scanf_float+0x7a>
 801c5c4:	1e6b      	subs	r3, r5, #1
 801c5c6:	2b06      	cmp	r3, #6
 801c5c8:	d825      	bhi.n	801c616 <_scanf_float+0x2f2>
 801c5ca:	2d02      	cmp	r5, #2
 801c5cc:	d836      	bhi.n	801c63c <_scanf_float+0x318>
 801c5ce:	455e      	cmp	r6, fp
 801c5d0:	f67f aee8 	bls.w	801c3a4 <_scanf_float+0x80>
 801c5d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c5d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c5dc:	463a      	mov	r2, r7
 801c5de:	4640      	mov	r0, r8
 801c5e0:	4798      	blx	r3
 801c5e2:	6923      	ldr	r3, [r4, #16]
 801c5e4:	3b01      	subs	r3, #1
 801c5e6:	6123      	str	r3, [r4, #16]
 801c5e8:	e7f1      	b.n	801c5ce <_scanf_float+0x2aa>
 801c5ea:	9802      	ldr	r0, [sp, #8]
 801c5ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c5f0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801c5f4:	9002      	str	r0, [sp, #8]
 801c5f6:	463a      	mov	r2, r7
 801c5f8:	4640      	mov	r0, r8
 801c5fa:	4798      	blx	r3
 801c5fc:	6923      	ldr	r3, [r4, #16]
 801c5fe:	3b01      	subs	r3, #1
 801c600:	6123      	str	r3, [r4, #16]
 801c602:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c606:	fa5f fa8a 	uxtb.w	sl, sl
 801c60a:	f1ba 0f02 	cmp.w	sl, #2
 801c60e:	d1ec      	bne.n	801c5ea <_scanf_float+0x2c6>
 801c610:	3d03      	subs	r5, #3
 801c612:	b2ed      	uxtb	r5, r5
 801c614:	1b76      	subs	r6, r6, r5
 801c616:	6823      	ldr	r3, [r4, #0]
 801c618:	05da      	lsls	r2, r3, #23
 801c61a:	d52f      	bpl.n	801c67c <_scanf_float+0x358>
 801c61c:	055b      	lsls	r3, r3, #21
 801c61e:	d510      	bpl.n	801c642 <_scanf_float+0x31e>
 801c620:	455e      	cmp	r6, fp
 801c622:	f67f aebf 	bls.w	801c3a4 <_scanf_float+0x80>
 801c626:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c62a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801c62e:	463a      	mov	r2, r7
 801c630:	4640      	mov	r0, r8
 801c632:	4798      	blx	r3
 801c634:	6923      	ldr	r3, [r4, #16]
 801c636:	3b01      	subs	r3, #1
 801c638:	6123      	str	r3, [r4, #16]
 801c63a:	e7f1      	b.n	801c620 <_scanf_float+0x2fc>
 801c63c:	46aa      	mov	sl, r5
 801c63e:	9602      	str	r6, [sp, #8]
 801c640:	e7df      	b.n	801c602 <_scanf_float+0x2de>
 801c642:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801c646:	6923      	ldr	r3, [r4, #16]
 801c648:	2965      	cmp	r1, #101	; 0x65
 801c64a:	f103 33ff 	add.w	r3, r3, #4294967295
 801c64e:	f106 35ff 	add.w	r5, r6, #4294967295
 801c652:	6123      	str	r3, [r4, #16]
 801c654:	d00c      	beq.n	801c670 <_scanf_float+0x34c>
 801c656:	2945      	cmp	r1, #69	; 0x45
 801c658:	d00a      	beq.n	801c670 <_scanf_float+0x34c>
 801c65a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c65e:	463a      	mov	r2, r7
 801c660:	4640      	mov	r0, r8
 801c662:	4798      	blx	r3
 801c664:	6923      	ldr	r3, [r4, #16]
 801c666:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801c66a:	3b01      	subs	r3, #1
 801c66c:	1eb5      	subs	r5, r6, #2
 801c66e:	6123      	str	r3, [r4, #16]
 801c670:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801c674:	463a      	mov	r2, r7
 801c676:	4640      	mov	r0, r8
 801c678:	4798      	blx	r3
 801c67a:	462e      	mov	r6, r5
 801c67c:	6825      	ldr	r5, [r4, #0]
 801c67e:	f015 0510 	ands.w	r5, r5, #16
 801c682:	d14e      	bne.n	801c722 <_scanf_float+0x3fe>
 801c684:	7035      	strb	r5, [r6, #0]
 801c686:	6823      	ldr	r3, [r4, #0]
 801c688:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801c68c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c690:	d119      	bne.n	801c6c6 <_scanf_float+0x3a2>
 801c692:	9b01      	ldr	r3, [sp, #4]
 801c694:	454b      	cmp	r3, r9
 801c696:	eba3 0209 	sub.w	r2, r3, r9
 801c69a:	d121      	bne.n	801c6e0 <_scanf_float+0x3bc>
 801c69c:	2200      	movs	r2, #0
 801c69e:	4659      	mov	r1, fp
 801c6a0:	4640      	mov	r0, r8
 801c6a2:	f000 febf 	bl	801d424 <_strtod_r>
 801c6a6:	6822      	ldr	r2, [r4, #0]
 801c6a8:	9b03      	ldr	r3, [sp, #12]
 801c6aa:	f012 0f02 	tst.w	r2, #2
 801c6ae:	681b      	ldr	r3, [r3, #0]
 801c6b0:	d021      	beq.n	801c6f6 <_scanf_float+0x3d2>
 801c6b2:	9903      	ldr	r1, [sp, #12]
 801c6b4:	1d1a      	adds	r2, r3, #4
 801c6b6:	600a      	str	r2, [r1, #0]
 801c6b8:	681b      	ldr	r3, [r3, #0]
 801c6ba:	ed83 0b00 	vstr	d0, [r3]
 801c6be:	68e3      	ldr	r3, [r4, #12]
 801c6c0:	3301      	adds	r3, #1
 801c6c2:	60e3      	str	r3, [r4, #12]
 801c6c4:	e66f      	b.n	801c3a6 <_scanf_float+0x82>
 801c6c6:	9b04      	ldr	r3, [sp, #16]
 801c6c8:	2b00      	cmp	r3, #0
 801c6ca:	d0e7      	beq.n	801c69c <_scanf_float+0x378>
 801c6cc:	9905      	ldr	r1, [sp, #20]
 801c6ce:	230a      	movs	r3, #10
 801c6d0:	462a      	mov	r2, r5
 801c6d2:	3101      	adds	r1, #1
 801c6d4:	4640      	mov	r0, r8
 801c6d6:	f000 ff2d 	bl	801d534 <_strtol_r>
 801c6da:	9b04      	ldr	r3, [sp, #16]
 801c6dc:	9e05      	ldr	r6, [sp, #20]
 801c6de:	1ac2      	subs	r2, r0, r3
 801c6e0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801c6e4:	429e      	cmp	r6, r3
 801c6e6:	bf28      	it	cs
 801c6e8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801c6ec:	490e      	ldr	r1, [pc, #56]	; (801c728 <_scanf_float+0x404>)
 801c6ee:	4630      	mov	r0, r6
 801c6f0:	f000 f88a 	bl	801c808 <siprintf>
 801c6f4:	e7d2      	b.n	801c69c <_scanf_float+0x378>
 801c6f6:	9903      	ldr	r1, [sp, #12]
 801c6f8:	f012 0f04 	tst.w	r2, #4
 801c6fc:	f103 0204 	add.w	r2, r3, #4
 801c700:	600a      	str	r2, [r1, #0]
 801c702:	d1d9      	bne.n	801c6b8 <_scanf_float+0x394>
 801c704:	eeb4 0b40 	vcmp.f64	d0, d0
 801c708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c70c:	681e      	ldr	r6, [r3, #0]
 801c70e:	d705      	bvc.n	801c71c <_scanf_float+0x3f8>
 801c710:	4806      	ldr	r0, [pc, #24]	; (801c72c <_scanf_float+0x408>)
 801c712:	f000 f873 	bl	801c7fc <nanf>
 801c716:	ed86 0a00 	vstr	s0, [r6]
 801c71a:	e7d0      	b.n	801c6be <_scanf_float+0x39a>
 801c71c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801c720:	e7f9      	b.n	801c716 <_scanf_float+0x3f2>
 801c722:	2500      	movs	r5, #0
 801c724:	e63f      	b.n	801c3a6 <_scanf_float+0x82>
 801c726:	bf00      	nop
 801c728:	08024688 	.word	0x08024688
 801c72c:	0802478b 	.word	0x0802478b

0801c730 <iprintf>:
 801c730:	b40f      	push	{r0, r1, r2, r3}
 801c732:	4b0a      	ldr	r3, [pc, #40]	; (801c75c <iprintf+0x2c>)
 801c734:	b513      	push	{r0, r1, r4, lr}
 801c736:	681c      	ldr	r4, [r3, #0]
 801c738:	b124      	cbz	r4, 801c744 <iprintf+0x14>
 801c73a:	69a3      	ldr	r3, [r4, #24]
 801c73c:	b913      	cbnz	r3, 801c744 <iprintf+0x14>
 801c73e:	4620      	mov	r0, r4
 801c740:	f001 fd72 	bl	801e228 <__sinit>
 801c744:	ab05      	add	r3, sp, #20
 801c746:	9a04      	ldr	r2, [sp, #16]
 801c748:	68a1      	ldr	r1, [r4, #8]
 801c74a:	9301      	str	r3, [sp, #4]
 801c74c:	4620      	mov	r0, r4
 801c74e:	f002 fff3 	bl	801f738 <_vfiprintf_r>
 801c752:	b002      	add	sp, #8
 801c754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c758:	b004      	add	sp, #16
 801c75a:	4770      	bx	lr
 801c75c:	20000068 	.word	0x20000068

0801c760 <rand>:
 801c760:	4b16      	ldr	r3, [pc, #88]	; (801c7bc <rand+0x5c>)
 801c762:	b510      	push	{r4, lr}
 801c764:	681c      	ldr	r4, [r3, #0]
 801c766:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c768:	b9b3      	cbnz	r3, 801c798 <rand+0x38>
 801c76a:	2018      	movs	r0, #24
 801c76c:	f7ff f85a 	bl	801b824 <malloc>
 801c770:	63a0      	str	r0, [r4, #56]	; 0x38
 801c772:	b928      	cbnz	r0, 801c780 <rand+0x20>
 801c774:	4602      	mov	r2, r0
 801c776:	4b12      	ldr	r3, [pc, #72]	; (801c7c0 <rand+0x60>)
 801c778:	4812      	ldr	r0, [pc, #72]	; (801c7c4 <rand+0x64>)
 801c77a:	214e      	movs	r1, #78	; 0x4e
 801c77c:	f000 fedc 	bl	801d538 <__assert_func>
 801c780:	4a11      	ldr	r2, [pc, #68]	; (801c7c8 <rand+0x68>)
 801c782:	4b12      	ldr	r3, [pc, #72]	; (801c7cc <rand+0x6c>)
 801c784:	e9c0 2300 	strd	r2, r3, [r0]
 801c788:	4b11      	ldr	r3, [pc, #68]	; (801c7d0 <rand+0x70>)
 801c78a:	6083      	str	r3, [r0, #8]
 801c78c:	230b      	movs	r3, #11
 801c78e:	8183      	strh	r3, [r0, #12]
 801c790:	2201      	movs	r2, #1
 801c792:	2300      	movs	r3, #0
 801c794:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801c798:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801c79a:	4a0e      	ldr	r2, [pc, #56]	; (801c7d4 <rand+0x74>)
 801c79c:	6920      	ldr	r0, [r4, #16]
 801c79e:	6963      	ldr	r3, [r4, #20]
 801c7a0:	490d      	ldr	r1, [pc, #52]	; (801c7d8 <rand+0x78>)
 801c7a2:	4342      	muls	r2, r0
 801c7a4:	fb01 2203 	mla	r2, r1, r3, r2
 801c7a8:	fba0 0101 	umull	r0, r1, r0, r1
 801c7ac:	1c43      	adds	r3, r0, #1
 801c7ae:	eb42 0001 	adc.w	r0, r2, r1
 801c7b2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801c7b6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801c7ba:	bd10      	pop	{r4, pc}
 801c7bc:	20000068 	.word	0x20000068
 801c7c0:	0802468d 	.word	0x0802468d
 801c7c4:	080246a4 	.word	0x080246a4
 801c7c8:	abcd330e 	.word	0xabcd330e
 801c7cc:	e66d1234 	.word	0xe66d1234
 801c7d0:	0005deec 	.word	0x0005deec
 801c7d4:	5851f42d 	.word	0x5851f42d
 801c7d8:	4c957f2d 	.word	0x4c957f2d

0801c7dc <_sbrk_r>:
 801c7dc:	b538      	push	{r3, r4, r5, lr}
 801c7de:	4d06      	ldr	r5, [pc, #24]	; (801c7f8 <_sbrk_r+0x1c>)
 801c7e0:	2300      	movs	r3, #0
 801c7e2:	4604      	mov	r4, r0
 801c7e4:	4608      	mov	r0, r1
 801c7e6:	602b      	str	r3, [r5, #0]
 801c7e8:	f7e5 fadc 	bl	8001da4 <_sbrk>
 801c7ec:	1c43      	adds	r3, r0, #1
 801c7ee:	d102      	bne.n	801c7f6 <_sbrk_r+0x1a>
 801c7f0:	682b      	ldr	r3, [r5, #0]
 801c7f2:	b103      	cbz	r3, 801c7f6 <_sbrk_r+0x1a>
 801c7f4:	6023      	str	r3, [r4, #0]
 801c7f6:	bd38      	pop	{r3, r4, r5, pc}
 801c7f8:	20007540 	.word	0x20007540

0801c7fc <nanf>:
 801c7fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801c804 <nanf+0x8>
 801c800:	4770      	bx	lr
 801c802:	bf00      	nop
 801c804:	7fc00000 	.word	0x7fc00000

0801c808 <siprintf>:
 801c808:	b40e      	push	{r1, r2, r3}
 801c80a:	b500      	push	{lr}
 801c80c:	b09c      	sub	sp, #112	; 0x70
 801c80e:	ab1d      	add	r3, sp, #116	; 0x74
 801c810:	9002      	str	r0, [sp, #8]
 801c812:	9006      	str	r0, [sp, #24]
 801c814:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801c818:	4809      	ldr	r0, [pc, #36]	; (801c840 <siprintf+0x38>)
 801c81a:	9107      	str	r1, [sp, #28]
 801c81c:	9104      	str	r1, [sp, #16]
 801c81e:	4909      	ldr	r1, [pc, #36]	; (801c844 <siprintf+0x3c>)
 801c820:	f853 2b04 	ldr.w	r2, [r3], #4
 801c824:	9105      	str	r1, [sp, #20]
 801c826:	6800      	ldr	r0, [r0, #0]
 801c828:	9301      	str	r3, [sp, #4]
 801c82a:	a902      	add	r1, sp, #8
 801c82c:	f002 fe5a 	bl	801f4e4 <_svfiprintf_r>
 801c830:	9b02      	ldr	r3, [sp, #8]
 801c832:	2200      	movs	r2, #0
 801c834:	701a      	strb	r2, [r3, #0]
 801c836:	b01c      	add	sp, #112	; 0x70
 801c838:	f85d eb04 	ldr.w	lr, [sp], #4
 801c83c:	b003      	add	sp, #12
 801c83e:	4770      	bx	lr
 801c840:	20000068 	.word	0x20000068
 801c844:	ffff0208 	.word	0xffff0208

0801c848 <strcpy>:
 801c848:	4603      	mov	r3, r0
 801c84a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c84e:	f803 2b01 	strb.w	r2, [r3], #1
 801c852:	2a00      	cmp	r2, #0
 801c854:	d1f9      	bne.n	801c84a <strcpy+0x2>
 801c856:	4770      	bx	lr

0801c858 <strncmp>:
 801c858:	b510      	push	{r4, lr}
 801c85a:	b17a      	cbz	r2, 801c87c <strncmp+0x24>
 801c85c:	4603      	mov	r3, r0
 801c85e:	3901      	subs	r1, #1
 801c860:	1884      	adds	r4, r0, r2
 801c862:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c866:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801c86a:	4290      	cmp	r0, r2
 801c86c:	d101      	bne.n	801c872 <strncmp+0x1a>
 801c86e:	42a3      	cmp	r3, r4
 801c870:	d101      	bne.n	801c876 <strncmp+0x1e>
 801c872:	1a80      	subs	r0, r0, r2
 801c874:	bd10      	pop	{r4, pc}
 801c876:	2800      	cmp	r0, #0
 801c878:	d1f3      	bne.n	801c862 <strncmp+0xa>
 801c87a:	e7fa      	b.n	801c872 <strncmp+0x1a>
 801c87c:	4610      	mov	r0, r2
 801c87e:	e7f9      	b.n	801c874 <strncmp+0x1c>

0801c880 <sulp>:
 801c880:	b570      	push	{r4, r5, r6, lr}
 801c882:	4604      	mov	r4, r0
 801c884:	460d      	mov	r5, r1
 801c886:	4616      	mov	r6, r2
 801c888:	ec45 4b10 	vmov	d0, r4, r5
 801c88c:	f002 fc82 	bl	801f194 <__ulp>
 801c890:	b17e      	cbz	r6, 801c8b2 <sulp+0x32>
 801c892:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801c896:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c89a:	2b00      	cmp	r3, #0
 801c89c:	dd09      	ble.n	801c8b2 <sulp+0x32>
 801c89e:	051b      	lsls	r3, r3, #20
 801c8a0:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801c8a4:	2000      	movs	r0, #0
 801c8a6:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801c8aa:	ec41 0b17 	vmov	d7, r0, r1
 801c8ae:	ee20 0b07 	vmul.f64	d0, d0, d7
 801c8b2:	bd70      	pop	{r4, r5, r6, pc}
 801c8b4:	0000      	movs	r0, r0
	...

0801c8b8 <_strtod_l>:
 801c8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8bc:	ed2d 8b0e 	vpush	{d8-d14}
 801c8c0:	b097      	sub	sp, #92	; 0x5c
 801c8c2:	461f      	mov	r7, r3
 801c8c4:	2300      	movs	r3, #0
 801c8c6:	9312      	str	r3, [sp, #72]	; 0x48
 801c8c8:	4ba1      	ldr	r3, [pc, #644]	; (801cb50 <_strtod_l+0x298>)
 801c8ca:	920d      	str	r2, [sp, #52]	; 0x34
 801c8cc:	681b      	ldr	r3, [r3, #0]
 801c8ce:	9307      	str	r3, [sp, #28]
 801c8d0:	4604      	mov	r4, r0
 801c8d2:	4618      	mov	r0, r3
 801c8d4:	468b      	mov	fp, r1
 801c8d6:	f7e3 fcb3 	bl	8000240 <strlen>
 801c8da:	f04f 0800 	mov.w	r8, #0
 801c8de:	4605      	mov	r5, r0
 801c8e0:	f04f 0900 	mov.w	r9, #0
 801c8e4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 801c8e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801c8ea:	7813      	ldrb	r3, [r2, #0]
 801c8ec:	2b2b      	cmp	r3, #43	; 0x2b
 801c8ee:	d04d      	beq.n	801c98c <_strtod_l+0xd4>
 801c8f0:	d83a      	bhi.n	801c968 <_strtod_l+0xb0>
 801c8f2:	2b0d      	cmp	r3, #13
 801c8f4:	d833      	bhi.n	801c95e <_strtod_l+0xa6>
 801c8f6:	2b08      	cmp	r3, #8
 801c8f8:	d833      	bhi.n	801c962 <_strtod_l+0xaa>
 801c8fa:	2b00      	cmp	r3, #0
 801c8fc:	d03d      	beq.n	801c97a <_strtod_l+0xc2>
 801c8fe:	2300      	movs	r3, #0
 801c900:	9308      	str	r3, [sp, #32]
 801c902:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801c904:	7833      	ldrb	r3, [r6, #0]
 801c906:	2b30      	cmp	r3, #48	; 0x30
 801c908:	f040 80b0 	bne.w	801ca6c <_strtod_l+0x1b4>
 801c90c:	7873      	ldrb	r3, [r6, #1]
 801c90e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c912:	2b58      	cmp	r3, #88	; 0x58
 801c914:	d167      	bne.n	801c9e6 <_strtod_l+0x12e>
 801c916:	9b08      	ldr	r3, [sp, #32]
 801c918:	9301      	str	r3, [sp, #4]
 801c91a:	ab12      	add	r3, sp, #72	; 0x48
 801c91c:	9702      	str	r7, [sp, #8]
 801c91e:	9300      	str	r3, [sp, #0]
 801c920:	4a8c      	ldr	r2, [pc, #560]	; (801cb54 <_strtod_l+0x29c>)
 801c922:	ab13      	add	r3, sp, #76	; 0x4c
 801c924:	a911      	add	r1, sp, #68	; 0x44
 801c926:	4620      	mov	r0, r4
 801c928:	f001 fd94 	bl	801e454 <__gethex>
 801c92c:	f010 0507 	ands.w	r5, r0, #7
 801c930:	4607      	mov	r7, r0
 801c932:	d005      	beq.n	801c940 <_strtod_l+0x88>
 801c934:	2d06      	cmp	r5, #6
 801c936:	d12b      	bne.n	801c990 <_strtod_l+0xd8>
 801c938:	3601      	adds	r6, #1
 801c93a:	2300      	movs	r3, #0
 801c93c:	9611      	str	r6, [sp, #68]	; 0x44
 801c93e:	9308      	str	r3, [sp, #32]
 801c940:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c942:	2b00      	cmp	r3, #0
 801c944:	f040 854e 	bne.w	801d3e4 <_strtod_l+0xb2c>
 801c948:	9b08      	ldr	r3, [sp, #32]
 801c94a:	b1e3      	cbz	r3, 801c986 <_strtod_l+0xce>
 801c94c:	ec49 8b17 	vmov	d7, r8, r9
 801c950:	eeb1 0b47 	vneg.f64	d0, d7
 801c954:	b017      	add	sp, #92	; 0x5c
 801c956:	ecbd 8b0e 	vpop	{d8-d14}
 801c95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c95e:	2b20      	cmp	r3, #32
 801c960:	d1cd      	bne.n	801c8fe <_strtod_l+0x46>
 801c962:	3201      	adds	r2, #1
 801c964:	9211      	str	r2, [sp, #68]	; 0x44
 801c966:	e7bf      	b.n	801c8e8 <_strtod_l+0x30>
 801c968:	2b2d      	cmp	r3, #45	; 0x2d
 801c96a:	d1c8      	bne.n	801c8fe <_strtod_l+0x46>
 801c96c:	2301      	movs	r3, #1
 801c96e:	9308      	str	r3, [sp, #32]
 801c970:	1c53      	adds	r3, r2, #1
 801c972:	9311      	str	r3, [sp, #68]	; 0x44
 801c974:	7853      	ldrb	r3, [r2, #1]
 801c976:	2b00      	cmp	r3, #0
 801c978:	d1c3      	bne.n	801c902 <_strtod_l+0x4a>
 801c97a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c97c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 801c980:	2b00      	cmp	r3, #0
 801c982:	f040 852d 	bne.w	801d3e0 <_strtod_l+0xb28>
 801c986:	ec49 8b10 	vmov	d0, r8, r9
 801c98a:	e7e3      	b.n	801c954 <_strtod_l+0x9c>
 801c98c:	2300      	movs	r3, #0
 801c98e:	e7ee      	b.n	801c96e <_strtod_l+0xb6>
 801c990:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c992:	b13a      	cbz	r2, 801c9a4 <_strtod_l+0xec>
 801c994:	2135      	movs	r1, #53	; 0x35
 801c996:	a814      	add	r0, sp, #80	; 0x50
 801c998:	f002 fd04 	bl	801f3a4 <__copybits>
 801c99c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c99e:	4620      	mov	r0, r4
 801c9a0:	f002 f8c6 	bl	801eb30 <_Bfree>
 801c9a4:	3d01      	subs	r5, #1
 801c9a6:	2d04      	cmp	r5, #4
 801c9a8:	d806      	bhi.n	801c9b8 <_strtod_l+0x100>
 801c9aa:	e8df f005 	tbb	[pc, r5]
 801c9ae:	030a      	.short	0x030a
 801c9b0:	1714      	.short	0x1714
 801c9b2:	0a          	.byte	0x0a
 801c9b3:	00          	.byte	0x00
 801c9b4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 801c9b8:	073f      	lsls	r7, r7, #28
 801c9ba:	d5c1      	bpl.n	801c940 <_strtod_l+0x88>
 801c9bc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 801c9c0:	e7be      	b.n	801c940 <_strtod_l+0x88>
 801c9c2:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 801c9c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c9c8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801c9cc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801c9d0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801c9d4:	e7f0      	b.n	801c9b8 <_strtod_l+0x100>
 801c9d6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 801cb58 <_strtod_l+0x2a0>
 801c9da:	e7ed      	b.n	801c9b8 <_strtod_l+0x100>
 801c9dc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801c9e0:	f04f 38ff 	mov.w	r8, #4294967295
 801c9e4:	e7e8      	b.n	801c9b8 <_strtod_l+0x100>
 801c9e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c9e8:	1c5a      	adds	r2, r3, #1
 801c9ea:	9211      	str	r2, [sp, #68]	; 0x44
 801c9ec:	785b      	ldrb	r3, [r3, #1]
 801c9ee:	2b30      	cmp	r3, #48	; 0x30
 801c9f0:	d0f9      	beq.n	801c9e6 <_strtod_l+0x12e>
 801c9f2:	2b00      	cmp	r3, #0
 801c9f4:	d0a4      	beq.n	801c940 <_strtod_l+0x88>
 801c9f6:	2301      	movs	r3, #1
 801c9f8:	f04f 0a00 	mov.w	sl, #0
 801c9fc:	9304      	str	r3, [sp, #16]
 801c9fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ca00:	930a      	str	r3, [sp, #40]	; 0x28
 801ca02:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801ca06:	f8cd a018 	str.w	sl, [sp, #24]
 801ca0a:	220a      	movs	r2, #10
 801ca0c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ca0e:	7807      	ldrb	r7, [r0, #0]
 801ca10:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801ca14:	b2d9      	uxtb	r1, r3
 801ca16:	2909      	cmp	r1, #9
 801ca18:	d92a      	bls.n	801ca70 <_strtod_l+0x1b8>
 801ca1a:	9907      	ldr	r1, [sp, #28]
 801ca1c:	462a      	mov	r2, r5
 801ca1e:	f7ff ff1b 	bl	801c858 <strncmp>
 801ca22:	2800      	cmp	r0, #0
 801ca24:	d033      	beq.n	801ca8e <_strtod_l+0x1d6>
 801ca26:	2000      	movs	r0, #0
 801ca28:	9b06      	ldr	r3, [sp, #24]
 801ca2a:	463a      	mov	r2, r7
 801ca2c:	4601      	mov	r1, r0
 801ca2e:	4607      	mov	r7, r0
 801ca30:	2a65      	cmp	r2, #101	; 0x65
 801ca32:	d001      	beq.n	801ca38 <_strtod_l+0x180>
 801ca34:	2a45      	cmp	r2, #69	; 0x45
 801ca36:	d117      	bne.n	801ca68 <_strtod_l+0x1b0>
 801ca38:	b91b      	cbnz	r3, 801ca42 <_strtod_l+0x18a>
 801ca3a:	9b04      	ldr	r3, [sp, #16]
 801ca3c:	4303      	orrs	r3, r0
 801ca3e:	d09c      	beq.n	801c97a <_strtod_l+0xc2>
 801ca40:	2300      	movs	r3, #0
 801ca42:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 801ca46:	f10b 0201 	add.w	r2, fp, #1
 801ca4a:	9211      	str	r2, [sp, #68]	; 0x44
 801ca4c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 801ca50:	2a2b      	cmp	r2, #43	; 0x2b
 801ca52:	d071      	beq.n	801cb38 <_strtod_l+0x280>
 801ca54:	2a2d      	cmp	r2, #45	; 0x2d
 801ca56:	d077      	beq.n	801cb48 <_strtod_l+0x290>
 801ca58:	f04f 0e00 	mov.w	lr, #0
 801ca5c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801ca60:	2d09      	cmp	r5, #9
 801ca62:	d97f      	bls.n	801cb64 <_strtod_l+0x2ac>
 801ca64:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 801ca68:	2500      	movs	r5, #0
 801ca6a:	e09b      	b.n	801cba4 <_strtod_l+0x2ec>
 801ca6c:	2300      	movs	r3, #0
 801ca6e:	e7c3      	b.n	801c9f8 <_strtod_l+0x140>
 801ca70:	9906      	ldr	r1, [sp, #24]
 801ca72:	2908      	cmp	r1, #8
 801ca74:	bfdd      	ittte	le
 801ca76:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801ca78:	fb02 3301 	mlale	r3, r2, r1, r3
 801ca7c:	9309      	strle	r3, [sp, #36]	; 0x24
 801ca7e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801ca82:	9b06      	ldr	r3, [sp, #24]
 801ca84:	3001      	adds	r0, #1
 801ca86:	3301      	adds	r3, #1
 801ca88:	9306      	str	r3, [sp, #24]
 801ca8a:	9011      	str	r0, [sp, #68]	; 0x44
 801ca8c:	e7be      	b.n	801ca0c <_strtod_l+0x154>
 801ca8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ca90:	195a      	adds	r2, r3, r5
 801ca92:	9211      	str	r2, [sp, #68]	; 0x44
 801ca94:	5d5a      	ldrb	r2, [r3, r5]
 801ca96:	9b06      	ldr	r3, [sp, #24]
 801ca98:	b3a3      	cbz	r3, 801cb04 <_strtod_l+0x24c>
 801ca9a:	4607      	mov	r7, r0
 801ca9c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801caa0:	2909      	cmp	r1, #9
 801caa2:	d912      	bls.n	801caca <_strtod_l+0x212>
 801caa4:	2101      	movs	r1, #1
 801caa6:	e7c3      	b.n	801ca30 <_strtod_l+0x178>
 801caa8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801caaa:	1c5a      	adds	r2, r3, #1
 801caac:	9211      	str	r2, [sp, #68]	; 0x44
 801caae:	785a      	ldrb	r2, [r3, #1]
 801cab0:	3001      	adds	r0, #1
 801cab2:	2a30      	cmp	r2, #48	; 0x30
 801cab4:	d0f8      	beq.n	801caa8 <_strtod_l+0x1f0>
 801cab6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801caba:	2b08      	cmp	r3, #8
 801cabc:	f200 8497 	bhi.w	801d3ee <_strtod_l+0xb36>
 801cac0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cac2:	930a      	str	r3, [sp, #40]	; 0x28
 801cac4:	4607      	mov	r7, r0
 801cac6:	2000      	movs	r0, #0
 801cac8:	4603      	mov	r3, r0
 801caca:	3a30      	subs	r2, #48	; 0x30
 801cacc:	f100 0101 	add.w	r1, r0, #1
 801cad0:	d012      	beq.n	801caf8 <_strtod_l+0x240>
 801cad2:	440f      	add	r7, r1
 801cad4:	eb00 0c03 	add.w	ip, r0, r3
 801cad8:	4619      	mov	r1, r3
 801cada:	250a      	movs	r5, #10
 801cadc:	4561      	cmp	r1, ip
 801cade:	d113      	bne.n	801cb08 <_strtod_l+0x250>
 801cae0:	1819      	adds	r1, r3, r0
 801cae2:	2908      	cmp	r1, #8
 801cae4:	f103 0301 	add.w	r3, r3, #1
 801cae8:	4403      	add	r3, r0
 801caea:	dc1c      	bgt.n	801cb26 <_strtod_l+0x26e>
 801caec:	9809      	ldr	r0, [sp, #36]	; 0x24
 801caee:	210a      	movs	r1, #10
 801caf0:	fb01 2200 	mla	r2, r1, r0, r2
 801caf4:	9209      	str	r2, [sp, #36]	; 0x24
 801caf6:	2100      	movs	r1, #0
 801caf8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cafa:	1c50      	adds	r0, r2, #1
 801cafc:	9011      	str	r0, [sp, #68]	; 0x44
 801cafe:	7852      	ldrb	r2, [r2, #1]
 801cb00:	4608      	mov	r0, r1
 801cb02:	e7cb      	b.n	801ca9c <_strtod_l+0x1e4>
 801cb04:	9806      	ldr	r0, [sp, #24]
 801cb06:	e7d4      	b.n	801cab2 <_strtod_l+0x1fa>
 801cb08:	2908      	cmp	r1, #8
 801cb0a:	dc04      	bgt.n	801cb16 <_strtod_l+0x25e>
 801cb0c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801cb0e:	436e      	muls	r6, r5
 801cb10:	9609      	str	r6, [sp, #36]	; 0x24
 801cb12:	3101      	adds	r1, #1
 801cb14:	e7e2      	b.n	801cadc <_strtod_l+0x224>
 801cb16:	f101 0e01 	add.w	lr, r1, #1
 801cb1a:	f1be 0f10 	cmp.w	lr, #16
 801cb1e:	bfd8      	it	le
 801cb20:	fb05 fa0a 	mulle.w	sl, r5, sl
 801cb24:	e7f5      	b.n	801cb12 <_strtod_l+0x25a>
 801cb26:	2b10      	cmp	r3, #16
 801cb28:	bfdc      	itt	le
 801cb2a:	210a      	movle	r1, #10
 801cb2c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 801cb30:	e7e1      	b.n	801caf6 <_strtod_l+0x23e>
 801cb32:	2700      	movs	r7, #0
 801cb34:	2101      	movs	r1, #1
 801cb36:	e780      	b.n	801ca3a <_strtod_l+0x182>
 801cb38:	f04f 0e00 	mov.w	lr, #0
 801cb3c:	f10b 0202 	add.w	r2, fp, #2
 801cb40:	9211      	str	r2, [sp, #68]	; 0x44
 801cb42:	f89b 2002 	ldrb.w	r2, [fp, #2]
 801cb46:	e789      	b.n	801ca5c <_strtod_l+0x1a4>
 801cb48:	f04f 0e01 	mov.w	lr, #1
 801cb4c:	e7f6      	b.n	801cb3c <_strtod_l+0x284>
 801cb4e:	bf00      	nop
 801cb50:	080248d0 	.word	0x080248d0
 801cb54:	08024700 	.word	0x08024700
 801cb58:	7ff00000 	.word	0x7ff00000
 801cb5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cb5e:	1c55      	adds	r5, r2, #1
 801cb60:	9511      	str	r5, [sp, #68]	; 0x44
 801cb62:	7852      	ldrb	r2, [r2, #1]
 801cb64:	2a30      	cmp	r2, #48	; 0x30
 801cb66:	d0f9      	beq.n	801cb5c <_strtod_l+0x2a4>
 801cb68:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801cb6c:	2d08      	cmp	r5, #8
 801cb6e:	f63f af7b 	bhi.w	801ca68 <_strtod_l+0x1b0>
 801cb72:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801cb76:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cb78:	9207      	str	r2, [sp, #28]
 801cb7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cb7c:	1c55      	adds	r5, r2, #1
 801cb7e:	9511      	str	r5, [sp, #68]	; 0x44
 801cb80:	7852      	ldrb	r2, [r2, #1]
 801cb82:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801cb86:	2e09      	cmp	r6, #9
 801cb88:	d937      	bls.n	801cbfa <_strtod_l+0x342>
 801cb8a:	9e07      	ldr	r6, [sp, #28]
 801cb8c:	1bad      	subs	r5, r5, r6
 801cb8e:	2d08      	cmp	r5, #8
 801cb90:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801cb94:	dc02      	bgt.n	801cb9c <_strtod_l+0x2e4>
 801cb96:	4565      	cmp	r5, ip
 801cb98:	bfa8      	it	ge
 801cb9a:	4665      	movge	r5, ip
 801cb9c:	f1be 0f00 	cmp.w	lr, #0
 801cba0:	d000      	beq.n	801cba4 <_strtod_l+0x2ec>
 801cba2:	426d      	negs	r5, r5
 801cba4:	2b00      	cmp	r3, #0
 801cba6:	d14d      	bne.n	801cc44 <_strtod_l+0x38c>
 801cba8:	9b04      	ldr	r3, [sp, #16]
 801cbaa:	4303      	orrs	r3, r0
 801cbac:	f47f aec8 	bne.w	801c940 <_strtod_l+0x88>
 801cbb0:	2900      	cmp	r1, #0
 801cbb2:	f47f aee2 	bne.w	801c97a <_strtod_l+0xc2>
 801cbb6:	2a69      	cmp	r2, #105	; 0x69
 801cbb8:	d027      	beq.n	801cc0a <_strtod_l+0x352>
 801cbba:	dc24      	bgt.n	801cc06 <_strtod_l+0x34e>
 801cbbc:	2a49      	cmp	r2, #73	; 0x49
 801cbbe:	d024      	beq.n	801cc0a <_strtod_l+0x352>
 801cbc0:	2a4e      	cmp	r2, #78	; 0x4e
 801cbc2:	f47f aeda 	bne.w	801c97a <_strtod_l+0xc2>
 801cbc6:	4996      	ldr	r1, [pc, #600]	; (801ce20 <_strtod_l+0x568>)
 801cbc8:	a811      	add	r0, sp, #68	; 0x44
 801cbca:	f001 fe9b 	bl	801e904 <__match>
 801cbce:	2800      	cmp	r0, #0
 801cbd0:	f43f aed3 	beq.w	801c97a <_strtod_l+0xc2>
 801cbd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cbd6:	781b      	ldrb	r3, [r3, #0]
 801cbd8:	2b28      	cmp	r3, #40	; 0x28
 801cbda:	d12d      	bne.n	801cc38 <_strtod_l+0x380>
 801cbdc:	4991      	ldr	r1, [pc, #580]	; (801ce24 <_strtod_l+0x56c>)
 801cbde:	aa14      	add	r2, sp, #80	; 0x50
 801cbe0:	a811      	add	r0, sp, #68	; 0x44
 801cbe2:	f001 fea3 	bl	801e92c <__hexnan>
 801cbe6:	2805      	cmp	r0, #5
 801cbe8:	d126      	bne.n	801cc38 <_strtod_l+0x380>
 801cbea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cbec:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801cbf0:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801cbf4:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801cbf8:	e6a2      	b.n	801c940 <_strtod_l+0x88>
 801cbfa:	250a      	movs	r5, #10
 801cbfc:	fb05 250c 	mla	r5, r5, ip, r2
 801cc00:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 801cc04:	e7b9      	b.n	801cb7a <_strtod_l+0x2c2>
 801cc06:	2a6e      	cmp	r2, #110	; 0x6e
 801cc08:	e7db      	b.n	801cbc2 <_strtod_l+0x30a>
 801cc0a:	4987      	ldr	r1, [pc, #540]	; (801ce28 <_strtod_l+0x570>)
 801cc0c:	a811      	add	r0, sp, #68	; 0x44
 801cc0e:	f001 fe79 	bl	801e904 <__match>
 801cc12:	2800      	cmp	r0, #0
 801cc14:	f43f aeb1 	beq.w	801c97a <_strtod_l+0xc2>
 801cc18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cc1a:	4984      	ldr	r1, [pc, #528]	; (801ce2c <_strtod_l+0x574>)
 801cc1c:	3b01      	subs	r3, #1
 801cc1e:	a811      	add	r0, sp, #68	; 0x44
 801cc20:	9311      	str	r3, [sp, #68]	; 0x44
 801cc22:	f001 fe6f 	bl	801e904 <__match>
 801cc26:	b910      	cbnz	r0, 801cc2e <_strtod_l+0x376>
 801cc28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cc2a:	3301      	adds	r3, #1
 801cc2c:	9311      	str	r3, [sp, #68]	; 0x44
 801cc2e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 801ce40 <_strtod_l+0x588>
 801cc32:	f04f 0800 	mov.w	r8, #0
 801cc36:	e683      	b.n	801c940 <_strtod_l+0x88>
 801cc38:	487d      	ldr	r0, [pc, #500]	; (801ce30 <_strtod_l+0x578>)
 801cc3a:	f002 fead 	bl	801f998 <nan>
 801cc3e:	ec59 8b10 	vmov	r8, r9, d0
 801cc42:	e67d      	b.n	801c940 <_strtod_l+0x88>
 801cc44:	1bea      	subs	r2, r5, r7
 801cc46:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 801cc4a:	9207      	str	r2, [sp, #28]
 801cc4c:	9a06      	ldr	r2, [sp, #24]
 801cc4e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801cc52:	2a00      	cmp	r2, #0
 801cc54:	bf08      	it	eq
 801cc56:	461a      	moveq	r2, r3
 801cc58:	2b10      	cmp	r3, #16
 801cc5a:	9206      	str	r2, [sp, #24]
 801cc5c:	461a      	mov	r2, r3
 801cc5e:	bfa8      	it	ge
 801cc60:	2210      	movge	r2, #16
 801cc62:	2b09      	cmp	r3, #9
 801cc64:	ec59 8b17 	vmov	r8, r9, d7
 801cc68:	dd0c      	ble.n	801cc84 <_strtod_l+0x3cc>
 801cc6a:	4972      	ldr	r1, [pc, #456]	; (801ce34 <_strtod_l+0x57c>)
 801cc6c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801cc70:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 801cc74:	ee06 aa90 	vmov	s13, sl
 801cc78:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801cc7c:	eea7 6b05 	vfma.f64	d6, d7, d5
 801cc80:	ec59 8b16 	vmov	r8, r9, d6
 801cc84:	2b0f      	cmp	r3, #15
 801cc86:	dc36      	bgt.n	801ccf6 <_strtod_l+0x43e>
 801cc88:	9907      	ldr	r1, [sp, #28]
 801cc8a:	2900      	cmp	r1, #0
 801cc8c:	f43f ae58 	beq.w	801c940 <_strtod_l+0x88>
 801cc90:	dd23      	ble.n	801ccda <_strtod_l+0x422>
 801cc92:	2916      	cmp	r1, #22
 801cc94:	dc0b      	bgt.n	801ccae <_strtod_l+0x3f6>
 801cc96:	4b67      	ldr	r3, [pc, #412]	; (801ce34 <_strtod_l+0x57c>)
 801cc98:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801cc9c:	ed93 7b00 	vldr	d7, [r3]
 801cca0:	ec49 8b16 	vmov	d6, r8, r9
 801cca4:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cca8:	ec59 8b17 	vmov	r8, r9, d7
 801ccac:	e648      	b.n	801c940 <_strtod_l+0x88>
 801ccae:	9807      	ldr	r0, [sp, #28]
 801ccb0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801ccb4:	4281      	cmp	r1, r0
 801ccb6:	db1e      	blt.n	801ccf6 <_strtod_l+0x43e>
 801ccb8:	4a5e      	ldr	r2, [pc, #376]	; (801ce34 <_strtod_l+0x57c>)
 801ccba:	f1c3 030f 	rsb	r3, r3, #15
 801ccbe:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801ccc2:	ed91 7b00 	vldr	d7, [r1]
 801ccc6:	ec49 8b16 	vmov	d6, r8, r9
 801ccca:	1ac3      	subs	r3, r0, r3
 801cccc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801ccd0:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ccd4:	ed92 6b00 	vldr	d6, [r2]
 801ccd8:	e7e4      	b.n	801cca4 <_strtod_l+0x3ec>
 801ccda:	9907      	ldr	r1, [sp, #28]
 801ccdc:	3116      	adds	r1, #22
 801ccde:	db0a      	blt.n	801ccf6 <_strtod_l+0x43e>
 801cce0:	4b54      	ldr	r3, [pc, #336]	; (801ce34 <_strtod_l+0x57c>)
 801cce2:	1b7d      	subs	r5, r7, r5
 801cce4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801cce8:	ed95 7b00 	vldr	d7, [r5]
 801ccec:	ec49 8b16 	vmov	d6, r8, r9
 801ccf0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801ccf4:	e7d8      	b.n	801cca8 <_strtod_l+0x3f0>
 801ccf6:	9907      	ldr	r1, [sp, #28]
 801ccf8:	1a9a      	subs	r2, r3, r2
 801ccfa:	440a      	add	r2, r1
 801ccfc:	2a00      	cmp	r2, #0
 801ccfe:	dd6f      	ble.n	801cde0 <_strtod_l+0x528>
 801cd00:	f012 000f 	ands.w	r0, r2, #15
 801cd04:	d00a      	beq.n	801cd1c <_strtod_l+0x464>
 801cd06:	494b      	ldr	r1, [pc, #300]	; (801ce34 <_strtod_l+0x57c>)
 801cd08:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801cd0c:	ed91 7b00 	vldr	d7, [r1]
 801cd10:	ec49 8b16 	vmov	d6, r8, r9
 801cd14:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cd18:	ec59 8b17 	vmov	r8, r9, d7
 801cd1c:	f032 020f 	bics.w	r2, r2, #15
 801cd20:	d04f      	beq.n	801cdc2 <_strtod_l+0x50a>
 801cd22:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801cd26:	dd22      	ble.n	801cd6e <_strtod_l+0x4b6>
 801cd28:	2500      	movs	r5, #0
 801cd2a:	462e      	mov	r6, r5
 801cd2c:	9506      	str	r5, [sp, #24]
 801cd2e:	462f      	mov	r7, r5
 801cd30:	2322      	movs	r3, #34	; 0x22
 801cd32:	f8df 910c 	ldr.w	r9, [pc, #268]	; 801ce40 <_strtod_l+0x588>
 801cd36:	6023      	str	r3, [r4, #0]
 801cd38:	f04f 0800 	mov.w	r8, #0
 801cd3c:	9b06      	ldr	r3, [sp, #24]
 801cd3e:	2b00      	cmp	r3, #0
 801cd40:	f43f adfe 	beq.w	801c940 <_strtod_l+0x88>
 801cd44:	9912      	ldr	r1, [sp, #72]	; 0x48
 801cd46:	4620      	mov	r0, r4
 801cd48:	f001 fef2 	bl	801eb30 <_Bfree>
 801cd4c:	4639      	mov	r1, r7
 801cd4e:	4620      	mov	r0, r4
 801cd50:	f001 feee 	bl	801eb30 <_Bfree>
 801cd54:	4631      	mov	r1, r6
 801cd56:	4620      	mov	r0, r4
 801cd58:	f001 feea 	bl	801eb30 <_Bfree>
 801cd5c:	9906      	ldr	r1, [sp, #24]
 801cd5e:	4620      	mov	r0, r4
 801cd60:	f001 fee6 	bl	801eb30 <_Bfree>
 801cd64:	4629      	mov	r1, r5
 801cd66:	4620      	mov	r0, r4
 801cd68:	f001 fee2 	bl	801eb30 <_Bfree>
 801cd6c:	e5e8      	b.n	801c940 <_strtod_l+0x88>
 801cd6e:	2000      	movs	r0, #0
 801cd70:	ec49 8b17 	vmov	d7, r8, r9
 801cd74:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 801ce38 <_strtod_l+0x580>
 801cd78:	1112      	asrs	r2, r2, #4
 801cd7a:	4601      	mov	r1, r0
 801cd7c:	2a01      	cmp	r2, #1
 801cd7e:	dc23      	bgt.n	801cdc8 <_strtod_l+0x510>
 801cd80:	b108      	cbz	r0, 801cd86 <_strtod_l+0x4ce>
 801cd82:	ec59 8b17 	vmov	r8, r9, d7
 801cd86:	4a2c      	ldr	r2, [pc, #176]	; (801ce38 <_strtod_l+0x580>)
 801cd88:	482c      	ldr	r0, [pc, #176]	; (801ce3c <_strtod_l+0x584>)
 801cd8a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801cd8e:	ed92 7b00 	vldr	d7, [r2]
 801cd92:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801cd96:	ec49 8b16 	vmov	d6, r8, r9
 801cd9a:	4a29      	ldr	r2, [pc, #164]	; (801ce40 <_strtod_l+0x588>)
 801cd9c:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cda0:	ee17 1a90 	vmov	r1, s15
 801cda4:	400a      	ands	r2, r1
 801cda6:	4282      	cmp	r2, r0
 801cda8:	ec59 8b17 	vmov	r8, r9, d7
 801cdac:	d8bc      	bhi.n	801cd28 <_strtod_l+0x470>
 801cdae:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801cdb2:	4282      	cmp	r2, r0
 801cdb4:	bf86      	itte	hi
 801cdb6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 801ce44 <_strtod_l+0x58c>
 801cdba:	f04f 38ff 	movhi.w	r8, #4294967295
 801cdbe:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801cdc2:	2200      	movs	r2, #0
 801cdc4:	9204      	str	r2, [sp, #16]
 801cdc6:	e078      	b.n	801ceba <_strtod_l+0x602>
 801cdc8:	07d6      	lsls	r6, r2, #31
 801cdca:	d504      	bpl.n	801cdd6 <_strtod_l+0x51e>
 801cdcc:	ed9c 6b00 	vldr	d6, [ip]
 801cdd0:	2001      	movs	r0, #1
 801cdd2:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cdd6:	3101      	adds	r1, #1
 801cdd8:	1052      	asrs	r2, r2, #1
 801cdda:	f10c 0c08 	add.w	ip, ip, #8
 801cdde:	e7cd      	b.n	801cd7c <_strtod_l+0x4c4>
 801cde0:	d0ef      	beq.n	801cdc2 <_strtod_l+0x50a>
 801cde2:	4252      	negs	r2, r2
 801cde4:	f012 000f 	ands.w	r0, r2, #15
 801cde8:	d00a      	beq.n	801ce00 <_strtod_l+0x548>
 801cdea:	4912      	ldr	r1, [pc, #72]	; (801ce34 <_strtod_l+0x57c>)
 801cdec:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801cdf0:	ed91 7b00 	vldr	d7, [r1]
 801cdf4:	ec49 8b16 	vmov	d6, r8, r9
 801cdf8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801cdfc:	ec59 8b17 	vmov	r8, r9, d7
 801ce00:	1112      	asrs	r2, r2, #4
 801ce02:	d0de      	beq.n	801cdc2 <_strtod_l+0x50a>
 801ce04:	2a1f      	cmp	r2, #31
 801ce06:	dd1f      	ble.n	801ce48 <_strtod_l+0x590>
 801ce08:	2500      	movs	r5, #0
 801ce0a:	462e      	mov	r6, r5
 801ce0c:	9506      	str	r5, [sp, #24]
 801ce0e:	462f      	mov	r7, r5
 801ce10:	2322      	movs	r3, #34	; 0x22
 801ce12:	f04f 0800 	mov.w	r8, #0
 801ce16:	f04f 0900 	mov.w	r9, #0
 801ce1a:	6023      	str	r3, [r4, #0]
 801ce1c:	e78e      	b.n	801cd3c <_strtod_l+0x484>
 801ce1e:	bf00      	nop
 801ce20:	08024661 	.word	0x08024661
 801ce24:	08024714 	.word	0x08024714
 801ce28:	08024659 	.word	0x08024659
 801ce2c:	0802478f 	.word	0x0802478f
 801ce30:	0802478b 	.word	0x0802478b
 801ce34:	08024968 	.word	0x08024968
 801ce38:	08024940 	.word	0x08024940
 801ce3c:	7ca00000 	.word	0x7ca00000
 801ce40:	7ff00000 	.word	0x7ff00000
 801ce44:	7fefffff 	.word	0x7fefffff
 801ce48:	f012 0110 	ands.w	r1, r2, #16
 801ce4c:	bf18      	it	ne
 801ce4e:	216a      	movne	r1, #106	; 0x6a
 801ce50:	9104      	str	r1, [sp, #16]
 801ce52:	ec49 8b17 	vmov	d7, r8, r9
 801ce56:	49be      	ldr	r1, [pc, #760]	; (801d150 <_strtod_l+0x898>)
 801ce58:	2000      	movs	r0, #0
 801ce5a:	07d6      	lsls	r6, r2, #31
 801ce5c:	d504      	bpl.n	801ce68 <_strtod_l+0x5b0>
 801ce5e:	ed91 6b00 	vldr	d6, [r1]
 801ce62:	2001      	movs	r0, #1
 801ce64:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ce68:	1052      	asrs	r2, r2, #1
 801ce6a:	f101 0108 	add.w	r1, r1, #8
 801ce6e:	d1f4      	bne.n	801ce5a <_strtod_l+0x5a2>
 801ce70:	b108      	cbz	r0, 801ce76 <_strtod_l+0x5be>
 801ce72:	ec59 8b17 	vmov	r8, r9, d7
 801ce76:	9a04      	ldr	r2, [sp, #16]
 801ce78:	b1c2      	cbz	r2, 801ceac <_strtod_l+0x5f4>
 801ce7a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 801ce7e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801ce82:	2a00      	cmp	r2, #0
 801ce84:	4648      	mov	r0, r9
 801ce86:	dd11      	ble.n	801ceac <_strtod_l+0x5f4>
 801ce88:	2a1f      	cmp	r2, #31
 801ce8a:	f340 812e 	ble.w	801d0ea <_strtod_l+0x832>
 801ce8e:	2a34      	cmp	r2, #52	; 0x34
 801ce90:	bfde      	ittt	le
 801ce92:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801ce96:	f04f 32ff 	movle.w	r2, #4294967295
 801ce9a:	fa02 f101 	lslle.w	r1, r2, r1
 801ce9e:	f04f 0800 	mov.w	r8, #0
 801cea2:	bfcc      	ite	gt
 801cea4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801cea8:	ea01 0900 	andle.w	r9, r1, r0
 801ceac:	ec49 8b17 	vmov	d7, r8, r9
 801ceb0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ceb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ceb8:	d0a6      	beq.n	801ce08 <_strtod_l+0x550>
 801ceba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cebc:	9200      	str	r2, [sp, #0]
 801cebe:	990a      	ldr	r1, [sp, #40]	; 0x28
 801cec0:	9a06      	ldr	r2, [sp, #24]
 801cec2:	4620      	mov	r0, r4
 801cec4:	f001 fe9c 	bl	801ec00 <__s2b>
 801cec8:	9006      	str	r0, [sp, #24]
 801ceca:	2800      	cmp	r0, #0
 801cecc:	f43f af2c 	beq.w	801cd28 <_strtod_l+0x470>
 801ced0:	9b07      	ldr	r3, [sp, #28]
 801ced2:	1b7d      	subs	r5, r7, r5
 801ced4:	2b00      	cmp	r3, #0
 801ced6:	bfb4      	ite	lt
 801ced8:	462b      	movlt	r3, r5
 801ceda:	2300      	movge	r3, #0
 801cedc:	9309      	str	r3, [sp, #36]	; 0x24
 801cede:	9b07      	ldr	r3, [sp, #28]
 801cee0:	ed9f 9b93 	vldr	d9, [pc, #588]	; 801d130 <_strtod_l+0x878>
 801cee4:	ed9f ab94 	vldr	d10, [pc, #592]	; 801d138 <_strtod_l+0x880>
 801cee8:	ed9f bb95 	vldr	d11, [pc, #596]	; 801d140 <_strtod_l+0x888>
 801ceec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801cef0:	2500      	movs	r5, #0
 801cef2:	930c      	str	r3, [sp, #48]	; 0x30
 801cef4:	462e      	mov	r6, r5
 801cef6:	9b06      	ldr	r3, [sp, #24]
 801cef8:	4620      	mov	r0, r4
 801cefa:	6859      	ldr	r1, [r3, #4]
 801cefc:	f001 fdd8 	bl	801eab0 <_Balloc>
 801cf00:	4607      	mov	r7, r0
 801cf02:	2800      	cmp	r0, #0
 801cf04:	f43f af14 	beq.w	801cd30 <_strtod_l+0x478>
 801cf08:	9b06      	ldr	r3, [sp, #24]
 801cf0a:	691a      	ldr	r2, [r3, #16]
 801cf0c:	3202      	adds	r2, #2
 801cf0e:	f103 010c 	add.w	r1, r3, #12
 801cf12:	0092      	lsls	r2, r2, #2
 801cf14:	300c      	adds	r0, #12
 801cf16:	f7fe fc9d 	bl	801b854 <memcpy>
 801cf1a:	ec49 8b10 	vmov	d0, r8, r9
 801cf1e:	aa14      	add	r2, sp, #80	; 0x50
 801cf20:	a913      	add	r1, sp, #76	; 0x4c
 801cf22:	4620      	mov	r0, r4
 801cf24:	f002 f9b2 	bl	801f28c <__d2b>
 801cf28:	ec49 8b18 	vmov	d8, r8, r9
 801cf2c:	9012      	str	r0, [sp, #72]	; 0x48
 801cf2e:	2800      	cmp	r0, #0
 801cf30:	f43f aefe 	beq.w	801cd30 <_strtod_l+0x478>
 801cf34:	2101      	movs	r1, #1
 801cf36:	4620      	mov	r0, r4
 801cf38:	f001 fefc 	bl	801ed34 <__i2b>
 801cf3c:	4606      	mov	r6, r0
 801cf3e:	2800      	cmp	r0, #0
 801cf40:	f43f aef6 	beq.w	801cd30 <_strtod_l+0x478>
 801cf44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801cf46:	9914      	ldr	r1, [sp, #80]	; 0x50
 801cf48:	2b00      	cmp	r3, #0
 801cf4a:	bfab      	itete	ge
 801cf4c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 801cf4e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 801cf50:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 801cf54:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 801cf58:	bfac      	ite	ge
 801cf5a:	eb03 0b02 	addge.w	fp, r3, r2
 801cf5e:	eba2 0a03 	sublt.w	sl, r2, r3
 801cf62:	9a04      	ldr	r2, [sp, #16]
 801cf64:	1a9b      	subs	r3, r3, r2
 801cf66:	440b      	add	r3, r1
 801cf68:	4a7a      	ldr	r2, [pc, #488]	; (801d154 <_strtod_l+0x89c>)
 801cf6a:	3b01      	subs	r3, #1
 801cf6c:	4293      	cmp	r3, r2
 801cf6e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801cf72:	f280 80cd 	bge.w	801d110 <_strtod_l+0x858>
 801cf76:	1ad2      	subs	r2, r2, r3
 801cf78:	2a1f      	cmp	r2, #31
 801cf7a:	eba1 0102 	sub.w	r1, r1, r2
 801cf7e:	f04f 0001 	mov.w	r0, #1
 801cf82:	f300 80b9 	bgt.w	801d0f8 <_strtod_l+0x840>
 801cf86:	fa00 f302 	lsl.w	r3, r0, r2
 801cf8a:	930b      	str	r3, [sp, #44]	; 0x2c
 801cf8c:	2300      	movs	r3, #0
 801cf8e:	930a      	str	r3, [sp, #40]	; 0x28
 801cf90:	eb0b 0301 	add.w	r3, fp, r1
 801cf94:	9a04      	ldr	r2, [sp, #16]
 801cf96:	459b      	cmp	fp, r3
 801cf98:	448a      	add	sl, r1
 801cf9a:	4492      	add	sl, r2
 801cf9c:	465a      	mov	r2, fp
 801cf9e:	bfa8      	it	ge
 801cfa0:	461a      	movge	r2, r3
 801cfa2:	4552      	cmp	r2, sl
 801cfa4:	bfa8      	it	ge
 801cfa6:	4652      	movge	r2, sl
 801cfa8:	2a00      	cmp	r2, #0
 801cfaa:	bfc2      	ittt	gt
 801cfac:	1a9b      	subgt	r3, r3, r2
 801cfae:	ebaa 0a02 	subgt.w	sl, sl, r2
 801cfb2:	ebab 0b02 	subgt.w	fp, fp, r2
 801cfb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cfb8:	2a00      	cmp	r2, #0
 801cfba:	dd18      	ble.n	801cfee <_strtod_l+0x736>
 801cfbc:	4631      	mov	r1, r6
 801cfbe:	4620      	mov	r0, r4
 801cfc0:	930f      	str	r3, [sp, #60]	; 0x3c
 801cfc2:	f001 ff77 	bl	801eeb4 <__pow5mult>
 801cfc6:	4606      	mov	r6, r0
 801cfc8:	2800      	cmp	r0, #0
 801cfca:	f43f aeb1 	beq.w	801cd30 <_strtod_l+0x478>
 801cfce:	4601      	mov	r1, r0
 801cfd0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cfd2:	4620      	mov	r0, r4
 801cfd4:	f001 fec4 	bl	801ed60 <__multiply>
 801cfd8:	900e      	str	r0, [sp, #56]	; 0x38
 801cfda:	2800      	cmp	r0, #0
 801cfdc:	f43f aea8 	beq.w	801cd30 <_strtod_l+0x478>
 801cfe0:	9912      	ldr	r1, [sp, #72]	; 0x48
 801cfe2:	4620      	mov	r0, r4
 801cfe4:	f001 fda4 	bl	801eb30 <_Bfree>
 801cfe8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cfea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cfec:	9212      	str	r2, [sp, #72]	; 0x48
 801cfee:	2b00      	cmp	r3, #0
 801cff0:	f300 8093 	bgt.w	801d11a <_strtod_l+0x862>
 801cff4:	9b07      	ldr	r3, [sp, #28]
 801cff6:	2b00      	cmp	r3, #0
 801cff8:	dd08      	ble.n	801d00c <_strtod_l+0x754>
 801cffa:	4639      	mov	r1, r7
 801cffc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cffe:	4620      	mov	r0, r4
 801d000:	f001 ff58 	bl	801eeb4 <__pow5mult>
 801d004:	4607      	mov	r7, r0
 801d006:	2800      	cmp	r0, #0
 801d008:	f43f ae92 	beq.w	801cd30 <_strtod_l+0x478>
 801d00c:	f1ba 0f00 	cmp.w	sl, #0
 801d010:	dd08      	ble.n	801d024 <_strtod_l+0x76c>
 801d012:	4639      	mov	r1, r7
 801d014:	4652      	mov	r2, sl
 801d016:	4620      	mov	r0, r4
 801d018:	f001 ffa6 	bl	801ef68 <__lshift>
 801d01c:	4607      	mov	r7, r0
 801d01e:	2800      	cmp	r0, #0
 801d020:	f43f ae86 	beq.w	801cd30 <_strtod_l+0x478>
 801d024:	f1bb 0f00 	cmp.w	fp, #0
 801d028:	dd08      	ble.n	801d03c <_strtod_l+0x784>
 801d02a:	4631      	mov	r1, r6
 801d02c:	465a      	mov	r2, fp
 801d02e:	4620      	mov	r0, r4
 801d030:	f001 ff9a 	bl	801ef68 <__lshift>
 801d034:	4606      	mov	r6, r0
 801d036:	2800      	cmp	r0, #0
 801d038:	f43f ae7a 	beq.w	801cd30 <_strtod_l+0x478>
 801d03c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d03e:	463a      	mov	r2, r7
 801d040:	4620      	mov	r0, r4
 801d042:	f002 f81d 	bl	801f080 <__mdiff>
 801d046:	4605      	mov	r5, r0
 801d048:	2800      	cmp	r0, #0
 801d04a:	f43f ae71 	beq.w	801cd30 <_strtod_l+0x478>
 801d04e:	2300      	movs	r3, #0
 801d050:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801d054:	60c3      	str	r3, [r0, #12]
 801d056:	4631      	mov	r1, r6
 801d058:	f001 fff6 	bl	801f048 <__mcmp>
 801d05c:	2800      	cmp	r0, #0
 801d05e:	da7d      	bge.n	801d15c <_strtod_l+0x8a4>
 801d060:	ea5a 0308 	orrs.w	r3, sl, r8
 801d064:	f040 80a3 	bne.w	801d1ae <_strtod_l+0x8f6>
 801d068:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d06c:	2b00      	cmp	r3, #0
 801d06e:	f040 809e 	bne.w	801d1ae <_strtod_l+0x8f6>
 801d072:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d076:	0d1b      	lsrs	r3, r3, #20
 801d078:	051b      	lsls	r3, r3, #20
 801d07a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801d07e:	f240 8096 	bls.w	801d1ae <_strtod_l+0x8f6>
 801d082:	696b      	ldr	r3, [r5, #20]
 801d084:	b91b      	cbnz	r3, 801d08e <_strtod_l+0x7d6>
 801d086:	692b      	ldr	r3, [r5, #16]
 801d088:	2b01      	cmp	r3, #1
 801d08a:	f340 8090 	ble.w	801d1ae <_strtod_l+0x8f6>
 801d08e:	4629      	mov	r1, r5
 801d090:	2201      	movs	r2, #1
 801d092:	4620      	mov	r0, r4
 801d094:	f001 ff68 	bl	801ef68 <__lshift>
 801d098:	4631      	mov	r1, r6
 801d09a:	4605      	mov	r5, r0
 801d09c:	f001 ffd4 	bl	801f048 <__mcmp>
 801d0a0:	2800      	cmp	r0, #0
 801d0a2:	f340 8084 	ble.w	801d1ae <_strtod_l+0x8f6>
 801d0a6:	9904      	ldr	r1, [sp, #16]
 801d0a8:	4a2b      	ldr	r2, [pc, #172]	; (801d158 <_strtod_l+0x8a0>)
 801d0aa:	464b      	mov	r3, r9
 801d0ac:	2900      	cmp	r1, #0
 801d0ae:	f000 809d 	beq.w	801d1ec <_strtod_l+0x934>
 801d0b2:	ea02 0109 	and.w	r1, r2, r9
 801d0b6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801d0ba:	f300 8097 	bgt.w	801d1ec <_strtod_l+0x934>
 801d0be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801d0c2:	f77f aea5 	ble.w	801ce10 <_strtod_l+0x558>
 801d0c6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 801d148 <_strtod_l+0x890>
 801d0ca:	ec49 8b16 	vmov	d6, r8, r9
 801d0ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 801d0d2:	ed8d 7b04 	vstr	d7, [sp, #16]
 801d0d6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801d0da:	4313      	orrs	r3, r2
 801d0dc:	bf08      	it	eq
 801d0de:	2322      	moveq	r3, #34	; 0x22
 801d0e0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801d0e4:	bf08      	it	eq
 801d0e6:	6023      	streq	r3, [r4, #0]
 801d0e8:	e62c      	b.n	801cd44 <_strtod_l+0x48c>
 801d0ea:	f04f 31ff 	mov.w	r1, #4294967295
 801d0ee:	fa01 f202 	lsl.w	r2, r1, r2
 801d0f2:	ea02 0808 	and.w	r8, r2, r8
 801d0f6:	e6d9      	b.n	801ceac <_strtod_l+0x5f4>
 801d0f8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801d0fc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801d100:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801d104:	33e2      	adds	r3, #226	; 0xe2
 801d106:	fa00 f303 	lsl.w	r3, r0, r3
 801d10a:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801d10e:	e73f      	b.n	801cf90 <_strtod_l+0x6d8>
 801d110:	2200      	movs	r2, #0
 801d112:	2301      	movs	r3, #1
 801d114:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801d118:	e73a      	b.n	801cf90 <_strtod_l+0x6d8>
 801d11a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d11c:	461a      	mov	r2, r3
 801d11e:	4620      	mov	r0, r4
 801d120:	f001 ff22 	bl	801ef68 <__lshift>
 801d124:	9012      	str	r0, [sp, #72]	; 0x48
 801d126:	2800      	cmp	r0, #0
 801d128:	f47f af64 	bne.w	801cff4 <_strtod_l+0x73c>
 801d12c:	e600      	b.n	801cd30 <_strtod_l+0x478>
 801d12e:	bf00      	nop
 801d130:	94a03595 	.word	0x94a03595
 801d134:	3fcfffff 	.word	0x3fcfffff
 801d138:	94a03595 	.word	0x94a03595
 801d13c:	3fdfffff 	.word	0x3fdfffff
 801d140:	35afe535 	.word	0x35afe535
 801d144:	3fe00000 	.word	0x3fe00000
 801d148:	00000000 	.word	0x00000000
 801d14c:	39500000 	.word	0x39500000
 801d150:	08024728 	.word	0x08024728
 801d154:	fffffc02 	.word	0xfffffc02
 801d158:	7ff00000 	.word	0x7ff00000
 801d15c:	46cb      	mov	fp, r9
 801d15e:	d15f      	bne.n	801d220 <_strtod_l+0x968>
 801d160:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d164:	f1ba 0f00 	cmp.w	sl, #0
 801d168:	d02a      	beq.n	801d1c0 <_strtod_l+0x908>
 801d16a:	4aa7      	ldr	r2, [pc, #668]	; (801d408 <_strtod_l+0xb50>)
 801d16c:	4293      	cmp	r3, r2
 801d16e:	d12b      	bne.n	801d1c8 <_strtod_l+0x910>
 801d170:	9b04      	ldr	r3, [sp, #16]
 801d172:	4642      	mov	r2, r8
 801d174:	b1fb      	cbz	r3, 801d1b6 <_strtod_l+0x8fe>
 801d176:	4ba5      	ldr	r3, [pc, #660]	; (801d40c <_strtod_l+0xb54>)
 801d178:	ea09 0303 	and.w	r3, r9, r3
 801d17c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801d180:	f04f 31ff 	mov.w	r1, #4294967295
 801d184:	d81a      	bhi.n	801d1bc <_strtod_l+0x904>
 801d186:	0d1b      	lsrs	r3, r3, #20
 801d188:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801d18c:	fa01 f303 	lsl.w	r3, r1, r3
 801d190:	429a      	cmp	r2, r3
 801d192:	d119      	bne.n	801d1c8 <_strtod_l+0x910>
 801d194:	4b9e      	ldr	r3, [pc, #632]	; (801d410 <_strtod_l+0xb58>)
 801d196:	459b      	cmp	fp, r3
 801d198:	d102      	bne.n	801d1a0 <_strtod_l+0x8e8>
 801d19a:	3201      	adds	r2, #1
 801d19c:	f43f adc8 	beq.w	801cd30 <_strtod_l+0x478>
 801d1a0:	4b9a      	ldr	r3, [pc, #616]	; (801d40c <_strtod_l+0xb54>)
 801d1a2:	ea0b 0303 	and.w	r3, fp, r3
 801d1a6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801d1aa:	f04f 0800 	mov.w	r8, #0
 801d1ae:	9b04      	ldr	r3, [sp, #16]
 801d1b0:	2b00      	cmp	r3, #0
 801d1b2:	d188      	bne.n	801d0c6 <_strtod_l+0x80e>
 801d1b4:	e5c6      	b.n	801cd44 <_strtod_l+0x48c>
 801d1b6:	f04f 33ff 	mov.w	r3, #4294967295
 801d1ba:	e7e9      	b.n	801d190 <_strtod_l+0x8d8>
 801d1bc:	460b      	mov	r3, r1
 801d1be:	e7e7      	b.n	801d190 <_strtod_l+0x8d8>
 801d1c0:	ea53 0308 	orrs.w	r3, r3, r8
 801d1c4:	f43f af6f 	beq.w	801d0a6 <_strtod_l+0x7ee>
 801d1c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d1ca:	b1cb      	cbz	r3, 801d200 <_strtod_l+0x948>
 801d1cc:	ea13 0f0b 	tst.w	r3, fp
 801d1d0:	d0ed      	beq.n	801d1ae <_strtod_l+0x8f6>
 801d1d2:	9a04      	ldr	r2, [sp, #16]
 801d1d4:	4640      	mov	r0, r8
 801d1d6:	4649      	mov	r1, r9
 801d1d8:	f1ba 0f00 	cmp.w	sl, #0
 801d1dc:	d014      	beq.n	801d208 <_strtod_l+0x950>
 801d1de:	f7ff fb4f 	bl	801c880 <sulp>
 801d1e2:	ee38 7b00 	vadd.f64	d7, d8, d0
 801d1e6:	ec59 8b17 	vmov	r8, r9, d7
 801d1ea:	e7e0      	b.n	801d1ae <_strtod_l+0x8f6>
 801d1ec:	4013      	ands	r3, r2
 801d1ee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801d1f2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801d1f6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801d1fa:	f04f 38ff 	mov.w	r8, #4294967295
 801d1fe:	e7d6      	b.n	801d1ae <_strtod_l+0x8f6>
 801d200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d202:	ea13 0f08 	tst.w	r3, r8
 801d206:	e7e3      	b.n	801d1d0 <_strtod_l+0x918>
 801d208:	f7ff fb3a 	bl	801c880 <sulp>
 801d20c:	ee38 0b40 	vsub.f64	d0, d8, d0
 801d210:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801d214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d218:	ec59 8b10 	vmov	r8, r9, d0
 801d21c:	d1c7      	bne.n	801d1ae <_strtod_l+0x8f6>
 801d21e:	e5f7      	b.n	801ce10 <_strtod_l+0x558>
 801d220:	4631      	mov	r1, r6
 801d222:	4628      	mov	r0, r5
 801d224:	f002 f88e 	bl	801f344 <__ratio>
 801d228:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801d22c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801d230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d234:	d865      	bhi.n	801d302 <_strtod_l+0xa4a>
 801d236:	f1ba 0f00 	cmp.w	sl, #0
 801d23a:	d042      	beq.n	801d2c2 <_strtod_l+0xa0a>
 801d23c:	4b75      	ldr	r3, [pc, #468]	; (801d414 <_strtod_l+0xb5c>)
 801d23e:	2200      	movs	r2, #0
 801d240:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801d244:	4871      	ldr	r0, [pc, #452]	; (801d40c <_strtod_l+0xb54>)
 801d246:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 801d420 <_strtod_l+0xb68>
 801d24a:	ea0b 0100 	and.w	r1, fp, r0
 801d24e:	4561      	cmp	r1, ip
 801d250:	f040 808e 	bne.w	801d370 <_strtod_l+0xab8>
 801d254:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801d258:	ec49 8b10 	vmov	d0, r8, r9
 801d25c:	ec43 2b1c 	vmov	d12, r2, r3
 801d260:	910a      	str	r1, [sp, #40]	; 0x28
 801d262:	f001 ff97 	bl	801f194 <__ulp>
 801d266:	ec49 8b1e 	vmov	d14, r8, r9
 801d26a:	4868      	ldr	r0, [pc, #416]	; (801d40c <_strtod_l+0xb54>)
 801d26c:	eeac eb00 	vfma.f64	d14, d12, d0
 801d270:	ee1e 3a90 	vmov	r3, s29
 801d274:	4a68      	ldr	r2, [pc, #416]	; (801d418 <_strtod_l+0xb60>)
 801d276:	990a      	ldr	r1, [sp, #40]	; 0x28
 801d278:	4018      	ands	r0, r3
 801d27a:	4290      	cmp	r0, r2
 801d27c:	ec59 8b1e 	vmov	r8, r9, d14
 801d280:	d94e      	bls.n	801d320 <_strtod_l+0xa68>
 801d282:	ee18 3a90 	vmov	r3, s17
 801d286:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801d28a:	4293      	cmp	r3, r2
 801d28c:	d104      	bne.n	801d298 <_strtod_l+0x9e0>
 801d28e:	ee18 3a10 	vmov	r3, s16
 801d292:	3301      	adds	r3, #1
 801d294:	f43f ad4c 	beq.w	801cd30 <_strtod_l+0x478>
 801d298:	f8df 9174 	ldr.w	r9, [pc, #372]	; 801d410 <_strtod_l+0xb58>
 801d29c:	f04f 38ff 	mov.w	r8, #4294967295
 801d2a0:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d2a2:	4620      	mov	r0, r4
 801d2a4:	f001 fc44 	bl	801eb30 <_Bfree>
 801d2a8:	4639      	mov	r1, r7
 801d2aa:	4620      	mov	r0, r4
 801d2ac:	f001 fc40 	bl	801eb30 <_Bfree>
 801d2b0:	4631      	mov	r1, r6
 801d2b2:	4620      	mov	r0, r4
 801d2b4:	f001 fc3c 	bl	801eb30 <_Bfree>
 801d2b8:	4629      	mov	r1, r5
 801d2ba:	4620      	mov	r0, r4
 801d2bc:	f001 fc38 	bl	801eb30 <_Bfree>
 801d2c0:	e619      	b.n	801cef6 <_strtod_l+0x63e>
 801d2c2:	f1b8 0f00 	cmp.w	r8, #0
 801d2c6:	d112      	bne.n	801d2ee <_strtod_l+0xa36>
 801d2c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d2cc:	b9b3      	cbnz	r3, 801d2fc <_strtod_l+0xa44>
 801d2ce:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801d2d2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801d2d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2da:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801d2de:	bf58      	it	pl
 801d2e0:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 801d2e4:	eeb1 7b4d 	vneg.f64	d7, d13
 801d2e8:	ec53 2b17 	vmov	r2, r3, d7
 801d2ec:	e7aa      	b.n	801d244 <_strtod_l+0x98c>
 801d2ee:	f1b8 0f01 	cmp.w	r8, #1
 801d2f2:	d103      	bne.n	801d2fc <_strtod_l+0xa44>
 801d2f4:	f1b9 0f00 	cmp.w	r9, #0
 801d2f8:	f43f ad8a 	beq.w	801ce10 <_strtod_l+0x558>
 801d2fc:	4b47      	ldr	r3, [pc, #284]	; (801d41c <_strtod_l+0xb64>)
 801d2fe:	2200      	movs	r2, #0
 801d300:	e79e      	b.n	801d240 <_strtod_l+0x988>
 801d302:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801d306:	ee20 db0d 	vmul.f64	d13, d0, d13
 801d30a:	f1ba 0f00 	cmp.w	sl, #0
 801d30e:	d104      	bne.n	801d31a <_strtod_l+0xa62>
 801d310:	eeb1 7b4d 	vneg.f64	d7, d13
 801d314:	ec53 2b17 	vmov	r2, r3, d7
 801d318:	e794      	b.n	801d244 <_strtod_l+0x98c>
 801d31a:	eeb0 7b4d 	vmov.f64	d7, d13
 801d31e:	e7f9      	b.n	801d314 <_strtod_l+0xa5c>
 801d320:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801d324:	9b04      	ldr	r3, [sp, #16]
 801d326:	2b00      	cmp	r3, #0
 801d328:	d1ba      	bne.n	801d2a0 <_strtod_l+0x9e8>
 801d32a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801d32e:	0d1b      	lsrs	r3, r3, #20
 801d330:	051b      	lsls	r3, r3, #20
 801d332:	4299      	cmp	r1, r3
 801d334:	d1b4      	bne.n	801d2a0 <_strtod_l+0x9e8>
 801d336:	ec51 0b1d 	vmov	r0, r1, d13
 801d33a:	f7e3 f9ad 	bl	8000698 <__aeabi_d2lz>
 801d33e:	f7e3 f965 	bl	800060c <__aeabi_l2d>
 801d342:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d346:	ec41 0b17 	vmov	d7, r0, r1
 801d34a:	ea43 0308 	orr.w	r3, r3, r8
 801d34e:	ea53 030a 	orrs.w	r3, r3, sl
 801d352:	ee3d db47 	vsub.f64	d13, d13, d7
 801d356:	d03c      	beq.n	801d3d2 <_strtod_l+0xb1a>
 801d358:	eeb4 dbca 	vcmpe.f64	d13, d10
 801d35c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d360:	f53f acf0 	bmi.w	801cd44 <_strtod_l+0x48c>
 801d364:	eeb4 dbcb 	vcmpe.f64	d13, d11
 801d368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d36c:	dd98      	ble.n	801d2a0 <_strtod_l+0x9e8>
 801d36e:	e4e9      	b.n	801cd44 <_strtod_l+0x48c>
 801d370:	9804      	ldr	r0, [sp, #16]
 801d372:	b1f0      	cbz	r0, 801d3b2 <_strtod_l+0xafa>
 801d374:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801d378:	d81b      	bhi.n	801d3b2 <_strtod_l+0xafa>
 801d37a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801d400 <_strtod_l+0xb48>
 801d37e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801d382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d386:	d811      	bhi.n	801d3ac <_strtod_l+0xaf4>
 801d388:	eebc dbcd 	vcvt.u32.f64	s26, d13
 801d38c:	ee1d 3a10 	vmov	r3, s26
 801d390:	2b01      	cmp	r3, #1
 801d392:	bf38      	it	cc
 801d394:	2301      	movcc	r3, #1
 801d396:	ee0d 3a10 	vmov	s26, r3
 801d39a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 801d39e:	f1ba 0f00 	cmp.w	sl, #0
 801d3a2:	d113      	bne.n	801d3cc <_strtod_l+0xb14>
 801d3a4:	eeb1 7b4d 	vneg.f64	d7, d13
 801d3a8:	ec53 2b17 	vmov	r2, r3, d7
 801d3ac:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 801d3b0:	1a43      	subs	r3, r0, r1
 801d3b2:	eeb0 0b48 	vmov.f64	d0, d8
 801d3b6:	ec43 2b1c 	vmov	d12, r2, r3
 801d3ba:	910a      	str	r1, [sp, #40]	; 0x28
 801d3bc:	f001 feea 	bl	801f194 <__ulp>
 801d3c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 801d3c2:	eeac 8b00 	vfma.f64	d8, d12, d0
 801d3c6:	ec59 8b18 	vmov	r8, r9, d8
 801d3ca:	e7ab      	b.n	801d324 <_strtod_l+0xa6c>
 801d3cc:	eeb0 7b4d 	vmov.f64	d7, d13
 801d3d0:	e7ea      	b.n	801d3a8 <_strtod_l+0xaf0>
 801d3d2:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801d3d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d3da:	f57f af61 	bpl.w	801d2a0 <_strtod_l+0x9e8>
 801d3de:	e4b1      	b.n	801cd44 <_strtod_l+0x48c>
 801d3e0:	2300      	movs	r3, #0
 801d3e2:	9308      	str	r3, [sp, #32]
 801d3e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d3e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d3e8:	6013      	str	r3, [r2, #0]
 801d3ea:	f7ff baad 	b.w	801c948 <_strtod_l+0x90>
 801d3ee:	2a65      	cmp	r2, #101	; 0x65
 801d3f0:	f43f ab9f 	beq.w	801cb32 <_strtod_l+0x27a>
 801d3f4:	2a45      	cmp	r2, #69	; 0x45
 801d3f6:	f43f ab9c 	beq.w	801cb32 <_strtod_l+0x27a>
 801d3fa:	2101      	movs	r1, #1
 801d3fc:	f7ff bbd4 	b.w	801cba8 <_strtod_l+0x2f0>
 801d400:	ffc00000 	.word	0xffc00000
 801d404:	41dfffff 	.word	0x41dfffff
 801d408:	000fffff 	.word	0x000fffff
 801d40c:	7ff00000 	.word	0x7ff00000
 801d410:	7fefffff 	.word	0x7fefffff
 801d414:	3ff00000 	.word	0x3ff00000
 801d418:	7c9fffff 	.word	0x7c9fffff
 801d41c:	bff00000 	.word	0xbff00000
 801d420:	7fe00000 	.word	0x7fe00000

0801d424 <_strtod_r>:
 801d424:	4b01      	ldr	r3, [pc, #4]	; (801d42c <_strtod_r+0x8>)
 801d426:	f7ff ba47 	b.w	801c8b8 <_strtod_l>
 801d42a:	bf00      	nop
 801d42c:	200000d0 	.word	0x200000d0

0801d430 <_strtol_l.constprop.0>:
 801d430:	2b01      	cmp	r3, #1
 801d432:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d436:	d001      	beq.n	801d43c <_strtol_l.constprop.0+0xc>
 801d438:	2b24      	cmp	r3, #36	; 0x24
 801d43a:	d906      	bls.n	801d44a <_strtol_l.constprop.0+0x1a>
 801d43c:	f000 fe96 	bl	801e16c <__errno>
 801d440:	2316      	movs	r3, #22
 801d442:	6003      	str	r3, [r0, #0]
 801d444:	2000      	movs	r0, #0
 801d446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d44a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801d530 <_strtol_l.constprop.0+0x100>
 801d44e:	460d      	mov	r5, r1
 801d450:	462e      	mov	r6, r5
 801d452:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d456:	f814 700c 	ldrb.w	r7, [r4, ip]
 801d45a:	f017 0708 	ands.w	r7, r7, #8
 801d45e:	d1f7      	bne.n	801d450 <_strtol_l.constprop.0+0x20>
 801d460:	2c2d      	cmp	r4, #45	; 0x2d
 801d462:	d132      	bne.n	801d4ca <_strtol_l.constprop.0+0x9a>
 801d464:	782c      	ldrb	r4, [r5, #0]
 801d466:	2701      	movs	r7, #1
 801d468:	1cb5      	adds	r5, r6, #2
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	d05b      	beq.n	801d526 <_strtol_l.constprop.0+0xf6>
 801d46e:	2b10      	cmp	r3, #16
 801d470:	d109      	bne.n	801d486 <_strtol_l.constprop.0+0x56>
 801d472:	2c30      	cmp	r4, #48	; 0x30
 801d474:	d107      	bne.n	801d486 <_strtol_l.constprop.0+0x56>
 801d476:	782c      	ldrb	r4, [r5, #0]
 801d478:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801d47c:	2c58      	cmp	r4, #88	; 0x58
 801d47e:	d14d      	bne.n	801d51c <_strtol_l.constprop.0+0xec>
 801d480:	786c      	ldrb	r4, [r5, #1]
 801d482:	2310      	movs	r3, #16
 801d484:	3502      	adds	r5, #2
 801d486:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801d48a:	f108 38ff 	add.w	r8, r8, #4294967295
 801d48e:	f04f 0c00 	mov.w	ip, #0
 801d492:	fbb8 f9f3 	udiv	r9, r8, r3
 801d496:	4666      	mov	r6, ip
 801d498:	fb03 8a19 	mls	sl, r3, r9, r8
 801d49c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801d4a0:	f1be 0f09 	cmp.w	lr, #9
 801d4a4:	d816      	bhi.n	801d4d4 <_strtol_l.constprop.0+0xa4>
 801d4a6:	4674      	mov	r4, lr
 801d4a8:	42a3      	cmp	r3, r4
 801d4aa:	dd24      	ble.n	801d4f6 <_strtol_l.constprop.0+0xc6>
 801d4ac:	f1bc 0f00 	cmp.w	ip, #0
 801d4b0:	db1e      	blt.n	801d4f0 <_strtol_l.constprop.0+0xc0>
 801d4b2:	45b1      	cmp	r9, r6
 801d4b4:	d31c      	bcc.n	801d4f0 <_strtol_l.constprop.0+0xc0>
 801d4b6:	d101      	bne.n	801d4bc <_strtol_l.constprop.0+0x8c>
 801d4b8:	45a2      	cmp	sl, r4
 801d4ba:	db19      	blt.n	801d4f0 <_strtol_l.constprop.0+0xc0>
 801d4bc:	fb06 4603 	mla	r6, r6, r3, r4
 801d4c0:	f04f 0c01 	mov.w	ip, #1
 801d4c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d4c8:	e7e8      	b.n	801d49c <_strtol_l.constprop.0+0x6c>
 801d4ca:	2c2b      	cmp	r4, #43	; 0x2b
 801d4cc:	bf04      	itt	eq
 801d4ce:	782c      	ldrbeq	r4, [r5, #0]
 801d4d0:	1cb5      	addeq	r5, r6, #2
 801d4d2:	e7ca      	b.n	801d46a <_strtol_l.constprop.0+0x3a>
 801d4d4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801d4d8:	f1be 0f19 	cmp.w	lr, #25
 801d4dc:	d801      	bhi.n	801d4e2 <_strtol_l.constprop.0+0xb2>
 801d4de:	3c37      	subs	r4, #55	; 0x37
 801d4e0:	e7e2      	b.n	801d4a8 <_strtol_l.constprop.0+0x78>
 801d4e2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801d4e6:	f1be 0f19 	cmp.w	lr, #25
 801d4ea:	d804      	bhi.n	801d4f6 <_strtol_l.constprop.0+0xc6>
 801d4ec:	3c57      	subs	r4, #87	; 0x57
 801d4ee:	e7db      	b.n	801d4a8 <_strtol_l.constprop.0+0x78>
 801d4f0:	f04f 3cff 	mov.w	ip, #4294967295
 801d4f4:	e7e6      	b.n	801d4c4 <_strtol_l.constprop.0+0x94>
 801d4f6:	f1bc 0f00 	cmp.w	ip, #0
 801d4fa:	da05      	bge.n	801d508 <_strtol_l.constprop.0+0xd8>
 801d4fc:	2322      	movs	r3, #34	; 0x22
 801d4fe:	6003      	str	r3, [r0, #0]
 801d500:	4646      	mov	r6, r8
 801d502:	b942      	cbnz	r2, 801d516 <_strtol_l.constprop.0+0xe6>
 801d504:	4630      	mov	r0, r6
 801d506:	e79e      	b.n	801d446 <_strtol_l.constprop.0+0x16>
 801d508:	b107      	cbz	r7, 801d50c <_strtol_l.constprop.0+0xdc>
 801d50a:	4276      	negs	r6, r6
 801d50c:	2a00      	cmp	r2, #0
 801d50e:	d0f9      	beq.n	801d504 <_strtol_l.constprop.0+0xd4>
 801d510:	f1bc 0f00 	cmp.w	ip, #0
 801d514:	d000      	beq.n	801d518 <_strtol_l.constprop.0+0xe8>
 801d516:	1e69      	subs	r1, r5, #1
 801d518:	6011      	str	r1, [r2, #0]
 801d51a:	e7f3      	b.n	801d504 <_strtol_l.constprop.0+0xd4>
 801d51c:	2430      	movs	r4, #48	; 0x30
 801d51e:	2b00      	cmp	r3, #0
 801d520:	d1b1      	bne.n	801d486 <_strtol_l.constprop.0+0x56>
 801d522:	2308      	movs	r3, #8
 801d524:	e7af      	b.n	801d486 <_strtol_l.constprop.0+0x56>
 801d526:	2c30      	cmp	r4, #48	; 0x30
 801d528:	d0a5      	beq.n	801d476 <_strtol_l.constprop.0+0x46>
 801d52a:	230a      	movs	r3, #10
 801d52c:	e7ab      	b.n	801d486 <_strtol_l.constprop.0+0x56>
 801d52e:	bf00      	nop
 801d530:	0802454f 	.word	0x0802454f

0801d534 <_strtol_r>:
 801d534:	f7ff bf7c 	b.w	801d430 <_strtol_l.constprop.0>

0801d538 <__assert_func>:
 801d538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d53a:	4614      	mov	r4, r2
 801d53c:	461a      	mov	r2, r3
 801d53e:	4b09      	ldr	r3, [pc, #36]	; (801d564 <__assert_func+0x2c>)
 801d540:	681b      	ldr	r3, [r3, #0]
 801d542:	4605      	mov	r5, r0
 801d544:	68d8      	ldr	r0, [r3, #12]
 801d546:	b14c      	cbz	r4, 801d55c <__assert_func+0x24>
 801d548:	4b07      	ldr	r3, [pc, #28]	; (801d568 <__assert_func+0x30>)
 801d54a:	9100      	str	r1, [sp, #0]
 801d54c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d550:	4906      	ldr	r1, [pc, #24]	; (801d56c <__assert_func+0x34>)
 801d552:	462b      	mov	r3, r5
 801d554:	f000 fee6 	bl	801e324 <fiprintf>
 801d558:	f002 fb4a 	bl	801fbf0 <abort>
 801d55c:	4b04      	ldr	r3, [pc, #16]	; (801d570 <__assert_func+0x38>)
 801d55e:	461c      	mov	r4, r3
 801d560:	e7f3      	b.n	801d54a <__assert_func+0x12>
 801d562:	bf00      	nop
 801d564:	20000068 	.word	0x20000068
 801d568:	08024750 	.word	0x08024750
 801d56c:	0802475d 	.word	0x0802475d
 801d570:	0802478b 	.word	0x0802478b

0801d574 <quorem>:
 801d574:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d578:	6903      	ldr	r3, [r0, #16]
 801d57a:	690c      	ldr	r4, [r1, #16]
 801d57c:	42a3      	cmp	r3, r4
 801d57e:	4607      	mov	r7, r0
 801d580:	f2c0 8081 	blt.w	801d686 <quorem+0x112>
 801d584:	3c01      	subs	r4, #1
 801d586:	f101 0814 	add.w	r8, r1, #20
 801d58a:	f100 0514 	add.w	r5, r0, #20
 801d58e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d592:	9301      	str	r3, [sp, #4]
 801d594:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801d598:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d59c:	3301      	adds	r3, #1
 801d59e:	429a      	cmp	r2, r3
 801d5a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801d5a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801d5a8:	fbb2 f6f3 	udiv	r6, r2, r3
 801d5ac:	d331      	bcc.n	801d612 <quorem+0x9e>
 801d5ae:	f04f 0e00 	mov.w	lr, #0
 801d5b2:	4640      	mov	r0, r8
 801d5b4:	46ac      	mov	ip, r5
 801d5b6:	46f2      	mov	sl, lr
 801d5b8:	f850 2b04 	ldr.w	r2, [r0], #4
 801d5bc:	b293      	uxth	r3, r2
 801d5be:	fb06 e303 	mla	r3, r6, r3, lr
 801d5c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801d5c6:	b29b      	uxth	r3, r3
 801d5c8:	ebaa 0303 	sub.w	r3, sl, r3
 801d5cc:	f8dc a000 	ldr.w	sl, [ip]
 801d5d0:	0c12      	lsrs	r2, r2, #16
 801d5d2:	fa13 f38a 	uxtah	r3, r3, sl
 801d5d6:	fb06 e202 	mla	r2, r6, r2, lr
 801d5da:	9300      	str	r3, [sp, #0]
 801d5dc:	9b00      	ldr	r3, [sp, #0]
 801d5de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801d5e2:	b292      	uxth	r2, r2
 801d5e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801d5e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d5ec:	f8bd 3000 	ldrh.w	r3, [sp]
 801d5f0:	4581      	cmp	r9, r0
 801d5f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d5f6:	f84c 3b04 	str.w	r3, [ip], #4
 801d5fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801d5fe:	d2db      	bcs.n	801d5b8 <quorem+0x44>
 801d600:	f855 300b 	ldr.w	r3, [r5, fp]
 801d604:	b92b      	cbnz	r3, 801d612 <quorem+0x9e>
 801d606:	9b01      	ldr	r3, [sp, #4]
 801d608:	3b04      	subs	r3, #4
 801d60a:	429d      	cmp	r5, r3
 801d60c:	461a      	mov	r2, r3
 801d60e:	d32e      	bcc.n	801d66e <quorem+0xfa>
 801d610:	613c      	str	r4, [r7, #16]
 801d612:	4638      	mov	r0, r7
 801d614:	f001 fd18 	bl	801f048 <__mcmp>
 801d618:	2800      	cmp	r0, #0
 801d61a:	db24      	blt.n	801d666 <quorem+0xf2>
 801d61c:	3601      	adds	r6, #1
 801d61e:	4628      	mov	r0, r5
 801d620:	f04f 0c00 	mov.w	ip, #0
 801d624:	f858 2b04 	ldr.w	r2, [r8], #4
 801d628:	f8d0 e000 	ldr.w	lr, [r0]
 801d62c:	b293      	uxth	r3, r2
 801d62e:	ebac 0303 	sub.w	r3, ip, r3
 801d632:	0c12      	lsrs	r2, r2, #16
 801d634:	fa13 f38e 	uxtah	r3, r3, lr
 801d638:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801d63c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801d640:	b29b      	uxth	r3, r3
 801d642:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d646:	45c1      	cmp	r9, r8
 801d648:	f840 3b04 	str.w	r3, [r0], #4
 801d64c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801d650:	d2e8      	bcs.n	801d624 <quorem+0xb0>
 801d652:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801d656:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801d65a:	b922      	cbnz	r2, 801d666 <quorem+0xf2>
 801d65c:	3b04      	subs	r3, #4
 801d65e:	429d      	cmp	r5, r3
 801d660:	461a      	mov	r2, r3
 801d662:	d30a      	bcc.n	801d67a <quorem+0x106>
 801d664:	613c      	str	r4, [r7, #16]
 801d666:	4630      	mov	r0, r6
 801d668:	b003      	add	sp, #12
 801d66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d66e:	6812      	ldr	r2, [r2, #0]
 801d670:	3b04      	subs	r3, #4
 801d672:	2a00      	cmp	r2, #0
 801d674:	d1cc      	bne.n	801d610 <quorem+0x9c>
 801d676:	3c01      	subs	r4, #1
 801d678:	e7c7      	b.n	801d60a <quorem+0x96>
 801d67a:	6812      	ldr	r2, [r2, #0]
 801d67c:	3b04      	subs	r3, #4
 801d67e:	2a00      	cmp	r2, #0
 801d680:	d1f0      	bne.n	801d664 <quorem+0xf0>
 801d682:	3c01      	subs	r4, #1
 801d684:	e7eb      	b.n	801d65e <quorem+0xea>
 801d686:	2000      	movs	r0, #0
 801d688:	e7ee      	b.n	801d668 <quorem+0xf4>
 801d68a:	0000      	movs	r0, r0
 801d68c:	0000      	movs	r0, r0
	...

0801d690 <_dtoa_r>:
 801d690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d694:	ed2d 8b02 	vpush	{d8}
 801d698:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801d69a:	b091      	sub	sp, #68	; 0x44
 801d69c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801d6a0:	ec59 8b10 	vmov	r8, r9, d0
 801d6a4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801d6a6:	9106      	str	r1, [sp, #24]
 801d6a8:	4606      	mov	r6, r0
 801d6aa:	9208      	str	r2, [sp, #32]
 801d6ac:	930c      	str	r3, [sp, #48]	; 0x30
 801d6ae:	b975      	cbnz	r5, 801d6ce <_dtoa_r+0x3e>
 801d6b0:	2010      	movs	r0, #16
 801d6b2:	f7fe f8b7 	bl	801b824 <malloc>
 801d6b6:	4602      	mov	r2, r0
 801d6b8:	6270      	str	r0, [r6, #36]	; 0x24
 801d6ba:	b920      	cbnz	r0, 801d6c6 <_dtoa_r+0x36>
 801d6bc:	4baa      	ldr	r3, [pc, #680]	; (801d968 <_dtoa_r+0x2d8>)
 801d6be:	21ea      	movs	r1, #234	; 0xea
 801d6c0:	48aa      	ldr	r0, [pc, #680]	; (801d96c <_dtoa_r+0x2dc>)
 801d6c2:	f7ff ff39 	bl	801d538 <__assert_func>
 801d6c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d6ca:	6005      	str	r5, [r0, #0]
 801d6cc:	60c5      	str	r5, [r0, #12]
 801d6ce:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801d6d0:	6819      	ldr	r1, [r3, #0]
 801d6d2:	b151      	cbz	r1, 801d6ea <_dtoa_r+0x5a>
 801d6d4:	685a      	ldr	r2, [r3, #4]
 801d6d6:	604a      	str	r2, [r1, #4]
 801d6d8:	2301      	movs	r3, #1
 801d6da:	4093      	lsls	r3, r2
 801d6dc:	608b      	str	r3, [r1, #8]
 801d6de:	4630      	mov	r0, r6
 801d6e0:	f001 fa26 	bl	801eb30 <_Bfree>
 801d6e4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801d6e6:	2200      	movs	r2, #0
 801d6e8:	601a      	str	r2, [r3, #0]
 801d6ea:	f1b9 0300 	subs.w	r3, r9, #0
 801d6ee:	bfbb      	ittet	lt
 801d6f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801d6f4:	9303      	strlt	r3, [sp, #12]
 801d6f6:	2300      	movge	r3, #0
 801d6f8:	2201      	movlt	r2, #1
 801d6fa:	bfac      	ite	ge
 801d6fc:	6023      	strge	r3, [r4, #0]
 801d6fe:	6022      	strlt	r2, [r4, #0]
 801d700:	4b9b      	ldr	r3, [pc, #620]	; (801d970 <_dtoa_r+0x2e0>)
 801d702:	9c03      	ldr	r4, [sp, #12]
 801d704:	43a3      	bics	r3, r4
 801d706:	d11c      	bne.n	801d742 <_dtoa_r+0xb2>
 801d708:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d70a:	f242 730f 	movw	r3, #9999	; 0x270f
 801d70e:	6013      	str	r3, [r2, #0]
 801d710:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801d714:	ea53 0308 	orrs.w	r3, r3, r8
 801d718:	f000 84fd 	beq.w	801e116 <_dtoa_r+0xa86>
 801d71c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d71e:	b963      	cbnz	r3, 801d73a <_dtoa_r+0xaa>
 801d720:	4b94      	ldr	r3, [pc, #592]	; (801d974 <_dtoa_r+0x2e4>)
 801d722:	e01f      	b.n	801d764 <_dtoa_r+0xd4>
 801d724:	4b94      	ldr	r3, [pc, #592]	; (801d978 <_dtoa_r+0x2e8>)
 801d726:	9301      	str	r3, [sp, #4]
 801d728:	3308      	adds	r3, #8
 801d72a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801d72c:	6013      	str	r3, [r2, #0]
 801d72e:	9801      	ldr	r0, [sp, #4]
 801d730:	b011      	add	sp, #68	; 0x44
 801d732:	ecbd 8b02 	vpop	{d8}
 801d736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d73a:	4b8e      	ldr	r3, [pc, #568]	; (801d974 <_dtoa_r+0x2e4>)
 801d73c:	9301      	str	r3, [sp, #4]
 801d73e:	3303      	adds	r3, #3
 801d740:	e7f3      	b.n	801d72a <_dtoa_r+0x9a>
 801d742:	ed9d 8b02 	vldr	d8, [sp, #8]
 801d746:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801d74a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d74e:	d10b      	bne.n	801d768 <_dtoa_r+0xd8>
 801d750:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d752:	2301      	movs	r3, #1
 801d754:	6013      	str	r3, [r2, #0]
 801d756:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d758:	2b00      	cmp	r3, #0
 801d75a:	f000 84d9 	beq.w	801e110 <_dtoa_r+0xa80>
 801d75e:	4887      	ldr	r0, [pc, #540]	; (801d97c <_dtoa_r+0x2ec>)
 801d760:	6018      	str	r0, [r3, #0]
 801d762:	1e43      	subs	r3, r0, #1
 801d764:	9301      	str	r3, [sp, #4]
 801d766:	e7e2      	b.n	801d72e <_dtoa_r+0x9e>
 801d768:	a90f      	add	r1, sp, #60	; 0x3c
 801d76a:	aa0e      	add	r2, sp, #56	; 0x38
 801d76c:	4630      	mov	r0, r6
 801d76e:	eeb0 0b48 	vmov.f64	d0, d8
 801d772:	f001 fd8b 	bl	801f28c <__d2b>
 801d776:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801d77a:	4605      	mov	r5, r0
 801d77c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801d77e:	2900      	cmp	r1, #0
 801d780:	d046      	beq.n	801d810 <_dtoa_r+0x180>
 801d782:	ee18 4a90 	vmov	r4, s17
 801d786:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801d78a:	ec53 2b18 	vmov	r2, r3, d8
 801d78e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801d792:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801d796:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801d79a:	2400      	movs	r4, #0
 801d79c:	ec43 2b16 	vmov	d6, r2, r3
 801d7a0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801d7a4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801d950 <_dtoa_r+0x2c0>
 801d7a8:	ee36 7b47 	vsub.f64	d7, d6, d7
 801d7ac:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 801d958 <_dtoa_r+0x2c8>
 801d7b0:	eea7 6b05 	vfma.f64	d6, d7, d5
 801d7b4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801d960 <_dtoa_r+0x2d0>
 801d7b8:	ee07 1a90 	vmov	s15, r1
 801d7bc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801d7c0:	eeb0 7b46 	vmov.f64	d7, d6
 801d7c4:	eea4 7b05 	vfma.f64	d7, d4, d5
 801d7c8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801d7cc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801d7d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d7d4:	ee16 ba90 	vmov	fp, s13
 801d7d8:	940a      	str	r4, [sp, #40]	; 0x28
 801d7da:	d508      	bpl.n	801d7ee <_dtoa_r+0x15e>
 801d7dc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801d7e0:	eeb4 6b47 	vcmp.f64	d6, d7
 801d7e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d7e8:	bf18      	it	ne
 801d7ea:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801d7ee:	f1bb 0f16 	cmp.w	fp, #22
 801d7f2:	d82f      	bhi.n	801d854 <_dtoa_r+0x1c4>
 801d7f4:	4b62      	ldr	r3, [pc, #392]	; (801d980 <_dtoa_r+0x2f0>)
 801d7f6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801d7fa:	ed93 7b00 	vldr	d7, [r3]
 801d7fe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801d802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d806:	d501      	bpl.n	801d80c <_dtoa_r+0x17c>
 801d808:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d80c:	2300      	movs	r3, #0
 801d80e:	e022      	b.n	801d856 <_dtoa_r+0x1c6>
 801d810:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801d812:	4401      	add	r1, r0
 801d814:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801d818:	2b20      	cmp	r3, #32
 801d81a:	bfc1      	itttt	gt
 801d81c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801d820:	fa04 f303 	lslgt.w	r3, r4, r3
 801d824:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801d828:	fa28 f804 	lsrgt.w	r8, r8, r4
 801d82c:	bfd6      	itet	le
 801d82e:	f1c3 0320 	rsble	r3, r3, #32
 801d832:	ea43 0808 	orrgt.w	r8, r3, r8
 801d836:	fa08 f803 	lslle.w	r8, r8, r3
 801d83a:	ee07 8a90 	vmov	s15, r8
 801d83e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801d842:	3901      	subs	r1, #1
 801d844:	ee17 4a90 	vmov	r4, s15
 801d848:	ec53 2b17 	vmov	r2, r3, d7
 801d84c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 801d850:	2401      	movs	r4, #1
 801d852:	e7a3      	b.n	801d79c <_dtoa_r+0x10c>
 801d854:	2301      	movs	r3, #1
 801d856:	930b      	str	r3, [sp, #44]	; 0x2c
 801d858:	1a43      	subs	r3, r0, r1
 801d85a:	1e5a      	subs	r2, r3, #1
 801d85c:	bf45      	ittet	mi
 801d85e:	f1c3 0301 	rsbmi	r3, r3, #1
 801d862:	9304      	strmi	r3, [sp, #16]
 801d864:	2300      	movpl	r3, #0
 801d866:	2300      	movmi	r3, #0
 801d868:	9205      	str	r2, [sp, #20]
 801d86a:	bf54      	ite	pl
 801d86c:	9304      	strpl	r3, [sp, #16]
 801d86e:	9305      	strmi	r3, [sp, #20]
 801d870:	f1bb 0f00 	cmp.w	fp, #0
 801d874:	db18      	blt.n	801d8a8 <_dtoa_r+0x218>
 801d876:	9b05      	ldr	r3, [sp, #20]
 801d878:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801d87c:	445b      	add	r3, fp
 801d87e:	9305      	str	r3, [sp, #20]
 801d880:	2300      	movs	r3, #0
 801d882:	9a06      	ldr	r2, [sp, #24]
 801d884:	2a09      	cmp	r2, #9
 801d886:	d849      	bhi.n	801d91c <_dtoa_r+0x28c>
 801d888:	2a05      	cmp	r2, #5
 801d88a:	bfc4      	itt	gt
 801d88c:	3a04      	subgt	r2, #4
 801d88e:	9206      	strgt	r2, [sp, #24]
 801d890:	9a06      	ldr	r2, [sp, #24]
 801d892:	f1a2 0202 	sub.w	r2, r2, #2
 801d896:	bfcc      	ite	gt
 801d898:	2400      	movgt	r4, #0
 801d89a:	2401      	movle	r4, #1
 801d89c:	2a03      	cmp	r2, #3
 801d89e:	d848      	bhi.n	801d932 <_dtoa_r+0x2a2>
 801d8a0:	e8df f002 	tbb	[pc, r2]
 801d8a4:	3a2c2e0b 	.word	0x3a2c2e0b
 801d8a8:	9b04      	ldr	r3, [sp, #16]
 801d8aa:	2200      	movs	r2, #0
 801d8ac:	eba3 030b 	sub.w	r3, r3, fp
 801d8b0:	9304      	str	r3, [sp, #16]
 801d8b2:	9209      	str	r2, [sp, #36]	; 0x24
 801d8b4:	f1cb 0300 	rsb	r3, fp, #0
 801d8b8:	e7e3      	b.n	801d882 <_dtoa_r+0x1f2>
 801d8ba:	2200      	movs	r2, #0
 801d8bc:	9207      	str	r2, [sp, #28]
 801d8be:	9a08      	ldr	r2, [sp, #32]
 801d8c0:	2a00      	cmp	r2, #0
 801d8c2:	dc39      	bgt.n	801d938 <_dtoa_r+0x2a8>
 801d8c4:	f04f 0a01 	mov.w	sl, #1
 801d8c8:	46d1      	mov	r9, sl
 801d8ca:	4652      	mov	r2, sl
 801d8cc:	f8cd a020 	str.w	sl, [sp, #32]
 801d8d0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801d8d2:	2100      	movs	r1, #0
 801d8d4:	6079      	str	r1, [r7, #4]
 801d8d6:	2004      	movs	r0, #4
 801d8d8:	f100 0c14 	add.w	ip, r0, #20
 801d8dc:	4594      	cmp	ip, r2
 801d8de:	6879      	ldr	r1, [r7, #4]
 801d8e0:	d92f      	bls.n	801d942 <_dtoa_r+0x2b2>
 801d8e2:	4630      	mov	r0, r6
 801d8e4:	930d      	str	r3, [sp, #52]	; 0x34
 801d8e6:	f001 f8e3 	bl	801eab0 <_Balloc>
 801d8ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d8ec:	9001      	str	r0, [sp, #4]
 801d8ee:	4602      	mov	r2, r0
 801d8f0:	2800      	cmp	r0, #0
 801d8f2:	d149      	bne.n	801d988 <_dtoa_r+0x2f8>
 801d8f4:	4b23      	ldr	r3, [pc, #140]	; (801d984 <_dtoa_r+0x2f4>)
 801d8f6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801d8fa:	e6e1      	b.n	801d6c0 <_dtoa_r+0x30>
 801d8fc:	2201      	movs	r2, #1
 801d8fe:	e7dd      	b.n	801d8bc <_dtoa_r+0x22c>
 801d900:	2200      	movs	r2, #0
 801d902:	9207      	str	r2, [sp, #28]
 801d904:	9a08      	ldr	r2, [sp, #32]
 801d906:	eb0b 0a02 	add.w	sl, fp, r2
 801d90a:	f10a 0901 	add.w	r9, sl, #1
 801d90e:	464a      	mov	r2, r9
 801d910:	2a01      	cmp	r2, #1
 801d912:	bfb8      	it	lt
 801d914:	2201      	movlt	r2, #1
 801d916:	e7db      	b.n	801d8d0 <_dtoa_r+0x240>
 801d918:	2201      	movs	r2, #1
 801d91a:	e7f2      	b.n	801d902 <_dtoa_r+0x272>
 801d91c:	2401      	movs	r4, #1
 801d91e:	2200      	movs	r2, #0
 801d920:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801d924:	f04f 3aff 	mov.w	sl, #4294967295
 801d928:	2100      	movs	r1, #0
 801d92a:	46d1      	mov	r9, sl
 801d92c:	2212      	movs	r2, #18
 801d92e:	9108      	str	r1, [sp, #32]
 801d930:	e7ce      	b.n	801d8d0 <_dtoa_r+0x240>
 801d932:	2201      	movs	r2, #1
 801d934:	9207      	str	r2, [sp, #28]
 801d936:	e7f5      	b.n	801d924 <_dtoa_r+0x294>
 801d938:	f8dd a020 	ldr.w	sl, [sp, #32]
 801d93c:	46d1      	mov	r9, sl
 801d93e:	4652      	mov	r2, sl
 801d940:	e7c6      	b.n	801d8d0 <_dtoa_r+0x240>
 801d942:	3101      	adds	r1, #1
 801d944:	6079      	str	r1, [r7, #4]
 801d946:	0040      	lsls	r0, r0, #1
 801d948:	e7c6      	b.n	801d8d8 <_dtoa_r+0x248>
 801d94a:	bf00      	nop
 801d94c:	f3af 8000 	nop.w
 801d950:	636f4361 	.word	0x636f4361
 801d954:	3fd287a7 	.word	0x3fd287a7
 801d958:	8b60c8b3 	.word	0x8b60c8b3
 801d95c:	3fc68a28 	.word	0x3fc68a28
 801d960:	509f79fb 	.word	0x509f79fb
 801d964:	3fd34413 	.word	0x3fd34413
 801d968:	0802468d 	.word	0x0802468d
 801d96c:	08024799 	.word	0x08024799
 801d970:	7ff00000 	.word	0x7ff00000
 801d974:	08024795 	.word	0x08024795
 801d978:	0802478c 	.word	0x0802478c
 801d97c:	08024665 	.word	0x08024665
 801d980:	08024968 	.word	0x08024968
 801d984:	080247f4 	.word	0x080247f4
 801d988:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801d98a:	9901      	ldr	r1, [sp, #4]
 801d98c:	6011      	str	r1, [r2, #0]
 801d98e:	f1b9 0f0e 	cmp.w	r9, #14
 801d992:	d86c      	bhi.n	801da6e <_dtoa_r+0x3de>
 801d994:	2c00      	cmp	r4, #0
 801d996:	d06a      	beq.n	801da6e <_dtoa_r+0x3de>
 801d998:	f1bb 0f00 	cmp.w	fp, #0
 801d99c:	f340 80a0 	ble.w	801dae0 <_dtoa_r+0x450>
 801d9a0:	49c1      	ldr	r1, [pc, #772]	; (801dca8 <_dtoa_r+0x618>)
 801d9a2:	f00b 020f 	and.w	r2, fp, #15
 801d9a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801d9aa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801d9ae:	ed92 7b00 	vldr	d7, [r2]
 801d9b2:	ea4f 112b 	mov.w	r1, fp, asr #4
 801d9b6:	f000 8087 	beq.w	801dac8 <_dtoa_r+0x438>
 801d9ba:	4abc      	ldr	r2, [pc, #752]	; (801dcac <_dtoa_r+0x61c>)
 801d9bc:	ed92 6b08 	vldr	d6, [r2, #32]
 801d9c0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801d9c4:	ed8d 6b02 	vstr	d6, [sp, #8]
 801d9c8:	f001 010f 	and.w	r1, r1, #15
 801d9cc:	2203      	movs	r2, #3
 801d9ce:	48b7      	ldr	r0, [pc, #732]	; (801dcac <_dtoa_r+0x61c>)
 801d9d0:	2900      	cmp	r1, #0
 801d9d2:	d17b      	bne.n	801dacc <_dtoa_r+0x43c>
 801d9d4:	ed9d 6b02 	vldr	d6, [sp, #8]
 801d9d8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801d9dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 801d9e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d9e2:	2900      	cmp	r1, #0
 801d9e4:	f000 80a2 	beq.w	801db2c <_dtoa_r+0x49c>
 801d9e8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801d9ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d9f0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801d9f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d9f8:	f140 8098 	bpl.w	801db2c <_dtoa_r+0x49c>
 801d9fc:	f1b9 0f00 	cmp.w	r9, #0
 801da00:	f000 8094 	beq.w	801db2c <_dtoa_r+0x49c>
 801da04:	f1ba 0f00 	cmp.w	sl, #0
 801da08:	dd2f      	ble.n	801da6a <_dtoa_r+0x3da>
 801da0a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801da0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801da12:	ed8d 7b02 	vstr	d7, [sp, #8]
 801da16:	f10b 37ff 	add.w	r7, fp, #4294967295
 801da1a:	3201      	adds	r2, #1
 801da1c:	4650      	mov	r0, sl
 801da1e:	ed9d 6b02 	vldr	d6, [sp, #8]
 801da22:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801da26:	ee07 2a90 	vmov	s15, r2
 801da2a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801da2e:	eea7 5b06 	vfma.f64	d5, d7, d6
 801da32:	ee15 4a90 	vmov	r4, s11
 801da36:	ec52 1b15 	vmov	r1, r2, d5
 801da3a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801da3e:	2800      	cmp	r0, #0
 801da40:	d177      	bne.n	801db32 <_dtoa_r+0x4a2>
 801da42:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801da46:	ee36 6b47 	vsub.f64	d6, d6, d7
 801da4a:	ec42 1b17 	vmov	d7, r1, r2
 801da4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801da52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da56:	f300 8263 	bgt.w	801df20 <_dtoa_r+0x890>
 801da5a:	eeb1 7b47 	vneg.f64	d7, d7
 801da5e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801da62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da66:	f100 8258 	bmi.w	801df1a <_dtoa_r+0x88a>
 801da6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801da6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801da70:	2a00      	cmp	r2, #0
 801da72:	f2c0 811d 	blt.w	801dcb0 <_dtoa_r+0x620>
 801da76:	f1bb 0f0e 	cmp.w	fp, #14
 801da7a:	f300 8119 	bgt.w	801dcb0 <_dtoa_r+0x620>
 801da7e:	4b8a      	ldr	r3, [pc, #552]	; (801dca8 <_dtoa_r+0x618>)
 801da80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801da84:	ed93 6b00 	vldr	d6, [r3]
 801da88:	9b08      	ldr	r3, [sp, #32]
 801da8a:	2b00      	cmp	r3, #0
 801da8c:	f280 80b7 	bge.w	801dbfe <_dtoa_r+0x56e>
 801da90:	f1b9 0f00 	cmp.w	r9, #0
 801da94:	f300 80b3 	bgt.w	801dbfe <_dtoa_r+0x56e>
 801da98:	f040 823f 	bne.w	801df1a <_dtoa_r+0x88a>
 801da9c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801daa0:	ee26 6b07 	vmul.f64	d6, d6, d7
 801daa4:	ed9d 7b02 	vldr	d7, [sp, #8]
 801daa8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801daac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dab0:	464c      	mov	r4, r9
 801dab2:	464f      	mov	r7, r9
 801dab4:	f280 8215 	bge.w	801dee2 <_dtoa_r+0x852>
 801dab8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801dabc:	2331      	movs	r3, #49	; 0x31
 801dabe:	f808 3b01 	strb.w	r3, [r8], #1
 801dac2:	f10b 0b01 	add.w	fp, fp, #1
 801dac6:	e211      	b.n	801deec <_dtoa_r+0x85c>
 801dac8:	2202      	movs	r2, #2
 801daca:	e780      	b.n	801d9ce <_dtoa_r+0x33e>
 801dacc:	07cc      	lsls	r4, r1, #31
 801dace:	d504      	bpl.n	801dada <_dtoa_r+0x44a>
 801dad0:	ed90 6b00 	vldr	d6, [r0]
 801dad4:	3201      	adds	r2, #1
 801dad6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801dada:	1049      	asrs	r1, r1, #1
 801dadc:	3008      	adds	r0, #8
 801dade:	e777      	b.n	801d9d0 <_dtoa_r+0x340>
 801dae0:	d022      	beq.n	801db28 <_dtoa_r+0x498>
 801dae2:	f1cb 0100 	rsb	r1, fp, #0
 801dae6:	4a70      	ldr	r2, [pc, #448]	; (801dca8 <_dtoa_r+0x618>)
 801dae8:	f001 000f 	and.w	r0, r1, #15
 801daec:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801daf0:	ed92 7b00 	vldr	d7, [r2]
 801daf4:	ee28 7b07 	vmul.f64	d7, d8, d7
 801daf8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801dafc:	486b      	ldr	r0, [pc, #428]	; (801dcac <_dtoa_r+0x61c>)
 801dafe:	1109      	asrs	r1, r1, #4
 801db00:	2400      	movs	r4, #0
 801db02:	2202      	movs	r2, #2
 801db04:	b929      	cbnz	r1, 801db12 <_dtoa_r+0x482>
 801db06:	2c00      	cmp	r4, #0
 801db08:	f43f af6a 	beq.w	801d9e0 <_dtoa_r+0x350>
 801db0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801db10:	e766      	b.n	801d9e0 <_dtoa_r+0x350>
 801db12:	07cf      	lsls	r7, r1, #31
 801db14:	d505      	bpl.n	801db22 <_dtoa_r+0x492>
 801db16:	ed90 6b00 	vldr	d6, [r0]
 801db1a:	3201      	adds	r2, #1
 801db1c:	2401      	movs	r4, #1
 801db1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801db22:	1049      	asrs	r1, r1, #1
 801db24:	3008      	adds	r0, #8
 801db26:	e7ed      	b.n	801db04 <_dtoa_r+0x474>
 801db28:	2202      	movs	r2, #2
 801db2a:	e759      	b.n	801d9e0 <_dtoa_r+0x350>
 801db2c:	465f      	mov	r7, fp
 801db2e:	4648      	mov	r0, r9
 801db30:	e775      	b.n	801da1e <_dtoa_r+0x38e>
 801db32:	ec42 1b17 	vmov	d7, r1, r2
 801db36:	4a5c      	ldr	r2, [pc, #368]	; (801dca8 <_dtoa_r+0x618>)
 801db38:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801db3c:	ed12 4b02 	vldr	d4, [r2, #-8]
 801db40:	9a01      	ldr	r2, [sp, #4]
 801db42:	1814      	adds	r4, r2, r0
 801db44:	9a07      	ldr	r2, [sp, #28]
 801db46:	b352      	cbz	r2, 801db9e <_dtoa_r+0x50e>
 801db48:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801db4c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801db50:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801db54:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801db58:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801db5c:	ee35 7b47 	vsub.f64	d7, d5, d7
 801db60:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801db64:	ee14 2a90 	vmov	r2, s9
 801db68:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801db6c:	3230      	adds	r2, #48	; 0x30
 801db6e:	ee36 6b45 	vsub.f64	d6, d6, d5
 801db72:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801db76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db7a:	f808 2b01 	strb.w	r2, [r8], #1
 801db7e:	d439      	bmi.n	801dbf4 <_dtoa_r+0x564>
 801db80:	ee32 5b46 	vsub.f64	d5, d2, d6
 801db84:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801db88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db8c:	d472      	bmi.n	801dc74 <_dtoa_r+0x5e4>
 801db8e:	45a0      	cmp	r8, r4
 801db90:	f43f af6b 	beq.w	801da6a <_dtoa_r+0x3da>
 801db94:	ee27 7b03 	vmul.f64	d7, d7, d3
 801db98:	ee26 6b03 	vmul.f64	d6, d6, d3
 801db9c:	e7e0      	b.n	801db60 <_dtoa_r+0x4d0>
 801db9e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801dba2:	ee27 7b04 	vmul.f64	d7, d7, d4
 801dba6:	4621      	mov	r1, r4
 801dba8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801dbac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801dbb0:	ee14 2a90 	vmov	r2, s9
 801dbb4:	3230      	adds	r2, #48	; 0x30
 801dbb6:	f808 2b01 	strb.w	r2, [r8], #1
 801dbba:	45a0      	cmp	r8, r4
 801dbbc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801dbc0:	ee36 6b45 	vsub.f64	d6, d6, d5
 801dbc4:	d118      	bne.n	801dbf8 <_dtoa_r+0x568>
 801dbc6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801dbca:	ee37 4b05 	vadd.f64	d4, d7, d5
 801dbce:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801dbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dbd6:	dc4d      	bgt.n	801dc74 <_dtoa_r+0x5e4>
 801dbd8:	ee35 7b47 	vsub.f64	d7, d5, d7
 801dbdc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801dbe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dbe4:	f57f af41 	bpl.w	801da6a <_dtoa_r+0x3da>
 801dbe8:	4688      	mov	r8, r1
 801dbea:	3901      	subs	r1, #1
 801dbec:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801dbf0:	2b30      	cmp	r3, #48	; 0x30
 801dbf2:	d0f9      	beq.n	801dbe8 <_dtoa_r+0x558>
 801dbf4:	46bb      	mov	fp, r7
 801dbf6:	e02a      	b.n	801dc4e <_dtoa_r+0x5be>
 801dbf8:	ee26 6b03 	vmul.f64	d6, d6, d3
 801dbfc:	e7d6      	b.n	801dbac <_dtoa_r+0x51c>
 801dbfe:	ed9d 7b02 	vldr	d7, [sp, #8]
 801dc02:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801dc06:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801dc0a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801dc0e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801dc12:	ee15 3a10 	vmov	r3, s10
 801dc16:	3330      	adds	r3, #48	; 0x30
 801dc18:	f808 3b01 	strb.w	r3, [r8], #1
 801dc1c:	9b01      	ldr	r3, [sp, #4]
 801dc1e:	eba8 0303 	sub.w	r3, r8, r3
 801dc22:	4599      	cmp	r9, r3
 801dc24:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801dc28:	eea3 7b46 	vfms.f64	d7, d3, d6
 801dc2c:	d133      	bne.n	801dc96 <_dtoa_r+0x606>
 801dc2e:	ee37 7b07 	vadd.f64	d7, d7, d7
 801dc32:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801dc36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc3a:	dc1a      	bgt.n	801dc72 <_dtoa_r+0x5e2>
 801dc3c:	eeb4 7b46 	vcmp.f64	d7, d6
 801dc40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc44:	d103      	bne.n	801dc4e <_dtoa_r+0x5be>
 801dc46:	ee15 3a10 	vmov	r3, s10
 801dc4a:	07d9      	lsls	r1, r3, #31
 801dc4c:	d411      	bmi.n	801dc72 <_dtoa_r+0x5e2>
 801dc4e:	4629      	mov	r1, r5
 801dc50:	4630      	mov	r0, r6
 801dc52:	f000 ff6d 	bl	801eb30 <_Bfree>
 801dc56:	2300      	movs	r3, #0
 801dc58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801dc5a:	f888 3000 	strb.w	r3, [r8]
 801dc5e:	f10b 0301 	add.w	r3, fp, #1
 801dc62:	6013      	str	r3, [r2, #0]
 801dc64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801dc66:	2b00      	cmp	r3, #0
 801dc68:	f43f ad61 	beq.w	801d72e <_dtoa_r+0x9e>
 801dc6c:	f8c3 8000 	str.w	r8, [r3]
 801dc70:	e55d      	b.n	801d72e <_dtoa_r+0x9e>
 801dc72:	465f      	mov	r7, fp
 801dc74:	4643      	mov	r3, r8
 801dc76:	4698      	mov	r8, r3
 801dc78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801dc7c:	2a39      	cmp	r2, #57	; 0x39
 801dc7e:	d106      	bne.n	801dc8e <_dtoa_r+0x5fe>
 801dc80:	9a01      	ldr	r2, [sp, #4]
 801dc82:	429a      	cmp	r2, r3
 801dc84:	d1f7      	bne.n	801dc76 <_dtoa_r+0x5e6>
 801dc86:	9901      	ldr	r1, [sp, #4]
 801dc88:	2230      	movs	r2, #48	; 0x30
 801dc8a:	3701      	adds	r7, #1
 801dc8c:	700a      	strb	r2, [r1, #0]
 801dc8e:	781a      	ldrb	r2, [r3, #0]
 801dc90:	3201      	adds	r2, #1
 801dc92:	701a      	strb	r2, [r3, #0]
 801dc94:	e7ae      	b.n	801dbf4 <_dtoa_r+0x564>
 801dc96:	ee27 7b04 	vmul.f64	d7, d7, d4
 801dc9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801dc9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dca2:	d1b2      	bne.n	801dc0a <_dtoa_r+0x57a>
 801dca4:	e7d3      	b.n	801dc4e <_dtoa_r+0x5be>
 801dca6:	bf00      	nop
 801dca8:	08024968 	.word	0x08024968
 801dcac:	08024940 	.word	0x08024940
 801dcb0:	9907      	ldr	r1, [sp, #28]
 801dcb2:	2900      	cmp	r1, #0
 801dcb4:	f000 80d0 	beq.w	801de58 <_dtoa_r+0x7c8>
 801dcb8:	9906      	ldr	r1, [sp, #24]
 801dcba:	2901      	cmp	r1, #1
 801dcbc:	f300 80b4 	bgt.w	801de28 <_dtoa_r+0x798>
 801dcc0:	990a      	ldr	r1, [sp, #40]	; 0x28
 801dcc2:	2900      	cmp	r1, #0
 801dcc4:	f000 80ac 	beq.w	801de20 <_dtoa_r+0x790>
 801dcc8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801dccc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801dcd0:	461c      	mov	r4, r3
 801dcd2:	930a      	str	r3, [sp, #40]	; 0x28
 801dcd4:	9b04      	ldr	r3, [sp, #16]
 801dcd6:	4413      	add	r3, r2
 801dcd8:	9304      	str	r3, [sp, #16]
 801dcda:	9b05      	ldr	r3, [sp, #20]
 801dcdc:	2101      	movs	r1, #1
 801dcde:	4413      	add	r3, r2
 801dce0:	4630      	mov	r0, r6
 801dce2:	9305      	str	r3, [sp, #20]
 801dce4:	f001 f826 	bl	801ed34 <__i2b>
 801dce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dcea:	4607      	mov	r7, r0
 801dcec:	f1b8 0f00 	cmp.w	r8, #0
 801dcf0:	dd0d      	ble.n	801dd0e <_dtoa_r+0x67e>
 801dcf2:	9a05      	ldr	r2, [sp, #20]
 801dcf4:	2a00      	cmp	r2, #0
 801dcf6:	dd0a      	ble.n	801dd0e <_dtoa_r+0x67e>
 801dcf8:	4542      	cmp	r2, r8
 801dcfa:	9904      	ldr	r1, [sp, #16]
 801dcfc:	bfa8      	it	ge
 801dcfe:	4642      	movge	r2, r8
 801dd00:	1a89      	subs	r1, r1, r2
 801dd02:	9104      	str	r1, [sp, #16]
 801dd04:	9905      	ldr	r1, [sp, #20]
 801dd06:	eba8 0802 	sub.w	r8, r8, r2
 801dd0a:	1a8a      	subs	r2, r1, r2
 801dd0c:	9205      	str	r2, [sp, #20]
 801dd0e:	b303      	cbz	r3, 801dd52 <_dtoa_r+0x6c2>
 801dd10:	9a07      	ldr	r2, [sp, #28]
 801dd12:	2a00      	cmp	r2, #0
 801dd14:	f000 80a5 	beq.w	801de62 <_dtoa_r+0x7d2>
 801dd18:	2c00      	cmp	r4, #0
 801dd1a:	dd13      	ble.n	801dd44 <_dtoa_r+0x6b4>
 801dd1c:	4639      	mov	r1, r7
 801dd1e:	4622      	mov	r2, r4
 801dd20:	4630      	mov	r0, r6
 801dd22:	930d      	str	r3, [sp, #52]	; 0x34
 801dd24:	f001 f8c6 	bl	801eeb4 <__pow5mult>
 801dd28:	462a      	mov	r2, r5
 801dd2a:	4601      	mov	r1, r0
 801dd2c:	4607      	mov	r7, r0
 801dd2e:	4630      	mov	r0, r6
 801dd30:	f001 f816 	bl	801ed60 <__multiply>
 801dd34:	4629      	mov	r1, r5
 801dd36:	900a      	str	r0, [sp, #40]	; 0x28
 801dd38:	4630      	mov	r0, r6
 801dd3a:	f000 fef9 	bl	801eb30 <_Bfree>
 801dd3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801dd40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dd42:	4615      	mov	r5, r2
 801dd44:	1b1a      	subs	r2, r3, r4
 801dd46:	d004      	beq.n	801dd52 <_dtoa_r+0x6c2>
 801dd48:	4629      	mov	r1, r5
 801dd4a:	4630      	mov	r0, r6
 801dd4c:	f001 f8b2 	bl	801eeb4 <__pow5mult>
 801dd50:	4605      	mov	r5, r0
 801dd52:	2101      	movs	r1, #1
 801dd54:	4630      	mov	r0, r6
 801dd56:	f000 ffed 	bl	801ed34 <__i2b>
 801dd5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dd5c:	2b00      	cmp	r3, #0
 801dd5e:	4604      	mov	r4, r0
 801dd60:	f340 8081 	ble.w	801de66 <_dtoa_r+0x7d6>
 801dd64:	461a      	mov	r2, r3
 801dd66:	4601      	mov	r1, r0
 801dd68:	4630      	mov	r0, r6
 801dd6a:	f001 f8a3 	bl	801eeb4 <__pow5mult>
 801dd6e:	9b06      	ldr	r3, [sp, #24]
 801dd70:	2b01      	cmp	r3, #1
 801dd72:	4604      	mov	r4, r0
 801dd74:	dd7a      	ble.n	801de6c <_dtoa_r+0x7dc>
 801dd76:	2300      	movs	r3, #0
 801dd78:	930a      	str	r3, [sp, #40]	; 0x28
 801dd7a:	6922      	ldr	r2, [r4, #16]
 801dd7c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801dd80:	6910      	ldr	r0, [r2, #16]
 801dd82:	f000 ff87 	bl	801ec94 <__hi0bits>
 801dd86:	f1c0 0020 	rsb	r0, r0, #32
 801dd8a:	9b05      	ldr	r3, [sp, #20]
 801dd8c:	4418      	add	r0, r3
 801dd8e:	f010 001f 	ands.w	r0, r0, #31
 801dd92:	f000 808c 	beq.w	801deae <_dtoa_r+0x81e>
 801dd96:	f1c0 0220 	rsb	r2, r0, #32
 801dd9a:	2a04      	cmp	r2, #4
 801dd9c:	f340 8085 	ble.w	801deaa <_dtoa_r+0x81a>
 801dda0:	f1c0 001c 	rsb	r0, r0, #28
 801dda4:	9b04      	ldr	r3, [sp, #16]
 801dda6:	4403      	add	r3, r0
 801dda8:	9304      	str	r3, [sp, #16]
 801ddaa:	9b05      	ldr	r3, [sp, #20]
 801ddac:	4403      	add	r3, r0
 801ddae:	4480      	add	r8, r0
 801ddb0:	9305      	str	r3, [sp, #20]
 801ddb2:	9b04      	ldr	r3, [sp, #16]
 801ddb4:	2b00      	cmp	r3, #0
 801ddb6:	dd05      	ble.n	801ddc4 <_dtoa_r+0x734>
 801ddb8:	4629      	mov	r1, r5
 801ddba:	461a      	mov	r2, r3
 801ddbc:	4630      	mov	r0, r6
 801ddbe:	f001 f8d3 	bl	801ef68 <__lshift>
 801ddc2:	4605      	mov	r5, r0
 801ddc4:	9b05      	ldr	r3, [sp, #20]
 801ddc6:	2b00      	cmp	r3, #0
 801ddc8:	dd05      	ble.n	801ddd6 <_dtoa_r+0x746>
 801ddca:	4621      	mov	r1, r4
 801ddcc:	461a      	mov	r2, r3
 801ddce:	4630      	mov	r0, r6
 801ddd0:	f001 f8ca 	bl	801ef68 <__lshift>
 801ddd4:	4604      	mov	r4, r0
 801ddd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ddd8:	2b00      	cmp	r3, #0
 801ddda:	d06a      	beq.n	801deb2 <_dtoa_r+0x822>
 801dddc:	4621      	mov	r1, r4
 801ddde:	4628      	mov	r0, r5
 801dde0:	f001 f932 	bl	801f048 <__mcmp>
 801dde4:	2800      	cmp	r0, #0
 801dde6:	da64      	bge.n	801deb2 <_dtoa_r+0x822>
 801dde8:	2300      	movs	r3, #0
 801ddea:	4629      	mov	r1, r5
 801ddec:	220a      	movs	r2, #10
 801ddee:	4630      	mov	r0, r6
 801ddf0:	f000 fec0 	bl	801eb74 <__multadd>
 801ddf4:	9b07      	ldr	r3, [sp, #28]
 801ddf6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ddfa:	4605      	mov	r5, r0
 801ddfc:	2b00      	cmp	r3, #0
 801ddfe:	f000 8191 	beq.w	801e124 <_dtoa_r+0xa94>
 801de02:	4639      	mov	r1, r7
 801de04:	2300      	movs	r3, #0
 801de06:	220a      	movs	r2, #10
 801de08:	4630      	mov	r0, r6
 801de0a:	f000 feb3 	bl	801eb74 <__multadd>
 801de0e:	f1ba 0f00 	cmp.w	sl, #0
 801de12:	4607      	mov	r7, r0
 801de14:	f300 808d 	bgt.w	801df32 <_dtoa_r+0x8a2>
 801de18:	9b06      	ldr	r3, [sp, #24]
 801de1a:	2b02      	cmp	r3, #2
 801de1c:	dc50      	bgt.n	801dec0 <_dtoa_r+0x830>
 801de1e:	e088      	b.n	801df32 <_dtoa_r+0x8a2>
 801de20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801de22:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801de26:	e751      	b.n	801dccc <_dtoa_r+0x63c>
 801de28:	f109 34ff 	add.w	r4, r9, #4294967295
 801de2c:	42a3      	cmp	r3, r4
 801de2e:	bfbf      	itttt	lt
 801de30:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801de32:	1ae3      	sublt	r3, r4, r3
 801de34:	18d2      	addlt	r2, r2, r3
 801de36:	9209      	strlt	r2, [sp, #36]	; 0x24
 801de38:	bfb6      	itet	lt
 801de3a:	4623      	movlt	r3, r4
 801de3c:	1b1c      	subge	r4, r3, r4
 801de3e:	2400      	movlt	r4, #0
 801de40:	f1b9 0f00 	cmp.w	r9, #0
 801de44:	bfb5      	itete	lt
 801de46:	9a04      	ldrlt	r2, [sp, #16]
 801de48:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801de4c:	eba2 0809 	sublt.w	r8, r2, r9
 801de50:	464a      	movge	r2, r9
 801de52:	bfb8      	it	lt
 801de54:	2200      	movlt	r2, #0
 801de56:	e73c      	b.n	801dcd2 <_dtoa_r+0x642>
 801de58:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801de5c:	9f07      	ldr	r7, [sp, #28]
 801de5e:	461c      	mov	r4, r3
 801de60:	e744      	b.n	801dcec <_dtoa_r+0x65c>
 801de62:	461a      	mov	r2, r3
 801de64:	e770      	b.n	801dd48 <_dtoa_r+0x6b8>
 801de66:	9b06      	ldr	r3, [sp, #24]
 801de68:	2b01      	cmp	r3, #1
 801de6a:	dc18      	bgt.n	801de9e <_dtoa_r+0x80e>
 801de6c:	9b02      	ldr	r3, [sp, #8]
 801de6e:	b9b3      	cbnz	r3, 801de9e <_dtoa_r+0x80e>
 801de70:	9b03      	ldr	r3, [sp, #12]
 801de72:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801de76:	b9a2      	cbnz	r2, 801dea2 <_dtoa_r+0x812>
 801de78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801de7c:	0d12      	lsrs	r2, r2, #20
 801de7e:	0512      	lsls	r2, r2, #20
 801de80:	b18a      	cbz	r2, 801dea6 <_dtoa_r+0x816>
 801de82:	9b04      	ldr	r3, [sp, #16]
 801de84:	3301      	adds	r3, #1
 801de86:	9304      	str	r3, [sp, #16]
 801de88:	9b05      	ldr	r3, [sp, #20]
 801de8a:	3301      	adds	r3, #1
 801de8c:	9305      	str	r3, [sp, #20]
 801de8e:	2301      	movs	r3, #1
 801de90:	930a      	str	r3, [sp, #40]	; 0x28
 801de92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de94:	2b00      	cmp	r3, #0
 801de96:	f47f af70 	bne.w	801dd7a <_dtoa_r+0x6ea>
 801de9a:	2001      	movs	r0, #1
 801de9c:	e775      	b.n	801dd8a <_dtoa_r+0x6fa>
 801de9e:	2300      	movs	r3, #0
 801dea0:	e7f6      	b.n	801de90 <_dtoa_r+0x800>
 801dea2:	9b02      	ldr	r3, [sp, #8]
 801dea4:	e7f4      	b.n	801de90 <_dtoa_r+0x800>
 801dea6:	920a      	str	r2, [sp, #40]	; 0x28
 801dea8:	e7f3      	b.n	801de92 <_dtoa_r+0x802>
 801deaa:	d082      	beq.n	801ddb2 <_dtoa_r+0x722>
 801deac:	4610      	mov	r0, r2
 801deae:	301c      	adds	r0, #28
 801deb0:	e778      	b.n	801dda4 <_dtoa_r+0x714>
 801deb2:	f1b9 0f00 	cmp.w	r9, #0
 801deb6:	dc37      	bgt.n	801df28 <_dtoa_r+0x898>
 801deb8:	9b06      	ldr	r3, [sp, #24]
 801deba:	2b02      	cmp	r3, #2
 801debc:	dd34      	ble.n	801df28 <_dtoa_r+0x898>
 801debe:	46ca      	mov	sl, r9
 801dec0:	f1ba 0f00 	cmp.w	sl, #0
 801dec4:	d10d      	bne.n	801dee2 <_dtoa_r+0x852>
 801dec6:	4621      	mov	r1, r4
 801dec8:	4653      	mov	r3, sl
 801deca:	2205      	movs	r2, #5
 801decc:	4630      	mov	r0, r6
 801dece:	f000 fe51 	bl	801eb74 <__multadd>
 801ded2:	4601      	mov	r1, r0
 801ded4:	4604      	mov	r4, r0
 801ded6:	4628      	mov	r0, r5
 801ded8:	f001 f8b6 	bl	801f048 <__mcmp>
 801dedc:	2800      	cmp	r0, #0
 801dede:	f73f adeb 	bgt.w	801dab8 <_dtoa_r+0x428>
 801dee2:	9b08      	ldr	r3, [sp, #32]
 801dee4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801dee8:	ea6f 0b03 	mvn.w	fp, r3
 801deec:	f04f 0900 	mov.w	r9, #0
 801def0:	4621      	mov	r1, r4
 801def2:	4630      	mov	r0, r6
 801def4:	f000 fe1c 	bl	801eb30 <_Bfree>
 801def8:	2f00      	cmp	r7, #0
 801defa:	f43f aea8 	beq.w	801dc4e <_dtoa_r+0x5be>
 801defe:	f1b9 0f00 	cmp.w	r9, #0
 801df02:	d005      	beq.n	801df10 <_dtoa_r+0x880>
 801df04:	45b9      	cmp	r9, r7
 801df06:	d003      	beq.n	801df10 <_dtoa_r+0x880>
 801df08:	4649      	mov	r1, r9
 801df0a:	4630      	mov	r0, r6
 801df0c:	f000 fe10 	bl	801eb30 <_Bfree>
 801df10:	4639      	mov	r1, r7
 801df12:	4630      	mov	r0, r6
 801df14:	f000 fe0c 	bl	801eb30 <_Bfree>
 801df18:	e699      	b.n	801dc4e <_dtoa_r+0x5be>
 801df1a:	2400      	movs	r4, #0
 801df1c:	4627      	mov	r7, r4
 801df1e:	e7e0      	b.n	801dee2 <_dtoa_r+0x852>
 801df20:	46bb      	mov	fp, r7
 801df22:	4604      	mov	r4, r0
 801df24:	4607      	mov	r7, r0
 801df26:	e5c7      	b.n	801dab8 <_dtoa_r+0x428>
 801df28:	9b07      	ldr	r3, [sp, #28]
 801df2a:	46ca      	mov	sl, r9
 801df2c:	2b00      	cmp	r3, #0
 801df2e:	f000 8100 	beq.w	801e132 <_dtoa_r+0xaa2>
 801df32:	f1b8 0f00 	cmp.w	r8, #0
 801df36:	dd05      	ble.n	801df44 <_dtoa_r+0x8b4>
 801df38:	4639      	mov	r1, r7
 801df3a:	4642      	mov	r2, r8
 801df3c:	4630      	mov	r0, r6
 801df3e:	f001 f813 	bl	801ef68 <__lshift>
 801df42:	4607      	mov	r7, r0
 801df44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801df46:	2b00      	cmp	r3, #0
 801df48:	d05d      	beq.n	801e006 <_dtoa_r+0x976>
 801df4a:	6879      	ldr	r1, [r7, #4]
 801df4c:	4630      	mov	r0, r6
 801df4e:	f000 fdaf 	bl	801eab0 <_Balloc>
 801df52:	4680      	mov	r8, r0
 801df54:	b928      	cbnz	r0, 801df62 <_dtoa_r+0x8d2>
 801df56:	4b82      	ldr	r3, [pc, #520]	; (801e160 <_dtoa_r+0xad0>)
 801df58:	4602      	mov	r2, r0
 801df5a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801df5e:	f7ff bbaf 	b.w	801d6c0 <_dtoa_r+0x30>
 801df62:	693a      	ldr	r2, [r7, #16]
 801df64:	3202      	adds	r2, #2
 801df66:	0092      	lsls	r2, r2, #2
 801df68:	f107 010c 	add.w	r1, r7, #12
 801df6c:	300c      	adds	r0, #12
 801df6e:	f7fd fc71 	bl	801b854 <memcpy>
 801df72:	2201      	movs	r2, #1
 801df74:	4641      	mov	r1, r8
 801df76:	4630      	mov	r0, r6
 801df78:	f000 fff6 	bl	801ef68 <__lshift>
 801df7c:	9b01      	ldr	r3, [sp, #4]
 801df7e:	3301      	adds	r3, #1
 801df80:	9304      	str	r3, [sp, #16]
 801df82:	9b01      	ldr	r3, [sp, #4]
 801df84:	4453      	add	r3, sl
 801df86:	9308      	str	r3, [sp, #32]
 801df88:	9b02      	ldr	r3, [sp, #8]
 801df8a:	f003 0301 	and.w	r3, r3, #1
 801df8e:	46b9      	mov	r9, r7
 801df90:	9307      	str	r3, [sp, #28]
 801df92:	4607      	mov	r7, r0
 801df94:	9b04      	ldr	r3, [sp, #16]
 801df96:	4621      	mov	r1, r4
 801df98:	3b01      	subs	r3, #1
 801df9a:	4628      	mov	r0, r5
 801df9c:	9302      	str	r3, [sp, #8]
 801df9e:	f7ff fae9 	bl	801d574 <quorem>
 801dfa2:	4603      	mov	r3, r0
 801dfa4:	3330      	adds	r3, #48	; 0x30
 801dfa6:	9005      	str	r0, [sp, #20]
 801dfa8:	4649      	mov	r1, r9
 801dfaa:	4628      	mov	r0, r5
 801dfac:	9309      	str	r3, [sp, #36]	; 0x24
 801dfae:	f001 f84b 	bl	801f048 <__mcmp>
 801dfb2:	463a      	mov	r2, r7
 801dfb4:	4682      	mov	sl, r0
 801dfb6:	4621      	mov	r1, r4
 801dfb8:	4630      	mov	r0, r6
 801dfba:	f001 f861 	bl	801f080 <__mdiff>
 801dfbe:	68c2      	ldr	r2, [r0, #12]
 801dfc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dfc2:	4680      	mov	r8, r0
 801dfc4:	bb0a      	cbnz	r2, 801e00a <_dtoa_r+0x97a>
 801dfc6:	4601      	mov	r1, r0
 801dfc8:	4628      	mov	r0, r5
 801dfca:	f001 f83d 	bl	801f048 <__mcmp>
 801dfce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dfd0:	4602      	mov	r2, r0
 801dfd2:	4641      	mov	r1, r8
 801dfd4:	4630      	mov	r0, r6
 801dfd6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801dfda:	f000 fda9 	bl	801eb30 <_Bfree>
 801dfde:	9b06      	ldr	r3, [sp, #24]
 801dfe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801dfe2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801dfe6:	ea43 0102 	orr.w	r1, r3, r2
 801dfea:	9b07      	ldr	r3, [sp, #28]
 801dfec:	430b      	orrs	r3, r1
 801dfee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dff0:	d10d      	bne.n	801e00e <_dtoa_r+0x97e>
 801dff2:	2b39      	cmp	r3, #57	; 0x39
 801dff4:	d029      	beq.n	801e04a <_dtoa_r+0x9ba>
 801dff6:	f1ba 0f00 	cmp.w	sl, #0
 801dffa:	dd01      	ble.n	801e000 <_dtoa_r+0x970>
 801dffc:	9b05      	ldr	r3, [sp, #20]
 801dffe:	3331      	adds	r3, #49	; 0x31
 801e000:	9a02      	ldr	r2, [sp, #8]
 801e002:	7013      	strb	r3, [r2, #0]
 801e004:	e774      	b.n	801def0 <_dtoa_r+0x860>
 801e006:	4638      	mov	r0, r7
 801e008:	e7b8      	b.n	801df7c <_dtoa_r+0x8ec>
 801e00a:	2201      	movs	r2, #1
 801e00c:	e7e1      	b.n	801dfd2 <_dtoa_r+0x942>
 801e00e:	f1ba 0f00 	cmp.w	sl, #0
 801e012:	db06      	blt.n	801e022 <_dtoa_r+0x992>
 801e014:	9906      	ldr	r1, [sp, #24]
 801e016:	ea41 0a0a 	orr.w	sl, r1, sl
 801e01a:	9907      	ldr	r1, [sp, #28]
 801e01c:	ea5a 0101 	orrs.w	r1, sl, r1
 801e020:	d120      	bne.n	801e064 <_dtoa_r+0x9d4>
 801e022:	2a00      	cmp	r2, #0
 801e024:	ddec      	ble.n	801e000 <_dtoa_r+0x970>
 801e026:	4629      	mov	r1, r5
 801e028:	2201      	movs	r2, #1
 801e02a:	4630      	mov	r0, r6
 801e02c:	9304      	str	r3, [sp, #16]
 801e02e:	f000 ff9b 	bl	801ef68 <__lshift>
 801e032:	4621      	mov	r1, r4
 801e034:	4605      	mov	r5, r0
 801e036:	f001 f807 	bl	801f048 <__mcmp>
 801e03a:	2800      	cmp	r0, #0
 801e03c:	9b04      	ldr	r3, [sp, #16]
 801e03e:	dc02      	bgt.n	801e046 <_dtoa_r+0x9b6>
 801e040:	d1de      	bne.n	801e000 <_dtoa_r+0x970>
 801e042:	07da      	lsls	r2, r3, #31
 801e044:	d5dc      	bpl.n	801e000 <_dtoa_r+0x970>
 801e046:	2b39      	cmp	r3, #57	; 0x39
 801e048:	d1d8      	bne.n	801dffc <_dtoa_r+0x96c>
 801e04a:	9a02      	ldr	r2, [sp, #8]
 801e04c:	2339      	movs	r3, #57	; 0x39
 801e04e:	7013      	strb	r3, [r2, #0]
 801e050:	4643      	mov	r3, r8
 801e052:	4698      	mov	r8, r3
 801e054:	3b01      	subs	r3, #1
 801e056:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801e05a:	2a39      	cmp	r2, #57	; 0x39
 801e05c:	d051      	beq.n	801e102 <_dtoa_r+0xa72>
 801e05e:	3201      	adds	r2, #1
 801e060:	701a      	strb	r2, [r3, #0]
 801e062:	e745      	b.n	801def0 <_dtoa_r+0x860>
 801e064:	2a00      	cmp	r2, #0
 801e066:	dd03      	ble.n	801e070 <_dtoa_r+0x9e0>
 801e068:	2b39      	cmp	r3, #57	; 0x39
 801e06a:	d0ee      	beq.n	801e04a <_dtoa_r+0x9ba>
 801e06c:	3301      	adds	r3, #1
 801e06e:	e7c7      	b.n	801e000 <_dtoa_r+0x970>
 801e070:	9a04      	ldr	r2, [sp, #16]
 801e072:	9908      	ldr	r1, [sp, #32]
 801e074:	f802 3c01 	strb.w	r3, [r2, #-1]
 801e078:	428a      	cmp	r2, r1
 801e07a:	d02b      	beq.n	801e0d4 <_dtoa_r+0xa44>
 801e07c:	4629      	mov	r1, r5
 801e07e:	2300      	movs	r3, #0
 801e080:	220a      	movs	r2, #10
 801e082:	4630      	mov	r0, r6
 801e084:	f000 fd76 	bl	801eb74 <__multadd>
 801e088:	45b9      	cmp	r9, r7
 801e08a:	4605      	mov	r5, r0
 801e08c:	f04f 0300 	mov.w	r3, #0
 801e090:	f04f 020a 	mov.w	r2, #10
 801e094:	4649      	mov	r1, r9
 801e096:	4630      	mov	r0, r6
 801e098:	d107      	bne.n	801e0aa <_dtoa_r+0xa1a>
 801e09a:	f000 fd6b 	bl	801eb74 <__multadd>
 801e09e:	4681      	mov	r9, r0
 801e0a0:	4607      	mov	r7, r0
 801e0a2:	9b04      	ldr	r3, [sp, #16]
 801e0a4:	3301      	adds	r3, #1
 801e0a6:	9304      	str	r3, [sp, #16]
 801e0a8:	e774      	b.n	801df94 <_dtoa_r+0x904>
 801e0aa:	f000 fd63 	bl	801eb74 <__multadd>
 801e0ae:	4639      	mov	r1, r7
 801e0b0:	4681      	mov	r9, r0
 801e0b2:	2300      	movs	r3, #0
 801e0b4:	220a      	movs	r2, #10
 801e0b6:	4630      	mov	r0, r6
 801e0b8:	f000 fd5c 	bl	801eb74 <__multadd>
 801e0bc:	4607      	mov	r7, r0
 801e0be:	e7f0      	b.n	801e0a2 <_dtoa_r+0xa12>
 801e0c0:	f1ba 0f00 	cmp.w	sl, #0
 801e0c4:	9a01      	ldr	r2, [sp, #4]
 801e0c6:	bfcc      	ite	gt
 801e0c8:	46d0      	movgt	r8, sl
 801e0ca:	f04f 0801 	movle.w	r8, #1
 801e0ce:	4490      	add	r8, r2
 801e0d0:	f04f 0900 	mov.w	r9, #0
 801e0d4:	4629      	mov	r1, r5
 801e0d6:	2201      	movs	r2, #1
 801e0d8:	4630      	mov	r0, r6
 801e0da:	9302      	str	r3, [sp, #8]
 801e0dc:	f000 ff44 	bl	801ef68 <__lshift>
 801e0e0:	4621      	mov	r1, r4
 801e0e2:	4605      	mov	r5, r0
 801e0e4:	f000 ffb0 	bl	801f048 <__mcmp>
 801e0e8:	2800      	cmp	r0, #0
 801e0ea:	dcb1      	bgt.n	801e050 <_dtoa_r+0x9c0>
 801e0ec:	d102      	bne.n	801e0f4 <_dtoa_r+0xa64>
 801e0ee:	9b02      	ldr	r3, [sp, #8]
 801e0f0:	07db      	lsls	r3, r3, #31
 801e0f2:	d4ad      	bmi.n	801e050 <_dtoa_r+0x9c0>
 801e0f4:	4643      	mov	r3, r8
 801e0f6:	4698      	mov	r8, r3
 801e0f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e0fc:	2a30      	cmp	r2, #48	; 0x30
 801e0fe:	d0fa      	beq.n	801e0f6 <_dtoa_r+0xa66>
 801e100:	e6f6      	b.n	801def0 <_dtoa_r+0x860>
 801e102:	9a01      	ldr	r2, [sp, #4]
 801e104:	429a      	cmp	r2, r3
 801e106:	d1a4      	bne.n	801e052 <_dtoa_r+0x9c2>
 801e108:	f10b 0b01 	add.w	fp, fp, #1
 801e10c:	2331      	movs	r3, #49	; 0x31
 801e10e:	e778      	b.n	801e002 <_dtoa_r+0x972>
 801e110:	4b14      	ldr	r3, [pc, #80]	; (801e164 <_dtoa_r+0xad4>)
 801e112:	f7ff bb27 	b.w	801d764 <_dtoa_r+0xd4>
 801e116:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e118:	2b00      	cmp	r3, #0
 801e11a:	f47f ab03 	bne.w	801d724 <_dtoa_r+0x94>
 801e11e:	4b12      	ldr	r3, [pc, #72]	; (801e168 <_dtoa_r+0xad8>)
 801e120:	f7ff bb20 	b.w	801d764 <_dtoa_r+0xd4>
 801e124:	f1ba 0f00 	cmp.w	sl, #0
 801e128:	dc03      	bgt.n	801e132 <_dtoa_r+0xaa2>
 801e12a:	9b06      	ldr	r3, [sp, #24]
 801e12c:	2b02      	cmp	r3, #2
 801e12e:	f73f aec7 	bgt.w	801dec0 <_dtoa_r+0x830>
 801e132:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801e136:	4621      	mov	r1, r4
 801e138:	4628      	mov	r0, r5
 801e13a:	f7ff fa1b 	bl	801d574 <quorem>
 801e13e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801e142:	f808 3b01 	strb.w	r3, [r8], #1
 801e146:	9a01      	ldr	r2, [sp, #4]
 801e148:	eba8 0202 	sub.w	r2, r8, r2
 801e14c:	4592      	cmp	sl, r2
 801e14e:	ddb7      	ble.n	801e0c0 <_dtoa_r+0xa30>
 801e150:	4629      	mov	r1, r5
 801e152:	2300      	movs	r3, #0
 801e154:	220a      	movs	r2, #10
 801e156:	4630      	mov	r0, r6
 801e158:	f000 fd0c 	bl	801eb74 <__multadd>
 801e15c:	4605      	mov	r5, r0
 801e15e:	e7ea      	b.n	801e136 <_dtoa_r+0xaa6>
 801e160:	080247f4 	.word	0x080247f4
 801e164:	08024664 	.word	0x08024664
 801e168:	0802478c 	.word	0x0802478c

0801e16c <__errno>:
 801e16c:	4b01      	ldr	r3, [pc, #4]	; (801e174 <__errno+0x8>)
 801e16e:	6818      	ldr	r0, [r3, #0]
 801e170:	4770      	bx	lr
 801e172:	bf00      	nop
 801e174:	20000068 	.word	0x20000068

0801e178 <std>:
 801e178:	2300      	movs	r3, #0
 801e17a:	b510      	push	{r4, lr}
 801e17c:	4604      	mov	r4, r0
 801e17e:	e9c0 3300 	strd	r3, r3, [r0]
 801e182:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e186:	6083      	str	r3, [r0, #8]
 801e188:	8181      	strh	r1, [r0, #12]
 801e18a:	6643      	str	r3, [r0, #100]	; 0x64
 801e18c:	81c2      	strh	r2, [r0, #14]
 801e18e:	6183      	str	r3, [r0, #24]
 801e190:	4619      	mov	r1, r3
 801e192:	2208      	movs	r2, #8
 801e194:	305c      	adds	r0, #92	; 0x5c
 801e196:	f7fd fb85 	bl	801b8a4 <memset>
 801e19a:	4b05      	ldr	r3, [pc, #20]	; (801e1b0 <std+0x38>)
 801e19c:	6263      	str	r3, [r4, #36]	; 0x24
 801e19e:	4b05      	ldr	r3, [pc, #20]	; (801e1b4 <std+0x3c>)
 801e1a0:	62a3      	str	r3, [r4, #40]	; 0x28
 801e1a2:	4b05      	ldr	r3, [pc, #20]	; (801e1b8 <std+0x40>)
 801e1a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e1a6:	4b05      	ldr	r3, [pc, #20]	; (801e1bc <std+0x44>)
 801e1a8:	6224      	str	r4, [r4, #32]
 801e1aa:	6323      	str	r3, [r4, #48]	; 0x30
 801e1ac:	bd10      	pop	{r4, pc}
 801e1ae:	bf00      	nop
 801e1b0:	0801f9a9 	.word	0x0801f9a9
 801e1b4:	0801f9cb 	.word	0x0801f9cb
 801e1b8:	0801fa03 	.word	0x0801fa03
 801e1bc:	0801fa27 	.word	0x0801fa27

0801e1c0 <_cleanup_r>:
 801e1c0:	4901      	ldr	r1, [pc, #4]	; (801e1c8 <_cleanup_r+0x8>)
 801e1c2:	f000 b8c1 	b.w	801e348 <_fwalk_reent>
 801e1c6:	bf00      	nop
 801e1c8:	0801fd2d 	.word	0x0801fd2d

0801e1cc <__sfmoreglue>:
 801e1cc:	b570      	push	{r4, r5, r6, lr}
 801e1ce:	2268      	movs	r2, #104	; 0x68
 801e1d0:	1e4d      	subs	r5, r1, #1
 801e1d2:	4355      	muls	r5, r2
 801e1d4:	460e      	mov	r6, r1
 801e1d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e1da:	f7fd fbed 	bl	801b9b8 <_malloc_r>
 801e1de:	4604      	mov	r4, r0
 801e1e0:	b140      	cbz	r0, 801e1f4 <__sfmoreglue+0x28>
 801e1e2:	2100      	movs	r1, #0
 801e1e4:	e9c0 1600 	strd	r1, r6, [r0]
 801e1e8:	300c      	adds	r0, #12
 801e1ea:	60a0      	str	r0, [r4, #8]
 801e1ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e1f0:	f7fd fb58 	bl	801b8a4 <memset>
 801e1f4:	4620      	mov	r0, r4
 801e1f6:	bd70      	pop	{r4, r5, r6, pc}

0801e1f8 <__sfp_lock_acquire>:
 801e1f8:	4801      	ldr	r0, [pc, #4]	; (801e200 <__sfp_lock_acquire+0x8>)
 801e1fa:	f000 bc38 	b.w	801ea6e <__retarget_lock_acquire_recursive>
 801e1fe:	bf00      	nop
 801e200:	20007545 	.word	0x20007545

0801e204 <__sfp_lock_release>:
 801e204:	4801      	ldr	r0, [pc, #4]	; (801e20c <__sfp_lock_release+0x8>)
 801e206:	f000 bc33 	b.w	801ea70 <__retarget_lock_release_recursive>
 801e20a:	bf00      	nop
 801e20c:	20007545 	.word	0x20007545

0801e210 <__sinit_lock_acquire>:
 801e210:	4801      	ldr	r0, [pc, #4]	; (801e218 <__sinit_lock_acquire+0x8>)
 801e212:	f000 bc2c 	b.w	801ea6e <__retarget_lock_acquire_recursive>
 801e216:	bf00      	nop
 801e218:	20007546 	.word	0x20007546

0801e21c <__sinit_lock_release>:
 801e21c:	4801      	ldr	r0, [pc, #4]	; (801e224 <__sinit_lock_release+0x8>)
 801e21e:	f000 bc27 	b.w	801ea70 <__retarget_lock_release_recursive>
 801e222:	bf00      	nop
 801e224:	20007546 	.word	0x20007546

0801e228 <__sinit>:
 801e228:	b510      	push	{r4, lr}
 801e22a:	4604      	mov	r4, r0
 801e22c:	f7ff fff0 	bl	801e210 <__sinit_lock_acquire>
 801e230:	69a3      	ldr	r3, [r4, #24]
 801e232:	b11b      	cbz	r3, 801e23c <__sinit+0x14>
 801e234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e238:	f7ff bff0 	b.w	801e21c <__sinit_lock_release>
 801e23c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e240:	6523      	str	r3, [r4, #80]	; 0x50
 801e242:	4b13      	ldr	r3, [pc, #76]	; (801e290 <__sinit+0x68>)
 801e244:	4a13      	ldr	r2, [pc, #76]	; (801e294 <__sinit+0x6c>)
 801e246:	681b      	ldr	r3, [r3, #0]
 801e248:	62a2      	str	r2, [r4, #40]	; 0x28
 801e24a:	42a3      	cmp	r3, r4
 801e24c:	bf04      	itt	eq
 801e24e:	2301      	moveq	r3, #1
 801e250:	61a3      	streq	r3, [r4, #24]
 801e252:	4620      	mov	r0, r4
 801e254:	f000 f820 	bl	801e298 <__sfp>
 801e258:	6060      	str	r0, [r4, #4]
 801e25a:	4620      	mov	r0, r4
 801e25c:	f000 f81c 	bl	801e298 <__sfp>
 801e260:	60a0      	str	r0, [r4, #8]
 801e262:	4620      	mov	r0, r4
 801e264:	f000 f818 	bl	801e298 <__sfp>
 801e268:	2200      	movs	r2, #0
 801e26a:	60e0      	str	r0, [r4, #12]
 801e26c:	2104      	movs	r1, #4
 801e26e:	6860      	ldr	r0, [r4, #4]
 801e270:	f7ff ff82 	bl	801e178 <std>
 801e274:	68a0      	ldr	r0, [r4, #8]
 801e276:	2201      	movs	r2, #1
 801e278:	2109      	movs	r1, #9
 801e27a:	f7ff ff7d 	bl	801e178 <std>
 801e27e:	68e0      	ldr	r0, [r4, #12]
 801e280:	2202      	movs	r2, #2
 801e282:	2112      	movs	r1, #18
 801e284:	f7ff ff78 	bl	801e178 <std>
 801e288:	2301      	movs	r3, #1
 801e28a:	61a3      	str	r3, [r4, #24]
 801e28c:	e7d2      	b.n	801e234 <__sinit+0xc>
 801e28e:	bf00      	nop
 801e290:	08024650 	.word	0x08024650
 801e294:	0801e1c1 	.word	0x0801e1c1

0801e298 <__sfp>:
 801e298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e29a:	4607      	mov	r7, r0
 801e29c:	f7ff ffac 	bl	801e1f8 <__sfp_lock_acquire>
 801e2a0:	4b1e      	ldr	r3, [pc, #120]	; (801e31c <__sfp+0x84>)
 801e2a2:	681e      	ldr	r6, [r3, #0]
 801e2a4:	69b3      	ldr	r3, [r6, #24]
 801e2a6:	b913      	cbnz	r3, 801e2ae <__sfp+0x16>
 801e2a8:	4630      	mov	r0, r6
 801e2aa:	f7ff ffbd 	bl	801e228 <__sinit>
 801e2ae:	3648      	adds	r6, #72	; 0x48
 801e2b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e2b4:	3b01      	subs	r3, #1
 801e2b6:	d503      	bpl.n	801e2c0 <__sfp+0x28>
 801e2b8:	6833      	ldr	r3, [r6, #0]
 801e2ba:	b30b      	cbz	r3, 801e300 <__sfp+0x68>
 801e2bc:	6836      	ldr	r6, [r6, #0]
 801e2be:	e7f7      	b.n	801e2b0 <__sfp+0x18>
 801e2c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e2c4:	b9d5      	cbnz	r5, 801e2fc <__sfp+0x64>
 801e2c6:	4b16      	ldr	r3, [pc, #88]	; (801e320 <__sfp+0x88>)
 801e2c8:	60e3      	str	r3, [r4, #12]
 801e2ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e2ce:	6665      	str	r5, [r4, #100]	; 0x64
 801e2d0:	f000 fbcc 	bl	801ea6c <__retarget_lock_init_recursive>
 801e2d4:	f7ff ff96 	bl	801e204 <__sfp_lock_release>
 801e2d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e2dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e2e0:	6025      	str	r5, [r4, #0]
 801e2e2:	61a5      	str	r5, [r4, #24]
 801e2e4:	2208      	movs	r2, #8
 801e2e6:	4629      	mov	r1, r5
 801e2e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e2ec:	f7fd fada 	bl	801b8a4 <memset>
 801e2f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e2f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e2f8:	4620      	mov	r0, r4
 801e2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e2fc:	3468      	adds	r4, #104	; 0x68
 801e2fe:	e7d9      	b.n	801e2b4 <__sfp+0x1c>
 801e300:	2104      	movs	r1, #4
 801e302:	4638      	mov	r0, r7
 801e304:	f7ff ff62 	bl	801e1cc <__sfmoreglue>
 801e308:	4604      	mov	r4, r0
 801e30a:	6030      	str	r0, [r6, #0]
 801e30c:	2800      	cmp	r0, #0
 801e30e:	d1d5      	bne.n	801e2bc <__sfp+0x24>
 801e310:	f7ff ff78 	bl	801e204 <__sfp_lock_release>
 801e314:	230c      	movs	r3, #12
 801e316:	603b      	str	r3, [r7, #0]
 801e318:	e7ee      	b.n	801e2f8 <__sfp+0x60>
 801e31a:	bf00      	nop
 801e31c:	08024650 	.word	0x08024650
 801e320:	ffff0001 	.word	0xffff0001

0801e324 <fiprintf>:
 801e324:	b40e      	push	{r1, r2, r3}
 801e326:	b503      	push	{r0, r1, lr}
 801e328:	4601      	mov	r1, r0
 801e32a:	ab03      	add	r3, sp, #12
 801e32c:	4805      	ldr	r0, [pc, #20]	; (801e344 <fiprintf+0x20>)
 801e32e:	f853 2b04 	ldr.w	r2, [r3], #4
 801e332:	6800      	ldr	r0, [r0, #0]
 801e334:	9301      	str	r3, [sp, #4]
 801e336:	f001 f9ff 	bl	801f738 <_vfiprintf_r>
 801e33a:	b002      	add	sp, #8
 801e33c:	f85d eb04 	ldr.w	lr, [sp], #4
 801e340:	b003      	add	sp, #12
 801e342:	4770      	bx	lr
 801e344:	20000068 	.word	0x20000068

0801e348 <_fwalk_reent>:
 801e348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e34c:	4606      	mov	r6, r0
 801e34e:	4688      	mov	r8, r1
 801e350:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e354:	2700      	movs	r7, #0
 801e356:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e35a:	f1b9 0901 	subs.w	r9, r9, #1
 801e35e:	d505      	bpl.n	801e36c <_fwalk_reent+0x24>
 801e360:	6824      	ldr	r4, [r4, #0]
 801e362:	2c00      	cmp	r4, #0
 801e364:	d1f7      	bne.n	801e356 <_fwalk_reent+0xe>
 801e366:	4638      	mov	r0, r7
 801e368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e36c:	89ab      	ldrh	r3, [r5, #12]
 801e36e:	2b01      	cmp	r3, #1
 801e370:	d907      	bls.n	801e382 <_fwalk_reent+0x3a>
 801e372:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e376:	3301      	adds	r3, #1
 801e378:	d003      	beq.n	801e382 <_fwalk_reent+0x3a>
 801e37a:	4629      	mov	r1, r5
 801e37c:	4630      	mov	r0, r6
 801e37e:	47c0      	blx	r8
 801e380:	4307      	orrs	r7, r0
 801e382:	3568      	adds	r5, #104	; 0x68
 801e384:	e7e9      	b.n	801e35a <_fwalk_reent+0x12>

0801e386 <rshift>:
 801e386:	6903      	ldr	r3, [r0, #16]
 801e388:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801e38c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e390:	ea4f 1261 	mov.w	r2, r1, asr #5
 801e394:	f100 0414 	add.w	r4, r0, #20
 801e398:	dd45      	ble.n	801e426 <rshift+0xa0>
 801e39a:	f011 011f 	ands.w	r1, r1, #31
 801e39e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801e3a2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801e3a6:	d10c      	bne.n	801e3c2 <rshift+0x3c>
 801e3a8:	f100 0710 	add.w	r7, r0, #16
 801e3ac:	4629      	mov	r1, r5
 801e3ae:	42b1      	cmp	r1, r6
 801e3b0:	d334      	bcc.n	801e41c <rshift+0x96>
 801e3b2:	1a9b      	subs	r3, r3, r2
 801e3b4:	009b      	lsls	r3, r3, #2
 801e3b6:	1eea      	subs	r2, r5, #3
 801e3b8:	4296      	cmp	r6, r2
 801e3ba:	bf38      	it	cc
 801e3bc:	2300      	movcc	r3, #0
 801e3be:	4423      	add	r3, r4
 801e3c0:	e015      	b.n	801e3ee <rshift+0x68>
 801e3c2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801e3c6:	f1c1 0820 	rsb	r8, r1, #32
 801e3ca:	40cf      	lsrs	r7, r1
 801e3cc:	f105 0e04 	add.w	lr, r5, #4
 801e3d0:	46a1      	mov	r9, r4
 801e3d2:	4576      	cmp	r6, lr
 801e3d4:	46f4      	mov	ip, lr
 801e3d6:	d815      	bhi.n	801e404 <rshift+0x7e>
 801e3d8:	1a9a      	subs	r2, r3, r2
 801e3da:	0092      	lsls	r2, r2, #2
 801e3dc:	3a04      	subs	r2, #4
 801e3de:	3501      	adds	r5, #1
 801e3e0:	42ae      	cmp	r6, r5
 801e3e2:	bf38      	it	cc
 801e3e4:	2200      	movcc	r2, #0
 801e3e6:	18a3      	adds	r3, r4, r2
 801e3e8:	50a7      	str	r7, [r4, r2]
 801e3ea:	b107      	cbz	r7, 801e3ee <rshift+0x68>
 801e3ec:	3304      	adds	r3, #4
 801e3ee:	1b1a      	subs	r2, r3, r4
 801e3f0:	42a3      	cmp	r3, r4
 801e3f2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801e3f6:	bf08      	it	eq
 801e3f8:	2300      	moveq	r3, #0
 801e3fa:	6102      	str	r2, [r0, #16]
 801e3fc:	bf08      	it	eq
 801e3fe:	6143      	streq	r3, [r0, #20]
 801e400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e404:	f8dc c000 	ldr.w	ip, [ip]
 801e408:	fa0c fc08 	lsl.w	ip, ip, r8
 801e40c:	ea4c 0707 	orr.w	r7, ip, r7
 801e410:	f849 7b04 	str.w	r7, [r9], #4
 801e414:	f85e 7b04 	ldr.w	r7, [lr], #4
 801e418:	40cf      	lsrs	r7, r1
 801e41a:	e7da      	b.n	801e3d2 <rshift+0x4c>
 801e41c:	f851 cb04 	ldr.w	ip, [r1], #4
 801e420:	f847 cf04 	str.w	ip, [r7, #4]!
 801e424:	e7c3      	b.n	801e3ae <rshift+0x28>
 801e426:	4623      	mov	r3, r4
 801e428:	e7e1      	b.n	801e3ee <rshift+0x68>

0801e42a <__hexdig_fun>:
 801e42a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801e42e:	2b09      	cmp	r3, #9
 801e430:	d802      	bhi.n	801e438 <__hexdig_fun+0xe>
 801e432:	3820      	subs	r0, #32
 801e434:	b2c0      	uxtb	r0, r0
 801e436:	4770      	bx	lr
 801e438:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801e43c:	2b05      	cmp	r3, #5
 801e43e:	d801      	bhi.n	801e444 <__hexdig_fun+0x1a>
 801e440:	3847      	subs	r0, #71	; 0x47
 801e442:	e7f7      	b.n	801e434 <__hexdig_fun+0xa>
 801e444:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801e448:	2b05      	cmp	r3, #5
 801e44a:	d801      	bhi.n	801e450 <__hexdig_fun+0x26>
 801e44c:	3827      	subs	r0, #39	; 0x27
 801e44e:	e7f1      	b.n	801e434 <__hexdig_fun+0xa>
 801e450:	2000      	movs	r0, #0
 801e452:	4770      	bx	lr

0801e454 <__gethex>:
 801e454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e458:	ed2d 8b02 	vpush	{d8}
 801e45c:	b089      	sub	sp, #36	; 0x24
 801e45e:	ee08 0a10 	vmov	s16, r0
 801e462:	9304      	str	r3, [sp, #16]
 801e464:	4bb4      	ldr	r3, [pc, #720]	; (801e738 <__gethex+0x2e4>)
 801e466:	681b      	ldr	r3, [r3, #0]
 801e468:	9301      	str	r3, [sp, #4]
 801e46a:	4618      	mov	r0, r3
 801e46c:	468b      	mov	fp, r1
 801e46e:	4690      	mov	r8, r2
 801e470:	f7e1 fee6 	bl	8000240 <strlen>
 801e474:	9b01      	ldr	r3, [sp, #4]
 801e476:	f8db 2000 	ldr.w	r2, [fp]
 801e47a:	4403      	add	r3, r0
 801e47c:	4682      	mov	sl, r0
 801e47e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801e482:	9305      	str	r3, [sp, #20]
 801e484:	1c93      	adds	r3, r2, #2
 801e486:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801e48a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801e48e:	32fe      	adds	r2, #254	; 0xfe
 801e490:	18d1      	adds	r1, r2, r3
 801e492:	461f      	mov	r7, r3
 801e494:	f813 0b01 	ldrb.w	r0, [r3], #1
 801e498:	9100      	str	r1, [sp, #0]
 801e49a:	2830      	cmp	r0, #48	; 0x30
 801e49c:	d0f8      	beq.n	801e490 <__gethex+0x3c>
 801e49e:	f7ff ffc4 	bl	801e42a <__hexdig_fun>
 801e4a2:	4604      	mov	r4, r0
 801e4a4:	2800      	cmp	r0, #0
 801e4a6:	d13a      	bne.n	801e51e <__gethex+0xca>
 801e4a8:	9901      	ldr	r1, [sp, #4]
 801e4aa:	4652      	mov	r2, sl
 801e4ac:	4638      	mov	r0, r7
 801e4ae:	f7fe f9d3 	bl	801c858 <strncmp>
 801e4b2:	4605      	mov	r5, r0
 801e4b4:	2800      	cmp	r0, #0
 801e4b6:	d168      	bne.n	801e58a <__gethex+0x136>
 801e4b8:	f817 000a 	ldrb.w	r0, [r7, sl]
 801e4bc:	eb07 060a 	add.w	r6, r7, sl
 801e4c0:	f7ff ffb3 	bl	801e42a <__hexdig_fun>
 801e4c4:	2800      	cmp	r0, #0
 801e4c6:	d062      	beq.n	801e58e <__gethex+0x13a>
 801e4c8:	4633      	mov	r3, r6
 801e4ca:	7818      	ldrb	r0, [r3, #0]
 801e4cc:	2830      	cmp	r0, #48	; 0x30
 801e4ce:	461f      	mov	r7, r3
 801e4d0:	f103 0301 	add.w	r3, r3, #1
 801e4d4:	d0f9      	beq.n	801e4ca <__gethex+0x76>
 801e4d6:	f7ff ffa8 	bl	801e42a <__hexdig_fun>
 801e4da:	2301      	movs	r3, #1
 801e4dc:	fab0 f480 	clz	r4, r0
 801e4e0:	0964      	lsrs	r4, r4, #5
 801e4e2:	4635      	mov	r5, r6
 801e4e4:	9300      	str	r3, [sp, #0]
 801e4e6:	463a      	mov	r2, r7
 801e4e8:	4616      	mov	r6, r2
 801e4ea:	3201      	adds	r2, #1
 801e4ec:	7830      	ldrb	r0, [r6, #0]
 801e4ee:	f7ff ff9c 	bl	801e42a <__hexdig_fun>
 801e4f2:	2800      	cmp	r0, #0
 801e4f4:	d1f8      	bne.n	801e4e8 <__gethex+0x94>
 801e4f6:	9901      	ldr	r1, [sp, #4]
 801e4f8:	4652      	mov	r2, sl
 801e4fa:	4630      	mov	r0, r6
 801e4fc:	f7fe f9ac 	bl	801c858 <strncmp>
 801e500:	b980      	cbnz	r0, 801e524 <__gethex+0xd0>
 801e502:	b94d      	cbnz	r5, 801e518 <__gethex+0xc4>
 801e504:	eb06 050a 	add.w	r5, r6, sl
 801e508:	462a      	mov	r2, r5
 801e50a:	4616      	mov	r6, r2
 801e50c:	3201      	adds	r2, #1
 801e50e:	7830      	ldrb	r0, [r6, #0]
 801e510:	f7ff ff8b 	bl	801e42a <__hexdig_fun>
 801e514:	2800      	cmp	r0, #0
 801e516:	d1f8      	bne.n	801e50a <__gethex+0xb6>
 801e518:	1bad      	subs	r5, r5, r6
 801e51a:	00ad      	lsls	r5, r5, #2
 801e51c:	e004      	b.n	801e528 <__gethex+0xd4>
 801e51e:	2400      	movs	r4, #0
 801e520:	4625      	mov	r5, r4
 801e522:	e7e0      	b.n	801e4e6 <__gethex+0x92>
 801e524:	2d00      	cmp	r5, #0
 801e526:	d1f7      	bne.n	801e518 <__gethex+0xc4>
 801e528:	7833      	ldrb	r3, [r6, #0]
 801e52a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801e52e:	2b50      	cmp	r3, #80	; 0x50
 801e530:	d13b      	bne.n	801e5aa <__gethex+0x156>
 801e532:	7873      	ldrb	r3, [r6, #1]
 801e534:	2b2b      	cmp	r3, #43	; 0x2b
 801e536:	d02c      	beq.n	801e592 <__gethex+0x13e>
 801e538:	2b2d      	cmp	r3, #45	; 0x2d
 801e53a:	d02e      	beq.n	801e59a <__gethex+0x146>
 801e53c:	1c71      	adds	r1, r6, #1
 801e53e:	f04f 0900 	mov.w	r9, #0
 801e542:	7808      	ldrb	r0, [r1, #0]
 801e544:	f7ff ff71 	bl	801e42a <__hexdig_fun>
 801e548:	1e43      	subs	r3, r0, #1
 801e54a:	b2db      	uxtb	r3, r3
 801e54c:	2b18      	cmp	r3, #24
 801e54e:	d82c      	bhi.n	801e5aa <__gethex+0x156>
 801e550:	f1a0 0210 	sub.w	r2, r0, #16
 801e554:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801e558:	f7ff ff67 	bl	801e42a <__hexdig_fun>
 801e55c:	1e43      	subs	r3, r0, #1
 801e55e:	b2db      	uxtb	r3, r3
 801e560:	2b18      	cmp	r3, #24
 801e562:	d91d      	bls.n	801e5a0 <__gethex+0x14c>
 801e564:	f1b9 0f00 	cmp.w	r9, #0
 801e568:	d000      	beq.n	801e56c <__gethex+0x118>
 801e56a:	4252      	negs	r2, r2
 801e56c:	4415      	add	r5, r2
 801e56e:	f8cb 1000 	str.w	r1, [fp]
 801e572:	b1e4      	cbz	r4, 801e5ae <__gethex+0x15a>
 801e574:	9b00      	ldr	r3, [sp, #0]
 801e576:	2b00      	cmp	r3, #0
 801e578:	bf14      	ite	ne
 801e57a:	2700      	movne	r7, #0
 801e57c:	2706      	moveq	r7, #6
 801e57e:	4638      	mov	r0, r7
 801e580:	b009      	add	sp, #36	; 0x24
 801e582:	ecbd 8b02 	vpop	{d8}
 801e586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e58a:	463e      	mov	r6, r7
 801e58c:	4625      	mov	r5, r4
 801e58e:	2401      	movs	r4, #1
 801e590:	e7ca      	b.n	801e528 <__gethex+0xd4>
 801e592:	f04f 0900 	mov.w	r9, #0
 801e596:	1cb1      	adds	r1, r6, #2
 801e598:	e7d3      	b.n	801e542 <__gethex+0xee>
 801e59a:	f04f 0901 	mov.w	r9, #1
 801e59e:	e7fa      	b.n	801e596 <__gethex+0x142>
 801e5a0:	230a      	movs	r3, #10
 801e5a2:	fb03 0202 	mla	r2, r3, r2, r0
 801e5a6:	3a10      	subs	r2, #16
 801e5a8:	e7d4      	b.n	801e554 <__gethex+0x100>
 801e5aa:	4631      	mov	r1, r6
 801e5ac:	e7df      	b.n	801e56e <__gethex+0x11a>
 801e5ae:	1bf3      	subs	r3, r6, r7
 801e5b0:	3b01      	subs	r3, #1
 801e5b2:	4621      	mov	r1, r4
 801e5b4:	2b07      	cmp	r3, #7
 801e5b6:	dc0b      	bgt.n	801e5d0 <__gethex+0x17c>
 801e5b8:	ee18 0a10 	vmov	r0, s16
 801e5bc:	f000 fa78 	bl	801eab0 <_Balloc>
 801e5c0:	4604      	mov	r4, r0
 801e5c2:	b940      	cbnz	r0, 801e5d6 <__gethex+0x182>
 801e5c4:	4b5d      	ldr	r3, [pc, #372]	; (801e73c <__gethex+0x2e8>)
 801e5c6:	4602      	mov	r2, r0
 801e5c8:	21de      	movs	r1, #222	; 0xde
 801e5ca:	485d      	ldr	r0, [pc, #372]	; (801e740 <__gethex+0x2ec>)
 801e5cc:	f7fe ffb4 	bl	801d538 <__assert_func>
 801e5d0:	3101      	adds	r1, #1
 801e5d2:	105b      	asrs	r3, r3, #1
 801e5d4:	e7ee      	b.n	801e5b4 <__gethex+0x160>
 801e5d6:	f100 0914 	add.w	r9, r0, #20
 801e5da:	f04f 0b00 	mov.w	fp, #0
 801e5de:	f1ca 0301 	rsb	r3, sl, #1
 801e5e2:	f8cd 9008 	str.w	r9, [sp, #8]
 801e5e6:	f8cd b000 	str.w	fp, [sp]
 801e5ea:	9306      	str	r3, [sp, #24]
 801e5ec:	42b7      	cmp	r7, r6
 801e5ee:	d340      	bcc.n	801e672 <__gethex+0x21e>
 801e5f0:	9802      	ldr	r0, [sp, #8]
 801e5f2:	9b00      	ldr	r3, [sp, #0]
 801e5f4:	f840 3b04 	str.w	r3, [r0], #4
 801e5f8:	eba0 0009 	sub.w	r0, r0, r9
 801e5fc:	1080      	asrs	r0, r0, #2
 801e5fe:	0146      	lsls	r6, r0, #5
 801e600:	6120      	str	r0, [r4, #16]
 801e602:	4618      	mov	r0, r3
 801e604:	f000 fb46 	bl	801ec94 <__hi0bits>
 801e608:	1a30      	subs	r0, r6, r0
 801e60a:	f8d8 6000 	ldr.w	r6, [r8]
 801e60e:	42b0      	cmp	r0, r6
 801e610:	dd63      	ble.n	801e6da <__gethex+0x286>
 801e612:	1b87      	subs	r7, r0, r6
 801e614:	4639      	mov	r1, r7
 801e616:	4620      	mov	r0, r4
 801e618:	f000 fee7 	bl	801f3ea <__any_on>
 801e61c:	4682      	mov	sl, r0
 801e61e:	b1a8      	cbz	r0, 801e64c <__gethex+0x1f8>
 801e620:	1e7b      	subs	r3, r7, #1
 801e622:	1159      	asrs	r1, r3, #5
 801e624:	f003 021f 	and.w	r2, r3, #31
 801e628:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801e62c:	f04f 0a01 	mov.w	sl, #1
 801e630:	fa0a f202 	lsl.w	r2, sl, r2
 801e634:	420a      	tst	r2, r1
 801e636:	d009      	beq.n	801e64c <__gethex+0x1f8>
 801e638:	4553      	cmp	r3, sl
 801e63a:	dd05      	ble.n	801e648 <__gethex+0x1f4>
 801e63c:	1eb9      	subs	r1, r7, #2
 801e63e:	4620      	mov	r0, r4
 801e640:	f000 fed3 	bl	801f3ea <__any_on>
 801e644:	2800      	cmp	r0, #0
 801e646:	d145      	bne.n	801e6d4 <__gethex+0x280>
 801e648:	f04f 0a02 	mov.w	sl, #2
 801e64c:	4639      	mov	r1, r7
 801e64e:	4620      	mov	r0, r4
 801e650:	f7ff fe99 	bl	801e386 <rshift>
 801e654:	443d      	add	r5, r7
 801e656:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e65a:	42ab      	cmp	r3, r5
 801e65c:	da4c      	bge.n	801e6f8 <__gethex+0x2a4>
 801e65e:	ee18 0a10 	vmov	r0, s16
 801e662:	4621      	mov	r1, r4
 801e664:	f000 fa64 	bl	801eb30 <_Bfree>
 801e668:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e66a:	2300      	movs	r3, #0
 801e66c:	6013      	str	r3, [r2, #0]
 801e66e:	27a3      	movs	r7, #163	; 0xa3
 801e670:	e785      	b.n	801e57e <__gethex+0x12a>
 801e672:	1e73      	subs	r3, r6, #1
 801e674:	9a05      	ldr	r2, [sp, #20]
 801e676:	9303      	str	r3, [sp, #12]
 801e678:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801e67c:	4293      	cmp	r3, r2
 801e67e:	d019      	beq.n	801e6b4 <__gethex+0x260>
 801e680:	f1bb 0f20 	cmp.w	fp, #32
 801e684:	d107      	bne.n	801e696 <__gethex+0x242>
 801e686:	9b02      	ldr	r3, [sp, #8]
 801e688:	9a00      	ldr	r2, [sp, #0]
 801e68a:	f843 2b04 	str.w	r2, [r3], #4
 801e68e:	9302      	str	r3, [sp, #8]
 801e690:	2300      	movs	r3, #0
 801e692:	9300      	str	r3, [sp, #0]
 801e694:	469b      	mov	fp, r3
 801e696:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801e69a:	f7ff fec6 	bl	801e42a <__hexdig_fun>
 801e69e:	9b00      	ldr	r3, [sp, #0]
 801e6a0:	f000 000f 	and.w	r0, r0, #15
 801e6a4:	fa00 f00b 	lsl.w	r0, r0, fp
 801e6a8:	4303      	orrs	r3, r0
 801e6aa:	9300      	str	r3, [sp, #0]
 801e6ac:	f10b 0b04 	add.w	fp, fp, #4
 801e6b0:	9b03      	ldr	r3, [sp, #12]
 801e6b2:	e00d      	b.n	801e6d0 <__gethex+0x27c>
 801e6b4:	9b03      	ldr	r3, [sp, #12]
 801e6b6:	9a06      	ldr	r2, [sp, #24]
 801e6b8:	4413      	add	r3, r2
 801e6ba:	42bb      	cmp	r3, r7
 801e6bc:	d3e0      	bcc.n	801e680 <__gethex+0x22c>
 801e6be:	4618      	mov	r0, r3
 801e6c0:	9901      	ldr	r1, [sp, #4]
 801e6c2:	9307      	str	r3, [sp, #28]
 801e6c4:	4652      	mov	r2, sl
 801e6c6:	f7fe f8c7 	bl	801c858 <strncmp>
 801e6ca:	9b07      	ldr	r3, [sp, #28]
 801e6cc:	2800      	cmp	r0, #0
 801e6ce:	d1d7      	bne.n	801e680 <__gethex+0x22c>
 801e6d0:	461e      	mov	r6, r3
 801e6d2:	e78b      	b.n	801e5ec <__gethex+0x198>
 801e6d4:	f04f 0a03 	mov.w	sl, #3
 801e6d8:	e7b8      	b.n	801e64c <__gethex+0x1f8>
 801e6da:	da0a      	bge.n	801e6f2 <__gethex+0x29e>
 801e6dc:	1a37      	subs	r7, r6, r0
 801e6de:	4621      	mov	r1, r4
 801e6e0:	ee18 0a10 	vmov	r0, s16
 801e6e4:	463a      	mov	r2, r7
 801e6e6:	f000 fc3f 	bl	801ef68 <__lshift>
 801e6ea:	1bed      	subs	r5, r5, r7
 801e6ec:	4604      	mov	r4, r0
 801e6ee:	f100 0914 	add.w	r9, r0, #20
 801e6f2:	f04f 0a00 	mov.w	sl, #0
 801e6f6:	e7ae      	b.n	801e656 <__gethex+0x202>
 801e6f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801e6fc:	42a8      	cmp	r0, r5
 801e6fe:	dd72      	ble.n	801e7e6 <__gethex+0x392>
 801e700:	1b45      	subs	r5, r0, r5
 801e702:	42ae      	cmp	r6, r5
 801e704:	dc36      	bgt.n	801e774 <__gethex+0x320>
 801e706:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e70a:	2b02      	cmp	r3, #2
 801e70c:	d02a      	beq.n	801e764 <__gethex+0x310>
 801e70e:	2b03      	cmp	r3, #3
 801e710:	d02c      	beq.n	801e76c <__gethex+0x318>
 801e712:	2b01      	cmp	r3, #1
 801e714:	d11c      	bne.n	801e750 <__gethex+0x2fc>
 801e716:	42ae      	cmp	r6, r5
 801e718:	d11a      	bne.n	801e750 <__gethex+0x2fc>
 801e71a:	2e01      	cmp	r6, #1
 801e71c:	d112      	bne.n	801e744 <__gethex+0x2f0>
 801e71e:	9a04      	ldr	r2, [sp, #16]
 801e720:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e724:	6013      	str	r3, [r2, #0]
 801e726:	2301      	movs	r3, #1
 801e728:	6123      	str	r3, [r4, #16]
 801e72a:	f8c9 3000 	str.w	r3, [r9]
 801e72e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e730:	2762      	movs	r7, #98	; 0x62
 801e732:	601c      	str	r4, [r3, #0]
 801e734:	e723      	b.n	801e57e <__gethex+0x12a>
 801e736:	bf00      	nop
 801e738:	080248d0 	.word	0x080248d0
 801e73c:	080247f4 	.word	0x080247f4
 801e740:	08024868 	.word	0x08024868
 801e744:	1e71      	subs	r1, r6, #1
 801e746:	4620      	mov	r0, r4
 801e748:	f000 fe4f 	bl	801f3ea <__any_on>
 801e74c:	2800      	cmp	r0, #0
 801e74e:	d1e6      	bne.n	801e71e <__gethex+0x2ca>
 801e750:	ee18 0a10 	vmov	r0, s16
 801e754:	4621      	mov	r1, r4
 801e756:	f000 f9eb 	bl	801eb30 <_Bfree>
 801e75a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e75c:	2300      	movs	r3, #0
 801e75e:	6013      	str	r3, [r2, #0]
 801e760:	2750      	movs	r7, #80	; 0x50
 801e762:	e70c      	b.n	801e57e <__gethex+0x12a>
 801e764:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e766:	2b00      	cmp	r3, #0
 801e768:	d1f2      	bne.n	801e750 <__gethex+0x2fc>
 801e76a:	e7d8      	b.n	801e71e <__gethex+0x2ca>
 801e76c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e76e:	2b00      	cmp	r3, #0
 801e770:	d1d5      	bne.n	801e71e <__gethex+0x2ca>
 801e772:	e7ed      	b.n	801e750 <__gethex+0x2fc>
 801e774:	1e6f      	subs	r7, r5, #1
 801e776:	f1ba 0f00 	cmp.w	sl, #0
 801e77a:	d131      	bne.n	801e7e0 <__gethex+0x38c>
 801e77c:	b127      	cbz	r7, 801e788 <__gethex+0x334>
 801e77e:	4639      	mov	r1, r7
 801e780:	4620      	mov	r0, r4
 801e782:	f000 fe32 	bl	801f3ea <__any_on>
 801e786:	4682      	mov	sl, r0
 801e788:	117b      	asrs	r3, r7, #5
 801e78a:	2101      	movs	r1, #1
 801e78c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801e790:	f007 071f 	and.w	r7, r7, #31
 801e794:	fa01 f707 	lsl.w	r7, r1, r7
 801e798:	421f      	tst	r7, r3
 801e79a:	4629      	mov	r1, r5
 801e79c:	4620      	mov	r0, r4
 801e79e:	bf18      	it	ne
 801e7a0:	f04a 0a02 	orrne.w	sl, sl, #2
 801e7a4:	1b76      	subs	r6, r6, r5
 801e7a6:	f7ff fdee 	bl	801e386 <rshift>
 801e7aa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801e7ae:	2702      	movs	r7, #2
 801e7b0:	f1ba 0f00 	cmp.w	sl, #0
 801e7b4:	d048      	beq.n	801e848 <__gethex+0x3f4>
 801e7b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e7ba:	2b02      	cmp	r3, #2
 801e7bc:	d015      	beq.n	801e7ea <__gethex+0x396>
 801e7be:	2b03      	cmp	r3, #3
 801e7c0:	d017      	beq.n	801e7f2 <__gethex+0x39e>
 801e7c2:	2b01      	cmp	r3, #1
 801e7c4:	d109      	bne.n	801e7da <__gethex+0x386>
 801e7c6:	f01a 0f02 	tst.w	sl, #2
 801e7ca:	d006      	beq.n	801e7da <__gethex+0x386>
 801e7cc:	f8d9 0000 	ldr.w	r0, [r9]
 801e7d0:	ea4a 0a00 	orr.w	sl, sl, r0
 801e7d4:	f01a 0f01 	tst.w	sl, #1
 801e7d8:	d10e      	bne.n	801e7f8 <__gethex+0x3a4>
 801e7da:	f047 0710 	orr.w	r7, r7, #16
 801e7de:	e033      	b.n	801e848 <__gethex+0x3f4>
 801e7e0:	f04f 0a01 	mov.w	sl, #1
 801e7e4:	e7d0      	b.n	801e788 <__gethex+0x334>
 801e7e6:	2701      	movs	r7, #1
 801e7e8:	e7e2      	b.n	801e7b0 <__gethex+0x35c>
 801e7ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e7ec:	f1c3 0301 	rsb	r3, r3, #1
 801e7f0:	9315      	str	r3, [sp, #84]	; 0x54
 801e7f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e7f4:	2b00      	cmp	r3, #0
 801e7f6:	d0f0      	beq.n	801e7da <__gethex+0x386>
 801e7f8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801e7fc:	f104 0314 	add.w	r3, r4, #20
 801e800:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801e804:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801e808:	f04f 0c00 	mov.w	ip, #0
 801e80c:	4618      	mov	r0, r3
 801e80e:	f853 2b04 	ldr.w	r2, [r3], #4
 801e812:	f1b2 3fff 	cmp.w	r2, #4294967295
 801e816:	d01c      	beq.n	801e852 <__gethex+0x3fe>
 801e818:	3201      	adds	r2, #1
 801e81a:	6002      	str	r2, [r0, #0]
 801e81c:	2f02      	cmp	r7, #2
 801e81e:	f104 0314 	add.w	r3, r4, #20
 801e822:	d13f      	bne.n	801e8a4 <__gethex+0x450>
 801e824:	f8d8 2000 	ldr.w	r2, [r8]
 801e828:	3a01      	subs	r2, #1
 801e82a:	42b2      	cmp	r2, r6
 801e82c:	d10a      	bne.n	801e844 <__gethex+0x3f0>
 801e82e:	1171      	asrs	r1, r6, #5
 801e830:	2201      	movs	r2, #1
 801e832:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801e836:	f006 061f 	and.w	r6, r6, #31
 801e83a:	fa02 f606 	lsl.w	r6, r2, r6
 801e83e:	421e      	tst	r6, r3
 801e840:	bf18      	it	ne
 801e842:	4617      	movne	r7, r2
 801e844:	f047 0720 	orr.w	r7, r7, #32
 801e848:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e84a:	601c      	str	r4, [r3, #0]
 801e84c:	9b04      	ldr	r3, [sp, #16]
 801e84e:	601d      	str	r5, [r3, #0]
 801e850:	e695      	b.n	801e57e <__gethex+0x12a>
 801e852:	4299      	cmp	r1, r3
 801e854:	f843 cc04 	str.w	ip, [r3, #-4]
 801e858:	d8d8      	bhi.n	801e80c <__gethex+0x3b8>
 801e85a:	68a3      	ldr	r3, [r4, #8]
 801e85c:	459b      	cmp	fp, r3
 801e85e:	db19      	blt.n	801e894 <__gethex+0x440>
 801e860:	6861      	ldr	r1, [r4, #4]
 801e862:	ee18 0a10 	vmov	r0, s16
 801e866:	3101      	adds	r1, #1
 801e868:	f000 f922 	bl	801eab0 <_Balloc>
 801e86c:	4681      	mov	r9, r0
 801e86e:	b918      	cbnz	r0, 801e878 <__gethex+0x424>
 801e870:	4b1a      	ldr	r3, [pc, #104]	; (801e8dc <__gethex+0x488>)
 801e872:	4602      	mov	r2, r0
 801e874:	2184      	movs	r1, #132	; 0x84
 801e876:	e6a8      	b.n	801e5ca <__gethex+0x176>
 801e878:	6922      	ldr	r2, [r4, #16]
 801e87a:	3202      	adds	r2, #2
 801e87c:	f104 010c 	add.w	r1, r4, #12
 801e880:	0092      	lsls	r2, r2, #2
 801e882:	300c      	adds	r0, #12
 801e884:	f7fc ffe6 	bl	801b854 <memcpy>
 801e888:	4621      	mov	r1, r4
 801e88a:	ee18 0a10 	vmov	r0, s16
 801e88e:	f000 f94f 	bl	801eb30 <_Bfree>
 801e892:	464c      	mov	r4, r9
 801e894:	6923      	ldr	r3, [r4, #16]
 801e896:	1c5a      	adds	r2, r3, #1
 801e898:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e89c:	6122      	str	r2, [r4, #16]
 801e89e:	2201      	movs	r2, #1
 801e8a0:	615a      	str	r2, [r3, #20]
 801e8a2:	e7bb      	b.n	801e81c <__gethex+0x3c8>
 801e8a4:	6922      	ldr	r2, [r4, #16]
 801e8a6:	455a      	cmp	r2, fp
 801e8a8:	dd0b      	ble.n	801e8c2 <__gethex+0x46e>
 801e8aa:	2101      	movs	r1, #1
 801e8ac:	4620      	mov	r0, r4
 801e8ae:	f7ff fd6a 	bl	801e386 <rshift>
 801e8b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e8b6:	3501      	adds	r5, #1
 801e8b8:	42ab      	cmp	r3, r5
 801e8ba:	f6ff aed0 	blt.w	801e65e <__gethex+0x20a>
 801e8be:	2701      	movs	r7, #1
 801e8c0:	e7c0      	b.n	801e844 <__gethex+0x3f0>
 801e8c2:	f016 061f 	ands.w	r6, r6, #31
 801e8c6:	d0fa      	beq.n	801e8be <__gethex+0x46a>
 801e8c8:	4453      	add	r3, sl
 801e8ca:	f1c6 0620 	rsb	r6, r6, #32
 801e8ce:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801e8d2:	f000 f9df 	bl	801ec94 <__hi0bits>
 801e8d6:	42b0      	cmp	r0, r6
 801e8d8:	dbe7      	blt.n	801e8aa <__gethex+0x456>
 801e8da:	e7f0      	b.n	801e8be <__gethex+0x46a>
 801e8dc:	080247f4 	.word	0x080247f4

0801e8e0 <L_shift>:
 801e8e0:	f1c2 0208 	rsb	r2, r2, #8
 801e8e4:	0092      	lsls	r2, r2, #2
 801e8e6:	b570      	push	{r4, r5, r6, lr}
 801e8e8:	f1c2 0620 	rsb	r6, r2, #32
 801e8ec:	6843      	ldr	r3, [r0, #4]
 801e8ee:	6804      	ldr	r4, [r0, #0]
 801e8f0:	fa03 f506 	lsl.w	r5, r3, r6
 801e8f4:	432c      	orrs	r4, r5
 801e8f6:	40d3      	lsrs	r3, r2
 801e8f8:	6004      	str	r4, [r0, #0]
 801e8fa:	f840 3f04 	str.w	r3, [r0, #4]!
 801e8fe:	4288      	cmp	r0, r1
 801e900:	d3f4      	bcc.n	801e8ec <L_shift+0xc>
 801e902:	bd70      	pop	{r4, r5, r6, pc}

0801e904 <__match>:
 801e904:	b530      	push	{r4, r5, lr}
 801e906:	6803      	ldr	r3, [r0, #0]
 801e908:	3301      	adds	r3, #1
 801e90a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e90e:	b914      	cbnz	r4, 801e916 <__match+0x12>
 801e910:	6003      	str	r3, [r0, #0]
 801e912:	2001      	movs	r0, #1
 801e914:	bd30      	pop	{r4, r5, pc}
 801e916:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e91a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801e91e:	2d19      	cmp	r5, #25
 801e920:	bf98      	it	ls
 801e922:	3220      	addls	r2, #32
 801e924:	42a2      	cmp	r2, r4
 801e926:	d0f0      	beq.n	801e90a <__match+0x6>
 801e928:	2000      	movs	r0, #0
 801e92a:	e7f3      	b.n	801e914 <__match+0x10>

0801e92c <__hexnan>:
 801e92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e930:	680b      	ldr	r3, [r1, #0]
 801e932:	115e      	asrs	r6, r3, #5
 801e934:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801e938:	f013 031f 	ands.w	r3, r3, #31
 801e93c:	b087      	sub	sp, #28
 801e93e:	bf18      	it	ne
 801e940:	3604      	addne	r6, #4
 801e942:	2500      	movs	r5, #0
 801e944:	1f37      	subs	r7, r6, #4
 801e946:	4690      	mov	r8, r2
 801e948:	6802      	ldr	r2, [r0, #0]
 801e94a:	9301      	str	r3, [sp, #4]
 801e94c:	4682      	mov	sl, r0
 801e94e:	f846 5c04 	str.w	r5, [r6, #-4]
 801e952:	46b9      	mov	r9, r7
 801e954:	463c      	mov	r4, r7
 801e956:	9502      	str	r5, [sp, #8]
 801e958:	46ab      	mov	fp, r5
 801e95a:	7851      	ldrb	r1, [r2, #1]
 801e95c:	1c53      	adds	r3, r2, #1
 801e95e:	9303      	str	r3, [sp, #12]
 801e960:	b341      	cbz	r1, 801e9b4 <__hexnan+0x88>
 801e962:	4608      	mov	r0, r1
 801e964:	9205      	str	r2, [sp, #20]
 801e966:	9104      	str	r1, [sp, #16]
 801e968:	f7ff fd5f 	bl	801e42a <__hexdig_fun>
 801e96c:	2800      	cmp	r0, #0
 801e96e:	d14f      	bne.n	801ea10 <__hexnan+0xe4>
 801e970:	9904      	ldr	r1, [sp, #16]
 801e972:	9a05      	ldr	r2, [sp, #20]
 801e974:	2920      	cmp	r1, #32
 801e976:	d818      	bhi.n	801e9aa <__hexnan+0x7e>
 801e978:	9b02      	ldr	r3, [sp, #8]
 801e97a:	459b      	cmp	fp, r3
 801e97c:	dd13      	ble.n	801e9a6 <__hexnan+0x7a>
 801e97e:	454c      	cmp	r4, r9
 801e980:	d206      	bcs.n	801e990 <__hexnan+0x64>
 801e982:	2d07      	cmp	r5, #7
 801e984:	dc04      	bgt.n	801e990 <__hexnan+0x64>
 801e986:	462a      	mov	r2, r5
 801e988:	4649      	mov	r1, r9
 801e98a:	4620      	mov	r0, r4
 801e98c:	f7ff ffa8 	bl	801e8e0 <L_shift>
 801e990:	4544      	cmp	r4, r8
 801e992:	d950      	bls.n	801ea36 <__hexnan+0x10a>
 801e994:	2300      	movs	r3, #0
 801e996:	f1a4 0904 	sub.w	r9, r4, #4
 801e99a:	f844 3c04 	str.w	r3, [r4, #-4]
 801e99e:	f8cd b008 	str.w	fp, [sp, #8]
 801e9a2:	464c      	mov	r4, r9
 801e9a4:	461d      	mov	r5, r3
 801e9a6:	9a03      	ldr	r2, [sp, #12]
 801e9a8:	e7d7      	b.n	801e95a <__hexnan+0x2e>
 801e9aa:	2929      	cmp	r1, #41	; 0x29
 801e9ac:	d156      	bne.n	801ea5c <__hexnan+0x130>
 801e9ae:	3202      	adds	r2, #2
 801e9b0:	f8ca 2000 	str.w	r2, [sl]
 801e9b4:	f1bb 0f00 	cmp.w	fp, #0
 801e9b8:	d050      	beq.n	801ea5c <__hexnan+0x130>
 801e9ba:	454c      	cmp	r4, r9
 801e9bc:	d206      	bcs.n	801e9cc <__hexnan+0xa0>
 801e9be:	2d07      	cmp	r5, #7
 801e9c0:	dc04      	bgt.n	801e9cc <__hexnan+0xa0>
 801e9c2:	462a      	mov	r2, r5
 801e9c4:	4649      	mov	r1, r9
 801e9c6:	4620      	mov	r0, r4
 801e9c8:	f7ff ff8a 	bl	801e8e0 <L_shift>
 801e9cc:	4544      	cmp	r4, r8
 801e9ce:	d934      	bls.n	801ea3a <__hexnan+0x10e>
 801e9d0:	f1a8 0204 	sub.w	r2, r8, #4
 801e9d4:	4623      	mov	r3, r4
 801e9d6:	f853 1b04 	ldr.w	r1, [r3], #4
 801e9da:	f842 1f04 	str.w	r1, [r2, #4]!
 801e9de:	429f      	cmp	r7, r3
 801e9e0:	d2f9      	bcs.n	801e9d6 <__hexnan+0xaa>
 801e9e2:	1b3b      	subs	r3, r7, r4
 801e9e4:	f023 0303 	bic.w	r3, r3, #3
 801e9e8:	3304      	adds	r3, #4
 801e9ea:	3401      	adds	r4, #1
 801e9ec:	3e03      	subs	r6, #3
 801e9ee:	42b4      	cmp	r4, r6
 801e9f0:	bf88      	it	hi
 801e9f2:	2304      	movhi	r3, #4
 801e9f4:	4443      	add	r3, r8
 801e9f6:	2200      	movs	r2, #0
 801e9f8:	f843 2b04 	str.w	r2, [r3], #4
 801e9fc:	429f      	cmp	r7, r3
 801e9fe:	d2fb      	bcs.n	801e9f8 <__hexnan+0xcc>
 801ea00:	683b      	ldr	r3, [r7, #0]
 801ea02:	b91b      	cbnz	r3, 801ea0c <__hexnan+0xe0>
 801ea04:	4547      	cmp	r7, r8
 801ea06:	d127      	bne.n	801ea58 <__hexnan+0x12c>
 801ea08:	2301      	movs	r3, #1
 801ea0a:	603b      	str	r3, [r7, #0]
 801ea0c:	2005      	movs	r0, #5
 801ea0e:	e026      	b.n	801ea5e <__hexnan+0x132>
 801ea10:	3501      	adds	r5, #1
 801ea12:	2d08      	cmp	r5, #8
 801ea14:	f10b 0b01 	add.w	fp, fp, #1
 801ea18:	dd06      	ble.n	801ea28 <__hexnan+0xfc>
 801ea1a:	4544      	cmp	r4, r8
 801ea1c:	d9c3      	bls.n	801e9a6 <__hexnan+0x7a>
 801ea1e:	2300      	movs	r3, #0
 801ea20:	f844 3c04 	str.w	r3, [r4, #-4]
 801ea24:	2501      	movs	r5, #1
 801ea26:	3c04      	subs	r4, #4
 801ea28:	6822      	ldr	r2, [r4, #0]
 801ea2a:	f000 000f 	and.w	r0, r0, #15
 801ea2e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801ea32:	6022      	str	r2, [r4, #0]
 801ea34:	e7b7      	b.n	801e9a6 <__hexnan+0x7a>
 801ea36:	2508      	movs	r5, #8
 801ea38:	e7b5      	b.n	801e9a6 <__hexnan+0x7a>
 801ea3a:	9b01      	ldr	r3, [sp, #4]
 801ea3c:	2b00      	cmp	r3, #0
 801ea3e:	d0df      	beq.n	801ea00 <__hexnan+0xd4>
 801ea40:	f04f 32ff 	mov.w	r2, #4294967295
 801ea44:	f1c3 0320 	rsb	r3, r3, #32
 801ea48:	fa22 f303 	lsr.w	r3, r2, r3
 801ea4c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801ea50:	401a      	ands	r2, r3
 801ea52:	f846 2c04 	str.w	r2, [r6, #-4]
 801ea56:	e7d3      	b.n	801ea00 <__hexnan+0xd4>
 801ea58:	3f04      	subs	r7, #4
 801ea5a:	e7d1      	b.n	801ea00 <__hexnan+0xd4>
 801ea5c:	2004      	movs	r0, #4
 801ea5e:	b007      	add	sp, #28
 801ea60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ea64 <_localeconv_r>:
 801ea64:	4800      	ldr	r0, [pc, #0]	; (801ea68 <_localeconv_r+0x4>)
 801ea66:	4770      	bx	lr
 801ea68:	200001c0 	.word	0x200001c0

0801ea6c <__retarget_lock_init_recursive>:
 801ea6c:	4770      	bx	lr

0801ea6e <__retarget_lock_acquire_recursive>:
 801ea6e:	4770      	bx	lr

0801ea70 <__retarget_lock_release_recursive>:
 801ea70:	4770      	bx	lr

0801ea72 <__ascii_mbtowc>:
 801ea72:	b082      	sub	sp, #8
 801ea74:	b901      	cbnz	r1, 801ea78 <__ascii_mbtowc+0x6>
 801ea76:	a901      	add	r1, sp, #4
 801ea78:	b142      	cbz	r2, 801ea8c <__ascii_mbtowc+0x1a>
 801ea7a:	b14b      	cbz	r3, 801ea90 <__ascii_mbtowc+0x1e>
 801ea7c:	7813      	ldrb	r3, [r2, #0]
 801ea7e:	600b      	str	r3, [r1, #0]
 801ea80:	7812      	ldrb	r2, [r2, #0]
 801ea82:	1e10      	subs	r0, r2, #0
 801ea84:	bf18      	it	ne
 801ea86:	2001      	movne	r0, #1
 801ea88:	b002      	add	sp, #8
 801ea8a:	4770      	bx	lr
 801ea8c:	4610      	mov	r0, r2
 801ea8e:	e7fb      	b.n	801ea88 <__ascii_mbtowc+0x16>
 801ea90:	f06f 0001 	mvn.w	r0, #1
 801ea94:	e7f8      	b.n	801ea88 <__ascii_mbtowc+0x16>
	...

0801ea98 <__malloc_lock>:
 801ea98:	4801      	ldr	r0, [pc, #4]	; (801eaa0 <__malloc_lock+0x8>)
 801ea9a:	f7ff bfe8 	b.w	801ea6e <__retarget_lock_acquire_recursive>
 801ea9e:	bf00      	nop
 801eaa0:	20007544 	.word	0x20007544

0801eaa4 <__malloc_unlock>:
 801eaa4:	4801      	ldr	r0, [pc, #4]	; (801eaac <__malloc_unlock+0x8>)
 801eaa6:	f7ff bfe3 	b.w	801ea70 <__retarget_lock_release_recursive>
 801eaaa:	bf00      	nop
 801eaac:	20007544 	.word	0x20007544

0801eab0 <_Balloc>:
 801eab0:	b570      	push	{r4, r5, r6, lr}
 801eab2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801eab4:	4604      	mov	r4, r0
 801eab6:	460d      	mov	r5, r1
 801eab8:	b976      	cbnz	r6, 801ead8 <_Balloc+0x28>
 801eaba:	2010      	movs	r0, #16
 801eabc:	f7fc feb2 	bl	801b824 <malloc>
 801eac0:	4602      	mov	r2, r0
 801eac2:	6260      	str	r0, [r4, #36]	; 0x24
 801eac4:	b920      	cbnz	r0, 801ead0 <_Balloc+0x20>
 801eac6:	4b18      	ldr	r3, [pc, #96]	; (801eb28 <_Balloc+0x78>)
 801eac8:	4818      	ldr	r0, [pc, #96]	; (801eb2c <_Balloc+0x7c>)
 801eaca:	2166      	movs	r1, #102	; 0x66
 801eacc:	f7fe fd34 	bl	801d538 <__assert_func>
 801ead0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ead4:	6006      	str	r6, [r0, #0]
 801ead6:	60c6      	str	r6, [r0, #12]
 801ead8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801eada:	68f3      	ldr	r3, [r6, #12]
 801eadc:	b183      	cbz	r3, 801eb00 <_Balloc+0x50>
 801eade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801eae0:	68db      	ldr	r3, [r3, #12]
 801eae2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801eae6:	b9b8      	cbnz	r0, 801eb18 <_Balloc+0x68>
 801eae8:	2101      	movs	r1, #1
 801eaea:	fa01 f605 	lsl.w	r6, r1, r5
 801eaee:	1d72      	adds	r2, r6, #5
 801eaf0:	0092      	lsls	r2, r2, #2
 801eaf2:	4620      	mov	r0, r4
 801eaf4:	f7fc fede 	bl	801b8b4 <_calloc_r>
 801eaf8:	b160      	cbz	r0, 801eb14 <_Balloc+0x64>
 801eafa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801eafe:	e00e      	b.n	801eb1e <_Balloc+0x6e>
 801eb00:	2221      	movs	r2, #33	; 0x21
 801eb02:	2104      	movs	r1, #4
 801eb04:	4620      	mov	r0, r4
 801eb06:	f7fc fed5 	bl	801b8b4 <_calloc_r>
 801eb0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801eb0c:	60f0      	str	r0, [r6, #12]
 801eb0e:	68db      	ldr	r3, [r3, #12]
 801eb10:	2b00      	cmp	r3, #0
 801eb12:	d1e4      	bne.n	801eade <_Balloc+0x2e>
 801eb14:	2000      	movs	r0, #0
 801eb16:	bd70      	pop	{r4, r5, r6, pc}
 801eb18:	6802      	ldr	r2, [r0, #0]
 801eb1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801eb1e:	2300      	movs	r3, #0
 801eb20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801eb24:	e7f7      	b.n	801eb16 <_Balloc+0x66>
 801eb26:	bf00      	nop
 801eb28:	0802468d 	.word	0x0802468d
 801eb2c:	080248e4 	.word	0x080248e4

0801eb30 <_Bfree>:
 801eb30:	b570      	push	{r4, r5, r6, lr}
 801eb32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801eb34:	4605      	mov	r5, r0
 801eb36:	460c      	mov	r4, r1
 801eb38:	b976      	cbnz	r6, 801eb58 <_Bfree+0x28>
 801eb3a:	2010      	movs	r0, #16
 801eb3c:	f7fc fe72 	bl	801b824 <malloc>
 801eb40:	4602      	mov	r2, r0
 801eb42:	6268      	str	r0, [r5, #36]	; 0x24
 801eb44:	b920      	cbnz	r0, 801eb50 <_Bfree+0x20>
 801eb46:	4b09      	ldr	r3, [pc, #36]	; (801eb6c <_Bfree+0x3c>)
 801eb48:	4809      	ldr	r0, [pc, #36]	; (801eb70 <_Bfree+0x40>)
 801eb4a:	218a      	movs	r1, #138	; 0x8a
 801eb4c:	f7fe fcf4 	bl	801d538 <__assert_func>
 801eb50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801eb54:	6006      	str	r6, [r0, #0]
 801eb56:	60c6      	str	r6, [r0, #12]
 801eb58:	b13c      	cbz	r4, 801eb6a <_Bfree+0x3a>
 801eb5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801eb5c:	6862      	ldr	r2, [r4, #4]
 801eb5e:	68db      	ldr	r3, [r3, #12]
 801eb60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801eb64:	6021      	str	r1, [r4, #0]
 801eb66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801eb6a:	bd70      	pop	{r4, r5, r6, pc}
 801eb6c:	0802468d 	.word	0x0802468d
 801eb70:	080248e4 	.word	0x080248e4

0801eb74 <__multadd>:
 801eb74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eb78:	690d      	ldr	r5, [r1, #16]
 801eb7a:	4607      	mov	r7, r0
 801eb7c:	460c      	mov	r4, r1
 801eb7e:	461e      	mov	r6, r3
 801eb80:	f101 0c14 	add.w	ip, r1, #20
 801eb84:	2000      	movs	r0, #0
 801eb86:	f8dc 3000 	ldr.w	r3, [ip]
 801eb8a:	b299      	uxth	r1, r3
 801eb8c:	fb02 6101 	mla	r1, r2, r1, r6
 801eb90:	0c1e      	lsrs	r6, r3, #16
 801eb92:	0c0b      	lsrs	r3, r1, #16
 801eb94:	fb02 3306 	mla	r3, r2, r6, r3
 801eb98:	b289      	uxth	r1, r1
 801eb9a:	3001      	adds	r0, #1
 801eb9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801eba0:	4285      	cmp	r5, r0
 801eba2:	f84c 1b04 	str.w	r1, [ip], #4
 801eba6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801ebaa:	dcec      	bgt.n	801eb86 <__multadd+0x12>
 801ebac:	b30e      	cbz	r6, 801ebf2 <__multadd+0x7e>
 801ebae:	68a3      	ldr	r3, [r4, #8]
 801ebb0:	42ab      	cmp	r3, r5
 801ebb2:	dc19      	bgt.n	801ebe8 <__multadd+0x74>
 801ebb4:	6861      	ldr	r1, [r4, #4]
 801ebb6:	4638      	mov	r0, r7
 801ebb8:	3101      	adds	r1, #1
 801ebba:	f7ff ff79 	bl	801eab0 <_Balloc>
 801ebbe:	4680      	mov	r8, r0
 801ebc0:	b928      	cbnz	r0, 801ebce <__multadd+0x5a>
 801ebc2:	4602      	mov	r2, r0
 801ebc4:	4b0c      	ldr	r3, [pc, #48]	; (801ebf8 <__multadd+0x84>)
 801ebc6:	480d      	ldr	r0, [pc, #52]	; (801ebfc <__multadd+0x88>)
 801ebc8:	21b5      	movs	r1, #181	; 0xb5
 801ebca:	f7fe fcb5 	bl	801d538 <__assert_func>
 801ebce:	6922      	ldr	r2, [r4, #16]
 801ebd0:	3202      	adds	r2, #2
 801ebd2:	f104 010c 	add.w	r1, r4, #12
 801ebd6:	0092      	lsls	r2, r2, #2
 801ebd8:	300c      	adds	r0, #12
 801ebda:	f7fc fe3b 	bl	801b854 <memcpy>
 801ebde:	4621      	mov	r1, r4
 801ebe0:	4638      	mov	r0, r7
 801ebe2:	f7ff ffa5 	bl	801eb30 <_Bfree>
 801ebe6:	4644      	mov	r4, r8
 801ebe8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ebec:	3501      	adds	r5, #1
 801ebee:	615e      	str	r6, [r3, #20]
 801ebf0:	6125      	str	r5, [r4, #16]
 801ebf2:	4620      	mov	r0, r4
 801ebf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ebf8:	080247f4 	.word	0x080247f4
 801ebfc:	080248e4 	.word	0x080248e4

0801ec00 <__s2b>:
 801ec00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ec04:	460c      	mov	r4, r1
 801ec06:	4615      	mov	r5, r2
 801ec08:	461f      	mov	r7, r3
 801ec0a:	2209      	movs	r2, #9
 801ec0c:	3308      	adds	r3, #8
 801ec0e:	4606      	mov	r6, r0
 801ec10:	fb93 f3f2 	sdiv	r3, r3, r2
 801ec14:	2100      	movs	r1, #0
 801ec16:	2201      	movs	r2, #1
 801ec18:	429a      	cmp	r2, r3
 801ec1a:	db09      	blt.n	801ec30 <__s2b+0x30>
 801ec1c:	4630      	mov	r0, r6
 801ec1e:	f7ff ff47 	bl	801eab0 <_Balloc>
 801ec22:	b940      	cbnz	r0, 801ec36 <__s2b+0x36>
 801ec24:	4602      	mov	r2, r0
 801ec26:	4b19      	ldr	r3, [pc, #100]	; (801ec8c <__s2b+0x8c>)
 801ec28:	4819      	ldr	r0, [pc, #100]	; (801ec90 <__s2b+0x90>)
 801ec2a:	21ce      	movs	r1, #206	; 0xce
 801ec2c:	f7fe fc84 	bl	801d538 <__assert_func>
 801ec30:	0052      	lsls	r2, r2, #1
 801ec32:	3101      	adds	r1, #1
 801ec34:	e7f0      	b.n	801ec18 <__s2b+0x18>
 801ec36:	9b08      	ldr	r3, [sp, #32]
 801ec38:	6143      	str	r3, [r0, #20]
 801ec3a:	2d09      	cmp	r5, #9
 801ec3c:	f04f 0301 	mov.w	r3, #1
 801ec40:	6103      	str	r3, [r0, #16]
 801ec42:	dd16      	ble.n	801ec72 <__s2b+0x72>
 801ec44:	f104 0909 	add.w	r9, r4, #9
 801ec48:	46c8      	mov	r8, r9
 801ec4a:	442c      	add	r4, r5
 801ec4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801ec50:	4601      	mov	r1, r0
 801ec52:	3b30      	subs	r3, #48	; 0x30
 801ec54:	220a      	movs	r2, #10
 801ec56:	4630      	mov	r0, r6
 801ec58:	f7ff ff8c 	bl	801eb74 <__multadd>
 801ec5c:	45a0      	cmp	r8, r4
 801ec5e:	d1f5      	bne.n	801ec4c <__s2b+0x4c>
 801ec60:	f1a5 0408 	sub.w	r4, r5, #8
 801ec64:	444c      	add	r4, r9
 801ec66:	1b2d      	subs	r5, r5, r4
 801ec68:	1963      	adds	r3, r4, r5
 801ec6a:	42bb      	cmp	r3, r7
 801ec6c:	db04      	blt.n	801ec78 <__s2b+0x78>
 801ec6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ec72:	340a      	adds	r4, #10
 801ec74:	2509      	movs	r5, #9
 801ec76:	e7f6      	b.n	801ec66 <__s2b+0x66>
 801ec78:	f814 3b01 	ldrb.w	r3, [r4], #1
 801ec7c:	4601      	mov	r1, r0
 801ec7e:	3b30      	subs	r3, #48	; 0x30
 801ec80:	220a      	movs	r2, #10
 801ec82:	4630      	mov	r0, r6
 801ec84:	f7ff ff76 	bl	801eb74 <__multadd>
 801ec88:	e7ee      	b.n	801ec68 <__s2b+0x68>
 801ec8a:	bf00      	nop
 801ec8c:	080247f4 	.word	0x080247f4
 801ec90:	080248e4 	.word	0x080248e4

0801ec94 <__hi0bits>:
 801ec94:	0c03      	lsrs	r3, r0, #16
 801ec96:	041b      	lsls	r3, r3, #16
 801ec98:	b9d3      	cbnz	r3, 801ecd0 <__hi0bits+0x3c>
 801ec9a:	0400      	lsls	r0, r0, #16
 801ec9c:	2310      	movs	r3, #16
 801ec9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801eca2:	bf04      	itt	eq
 801eca4:	0200      	lsleq	r0, r0, #8
 801eca6:	3308      	addeq	r3, #8
 801eca8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801ecac:	bf04      	itt	eq
 801ecae:	0100      	lsleq	r0, r0, #4
 801ecb0:	3304      	addeq	r3, #4
 801ecb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801ecb6:	bf04      	itt	eq
 801ecb8:	0080      	lsleq	r0, r0, #2
 801ecba:	3302      	addeq	r3, #2
 801ecbc:	2800      	cmp	r0, #0
 801ecbe:	db05      	blt.n	801eccc <__hi0bits+0x38>
 801ecc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801ecc4:	f103 0301 	add.w	r3, r3, #1
 801ecc8:	bf08      	it	eq
 801ecca:	2320      	moveq	r3, #32
 801eccc:	4618      	mov	r0, r3
 801ecce:	4770      	bx	lr
 801ecd0:	2300      	movs	r3, #0
 801ecd2:	e7e4      	b.n	801ec9e <__hi0bits+0xa>

0801ecd4 <__lo0bits>:
 801ecd4:	6803      	ldr	r3, [r0, #0]
 801ecd6:	f013 0207 	ands.w	r2, r3, #7
 801ecda:	4601      	mov	r1, r0
 801ecdc:	d00b      	beq.n	801ecf6 <__lo0bits+0x22>
 801ecde:	07da      	lsls	r2, r3, #31
 801ece0:	d423      	bmi.n	801ed2a <__lo0bits+0x56>
 801ece2:	0798      	lsls	r0, r3, #30
 801ece4:	bf49      	itett	mi
 801ece6:	085b      	lsrmi	r3, r3, #1
 801ece8:	089b      	lsrpl	r3, r3, #2
 801ecea:	2001      	movmi	r0, #1
 801ecec:	600b      	strmi	r3, [r1, #0]
 801ecee:	bf5c      	itt	pl
 801ecf0:	600b      	strpl	r3, [r1, #0]
 801ecf2:	2002      	movpl	r0, #2
 801ecf4:	4770      	bx	lr
 801ecf6:	b298      	uxth	r0, r3
 801ecf8:	b9a8      	cbnz	r0, 801ed26 <__lo0bits+0x52>
 801ecfa:	0c1b      	lsrs	r3, r3, #16
 801ecfc:	2010      	movs	r0, #16
 801ecfe:	b2da      	uxtb	r2, r3
 801ed00:	b90a      	cbnz	r2, 801ed06 <__lo0bits+0x32>
 801ed02:	3008      	adds	r0, #8
 801ed04:	0a1b      	lsrs	r3, r3, #8
 801ed06:	071a      	lsls	r2, r3, #28
 801ed08:	bf04      	itt	eq
 801ed0a:	091b      	lsreq	r3, r3, #4
 801ed0c:	3004      	addeq	r0, #4
 801ed0e:	079a      	lsls	r2, r3, #30
 801ed10:	bf04      	itt	eq
 801ed12:	089b      	lsreq	r3, r3, #2
 801ed14:	3002      	addeq	r0, #2
 801ed16:	07da      	lsls	r2, r3, #31
 801ed18:	d403      	bmi.n	801ed22 <__lo0bits+0x4e>
 801ed1a:	085b      	lsrs	r3, r3, #1
 801ed1c:	f100 0001 	add.w	r0, r0, #1
 801ed20:	d005      	beq.n	801ed2e <__lo0bits+0x5a>
 801ed22:	600b      	str	r3, [r1, #0]
 801ed24:	4770      	bx	lr
 801ed26:	4610      	mov	r0, r2
 801ed28:	e7e9      	b.n	801ecfe <__lo0bits+0x2a>
 801ed2a:	2000      	movs	r0, #0
 801ed2c:	4770      	bx	lr
 801ed2e:	2020      	movs	r0, #32
 801ed30:	4770      	bx	lr
	...

0801ed34 <__i2b>:
 801ed34:	b510      	push	{r4, lr}
 801ed36:	460c      	mov	r4, r1
 801ed38:	2101      	movs	r1, #1
 801ed3a:	f7ff feb9 	bl	801eab0 <_Balloc>
 801ed3e:	4602      	mov	r2, r0
 801ed40:	b928      	cbnz	r0, 801ed4e <__i2b+0x1a>
 801ed42:	4b05      	ldr	r3, [pc, #20]	; (801ed58 <__i2b+0x24>)
 801ed44:	4805      	ldr	r0, [pc, #20]	; (801ed5c <__i2b+0x28>)
 801ed46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801ed4a:	f7fe fbf5 	bl	801d538 <__assert_func>
 801ed4e:	2301      	movs	r3, #1
 801ed50:	6144      	str	r4, [r0, #20]
 801ed52:	6103      	str	r3, [r0, #16]
 801ed54:	bd10      	pop	{r4, pc}
 801ed56:	bf00      	nop
 801ed58:	080247f4 	.word	0x080247f4
 801ed5c:	080248e4 	.word	0x080248e4

0801ed60 <__multiply>:
 801ed60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed64:	4691      	mov	r9, r2
 801ed66:	690a      	ldr	r2, [r1, #16]
 801ed68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ed6c:	429a      	cmp	r2, r3
 801ed6e:	bfb8      	it	lt
 801ed70:	460b      	movlt	r3, r1
 801ed72:	460c      	mov	r4, r1
 801ed74:	bfbc      	itt	lt
 801ed76:	464c      	movlt	r4, r9
 801ed78:	4699      	movlt	r9, r3
 801ed7a:	6927      	ldr	r7, [r4, #16]
 801ed7c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801ed80:	68a3      	ldr	r3, [r4, #8]
 801ed82:	6861      	ldr	r1, [r4, #4]
 801ed84:	eb07 060a 	add.w	r6, r7, sl
 801ed88:	42b3      	cmp	r3, r6
 801ed8a:	b085      	sub	sp, #20
 801ed8c:	bfb8      	it	lt
 801ed8e:	3101      	addlt	r1, #1
 801ed90:	f7ff fe8e 	bl	801eab0 <_Balloc>
 801ed94:	b930      	cbnz	r0, 801eda4 <__multiply+0x44>
 801ed96:	4602      	mov	r2, r0
 801ed98:	4b44      	ldr	r3, [pc, #272]	; (801eeac <__multiply+0x14c>)
 801ed9a:	4845      	ldr	r0, [pc, #276]	; (801eeb0 <__multiply+0x150>)
 801ed9c:	f240 115d 	movw	r1, #349	; 0x15d
 801eda0:	f7fe fbca 	bl	801d538 <__assert_func>
 801eda4:	f100 0514 	add.w	r5, r0, #20
 801eda8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801edac:	462b      	mov	r3, r5
 801edae:	2200      	movs	r2, #0
 801edb0:	4543      	cmp	r3, r8
 801edb2:	d321      	bcc.n	801edf8 <__multiply+0x98>
 801edb4:	f104 0314 	add.w	r3, r4, #20
 801edb8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801edbc:	f109 0314 	add.w	r3, r9, #20
 801edc0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801edc4:	9202      	str	r2, [sp, #8]
 801edc6:	1b3a      	subs	r2, r7, r4
 801edc8:	3a15      	subs	r2, #21
 801edca:	f022 0203 	bic.w	r2, r2, #3
 801edce:	3204      	adds	r2, #4
 801edd0:	f104 0115 	add.w	r1, r4, #21
 801edd4:	428f      	cmp	r7, r1
 801edd6:	bf38      	it	cc
 801edd8:	2204      	movcc	r2, #4
 801edda:	9201      	str	r2, [sp, #4]
 801eddc:	9a02      	ldr	r2, [sp, #8]
 801edde:	9303      	str	r3, [sp, #12]
 801ede0:	429a      	cmp	r2, r3
 801ede2:	d80c      	bhi.n	801edfe <__multiply+0x9e>
 801ede4:	2e00      	cmp	r6, #0
 801ede6:	dd03      	ble.n	801edf0 <__multiply+0x90>
 801ede8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801edec:	2b00      	cmp	r3, #0
 801edee:	d05a      	beq.n	801eea6 <__multiply+0x146>
 801edf0:	6106      	str	r6, [r0, #16]
 801edf2:	b005      	add	sp, #20
 801edf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801edf8:	f843 2b04 	str.w	r2, [r3], #4
 801edfc:	e7d8      	b.n	801edb0 <__multiply+0x50>
 801edfe:	f8b3 a000 	ldrh.w	sl, [r3]
 801ee02:	f1ba 0f00 	cmp.w	sl, #0
 801ee06:	d024      	beq.n	801ee52 <__multiply+0xf2>
 801ee08:	f104 0e14 	add.w	lr, r4, #20
 801ee0c:	46a9      	mov	r9, r5
 801ee0e:	f04f 0c00 	mov.w	ip, #0
 801ee12:	f85e 2b04 	ldr.w	r2, [lr], #4
 801ee16:	f8d9 1000 	ldr.w	r1, [r9]
 801ee1a:	fa1f fb82 	uxth.w	fp, r2
 801ee1e:	b289      	uxth	r1, r1
 801ee20:	fb0a 110b 	mla	r1, sl, fp, r1
 801ee24:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801ee28:	f8d9 2000 	ldr.w	r2, [r9]
 801ee2c:	4461      	add	r1, ip
 801ee2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ee32:	fb0a c20b 	mla	r2, sl, fp, ip
 801ee36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801ee3a:	b289      	uxth	r1, r1
 801ee3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801ee40:	4577      	cmp	r7, lr
 801ee42:	f849 1b04 	str.w	r1, [r9], #4
 801ee46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801ee4a:	d8e2      	bhi.n	801ee12 <__multiply+0xb2>
 801ee4c:	9a01      	ldr	r2, [sp, #4]
 801ee4e:	f845 c002 	str.w	ip, [r5, r2]
 801ee52:	9a03      	ldr	r2, [sp, #12]
 801ee54:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801ee58:	3304      	adds	r3, #4
 801ee5a:	f1b9 0f00 	cmp.w	r9, #0
 801ee5e:	d020      	beq.n	801eea2 <__multiply+0x142>
 801ee60:	6829      	ldr	r1, [r5, #0]
 801ee62:	f104 0c14 	add.w	ip, r4, #20
 801ee66:	46ae      	mov	lr, r5
 801ee68:	f04f 0a00 	mov.w	sl, #0
 801ee6c:	f8bc b000 	ldrh.w	fp, [ip]
 801ee70:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801ee74:	fb09 220b 	mla	r2, r9, fp, r2
 801ee78:	4492      	add	sl, r2
 801ee7a:	b289      	uxth	r1, r1
 801ee7c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801ee80:	f84e 1b04 	str.w	r1, [lr], #4
 801ee84:	f85c 2b04 	ldr.w	r2, [ip], #4
 801ee88:	f8be 1000 	ldrh.w	r1, [lr]
 801ee8c:	0c12      	lsrs	r2, r2, #16
 801ee8e:	fb09 1102 	mla	r1, r9, r2, r1
 801ee92:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801ee96:	4567      	cmp	r7, ip
 801ee98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801ee9c:	d8e6      	bhi.n	801ee6c <__multiply+0x10c>
 801ee9e:	9a01      	ldr	r2, [sp, #4]
 801eea0:	50a9      	str	r1, [r5, r2]
 801eea2:	3504      	adds	r5, #4
 801eea4:	e79a      	b.n	801eddc <__multiply+0x7c>
 801eea6:	3e01      	subs	r6, #1
 801eea8:	e79c      	b.n	801ede4 <__multiply+0x84>
 801eeaa:	bf00      	nop
 801eeac:	080247f4 	.word	0x080247f4
 801eeb0:	080248e4 	.word	0x080248e4

0801eeb4 <__pow5mult>:
 801eeb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eeb8:	4615      	mov	r5, r2
 801eeba:	f012 0203 	ands.w	r2, r2, #3
 801eebe:	4606      	mov	r6, r0
 801eec0:	460f      	mov	r7, r1
 801eec2:	d007      	beq.n	801eed4 <__pow5mult+0x20>
 801eec4:	4c25      	ldr	r4, [pc, #148]	; (801ef5c <__pow5mult+0xa8>)
 801eec6:	3a01      	subs	r2, #1
 801eec8:	2300      	movs	r3, #0
 801eeca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801eece:	f7ff fe51 	bl	801eb74 <__multadd>
 801eed2:	4607      	mov	r7, r0
 801eed4:	10ad      	asrs	r5, r5, #2
 801eed6:	d03d      	beq.n	801ef54 <__pow5mult+0xa0>
 801eed8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801eeda:	b97c      	cbnz	r4, 801eefc <__pow5mult+0x48>
 801eedc:	2010      	movs	r0, #16
 801eede:	f7fc fca1 	bl	801b824 <malloc>
 801eee2:	4602      	mov	r2, r0
 801eee4:	6270      	str	r0, [r6, #36]	; 0x24
 801eee6:	b928      	cbnz	r0, 801eef4 <__pow5mult+0x40>
 801eee8:	4b1d      	ldr	r3, [pc, #116]	; (801ef60 <__pow5mult+0xac>)
 801eeea:	481e      	ldr	r0, [pc, #120]	; (801ef64 <__pow5mult+0xb0>)
 801eeec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801eef0:	f7fe fb22 	bl	801d538 <__assert_func>
 801eef4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801eef8:	6004      	str	r4, [r0, #0]
 801eefa:	60c4      	str	r4, [r0, #12]
 801eefc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801ef00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ef04:	b94c      	cbnz	r4, 801ef1a <__pow5mult+0x66>
 801ef06:	f240 2171 	movw	r1, #625	; 0x271
 801ef0a:	4630      	mov	r0, r6
 801ef0c:	f7ff ff12 	bl	801ed34 <__i2b>
 801ef10:	2300      	movs	r3, #0
 801ef12:	f8c8 0008 	str.w	r0, [r8, #8]
 801ef16:	4604      	mov	r4, r0
 801ef18:	6003      	str	r3, [r0, #0]
 801ef1a:	f04f 0900 	mov.w	r9, #0
 801ef1e:	07eb      	lsls	r3, r5, #31
 801ef20:	d50a      	bpl.n	801ef38 <__pow5mult+0x84>
 801ef22:	4639      	mov	r1, r7
 801ef24:	4622      	mov	r2, r4
 801ef26:	4630      	mov	r0, r6
 801ef28:	f7ff ff1a 	bl	801ed60 <__multiply>
 801ef2c:	4639      	mov	r1, r7
 801ef2e:	4680      	mov	r8, r0
 801ef30:	4630      	mov	r0, r6
 801ef32:	f7ff fdfd 	bl	801eb30 <_Bfree>
 801ef36:	4647      	mov	r7, r8
 801ef38:	106d      	asrs	r5, r5, #1
 801ef3a:	d00b      	beq.n	801ef54 <__pow5mult+0xa0>
 801ef3c:	6820      	ldr	r0, [r4, #0]
 801ef3e:	b938      	cbnz	r0, 801ef50 <__pow5mult+0x9c>
 801ef40:	4622      	mov	r2, r4
 801ef42:	4621      	mov	r1, r4
 801ef44:	4630      	mov	r0, r6
 801ef46:	f7ff ff0b 	bl	801ed60 <__multiply>
 801ef4a:	6020      	str	r0, [r4, #0]
 801ef4c:	f8c0 9000 	str.w	r9, [r0]
 801ef50:	4604      	mov	r4, r0
 801ef52:	e7e4      	b.n	801ef1e <__pow5mult+0x6a>
 801ef54:	4638      	mov	r0, r7
 801ef56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ef5a:	bf00      	nop
 801ef5c:	08024a30 	.word	0x08024a30
 801ef60:	0802468d 	.word	0x0802468d
 801ef64:	080248e4 	.word	0x080248e4

0801ef68 <__lshift>:
 801ef68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ef6c:	460c      	mov	r4, r1
 801ef6e:	6849      	ldr	r1, [r1, #4]
 801ef70:	6923      	ldr	r3, [r4, #16]
 801ef72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ef76:	68a3      	ldr	r3, [r4, #8]
 801ef78:	4607      	mov	r7, r0
 801ef7a:	4691      	mov	r9, r2
 801ef7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ef80:	f108 0601 	add.w	r6, r8, #1
 801ef84:	42b3      	cmp	r3, r6
 801ef86:	db0b      	blt.n	801efa0 <__lshift+0x38>
 801ef88:	4638      	mov	r0, r7
 801ef8a:	f7ff fd91 	bl	801eab0 <_Balloc>
 801ef8e:	4605      	mov	r5, r0
 801ef90:	b948      	cbnz	r0, 801efa6 <__lshift+0x3e>
 801ef92:	4602      	mov	r2, r0
 801ef94:	4b2a      	ldr	r3, [pc, #168]	; (801f040 <__lshift+0xd8>)
 801ef96:	482b      	ldr	r0, [pc, #172]	; (801f044 <__lshift+0xdc>)
 801ef98:	f240 11d9 	movw	r1, #473	; 0x1d9
 801ef9c:	f7fe facc 	bl	801d538 <__assert_func>
 801efa0:	3101      	adds	r1, #1
 801efa2:	005b      	lsls	r3, r3, #1
 801efa4:	e7ee      	b.n	801ef84 <__lshift+0x1c>
 801efa6:	2300      	movs	r3, #0
 801efa8:	f100 0114 	add.w	r1, r0, #20
 801efac:	f100 0210 	add.w	r2, r0, #16
 801efb0:	4618      	mov	r0, r3
 801efb2:	4553      	cmp	r3, sl
 801efb4:	db37      	blt.n	801f026 <__lshift+0xbe>
 801efb6:	6920      	ldr	r0, [r4, #16]
 801efb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801efbc:	f104 0314 	add.w	r3, r4, #20
 801efc0:	f019 091f 	ands.w	r9, r9, #31
 801efc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801efc8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801efcc:	d02f      	beq.n	801f02e <__lshift+0xc6>
 801efce:	f1c9 0e20 	rsb	lr, r9, #32
 801efd2:	468a      	mov	sl, r1
 801efd4:	f04f 0c00 	mov.w	ip, #0
 801efd8:	681a      	ldr	r2, [r3, #0]
 801efda:	fa02 f209 	lsl.w	r2, r2, r9
 801efde:	ea42 020c 	orr.w	r2, r2, ip
 801efe2:	f84a 2b04 	str.w	r2, [sl], #4
 801efe6:	f853 2b04 	ldr.w	r2, [r3], #4
 801efea:	4298      	cmp	r0, r3
 801efec:	fa22 fc0e 	lsr.w	ip, r2, lr
 801eff0:	d8f2      	bhi.n	801efd8 <__lshift+0x70>
 801eff2:	1b03      	subs	r3, r0, r4
 801eff4:	3b15      	subs	r3, #21
 801eff6:	f023 0303 	bic.w	r3, r3, #3
 801effa:	3304      	adds	r3, #4
 801effc:	f104 0215 	add.w	r2, r4, #21
 801f000:	4290      	cmp	r0, r2
 801f002:	bf38      	it	cc
 801f004:	2304      	movcc	r3, #4
 801f006:	f841 c003 	str.w	ip, [r1, r3]
 801f00a:	f1bc 0f00 	cmp.w	ip, #0
 801f00e:	d001      	beq.n	801f014 <__lshift+0xac>
 801f010:	f108 0602 	add.w	r6, r8, #2
 801f014:	3e01      	subs	r6, #1
 801f016:	4638      	mov	r0, r7
 801f018:	612e      	str	r6, [r5, #16]
 801f01a:	4621      	mov	r1, r4
 801f01c:	f7ff fd88 	bl	801eb30 <_Bfree>
 801f020:	4628      	mov	r0, r5
 801f022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f026:	f842 0f04 	str.w	r0, [r2, #4]!
 801f02a:	3301      	adds	r3, #1
 801f02c:	e7c1      	b.n	801efb2 <__lshift+0x4a>
 801f02e:	3904      	subs	r1, #4
 801f030:	f853 2b04 	ldr.w	r2, [r3], #4
 801f034:	f841 2f04 	str.w	r2, [r1, #4]!
 801f038:	4298      	cmp	r0, r3
 801f03a:	d8f9      	bhi.n	801f030 <__lshift+0xc8>
 801f03c:	e7ea      	b.n	801f014 <__lshift+0xac>
 801f03e:	bf00      	nop
 801f040:	080247f4 	.word	0x080247f4
 801f044:	080248e4 	.word	0x080248e4

0801f048 <__mcmp>:
 801f048:	b530      	push	{r4, r5, lr}
 801f04a:	6902      	ldr	r2, [r0, #16]
 801f04c:	690c      	ldr	r4, [r1, #16]
 801f04e:	1b12      	subs	r2, r2, r4
 801f050:	d10e      	bne.n	801f070 <__mcmp+0x28>
 801f052:	f100 0314 	add.w	r3, r0, #20
 801f056:	3114      	adds	r1, #20
 801f058:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801f05c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801f060:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801f064:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801f068:	42a5      	cmp	r5, r4
 801f06a:	d003      	beq.n	801f074 <__mcmp+0x2c>
 801f06c:	d305      	bcc.n	801f07a <__mcmp+0x32>
 801f06e:	2201      	movs	r2, #1
 801f070:	4610      	mov	r0, r2
 801f072:	bd30      	pop	{r4, r5, pc}
 801f074:	4283      	cmp	r3, r0
 801f076:	d3f3      	bcc.n	801f060 <__mcmp+0x18>
 801f078:	e7fa      	b.n	801f070 <__mcmp+0x28>
 801f07a:	f04f 32ff 	mov.w	r2, #4294967295
 801f07e:	e7f7      	b.n	801f070 <__mcmp+0x28>

0801f080 <__mdiff>:
 801f080:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f084:	460c      	mov	r4, r1
 801f086:	4606      	mov	r6, r0
 801f088:	4611      	mov	r1, r2
 801f08a:	4620      	mov	r0, r4
 801f08c:	4690      	mov	r8, r2
 801f08e:	f7ff ffdb 	bl	801f048 <__mcmp>
 801f092:	1e05      	subs	r5, r0, #0
 801f094:	d110      	bne.n	801f0b8 <__mdiff+0x38>
 801f096:	4629      	mov	r1, r5
 801f098:	4630      	mov	r0, r6
 801f09a:	f7ff fd09 	bl	801eab0 <_Balloc>
 801f09e:	b930      	cbnz	r0, 801f0ae <__mdiff+0x2e>
 801f0a0:	4b3a      	ldr	r3, [pc, #232]	; (801f18c <__mdiff+0x10c>)
 801f0a2:	4602      	mov	r2, r0
 801f0a4:	f240 2132 	movw	r1, #562	; 0x232
 801f0a8:	4839      	ldr	r0, [pc, #228]	; (801f190 <__mdiff+0x110>)
 801f0aa:	f7fe fa45 	bl	801d538 <__assert_func>
 801f0ae:	2301      	movs	r3, #1
 801f0b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801f0b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0b8:	bfa4      	itt	ge
 801f0ba:	4643      	movge	r3, r8
 801f0bc:	46a0      	movge	r8, r4
 801f0be:	4630      	mov	r0, r6
 801f0c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801f0c4:	bfa6      	itte	ge
 801f0c6:	461c      	movge	r4, r3
 801f0c8:	2500      	movge	r5, #0
 801f0ca:	2501      	movlt	r5, #1
 801f0cc:	f7ff fcf0 	bl	801eab0 <_Balloc>
 801f0d0:	b920      	cbnz	r0, 801f0dc <__mdiff+0x5c>
 801f0d2:	4b2e      	ldr	r3, [pc, #184]	; (801f18c <__mdiff+0x10c>)
 801f0d4:	4602      	mov	r2, r0
 801f0d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 801f0da:	e7e5      	b.n	801f0a8 <__mdiff+0x28>
 801f0dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801f0e0:	6926      	ldr	r6, [r4, #16]
 801f0e2:	60c5      	str	r5, [r0, #12]
 801f0e4:	f104 0914 	add.w	r9, r4, #20
 801f0e8:	f108 0514 	add.w	r5, r8, #20
 801f0ec:	f100 0e14 	add.w	lr, r0, #20
 801f0f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801f0f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801f0f8:	f108 0210 	add.w	r2, r8, #16
 801f0fc:	46f2      	mov	sl, lr
 801f0fe:	2100      	movs	r1, #0
 801f100:	f859 3b04 	ldr.w	r3, [r9], #4
 801f104:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801f108:	fa1f f883 	uxth.w	r8, r3
 801f10c:	fa11 f18b 	uxtah	r1, r1, fp
 801f110:	0c1b      	lsrs	r3, r3, #16
 801f112:	eba1 0808 	sub.w	r8, r1, r8
 801f116:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801f11a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801f11e:	fa1f f888 	uxth.w	r8, r8
 801f122:	1419      	asrs	r1, r3, #16
 801f124:	454e      	cmp	r6, r9
 801f126:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801f12a:	f84a 3b04 	str.w	r3, [sl], #4
 801f12e:	d8e7      	bhi.n	801f100 <__mdiff+0x80>
 801f130:	1b33      	subs	r3, r6, r4
 801f132:	3b15      	subs	r3, #21
 801f134:	f023 0303 	bic.w	r3, r3, #3
 801f138:	3304      	adds	r3, #4
 801f13a:	3415      	adds	r4, #21
 801f13c:	42a6      	cmp	r6, r4
 801f13e:	bf38      	it	cc
 801f140:	2304      	movcc	r3, #4
 801f142:	441d      	add	r5, r3
 801f144:	4473      	add	r3, lr
 801f146:	469e      	mov	lr, r3
 801f148:	462e      	mov	r6, r5
 801f14a:	4566      	cmp	r6, ip
 801f14c:	d30e      	bcc.n	801f16c <__mdiff+0xec>
 801f14e:	f10c 0203 	add.w	r2, ip, #3
 801f152:	1b52      	subs	r2, r2, r5
 801f154:	f022 0203 	bic.w	r2, r2, #3
 801f158:	3d03      	subs	r5, #3
 801f15a:	45ac      	cmp	ip, r5
 801f15c:	bf38      	it	cc
 801f15e:	2200      	movcc	r2, #0
 801f160:	441a      	add	r2, r3
 801f162:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801f166:	b17b      	cbz	r3, 801f188 <__mdiff+0x108>
 801f168:	6107      	str	r7, [r0, #16]
 801f16a:	e7a3      	b.n	801f0b4 <__mdiff+0x34>
 801f16c:	f856 8b04 	ldr.w	r8, [r6], #4
 801f170:	fa11 f288 	uxtah	r2, r1, r8
 801f174:	1414      	asrs	r4, r2, #16
 801f176:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801f17a:	b292      	uxth	r2, r2
 801f17c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801f180:	f84e 2b04 	str.w	r2, [lr], #4
 801f184:	1421      	asrs	r1, r4, #16
 801f186:	e7e0      	b.n	801f14a <__mdiff+0xca>
 801f188:	3f01      	subs	r7, #1
 801f18a:	e7ea      	b.n	801f162 <__mdiff+0xe2>
 801f18c:	080247f4 	.word	0x080247f4
 801f190:	080248e4 	.word	0x080248e4

0801f194 <__ulp>:
 801f194:	b082      	sub	sp, #8
 801f196:	ed8d 0b00 	vstr	d0, [sp]
 801f19a:	9b01      	ldr	r3, [sp, #4]
 801f19c:	4912      	ldr	r1, [pc, #72]	; (801f1e8 <__ulp+0x54>)
 801f19e:	4019      	ands	r1, r3
 801f1a0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801f1a4:	2900      	cmp	r1, #0
 801f1a6:	dd05      	ble.n	801f1b4 <__ulp+0x20>
 801f1a8:	2200      	movs	r2, #0
 801f1aa:	460b      	mov	r3, r1
 801f1ac:	ec43 2b10 	vmov	d0, r2, r3
 801f1b0:	b002      	add	sp, #8
 801f1b2:	4770      	bx	lr
 801f1b4:	4249      	negs	r1, r1
 801f1b6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801f1ba:	ea4f 5021 	mov.w	r0, r1, asr #20
 801f1be:	f04f 0200 	mov.w	r2, #0
 801f1c2:	f04f 0300 	mov.w	r3, #0
 801f1c6:	da04      	bge.n	801f1d2 <__ulp+0x3e>
 801f1c8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801f1cc:	fa41 f300 	asr.w	r3, r1, r0
 801f1d0:	e7ec      	b.n	801f1ac <__ulp+0x18>
 801f1d2:	f1a0 0114 	sub.w	r1, r0, #20
 801f1d6:	291e      	cmp	r1, #30
 801f1d8:	bfda      	itte	le
 801f1da:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801f1de:	fa20 f101 	lsrle.w	r1, r0, r1
 801f1e2:	2101      	movgt	r1, #1
 801f1e4:	460a      	mov	r2, r1
 801f1e6:	e7e1      	b.n	801f1ac <__ulp+0x18>
 801f1e8:	7ff00000 	.word	0x7ff00000

0801f1ec <__b2d>:
 801f1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f1ee:	6905      	ldr	r5, [r0, #16]
 801f1f0:	f100 0714 	add.w	r7, r0, #20
 801f1f4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801f1f8:	1f2e      	subs	r6, r5, #4
 801f1fa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801f1fe:	4620      	mov	r0, r4
 801f200:	f7ff fd48 	bl	801ec94 <__hi0bits>
 801f204:	f1c0 0320 	rsb	r3, r0, #32
 801f208:	280a      	cmp	r0, #10
 801f20a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801f288 <__b2d+0x9c>
 801f20e:	600b      	str	r3, [r1, #0]
 801f210:	dc14      	bgt.n	801f23c <__b2d+0x50>
 801f212:	f1c0 0e0b 	rsb	lr, r0, #11
 801f216:	fa24 f10e 	lsr.w	r1, r4, lr
 801f21a:	42b7      	cmp	r7, r6
 801f21c:	ea41 030c 	orr.w	r3, r1, ip
 801f220:	bf34      	ite	cc
 801f222:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801f226:	2100      	movcs	r1, #0
 801f228:	3015      	adds	r0, #21
 801f22a:	fa04 f000 	lsl.w	r0, r4, r0
 801f22e:	fa21 f10e 	lsr.w	r1, r1, lr
 801f232:	ea40 0201 	orr.w	r2, r0, r1
 801f236:	ec43 2b10 	vmov	d0, r2, r3
 801f23a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f23c:	42b7      	cmp	r7, r6
 801f23e:	bf3a      	itte	cc
 801f240:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801f244:	f1a5 0608 	subcc.w	r6, r5, #8
 801f248:	2100      	movcs	r1, #0
 801f24a:	380b      	subs	r0, #11
 801f24c:	d017      	beq.n	801f27e <__b2d+0x92>
 801f24e:	f1c0 0c20 	rsb	ip, r0, #32
 801f252:	fa04 f500 	lsl.w	r5, r4, r0
 801f256:	42be      	cmp	r6, r7
 801f258:	fa21 f40c 	lsr.w	r4, r1, ip
 801f25c:	ea45 0504 	orr.w	r5, r5, r4
 801f260:	bf8c      	ite	hi
 801f262:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801f266:	2400      	movls	r4, #0
 801f268:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801f26c:	fa01 f000 	lsl.w	r0, r1, r0
 801f270:	fa24 f40c 	lsr.w	r4, r4, ip
 801f274:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801f278:	ea40 0204 	orr.w	r2, r0, r4
 801f27c:	e7db      	b.n	801f236 <__b2d+0x4a>
 801f27e:	ea44 030c 	orr.w	r3, r4, ip
 801f282:	460a      	mov	r2, r1
 801f284:	e7d7      	b.n	801f236 <__b2d+0x4a>
 801f286:	bf00      	nop
 801f288:	3ff00000 	.word	0x3ff00000

0801f28c <__d2b>:
 801f28c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f290:	4689      	mov	r9, r1
 801f292:	2101      	movs	r1, #1
 801f294:	ec57 6b10 	vmov	r6, r7, d0
 801f298:	4690      	mov	r8, r2
 801f29a:	f7ff fc09 	bl	801eab0 <_Balloc>
 801f29e:	4604      	mov	r4, r0
 801f2a0:	b930      	cbnz	r0, 801f2b0 <__d2b+0x24>
 801f2a2:	4602      	mov	r2, r0
 801f2a4:	4b25      	ldr	r3, [pc, #148]	; (801f33c <__d2b+0xb0>)
 801f2a6:	4826      	ldr	r0, [pc, #152]	; (801f340 <__d2b+0xb4>)
 801f2a8:	f240 310a 	movw	r1, #778	; 0x30a
 801f2ac:	f7fe f944 	bl	801d538 <__assert_func>
 801f2b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801f2b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801f2b8:	bb35      	cbnz	r5, 801f308 <__d2b+0x7c>
 801f2ba:	2e00      	cmp	r6, #0
 801f2bc:	9301      	str	r3, [sp, #4]
 801f2be:	d028      	beq.n	801f312 <__d2b+0x86>
 801f2c0:	4668      	mov	r0, sp
 801f2c2:	9600      	str	r6, [sp, #0]
 801f2c4:	f7ff fd06 	bl	801ecd4 <__lo0bits>
 801f2c8:	9900      	ldr	r1, [sp, #0]
 801f2ca:	b300      	cbz	r0, 801f30e <__d2b+0x82>
 801f2cc:	9a01      	ldr	r2, [sp, #4]
 801f2ce:	f1c0 0320 	rsb	r3, r0, #32
 801f2d2:	fa02 f303 	lsl.w	r3, r2, r3
 801f2d6:	430b      	orrs	r3, r1
 801f2d8:	40c2      	lsrs	r2, r0
 801f2da:	6163      	str	r3, [r4, #20]
 801f2dc:	9201      	str	r2, [sp, #4]
 801f2de:	9b01      	ldr	r3, [sp, #4]
 801f2e0:	61a3      	str	r3, [r4, #24]
 801f2e2:	2b00      	cmp	r3, #0
 801f2e4:	bf14      	ite	ne
 801f2e6:	2202      	movne	r2, #2
 801f2e8:	2201      	moveq	r2, #1
 801f2ea:	6122      	str	r2, [r4, #16]
 801f2ec:	b1d5      	cbz	r5, 801f324 <__d2b+0x98>
 801f2ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801f2f2:	4405      	add	r5, r0
 801f2f4:	f8c9 5000 	str.w	r5, [r9]
 801f2f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801f2fc:	f8c8 0000 	str.w	r0, [r8]
 801f300:	4620      	mov	r0, r4
 801f302:	b003      	add	sp, #12
 801f304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f308:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801f30c:	e7d5      	b.n	801f2ba <__d2b+0x2e>
 801f30e:	6161      	str	r1, [r4, #20]
 801f310:	e7e5      	b.n	801f2de <__d2b+0x52>
 801f312:	a801      	add	r0, sp, #4
 801f314:	f7ff fcde 	bl	801ecd4 <__lo0bits>
 801f318:	9b01      	ldr	r3, [sp, #4]
 801f31a:	6163      	str	r3, [r4, #20]
 801f31c:	2201      	movs	r2, #1
 801f31e:	6122      	str	r2, [r4, #16]
 801f320:	3020      	adds	r0, #32
 801f322:	e7e3      	b.n	801f2ec <__d2b+0x60>
 801f324:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f328:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801f32c:	f8c9 0000 	str.w	r0, [r9]
 801f330:	6918      	ldr	r0, [r3, #16]
 801f332:	f7ff fcaf 	bl	801ec94 <__hi0bits>
 801f336:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f33a:	e7df      	b.n	801f2fc <__d2b+0x70>
 801f33c:	080247f4 	.word	0x080247f4
 801f340:	080248e4 	.word	0x080248e4

0801f344 <__ratio>:
 801f344:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f348:	4688      	mov	r8, r1
 801f34a:	4669      	mov	r1, sp
 801f34c:	4681      	mov	r9, r0
 801f34e:	f7ff ff4d 	bl	801f1ec <__b2d>
 801f352:	a901      	add	r1, sp, #4
 801f354:	4640      	mov	r0, r8
 801f356:	ec55 4b10 	vmov	r4, r5, d0
 801f35a:	ee10 aa10 	vmov	sl, s0
 801f35e:	f7ff ff45 	bl	801f1ec <__b2d>
 801f362:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801f366:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801f36a:	1a59      	subs	r1, r3, r1
 801f36c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f370:	1ad3      	subs	r3, r2, r3
 801f372:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801f376:	ec57 6b10 	vmov	r6, r7, d0
 801f37a:	2b00      	cmp	r3, #0
 801f37c:	bfd6      	itet	le
 801f37e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801f382:	462a      	movgt	r2, r5
 801f384:	463a      	movle	r2, r7
 801f386:	46ab      	mov	fp, r5
 801f388:	bfd6      	itet	le
 801f38a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801f38e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801f392:	ee00 3a90 	vmovle	s1, r3
 801f396:	ec4b ab17 	vmov	d7, sl, fp
 801f39a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801f39e:	b003      	add	sp, #12
 801f3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f3a4 <__copybits>:
 801f3a4:	3901      	subs	r1, #1
 801f3a6:	b570      	push	{r4, r5, r6, lr}
 801f3a8:	1149      	asrs	r1, r1, #5
 801f3aa:	6914      	ldr	r4, [r2, #16]
 801f3ac:	3101      	adds	r1, #1
 801f3ae:	f102 0314 	add.w	r3, r2, #20
 801f3b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801f3b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f3ba:	1f05      	subs	r5, r0, #4
 801f3bc:	42a3      	cmp	r3, r4
 801f3be:	d30c      	bcc.n	801f3da <__copybits+0x36>
 801f3c0:	1aa3      	subs	r3, r4, r2
 801f3c2:	3b11      	subs	r3, #17
 801f3c4:	f023 0303 	bic.w	r3, r3, #3
 801f3c8:	3211      	adds	r2, #17
 801f3ca:	42a2      	cmp	r2, r4
 801f3cc:	bf88      	it	hi
 801f3ce:	2300      	movhi	r3, #0
 801f3d0:	4418      	add	r0, r3
 801f3d2:	2300      	movs	r3, #0
 801f3d4:	4288      	cmp	r0, r1
 801f3d6:	d305      	bcc.n	801f3e4 <__copybits+0x40>
 801f3d8:	bd70      	pop	{r4, r5, r6, pc}
 801f3da:	f853 6b04 	ldr.w	r6, [r3], #4
 801f3de:	f845 6f04 	str.w	r6, [r5, #4]!
 801f3e2:	e7eb      	b.n	801f3bc <__copybits+0x18>
 801f3e4:	f840 3b04 	str.w	r3, [r0], #4
 801f3e8:	e7f4      	b.n	801f3d4 <__copybits+0x30>

0801f3ea <__any_on>:
 801f3ea:	f100 0214 	add.w	r2, r0, #20
 801f3ee:	6900      	ldr	r0, [r0, #16]
 801f3f0:	114b      	asrs	r3, r1, #5
 801f3f2:	4298      	cmp	r0, r3
 801f3f4:	b510      	push	{r4, lr}
 801f3f6:	db11      	blt.n	801f41c <__any_on+0x32>
 801f3f8:	dd0a      	ble.n	801f410 <__any_on+0x26>
 801f3fa:	f011 011f 	ands.w	r1, r1, #31
 801f3fe:	d007      	beq.n	801f410 <__any_on+0x26>
 801f400:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801f404:	fa24 f001 	lsr.w	r0, r4, r1
 801f408:	fa00 f101 	lsl.w	r1, r0, r1
 801f40c:	428c      	cmp	r4, r1
 801f40e:	d10b      	bne.n	801f428 <__any_on+0x3e>
 801f410:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f414:	4293      	cmp	r3, r2
 801f416:	d803      	bhi.n	801f420 <__any_on+0x36>
 801f418:	2000      	movs	r0, #0
 801f41a:	bd10      	pop	{r4, pc}
 801f41c:	4603      	mov	r3, r0
 801f41e:	e7f7      	b.n	801f410 <__any_on+0x26>
 801f420:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f424:	2900      	cmp	r1, #0
 801f426:	d0f5      	beq.n	801f414 <__any_on+0x2a>
 801f428:	2001      	movs	r0, #1
 801f42a:	e7f6      	b.n	801f41a <__any_on+0x30>

0801f42c <__ssputs_r>:
 801f42c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f430:	688e      	ldr	r6, [r1, #8]
 801f432:	429e      	cmp	r6, r3
 801f434:	4682      	mov	sl, r0
 801f436:	460c      	mov	r4, r1
 801f438:	4690      	mov	r8, r2
 801f43a:	461f      	mov	r7, r3
 801f43c:	d838      	bhi.n	801f4b0 <__ssputs_r+0x84>
 801f43e:	898a      	ldrh	r2, [r1, #12]
 801f440:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801f444:	d032      	beq.n	801f4ac <__ssputs_r+0x80>
 801f446:	6825      	ldr	r5, [r4, #0]
 801f448:	6909      	ldr	r1, [r1, #16]
 801f44a:	eba5 0901 	sub.w	r9, r5, r1
 801f44e:	6965      	ldr	r5, [r4, #20]
 801f450:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f454:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f458:	3301      	adds	r3, #1
 801f45a:	444b      	add	r3, r9
 801f45c:	106d      	asrs	r5, r5, #1
 801f45e:	429d      	cmp	r5, r3
 801f460:	bf38      	it	cc
 801f462:	461d      	movcc	r5, r3
 801f464:	0553      	lsls	r3, r2, #21
 801f466:	d531      	bpl.n	801f4cc <__ssputs_r+0xa0>
 801f468:	4629      	mov	r1, r5
 801f46a:	f7fc faa5 	bl	801b9b8 <_malloc_r>
 801f46e:	4606      	mov	r6, r0
 801f470:	b950      	cbnz	r0, 801f488 <__ssputs_r+0x5c>
 801f472:	230c      	movs	r3, #12
 801f474:	f8ca 3000 	str.w	r3, [sl]
 801f478:	89a3      	ldrh	r3, [r4, #12]
 801f47a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f47e:	81a3      	strh	r3, [r4, #12]
 801f480:	f04f 30ff 	mov.w	r0, #4294967295
 801f484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f488:	6921      	ldr	r1, [r4, #16]
 801f48a:	464a      	mov	r2, r9
 801f48c:	f7fc f9e2 	bl	801b854 <memcpy>
 801f490:	89a3      	ldrh	r3, [r4, #12]
 801f492:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801f496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f49a:	81a3      	strh	r3, [r4, #12]
 801f49c:	6126      	str	r6, [r4, #16]
 801f49e:	6165      	str	r5, [r4, #20]
 801f4a0:	444e      	add	r6, r9
 801f4a2:	eba5 0509 	sub.w	r5, r5, r9
 801f4a6:	6026      	str	r6, [r4, #0]
 801f4a8:	60a5      	str	r5, [r4, #8]
 801f4aa:	463e      	mov	r6, r7
 801f4ac:	42be      	cmp	r6, r7
 801f4ae:	d900      	bls.n	801f4b2 <__ssputs_r+0x86>
 801f4b0:	463e      	mov	r6, r7
 801f4b2:	6820      	ldr	r0, [r4, #0]
 801f4b4:	4632      	mov	r2, r6
 801f4b6:	4641      	mov	r1, r8
 801f4b8:	f7fc f9da 	bl	801b870 <memmove>
 801f4bc:	68a3      	ldr	r3, [r4, #8]
 801f4be:	1b9b      	subs	r3, r3, r6
 801f4c0:	60a3      	str	r3, [r4, #8]
 801f4c2:	6823      	ldr	r3, [r4, #0]
 801f4c4:	4433      	add	r3, r6
 801f4c6:	6023      	str	r3, [r4, #0]
 801f4c8:	2000      	movs	r0, #0
 801f4ca:	e7db      	b.n	801f484 <__ssputs_r+0x58>
 801f4cc:	462a      	mov	r2, r5
 801f4ce:	f000 fce1 	bl	801fe94 <_realloc_r>
 801f4d2:	4606      	mov	r6, r0
 801f4d4:	2800      	cmp	r0, #0
 801f4d6:	d1e1      	bne.n	801f49c <__ssputs_r+0x70>
 801f4d8:	6921      	ldr	r1, [r4, #16]
 801f4da:	4650      	mov	r0, sl
 801f4dc:	f7fc fa00 	bl	801b8e0 <_free_r>
 801f4e0:	e7c7      	b.n	801f472 <__ssputs_r+0x46>
	...

0801f4e4 <_svfiprintf_r>:
 801f4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4e8:	4698      	mov	r8, r3
 801f4ea:	898b      	ldrh	r3, [r1, #12]
 801f4ec:	061b      	lsls	r3, r3, #24
 801f4ee:	b09d      	sub	sp, #116	; 0x74
 801f4f0:	4607      	mov	r7, r0
 801f4f2:	460d      	mov	r5, r1
 801f4f4:	4614      	mov	r4, r2
 801f4f6:	d50e      	bpl.n	801f516 <_svfiprintf_r+0x32>
 801f4f8:	690b      	ldr	r3, [r1, #16]
 801f4fa:	b963      	cbnz	r3, 801f516 <_svfiprintf_r+0x32>
 801f4fc:	2140      	movs	r1, #64	; 0x40
 801f4fe:	f7fc fa5b 	bl	801b9b8 <_malloc_r>
 801f502:	6028      	str	r0, [r5, #0]
 801f504:	6128      	str	r0, [r5, #16]
 801f506:	b920      	cbnz	r0, 801f512 <_svfiprintf_r+0x2e>
 801f508:	230c      	movs	r3, #12
 801f50a:	603b      	str	r3, [r7, #0]
 801f50c:	f04f 30ff 	mov.w	r0, #4294967295
 801f510:	e0d1      	b.n	801f6b6 <_svfiprintf_r+0x1d2>
 801f512:	2340      	movs	r3, #64	; 0x40
 801f514:	616b      	str	r3, [r5, #20]
 801f516:	2300      	movs	r3, #0
 801f518:	9309      	str	r3, [sp, #36]	; 0x24
 801f51a:	2320      	movs	r3, #32
 801f51c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f520:	f8cd 800c 	str.w	r8, [sp, #12]
 801f524:	2330      	movs	r3, #48	; 0x30
 801f526:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801f6d0 <_svfiprintf_r+0x1ec>
 801f52a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f52e:	f04f 0901 	mov.w	r9, #1
 801f532:	4623      	mov	r3, r4
 801f534:	469a      	mov	sl, r3
 801f536:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f53a:	b10a      	cbz	r2, 801f540 <_svfiprintf_r+0x5c>
 801f53c:	2a25      	cmp	r2, #37	; 0x25
 801f53e:	d1f9      	bne.n	801f534 <_svfiprintf_r+0x50>
 801f540:	ebba 0b04 	subs.w	fp, sl, r4
 801f544:	d00b      	beq.n	801f55e <_svfiprintf_r+0x7a>
 801f546:	465b      	mov	r3, fp
 801f548:	4622      	mov	r2, r4
 801f54a:	4629      	mov	r1, r5
 801f54c:	4638      	mov	r0, r7
 801f54e:	f7ff ff6d 	bl	801f42c <__ssputs_r>
 801f552:	3001      	adds	r0, #1
 801f554:	f000 80aa 	beq.w	801f6ac <_svfiprintf_r+0x1c8>
 801f558:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f55a:	445a      	add	r2, fp
 801f55c:	9209      	str	r2, [sp, #36]	; 0x24
 801f55e:	f89a 3000 	ldrb.w	r3, [sl]
 801f562:	2b00      	cmp	r3, #0
 801f564:	f000 80a2 	beq.w	801f6ac <_svfiprintf_r+0x1c8>
 801f568:	2300      	movs	r3, #0
 801f56a:	f04f 32ff 	mov.w	r2, #4294967295
 801f56e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f572:	f10a 0a01 	add.w	sl, sl, #1
 801f576:	9304      	str	r3, [sp, #16]
 801f578:	9307      	str	r3, [sp, #28]
 801f57a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f57e:	931a      	str	r3, [sp, #104]	; 0x68
 801f580:	4654      	mov	r4, sl
 801f582:	2205      	movs	r2, #5
 801f584:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f588:	4851      	ldr	r0, [pc, #324]	; (801f6d0 <_svfiprintf_r+0x1ec>)
 801f58a:	f7e0 fe61 	bl	8000250 <memchr>
 801f58e:	9a04      	ldr	r2, [sp, #16]
 801f590:	b9d8      	cbnz	r0, 801f5ca <_svfiprintf_r+0xe6>
 801f592:	06d0      	lsls	r0, r2, #27
 801f594:	bf44      	itt	mi
 801f596:	2320      	movmi	r3, #32
 801f598:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f59c:	0711      	lsls	r1, r2, #28
 801f59e:	bf44      	itt	mi
 801f5a0:	232b      	movmi	r3, #43	; 0x2b
 801f5a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f5a6:	f89a 3000 	ldrb.w	r3, [sl]
 801f5aa:	2b2a      	cmp	r3, #42	; 0x2a
 801f5ac:	d015      	beq.n	801f5da <_svfiprintf_r+0xf6>
 801f5ae:	9a07      	ldr	r2, [sp, #28]
 801f5b0:	4654      	mov	r4, sl
 801f5b2:	2000      	movs	r0, #0
 801f5b4:	f04f 0c0a 	mov.w	ip, #10
 801f5b8:	4621      	mov	r1, r4
 801f5ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f5be:	3b30      	subs	r3, #48	; 0x30
 801f5c0:	2b09      	cmp	r3, #9
 801f5c2:	d94e      	bls.n	801f662 <_svfiprintf_r+0x17e>
 801f5c4:	b1b0      	cbz	r0, 801f5f4 <_svfiprintf_r+0x110>
 801f5c6:	9207      	str	r2, [sp, #28]
 801f5c8:	e014      	b.n	801f5f4 <_svfiprintf_r+0x110>
 801f5ca:	eba0 0308 	sub.w	r3, r0, r8
 801f5ce:	fa09 f303 	lsl.w	r3, r9, r3
 801f5d2:	4313      	orrs	r3, r2
 801f5d4:	9304      	str	r3, [sp, #16]
 801f5d6:	46a2      	mov	sl, r4
 801f5d8:	e7d2      	b.n	801f580 <_svfiprintf_r+0x9c>
 801f5da:	9b03      	ldr	r3, [sp, #12]
 801f5dc:	1d19      	adds	r1, r3, #4
 801f5de:	681b      	ldr	r3, [r3, #0]
 801f5e0:	9103      	str	r1, [sp, #12]
 801f5e2:	2b00      	cmp	r3, #0
 801f5e4:	bfbb      	ittet	lt
 801f5e6:	425b      	neglt	r3, r3
 801f5e8:	f042 0202 	orrlt.w	r2, r2, #2
 801f5ec:	9307      	strge	r3, [sp, #28]
 801f5ee:	9307      	strlt	r3, [sp, #28]
 801f5f0:	bfb8      	it	lt
 801f5f2:	9204      	strlt	r2, [sp, #16]
 801f5f4:	7823      	ldrb	r3, [r4, #0]
 801f5f6:	2b2e      	cmp	r3, #46	; 0x2e
 801f5f8:	d10c      	bne.n	801f614 <_svfiprintf_r+0x130>
 801f5fa:	7863      	ldrb	r3, [r4, #1]
 801f5fc:	2b2a      	cmp	r3, #42	; 0x2a
 801f5fe:	d135      	bne.n	801f66c <_svfiprintf_r+0x188>
 801f600:	9b03      	ldr	r3, [sp, #12]
 801f602:	1d1a      	adds	r2, r3, #4
 801f604:	681b      	ldr	r3, [r3, #0]
 801f606:	9203      	str	r2, [sp, #12]
 801f608:	2b00      	cmp	r3, #0
 801f60a:	bfb8      	it	lt
 801f60c:	f04f 33ff 	movlt.w	r3, #4294967295
 801f610:	3402      	adds	r4, #2
 801f612:	9305      	str	r3, [sp, #20]
 801f614:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801f6e0 <_svfiprintf_r+0x1fc>
 801f618:	7821      	ldrb	r1, [r4, #0]
 801f61a:	2203      	movs	r2, #3
 801f61c:	4650      	mov	r0, sl
 801f61e:	f7e0 fe17 	bl	8000250 <memchr>
 801f622:	b140      	cbz	r0, 801f636 <_svfiprintf_r+0x152>
 801f624:	2340      	movs	r3, #64	; 0x40
 801f626:	eba0 000a 	sub.w	r0, r0, sl
 801f62a:	fa03 f000 	lsl.w	r0, r3, r0
 801f62e:	9b04      	ldr	r3, [sp, #16]
 801f630:	4303      	orrs	r3, r0
 801f632:	3401      	adds	r4, #1
 801f634:	9304      	str	r3, [sp, #16]
 801f636:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f63a:	4826      	ldr	r0, [pc, #152]	; (801f6d4 <_svfiprintf_r+0x1f0>)
 801f63c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f640:	2206      	movs	r2, #6
 801f642:	f7e0 fe05 	bl	8000250 <memchr>
 801f646:	2800      	cmp	r0, #0
 801f648:	d038      	beq.n	801f6bc <_svfiprintf_r+0x1d8>
 801f64a:	4b23      	ldr	r3, [pc, #140]	; (801f6d8 <_svfiprintf_r+0x1f4>)
 801f64c:	bb1b      	cbnz	r3, 801f696 <_svfiprintf_r+0x1b2>
 801f64e:	9b03      	ldr	r3, [sp, #12]
 801f650:	3307      	adds	r3, #7
 801f652:	f023 0307 	bic.w	r3, r3, #7
 801f656:	3308      	adds	r3, #8
 801f658:	9303      	str	r3, [sp, #12]
 801f65a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f65c:	4433      	add	r3, r6
 801f65e:	9309      	str	r3, [sp, #36]	; 0x24
 801f660:	e767      	b.n	801f532 <_svfiprintf_r+0x4e>
 801f662:	fb0c 3202 	mla	r2, ip, r2, r3
 801f666:	460c      	mov	r4, r1
 801f668:	2001      	movs	r0, #1
 801f66a:	e7a5      	b.n	801f5b8 <_svfiprintf_r+0xd4>
 801f66c:	2300      	movs	r3, #0
 801f66e:	3401      	adds	r4, #1
 801f670:	9305      	str	r3, [sp, #20]
 801f672:	4619      	mov	r1, r3
 801f674:	f04f 0c0a 	mov.w	ip, #10
 801f678:	4620      	mov	r0, r4
 801f67a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f67e:	3a30      	subs	r2, #48	; 0x30
 801f680:	2a09      	cmp	r2, #9
 801f682:	d903      	bls.n	801f68c <_svfiprintf_r+0x1a8>
 801f684:	2b00      	cmp	r3, #0
 801f686:	d0c5      	beq.n	801f614 <_svfiprintf_r+0x130>
 801f688:	9105      	str	r1, [sp, #20]
 801f68a:	e7c3      	b.n	801f614 <_svfiprintf_r+0x130>
 801f68c:	fb0c 2101 	mla	r1, ip, r1, r2
 801f690:	4604      	mov	r4, r0
 801f692:	2301      	movs	r3, #1
 801f694:	e7f0      	b.n	801f678 <_svfiprintf_r+0x194>
 801f696:	ab03      	add	r3, sp, #12
 801f698:	9300      	str	r3, [sp, #0]
 801f69a:	462a      	mov	r2, r5
 801f69c:	4b0f      	ldr	r3, [pc, #60]	; (801f6dc <_svfiprintf_r+0x1f8>)
 801f69e:	a904      	add	r1, sp, #16
 801f6a0:	4638      	mov	r0, r7
 801f6a2:	f7fc fa8d 	bl	801bbc0 <_printf_float>
 801f6a6:	1c42      	adds	r2, r0, #1
 801f6a8:	4606      	mov	r6, r0
 801f6aa:	d1d6      	bne.n	801f65a <_svfiprintf_r+0x176>
 801f6ac:	89ab      	ldrh	r3, [r5, #12]
 801f6ae:	065b      	lsls	r3, r3, #25
 801f6b0:	f53f af2c 	bmi.w	801f50c <_svfiprintf_r+0x28>
 801f6b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f6b6:	b01d      	add	sp, #116	; 0x74
 801f6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6bc:	ab03      	add	r3, sp, #12
 801f6be:	9300      	str	r3, [sp, #0]
 801f6c0:	462a      	mov	r2, r5
 801f6c2:	4b06      	ldr	r3, [pc, #24]	; (801f6dc <_svfiprintf_r+0x1f8>)
 801f6c4:	a904      	add	r1, sp, #16
 801f6c6:	4638      	mov	r0, r7
 801f6c8:	f7fc fd06 	bl	801c0d8 <_printf_i>
 801f6cc:	e7eb      	b.n	801f6a6 <_svfiprintf_r+0x1c2>
 801f6ce:	bf00      	nop
 801f6d0:	08024a3c 	.word	0x08024a3c
 801f6d4:	08024a46 	.word	0x08024a46
 801f6d8:	0801bbc1 	.word	0x0801bbc1
 801f6dc:	0801f42d 	.word	0x0801f42d
 801f6e0:	08024a42 	.word	0x08024a42

0801f6e4 <__sfputc_r>:
 801f6e4:	6893      	ldr	r3, [r2, #8]
 801f6e6:	3b01      	subs	r3, #1
 801f6e8:	2b00      	cmp	r3, #0
 801f6ea:	b410      	push	{r4}
 801f6ec:	6093      	str	r3, [r2, #8]
 801f6ee:	da08      	bge.n	801f702 <__sfputc_r+0x1e>
 801f6f0:	6994      	ldr	r4, [r2, #24]
 801f6f2:	42a3      	cmp	r3, r4
 801f6f4:	db01      	blt.n	801f6fa <__sfputc_r+0x16>
 801f6f6:	290a      	cmp	r1, #10
 801f6f8:	d103      	bne.n	801f702 <__sfputc_r+0x1e>
 801f6fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f6fe:	f000 b997 	b.w	801fa30 <__swbuf_r>
 801f702:	6813      	ldr	r3, [r2, #0]
 801f704:	1c58      	adds	r0, r3, #1
 801f706:	6010      	str	r0, [r2, #0]
 801f708:	7019      	strb	r1, [r3, #0]
 801f70a:	4608      	mov	r0, r1
 801f70c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f710:	4770      	bx	lr

0801f712 <__sfputs_r>:
 801f712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f714:	4606      	mov	r6, r0
 801f716:	460f      	mov	r7, r1
 801f718:	4614      	mov	r4, r2
 801f71a:	18d5      	adds	r5, r2, r3
 801f71c:	42ac      	cmp	r4, r5
 801f71e:	d101      	bne.n	801f724 <__sfputs_r+0x12>
 801f720:	2000      	movs	r0, #0
 801f722:	e007      	b.n	801f734 <__sfputs_r+0x22>
 801f724:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f728:	463a      	mov	r2, r7
 801f72a:	4630      	mov	r0, r6
 801f72c:	f7ff ffda 	bl	801f6e4 <__sfputc_r>
 801f730:	1c43      	adds	r3, r0, #1
 801f732:	d1f3      	bne.n	801f71c <__sfputs_r+0xa>
 801f734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f738 <_vfiprintf_r>:
 801f738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f73c:	460d      	mov	r5, r1
 801f73e:	b09d      	sub	sp, #116	; 0x74
 801f740:	4614      	mov	r4, r2
 801f742:	4698      	mov	r8, r3
 801f744:	4606      	mov	r6, r0
 801f746:	b118      	cbz	r0, 801f750 <_vfiprintf_r+0x18>
 801f748:	6983      	ldr	r3, [r0, #24]
 801f74a:	b90b      	cbnz	r3, 801f750 <_vfiprintf_r+0x18>
 801f74c:	f7fe fd6c 	bl	801e228 <__sinit>
 801f750:	4b89      	ldr	r3, [pc, #548]	; (801f978 <_vfiprintf_r+0x240>)
 801f752:	429d      	cmp	r5, r3
 801f754:	d11b      	bne.n	801f78e <_vfiprintf_r+0x56>
 801f756:	6875      	ldr	r5, [r6, #4]
 801f758:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f75a:	07d9      	lsls	r1, r3, #31
 801f75c:	d405      	bmi.n	801f76a <_vfiprintf_r+0x32>
 801f75e:	89ab      	ldrh	r3, [r5, #12]
 801f760:	059a      	lsls	r2, r3, #22
 801f762:	d402      	bmi.n	801f76a <_vfiprintf_r+0x32>
 801f764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f766:	f7ff f982 	bl	801ea6e <__retarget_lock_acquire_recursive>
 801f76a:	89ab      	ldrh	r3, [r5, #12]
 801f76c:	071b      	lsls	r3, r3, #28
 801f76e:	d501      	bpl.n	801f774 <_vfiprintf_r+0x3c>
 801f770:	692b      	ldr	r3, [r5, #16]
 801f772:	b9eb      	cbnz	r3, 801f7b0 <_vfiprintf_r+0x78>
 801f774:	4629      	mov	r1, r5
 801f776:	4630      	mov	r0, r6
 801f778:	f000 f9cc 	bl	801fb14 <__swsetup_r>
 801f77c:	b1c0      	cbz	r0, 801f7b0 <_vfiprintf_r+0x78>
 801f77e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f780:	07dc      	lsls	r4, r3, #31
 801f782:	d50e      	bpl.n	801f7a2 <_vfiprintf_r+0x6a>
 801f784:	f04f 30ff 	mov.w	r0, #4294967295
 801f788:	b01d      	add	sp, #116	; 0x74
 801f78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f78e:	4b7b      	ldr	r3, [pc, #492]	; (801f97c <_vfiprintf_r+0x244>)
 801f790:	429d      	cmp	r5, r3
 801f792:	d101      	bne.n	801f798 <_vfiprintf_r+0x60>
 801f794:	68b5      	ldr	r5, [r6, #8]
 801f796:	e7df      	b.n	801f758 <_vfiprintf_r+0x20>
 801f798:	4b79      	ldr	r3, [pc, #484]	; (801f980 <_vfiprintf_r+0x248>)
 801f79a:	429d      	cmp	r5, r3
 801f79c:	bf08      	it	eq
 801f79e:	68f5      	ldreq	r5, [r6, #12]
 801f7a0:	e7da      	b.n	801f758 <_vfiprintf_r+0x20>
 801f7a2:	89ab      	ldrh	r3, [r5, #12]
 801f7a4:	0598      	lsls	r0, r3, #22
 801f7a6:	d4ed      	bmi.n	801f784 <_vfiprintf_r+0x4c>
 801f7a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f7aa:	f7ff f961 	bl	801ea70 <__retarget_lock_release_recursive>
 801f7ae:	e7e9      	b.n	801f784 <_vfiprintf_r+0x4c>
 801f7b0:	2300      	movs	r3, #0
 801f7b2:	9309      	str	r3, [sp, #36]	; 0x24
 801f7b4:	2320      	movs	r3, #32
 801f7b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f7ba:	f8cd 800c 	str.w	r8, [sp, #12]
 801f7be:	2330      	movs	r3, #48	; 0x30
 801f7c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801f984 <_vfiprintf_r+0x24c>
 801f7c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f7c8:	f04f 0901 	mov.w	r9, #1
 801f7cc:	4623      	mov	r3, r4
 801f7ce:	469a      	mov	sl, r3
 801f7d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f7d4:	b10a      	cbz	r2, 801f7da <_vfiprintf_r+0xa2>
 801f7d6:	2a25      	cmp	r2, #37	; 0x25
 801f7d8:	d1f9      	bne.n	801f7ce <_vfiprintf_r+0x96>
 801f7da:	ebba 0b04 	subs.w	fp, sl, r4
 801f7de:	d00b      	beq.n	801f7f8 <_vfiprintf_r+0xc0>
 801f7e0:	465b      	mov	r3, fp
 801f7e2:	4622      	mov	r2, r4
 801f7e4:	4629      	mov	r1, r5
 801f7e6:	4630      	mov	r0, r6
 801f7e8:	f7ff ff93 	bl	801f712 <__sfputs_r>
 801f7ec:	3001      	adds	r0, #1
 801f7ee:	f000 80aa 	beq.w	801f946 <_vfiprintf_r+0x20e>
 801f7f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f7f4:	445a      	add	r2, fp
 801f7f6:	9209      	str	r2, [sp, #36]	; 0x24
 801f7f8:	f89a 3000 	ldrb.w	r3, [sl]
 801f7fc:	2b00      	cmp	r3, #0
 801f7fe:	f000 80a2 	beq.w	801f946 <_vfiprintf_r+0x20e>
 801f802:	2300      	movs	r3, #0
 801f804:	f04f 32ff 	mov.w	r2, #4294967295
 801f808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f80c:	f10a 0a01 	add.w	sl, sl, #1
 801f810:	9304      	str	r3, [sp, #16]
 801f812:	9307      	str	r3, [sp, #28]
 801f814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f818:	931a      	str	r3, [sp, #104]	; 0x68
 801f81a:	4654      	mov	r4, sl
 801f81c:	2205      	movs	r2, #5
 801f81e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f822:	4858      	ldr	r0, [pc, #352]	; (801f984 <_vfiprintf_r+0x24c>)
 801f824:	f7e0 fd14 	bl	8000250 <memchr>
 801f828:	9a04      	ldr	r2, [sp, #16]
 801f82a:	b9d8      	cbnz	r0, 801f864 <_vfiprintf_r+0x12c>
 801f82c:	06d1      	lsls	r1, r2, #27
 801f82e:	bf44      	itt	mi
 801f830:	2320      	movmi	r3, #32
 801f832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f836:	0713      	lsls	r3, r2, #28
 801f838:	bf44      	itt	mi
 801f83a:	232b      	movmi	r3, #43	; 0x2b
 801f83c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f840:	f89a 3000 	ldrb.w	r3, [sl]
 801f844:	2b2a      	cmp	r3, #42	; 0x2a
 801f846:	d015      	beq.n	801f874 <_vfiprintf_r+0x13c>
 801f848:	9a07      	ldr	r2, [sp, #28]
 801f84a:	4654      	mov	r4, sl
 801f84c:	2000      	movs	r0, #0
 801f84e:	f04f 0c0a 	mov.w	ip, #10
 801f852:	4621      	mov	r1, r4
 801f854:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f858:	3b30      	subs	r3, #48	; 0x30
 801f85a:	2b09      	cmp	r3, #9
 801f85c:	d94e      	bls.n	801f8fc <_vfiprintf_r+0x1c4>
 801f85e:	b1b0      	cbz	r0, 801f88e <_vfiprintf_r+0x156>
 801f860:	9207      	str	r2, [sp, #28]
 801f862:	e014      	b.n	801f88e <_vfiprintf_r+0x156>
 801f864:	eba0 0308 	sub.w	r3, r0, r8
 801f868:	fa09 f303 	lsl.w	r3, r9, r3
 801f86c:	4313      	orrs	r3, r2
 801f86e:	9304      	str	r3, [sp, #16]
 801f870:	46a2      	mov	sl, r4
 801f872:	e7d2      	b.n	801f81a <_vfiprintf_r+0xe2>
 801f874:	9b03      	ldr	r3, [sp, #12]
 801f876:	1d19      	adds	r1, r3, #4
 801f878:	681b      	ldr	r3, [r3, #0]
 801f87a:	9103      	str	r1, [sp, #12]
 801f87c:	2b00      	cmp	r3, #0
 801f87e:	bfbb      	ittet	lt
 801f880:	425b      	neglt	r3, r3
 801f882:	f042 0202 	orrlt.w	r2, r2, #2
 801f886:	9307      	strge	r3, [sp, #28]
 801f888:	9307      	strlt	r3, [sp, #28]
 801f88a:	bfb8      	it	lt
 801f88c:	9204      	strlt	r2, [sp, #16]
 801f88e:	7823      	ldrb	r3, [r4, #0]
 801f890:	2b2e      	cmp	r3, #46	; 0x2e
 801f892:	d10c      	bne.n	801f8ae <_vfiprintf_r+0x176>
 801f894:	7863      	ldrb	r3, [r4, #1]
 801f896:	2b2a      	cmp	r3, #42	; 0x2a
 801f898:	d135      	bne.n	801f906 <_vfiprintf_r+0x1ce>
 801f89a:	9b03      	ldr	r3, [sp, #12]
 801f89c:	1d1a      	adds	r2, r3, #4
 801f89e:	681b      	ldr	r3, [r3, #0]
 801f8a0:	9203      	str	r2, [sp, #12]
 801f8a2:	2b00      	cmp	r3, #0
 801f8a4:	bfb8      	it	lt
 801f8a6:	f04f 33ff 	movlt.w	r3, #4294967295
 801f8aa:	3402      	adds	r4, #2
 801f8ac:	9305      	str	r3, [sp, #20]
 801f8ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801f994 <_vfiprintf_r+0x25c>
 801f8b2:	7821      	ldrb	r1, [r4, #0]
 801f8b4:	2203      	movs	r2, #3
 801f8b6:	4650      	mov	r0, sl
 801f8b8:	f7e0 fcca 	bl	8000250 <memchr>
 801f8bc:	b140      	cbz	r0, 801f8d0 <_vfiprintf_r+0x198>
 801f8be:	2340      	movs	r3, #64	; 0x40
 801f8c0:	eba0 000a 	sub.w	r0, r0, sl
 801f8c4:	fa03 f000 	lsl.w	r0, r3, r0
 801f8c8:	9b04      	ldr	r3, [sp, #16]
 801f8ca:	4303      	orrs	r3, r0
 801f8cc:	3401      	adds	r4, #1
 801f8ce:	9304      	str	r3, [sp, #16]
 801f8d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f8d4:	482c      	ldr	r0, [pc, #176]	; (801f988 <_vfiprintf_r+0x250>)
 801f8d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f8da:	2206      	movs	r2, #6
 801f8dc:	f7e0 fcb8 	bl	8000250 <memchr>
 801f8e0:	2800      	cmp	r0, #0
 801f8e2:	d03f      	beq.n	801f964 <_vfiprintf_r+0x22c>
 801f8e4:	4b29      	ldr	r3, [pc, #164]	; (801f98c <_vfiprintf_r+0x254>)
 801f8e6:	bb1b      	cbnz	r3, 801f930 <_vfiprintf_r+0x1f8>
 801f8e8:	9b03      	ldr	r3, [sp, #12]
 801f8ea:	3307      	adds	r3, #7
 801f8ec:	f023 0307 	bic.w	r3, r3, #7
 801f8f0:	3308      	adds	r3, #8
 801f8f2:	9303      	str	r3, [sp, #12]
 801f8f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8f6:	443b      	add	r3, r7
 801f8f8:	9309      	str	r3, [sp, #36]	; 0x24
 801f8fa:	e767      	b.n	801f7cc <_vfiprintf_r+0x94>
 801f8fc:	fb0c 3202 	mla	r2, ip, r2, r3
 801f900:	460c      	mov	r4, r1
 801f902:	2001      	movs	r0, #1
 801f904:	e7a5      	b.n	801f852 <_vfiprintf_r+0x11a>
 801f906:	2300      	movs	r3, #0
 801f908:	3401      	adds	r4, #1
 801f90a:	9305      	str	r3, [sp, #20]
 801f90c:	4619      	mov	r1, r3
 801f90e:	f04f 0c0a 	mov.w	ip, #10
 801f912:	4620      	mov	r0, r4
 801f914:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f918:	3a30      	subs	r2, #48	; 0x30
 801f91a:	2a09      	cmp	r2, #9
 801f91c:	d903      	bls.n	801f926 <_vfiprintf_r+0x1ee>
 801f91e:	2b00      	cmp	r3, #0
 801f920:	d0c5      	beq.n	801f8ae <_vfiprintf_r+0x176>
 801f922:	9105      	str	r1, [sp, #20]
 801f924:	e7c3      	b.n	801f8ae <_vfiprintf_r+0x176>
 801f926:	fb0c 2101 	mla	r1, ip, r1, r2
 801f92a:	4604      	mov	r4, r0
 801f92c:	2301      	movs	r3, #1
 801f92e:	e7f0      	b.n	801f912 <_vfiprintf_r+0x1da>
 801f930:	ab03      	add	r3, sp, #12
 801f932:	9300      	str	r3, [sp, #0]
 801f934:	462a      	mov	r2, r5
 801f936:	4b16      	ldr	r3, [pc, #88]	; (801f990 <_vfiprintf_r+0x258>)
 801f938:	a904      	add	r1, sp, #16
 801f93a:	4630      	mov	r0, r6
 801f93c:	f7fc f940 	bl	801bbc0 <_printf_float>
 801f940:	4607      	mov	r7, r0
 801f942:	1c78      	adds	r0, r7, #1
 801f944:	d1d6      	bne.n	801f8f4 <_vfiprintf_r+0x1bc>
 801f946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f948:	07d9      	lsls	r1, r3, #31
 801f94a:	d405      	bmi.n	801f958 <_vfiprintf_r+0x220>
 801f94c:	89ab      	ldrh	r3, [r5, #12]
 801f94e:	059a      	lsls	r2, r3, #22
 801f950:	d402      	bmi.n	801f958 <_vfiprintf_r+0x220>
 801f952:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f954:	f7ff f88c 	bl	801ea70 <__retarget_lock_release_recursive>
 801f958:	89ab      	ldrh	r3, [r5, #12]
 801f95a:	065b      	lsls	r3, r3, #25
 801f95c:	f53f af12 	bmi.w	801f784 <_vfiprintf_r+0x4c>
 801f960:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f962:	e711      	b.n	801f788 <_vfiprintf_r+0x50>
 801f964:	ab03      	add	r3, sp, #12
 801f966:	9300      	str	r3, [sp, #0]
 801f968:	462a      	mov	r2, r5
 801f96a:	4b09      	ldr	r3, [pc, #36]	; (801f990 <_vfiprintf_r+0x258>)
 801f96c:	a904      	add	r1, sp, #16
 801f96e:	4630      	mov	r0, r6
 801f970:	f7fc fbb2 	bl	801c0d8 <_printf_i>
 801f974:	e7e4      	b.n	801f940 <_vfiprintf_r+0x208>
 801f976:	bf00      	nop
 801f978:	08024828 	.word	0x08024828
 801f97c:	08024848 	.word	0x08024848
 801f980:	08024808 	.word	0x08024808
 801f984:	08024a3c 	.word	0x08024a3c
 801f988:	08024a46 	.word	0x08024a46
 801f98c:	0801bbc1 	.word	0x0801bbc1
 801f990:	0801f713 	.word	0x0801f713
 801f994:	08024a42 	.word	0x08024a42

0801f998 <nan>:
 801f998:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801f9a0 <nan+0x8>
 801f99c:	4770      	bx	lr
 801f99e:	bf00      	nop
 801f9a0:	00000000 	.word	0x00000000
 801f9a4:	7ff80000 	.word	0x7ff80000

0801f9a8 <__sread>:
 801f9a8:	b510      	push	{r4, lr}
 801f9aa:	460c      	mov	r4, r1
 801f9ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f9b0:	f000 faa0 	bl	801fef4 <_read_r>
 801f9b4:	2800      	cmp	r0, #0
 801f9b6:	bfab      	itete	ge
 801f9b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f9ba:	89a3      	ldrhlt	r3, [r4, #12]
 801f9bc:	181b      	addge	r3, r3, r0
 801f9be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f9c2:	bfac      	ite	ge
 801f9c4:	6563      	strge	r3, [r4, #84]	; 0x54
 801f9c6:	81a3      	strhlt	r3, [r4, #12]
 801f9c8:	bd10      	pop	{r4, pc}

0801f9ca <__swrite>:
 801f9ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f9ce:	461f      	mov	r7, r3
 801f9d0:	898b      	ldrh	r3, [r1, #12]
 801f9d2:	05db      	lsls	r3, r3, #23
 801f9d4:	4605      	mov	r5, r0
 801f9d6:	460c      	mov	r4, r1
 801f9d8:	4616      	mov	r6, r2
 801f9da:	d505      	bpl.n	801f9e8 <__swrite+0x1e>
 801f9dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f9e0:	2302      	movs	r3, #2
 801f9e2:	2200      	movs	r2, #0
 801f9e4:	f000 f9de 	bl	801fda4 <_lseek_r>
 801f9e8:	89a3      	ldrh	r3, [r4, #12]
 801f9ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f9ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f9f2:	81a3      	strh	r3, [r4, #12]
 801f9f4:	4632      	mov	r2, r6
 801f9f6:	463b      	mov	r3, r7
 801f9f8:	4628      	mov	r0, r5
 801f9fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f9fe:	f000 b877 	b.w	801faf0 <_write_r>

0801fa02 <__sseek>:
 801fa02:	b510      	push	{r4, lr}
 801fa04:	460c      	mov	r4, r1
 801fa06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fa0a:	f000 f9cb 	bl	801fda4 <_lseek_r>
 801fa0e:	1c43      	adds	r3, r0, #1
 801fa10:	89a3      	ldrh	r3, [r4, #12]
 801fa12:	bf15      	itete	ne
 801fa14:	6560      	strne	r0, [r4, #84]	; 0x54
 801fa16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801fa1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801fa1e:	81a3      	strheq	r3, [r4, #12]
 801fa20:	bf18      	it	ne
 801fa22:	81a3      	strhne	r3, [r4, #12]
 801fa24:	bd10      	pop	{r4, pc}

0801fa26 <__sclose>:
 801fa26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fa2a:	f000 b8e9 	b.w	801fc00 <_close_r>
	...

0801fa30 <__swbuf_r>:
 801fa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa32:	460e      	mov	r6, r1
 801fa34:	4614      	mov	r4, r2
 801fa36:	4605      	mov	r5, r0
 801fa38:	b118      	cbz	r0, 801fa42 <__swbuf_r+0x12>
 801fa3a:	6983      	ldr	r3, [r0, #24]
 801fa3c:	b90b      	cbnz	r3, 801fa42 <__swbuf_r+0x12>
 801fa3e:	f7fe fbf3 	bl	801e228 <__sinit>
 801fa42:	4b21      	ldr	r3, [pc, #132]	; (801fac8 <__swbuf_r+0x98>)
 801fa44:	429c      	cmp	r4, r3
 801fa46:	d12b      	bne.n	801faa0 <__swbuf_r+0x70>
 801fa48:	686c      	ldr	r4, [r5, #4]
 801fa4a:	69a3      	ldr	r3, [r4, #24]
 801fa4c:	60a3      	str	r3, [r4, #8]
 801fa4e:	89a3      	ldrh	r3, [r4, #12]
 801fa50:	071a      	lsls	r2, r3, #28
 801fa52:	d52f      	bpl.n	801fab4 <__swbuf_r+0x84>
 801fa54:	6923      	ldr	r3, [r4, #16]
 801fa56:	b36b      	cbz	r3, 801fab4 <__swbuf_r+0x84>
 801fa58:	6923      	ldr	r3, [r4, #16]
 801fa5a:	6820      	ldr	r0, [r4, #0]
 801fa5c:	1ac0      	subs	r0, r0, r3
 801fa5e:	6963      	ldr	r3, [r4, #20]
 801fa60:	b2f6      	uxtb	r6, r6
 801fa62:	4283      	cmp	r3, r0
 801fa64:	4637      	mov	r7, r6
 801fa66:	dc04      	bgt.n	801fa72 <__swbuf_r+0x42>
 801fa68:	4621      	mov	r1, r4
 801fa6a:	4628      	mov	r0, r5
 801fa6c:	f000 f95e 	bl	801fd2c <_fflush_r>
 801fa70:	bb30      	cbnz	r0, 801fac0 <__swbuf_r+0x90>
 801fa72:	68a3      	ldr	r3, [r4, #8]
 801fa74:	3b01      	subs	r3, #1
 801fa76:	60a3      	str	r3, [r4, #8]
 801fa78:	6823      	ldr	r3, [r4, #0]
 801fa7a:	1c5a      	adds	r2, r3, #1
 801fa7c:	6022      	str	r2, [r4, #0]
 801fa7e:	701e      	strb	r6, [r3, #0]
 801fa80:	6963      	ldr	r3, [r4, #20]
 801fa82:	3001      	adds	r0, #1
 801fa84:	4283      	cmp	r3, r0
 801fa86:	d004      	beq.n	801fa92 <__swbuf_r+0x62>
 801fa88:	89a3      	ldrh	r3, [r4, #12]
 801fa8a:	07db      	lsls	r3, r3, #31
 801fa8c:	d506      	bpl.n	801fa9c <__swbuf_r+0x6c>
 801fa8e:	2e0a      	cmp	r6, #10
 801fa90:	d104      	bne.n	801fa9c <__swbuf_r+0x6c>
 801fa92:	4621      	mov	r1, r4
 801fa94:	4628      	mov	r0, r5
 801fa96:	f000 f949 	bl	801fd2c <_fflush_r>
 801fa9a:	b988      	cbnz	r0, 801fac0 <__swbuf_r+0x90>
 801fa9c:	4638      	mov	r0, r7
 801fa9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801faa0:	4b0a      	ldr	r3, [pc, #40]	; (801facc <__swbuf_r+0x9c>)
 801faa2:	429c      	cmp	r4, r3
 801faa4:	d101      	bne.n	801faaa <__swbuf_r+0x7a>
 801faa6:	68ac      	ldr	r4, [r5, #8]
 801faa8:	e7cf      	b.n	801fa4a <__swbuf_r+0x1a>
 801faaa:	4b09      	ldr	r3, [pc, #36]	; (801fad0 <__swbuf_r+0xa0>)
 801faac:	429c      	cmp	r4, r3
 801faae:	bf08      	it	eq
 801fab0:	68ec      	ldreq	r4, [r5, #12]
 801fab2:	e7ca      	b.n	801fa4a <__swbuf_r+0x1a>
 801fab4:	4621      	mov	r1, r4
 801fab6:	4628      	mov	r0, r5
 801fab8:	f000 f82c 	bl	801fb14 <__swsetup_r>
 801fabc:	2800      	cmp	r0, #0
 801fabe:	d0cb      	beq.n	801fa58 <__swbuf_r+0x28>
 801fac0:	f04f 37ff 	mov.w	r7, #4294967295
 801fac4:	e7ea      	b.n	801fa9c <__swbuf_r+0x6c>
 801fac6:	bf00      	nop
 801fac8:	08024828 	.word	0x08024828
 801facc:	08024848 	.word	0x08024848
 801fad0:	08024808 	.word	0x08024808

0801fad4 <__ascii_wctomb>:
 801fad4:	b149      	cbz	r1, 801faea <__ascii_wctomb+0x16>
 801fad6:	2aff      	cmp	r2, #255	; 0xff
 801fad8:	bf85      	ittet	hi
 801fada:	238a      	movhi	r3, #138	; 0x8a
 801fadc:	6003      	strhi	r3, [r0, #0]
 801fade:	700a      	strbls	r2, [r1, #0]
 801fae0:	f04f 30ff 	movhi.w	r0, #4294967295
 801fae4:	bf98      	it	ls
 801fae6:	2001      	movls	r0, #1
 801fae8:	4770      	bx	lr
 801faea:	4608      	mov	r0, r1
 801faec:	4770      	bx	lr
	...

0801faf0 <_write_r>:
 801faf0:	b538      	push	{r3, r4, r5, lr}
 801faf2:	4d07      	ldr	r5, [pc, #28]	; (801fb10 <_write_r+0x20>)
 801faf4:	4604      	mov	r4, r0
 801faf6:	4608      	mov	r0, r1
 801faf8:	4611      	mov	r1, r2
 801fafa:	2200      	movs	r2, #0
 801fafc:	602a      	str	r2, [r5, #0]
 801fafe:	461a      	mov	r2, r3
 801fb00:	f7e2 f8ff 	bl	8001d02 <_write>
 801fb04:	1c43      	adds	r3, r0, #1
 801fb06:	d102      	bne.n	801fb0e <_write_r+0x1e>
 801fb08:	682b      	ldr	r3, [r5, #0]
 801fb0a:	b103      	cbz	r3, 801fb0e <_write_r+0x1e>
 801fb0c:	6023      	str	r3, [r4, #0]
 801fb0e:	bd38      	pop	{r3, r4, r5, pc}
 801fb10:	20007540 	.word	0x20007540

0801fb14 <__swsetup_r>:
 801fb14:	4b32      	ldr	r3, [pc, #200]	; (801fbe0 <__swsetup_r+0xcc>)
 801fb16:	b570      	push	{r4, r5, r6, lr}
 801fb18:	681d      	ldr	r5, [r3, #0]
 801fb1a:	4606      	mov	r6, r0
 801fb1c:	460c      	mov	r4, r1
 801fb1e:	b125      	cbz	r5, 801fb2a <__swsetup_r+0x16>
 801fb20:	69ab      	ldr	r3, [r5, #24]
 801fb22:	b913      	cbnz	r3, 801fb2a <__swsetup_r+0x16>
 801fb24:	4628      	mov	r0, r5
 801fb26:	f7fe fb7f 	bl	801e228 <__sinit>
 801fb2a:	4b2e      	ldr	r3, [pc, #184]	; (801fbe4 <__swsetup_r+0xd0>)
 801fb2c:	429c      	cmp	r4, r3
 801fb2e:	d10f      	bne.n	801fb50 <__swsetup_r+0x3c>
 801fb30:	686c      	ldr	r4, [r5, #4]
 801fb32:	89a3      	ldrh	r3, [r4, #12]
 801fb34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fb38:	0719      	lsls	r1, r3, #28
 801fb3a:	d42c      	bmi.n	801fb96 <__swsetup_r+0x82>
 801fb3c:	06dd      	lsls	r5, r3, #27
 801fb3e:	d411      	bmi.n	801fb64 <__swsetup_r+0x50>
 801fb40:	2309      	movs	r3, #9
 801fb42:	6033      	str	r3, [r6, #0]
 801fb44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801fb48:	81a3      	strh	r3, [r4, #12]
 801fb4a:	f04f 30ff 	mov.w	r0, #4294967295
 801fb4e:	e03e      	b.n	801fbce <__swsetup_r+0xba>
 801fb50:	4b25      	ldr	r3, [pc, #148]	; (801fbe8 <__swsetup_r+0xd4>)
 801fb52:	429c      	cmp	r4, r3
 801fb54:	d101      	bne.n	801fb5a <__swsetup_r+0x46>
 801fb56:	68ac      	ldr	r4, [r5, #8]
 801fb58:	e7eb      	b.n	801fb32 <__swsetup_r+0x1e>
 801fb5a:	4b24      	ldr	r3, [pc, #144]	; (801fbec <__swsetup_r+0xd8>)
 801fb5c:	429c      	cmp	r4, r3
 801fb5e:	bf08      	it	eq
 801fb60:	68ec      	ldreq	r4, [r5, #12]
 801fb62:	e7e6      	b.n	801fb32 <__swsetup_r+0x1e>
 801fb64:	0758      	lsls	r0, r3, #29
 801fb66:	d512      	bpl.n	801fb8e <__swsetup_r+0x7a>
 801fb68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fb6a:	b141      	cbz	r1, 801fb7e <__swsetup_r+0x6a>
 801fb6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fb70:	4299      	cmp	r1, r3
 801fb72:	d002      	beq.n	801fb7a <__swsetup_r+0x66>
 801fb74:	4630      	mov	r0, r6
 801fb76:	f7fb feb3 	bl	801b8e0 <_free_r>
 801fb7a:	2300      	movs	r3, #0
 801fb7c:	6363      	str	r3, [r4, #52]	; 0x34
 801fb7e:	89a3      	ldrh	r3, [r4, #12]
 801fb80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801fb84:	81a3      	strh	r3, [r4, #12]
 801fb86:	2300      	movs	r3, #0
 801fb88:	6063      	str	r3, [r4, #4]
 801fb8a:	6923      	ldr	r3, [r4, #16]
 801fb8c:	6023      	str	r3, [r4, #0]
 801fb8e:	89a3      	ldrh	r3, [r4, #12]
 801fb90:	f043 0308 	orr.w	r3, r3, #8
 801fb94:	81a3      	strh	r3, [r4, #12]
 801fb96:	6923      	ldr	r3, [r4, #16]
 801fb98:	b94b      	cbnz	r3, 801fbae <__swsetup_r+0x9a>
 801fb9a:	89a3      	ldrh	r3, [r4, #12]
 801fb9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801fba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801fba4:	d003      	beq.n	801fbae <__swsetup_r+0x9a>
 801fba6:	4621      	mov	r1, r4
 801fba8:	4630      	mov	r0, r6
 801fbaa:	f000 f933 	bl	801fe14 <__smakebuf_r>
 801fbae:	89a0      	ldrh	r0, [r4, #12]
 801fbb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fbb4:	f010 0301 	ands.w	r3, r0, #1
 801fbb8:	d00a      	beq.n	801fbd0 <__swsetup_r+0xbc>
 801fbba:	2300      	movs	r3, #0
 801fbbc:	60a3      	str	r3, [r4, #8]
 801fbbe:	6963      	ldr	r3, [r4, #20]
 801fbc0:	425b      	negs	r3, r3
 801fbc2:	61a3      	str	r3, [r4, #24]
 801fbc4:	6923      	ldr	r3, [r4, #16]
 801fbc6:	b943      	cbnz	r3, 801fbda <__swsetup_r+0xc6>
 801fbc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801fbcc:	d1ba      	bne.n	801fb44 <__swsetup_r+0x30>
 801fbce:	bd70      	pop	{r4, r5, r6, pc}
 801fbd0:	0781      	lsls	r1, r0, #30
 801fbd2:	bf58      	it	pl
 801fbd4:	6963      	ldrpl	r3, [r4, #20]
 801fbd6:	60a3      	str	r3, [r4, #8]
 801fbd8:	e7f4      	b.n	801fbc4 <__swsetup_r+0xb0>
 801fbda:	2000      	movs	r0, #0
 801fbdc:	e7f7      	b.n	801fbce <__swsetup_r+0xba>
 801fbde:	bf00      	nop
 801fbe0:	20000068 	.word	0x20000068
 801fbe4:	08024828 	.word	0x08024828
 801fbe8:	08024848 	.word	0x08024848
 801fbec:	08024808 	.word	0x08024808

0801fbf0 <abort>:
 801fbf0:	b508      	push	{r3, lr}
 801fbf2:	2006      	movs	r0, #6
 801fbf4:	f000 f9b8 	bl	801ff68 <raise>
 801fbf8:	2001      	movs	r0, #1
 801fbfa:	f7e2 f85b 	bl	8001cb4 <_exit>
	...

0801fc00 <_close_r>:
 801fc00:	b538      	push	{r3, r4, r5, lr}
 801fc02:	4d06      	ldr	r5, [pc, #24]	; (801fc1c <_close_r+0x1c>)
 801fc04:	2300      	movs	r3, #0
 801fc06:	4604      	mov	r4, r0
 801fc08:	4608      	mov	r0, r1
 801fc0a:	602b      	str	r3, [r5, #0]
 801fc0c:	f7e2 f895 	bl	8001d3a <_close>
 801fc10:	1c43      	adds	r3, r0, #1
 801fc12:	d102      	bne.n	801fc1a <_close_r+0x1a>
 801fc14:	682b      	ldr	r3, [r5, #0]
 801fc16:	b103      	cbz	r3, 801fc1a <_close_r+0x1a>
 801fc18:	6023      	str	r3, [r4, #0]
 801fc1a:	bd38      	pop	{r3, r4, r5, pc}
 801fc1c:	20007540 	.word	0x20007540

0801fc20 <__sflush_r>:
 801fc20:	898a      	ldrh	r2, [r1, #12]
 801fc22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fc26:	4605      	mov	r5, r0
 801fc28:	0710      	lsls	r0, r2, #28
 801fc2a:	460c      	mov	r4, r1
 801fc2c:	d458      	bmi.n	801fce0 <__sflush_r+0xc0>
 801fc2e:	684b      	ldr	r3, [r1, #4]
 801fc30:	2b00      	cmp	r3, #0
 801fc32:	dc05      	bgt.n	801fc40 <__sflush_r+0x20>
 801fc34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801fc36:	2b00      	cmp	r3, #0
 801fc38:	dc02      	bgt.n	801fc40 <__sflush_r+0x20>
 801fc3a:	2000      	movs	r0, #0
 801fc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fc40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fc42:	2e00      	cmp	r6, #0
 801fc44:	d0f9      	beq.n	801fc3a <__sflush_r+0x1a>
 801fc46:	2300      	movs	r3, #0
 801fc48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801fc4c:	682f      	ldr	r7, [r5, #0]
 801fc4e:	602b      	str	r3, [r5, #0]
 801fc50:	d032      	beq.n	801fcb8 <__sflush_r+0x98>
 801fc52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801fc54:	89a3      	ldrh	r3, [r4, #12]
 801fc56:	075a      	lsls	r2, r3, #29
 801fc58:	d505      	bpl.n	801fc66 <__sflush_r+0x46>
 801fc5a:	6863      	ldr	r3, [r4, #4]
 801fc5c:	1ac0      	subs	r0, r0, r3
 801fc5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fc60:	b10b      	cbz	r3, 801fc66 <__sflush_r+0x46>
 801fc62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801fc64:	1ac0      	subs	r0, r0, r3
 801fc66:	2300      	movs	r3, #0
 801fc68:	4602      	mov	r2, r0
 801fc6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801fc6c:	6a21      	ldr	r1, [r4, #32]
 801fc6e:	4628      	mov	r0, r5
 801fc70:	47b0      	blx	r6
 801fc72:	1c43      	adds	r3, r0, #1
 801fc74:	89a3      	ldrh	r3, [r4, #12]
 801fc76:	d106      	bne.n	801fc86 <__sflush_r+0x66>
 801fc78:	6829      	ldr	r1, [r5, #0]
 801fc7a:	291d      	cmp	r1, #29
 801fc7c:	d82c      	bhi.n	801fcd8 <__sflush_r+0xb8>
 801fc7e:	4a2a      	ldr	r2, [pc, #168]	; (801fd28 <__sflush_r+0x108>)
 801fc80:	40ca      	lsrs	r2, r1
 801fc82:	07d6      	lsls	r6, r2, #31
 801fc84:	d528      	bpl.n	801fcd8 <__sflush_r+0xb8>
 801fc86:	2200      	movs	r2, #0
 801fc88:	6062      	str	r2, [r4, #4]
 801fc8a:	04d9      	lsls	r1, r3, #19
 801fc8c:	6922      	ldr	r2, [r4, #16]
 801fc8e:	6022      	str	r2, [r4, #0]
 801fc90:	d504      	bpl.n	801fc9c <__sflush_r+0x7c>
 801fc92:	1c42      	adds	r2, r0, #1
 801fc94:	d101      	bne.n	801fc9a <__sflush_r+0x7a>
 801fc96:	682b      	ldr	r3, [r5, #0]
 801fc98:	b903      	cbnz	r3, 801fc9c <__sflush_r+0x7c>
 801fc9a:	6560      	str	r0, [r4, #84]	; 0x54
 801fc9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801fc9e:	602f      	str	r7, [r5, #0]
 801fca0:	2900      	cmp	r1, #0
 801fca2:	d0ca      	beq.n	801fc3a <__sflush_r+0x1a>
 801fca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801fca8:	4299      	cmp	r1, r3
 801fcaa:	d002      	beq.n	801fcb2 <__sflush_r+0x92>
 801fcac:	4628      	mov	r0, r5
 801fcae:	f7fb fe17 	bl	801b8e0 <_free_r>
 801fcb2:	2000      	movs	r0, #0
 801fcb4:	6360      	str	r0, [r4, #52]	; 0x34
 801fcb6:	e7c1      	b.n	801fc3c <__sflush_r+0x1c>
 801fcb8:	6a21      	ldr	r1, [r4, #32]
 801fcba:	2301      	movs	r3, #1
 801fcbc:	4628      	mov	r0, r5
 801fcbe:	47b0      	blx	r6
 801fcc0:	1c41      	adds	r1, r0, #1
 801fcc2:	d1c7      	bne.n	801fc54 <__sflush_r+0x34>
 801fcc4:	682b      	ldr	r3, [r5, #0]
 801fcc6:	2b00      	cmp	r3, #0
 801fcc8:	d0c4      	beq.n	801fc54 <__sflush_r+0x34>
 801fcca:	2b1d      	cmp	r3, #29
 801fccc:	d001      	beq.n	801fcd2 <__sflush_r+0xb2>
 801fcce:	2b16      	cmp	r3, #22
 801fcd0:	d101      	bne.n	801fcd6 <__sflush_r+0xb6>
 801fcd2:	602f      	str	r7, [r5, #0]
 801fcd4:	e7b1      	b.n	801fc3a <__sflush_r+0x1a>
 801fcd6:	89a3      	ldrh	r3, [r4, #12]
 801fcd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fcdc:	81a3      	strh	r3, [r4, #12]
 801fcde:	e7ad      	b.n	801fc3c <__sflush_r+0x1c>
 801fce0:	690f      	ldr	r7, [r1, #16]
 801fce2:	2f00      	cmp	r7, #0
 801fce4:	d0a9      	beq.n	801fc3a <__sflush_r+0x1a>
 801fce6:	0793      	lsls	r3, r2, #30
 801fce8:	680e      	ldr	r6, [r1, #0]
 801fcea:	bf08      	it	eq
 801fcec:	694b      	ldreq	r3, [r1, #20]
 801fcee:	600f      	str	r7, [r1, #0]
 801fcf0:	bf18      	it	ne
 801fcf2:	2300      	movne	r3, #0
 801fcf4:	eba6 0807 	sub.w	r8, r6, r7
 801fcf8:	608b      	str	r3, [r1, #8]
 801fcfa:	f1b8 0f00 	cmp.w	r8, #0
 801fcfe:	dd9c      	ble.n	801fc3a <__sflush_r+0x1a>
 801fd00:	6a21      	ldr	r1, [r4, #32]
 801fd02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801fd04:	4643      	mov	r3, r8
 801fd06:	463a      	mov	r2, r7
 801fd08:	4628      	mov	r0, r5
 801fd0a:	47b0      	blx	r6
 801fd0c:	2800      	cmp	r0, #0
 801fd0e:	dc06      	bgt.n	801fd1e <__sflush_r+0xfe>
 801fd10:	89a3      	ldrh	r3, [r4, #12]
 801fd12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fd16:	81a3      	strh	r3, [r4, #12]
 801fd18:	f04f 30ff 	mov.w	r0, #4294967295
 801fd1c:	e78e      	b.n	801fc3c <__sflush_r+0x1c>
 801fd1e:	4407      	add	r7, r0
 801fd20:	eba8 0800 	sub.w	r8, r8, r0
 801fd24:	e7e9      	b.n	801fcfa <__sflush_r+0xda>
 801fd26:	bf00      	nop
 801fd28:	20400001 	.word	0x20400001

0801fd2c <_fflush_r>:
 801fd2c:	b538      	push	{r3, r4, r5, lr}
 801fd2e:	690b      	ldr	r3, [r1, #16]
 801fd30:	4605      	mov	r5, r0
 801fd32:	460c      	mov	r4, r1
 801fd34:	b913      	cbnz	r3, 801fd3c <_fflush_r+0x10>
 801fd36:	2500      	movs	r5, #0
 801fd38:	4628      	mov	r0, r5
 801fd3a:	bd38      	pop	{r3, r4, r5, pc}
 801fd3c:	b118      	cbz	r0, 801fd46 <_fflush_r+0x1a>
 801fd3e:	6983      	ldr	r3, [r0, #24]
 801fd40:	b90b      	cbnz	r3, 801fd46 <_fflush_r+0x1a>
 801fd42:	f7fe fa71 	bl	801e228 <__sinit>
 801fd46:	4b14      	ldr	r3, [pc, #80]	; (801fd98 <_fflush_r+0x6c>)
 801fd48:	429c      	cmp	r4, r3
 801fd4a:	d11b      	bne.n	801fd84 <_fflush_r+0x58>
 801fd4c:	686c      	ldr	r4, [r5, #4]
 801fd4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fd52:	2b00      	cmp	r3, #0
 801fd54:	d0ef      	beq.n	801fd36 <_fflush_r+0xa>
 801fd56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801fd58:	07d0      	lsls	r0, r2, #31
 801fd5a:	d404      	bmi.n	801fd66 <_fflush_r+0x3a>
 801fd5c:	0599      	lsls	r1, r3, #22
 801fd5e:	d402      	bmi.n	801fd66 <_fflush_r+0x3a>
 801fd60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fd62:	f7fe fe84 	bl	801ea6e <__retarget_lock_acquire_recursive>
 801fd66:	4628      	mov	r0, r5
 801fd68:	4621      	mov	r1, r4
 801fd6a:	f7ff ff59 	bl	801fc20 <__sflush_r>
 801fd6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801fd70:	07da      	lsls	r2, r3, #31
 801fd72:	4605      	mov	r5, r0
 801fd74:	d4e0      	bmi.n	801fd38 <_fflush_r+0xc>
 801fd76:	89a3      	ldrh	r3, [r4, #12]
 801fd78:	059b      	lsls	r3, r3, #22
 801fd7a:	d4dd      	bmi.n	801fd38 <_fflush_r+0xc>
 801fd7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fd7e:	f7fe fe77 	bl	801ea70 <__retarget_lock_release_recursive>
 801fd82:	e7d9      	b.n	801fd38 <_fflush_r+0xc>
 801fd84:	4b05      	ldr	r3, [pc, #20]	; (801fd9c <_fflush_r+0x70>)
 801fd86:	429c      	cmp	r4, r3
 801fd88:	d101      	bne.n	801fd8e <_fflush_r+0x62>
 801fd8a:	68ac      	ldr	r4, [r5, #8]
 801fd8c:	e7df      	b.n	801fd4e <_fflush_r+0x22>
 801fd8e:	4b04      	ldr	r3, [pc, #16]	; (801fda0 <_fflush_r+0x74>)
 801fd90:	429c      	cmp	r4, r3
 801fd92:	bf08      	it	eq
 801fd94:	68ec      	ldreq	r4, [r5, #12]
 801fd96:	e7da      	b.n	801fd4e <_fflush_r+0x22>
 801fd98:	08024828 	.word	0x08024828
 801fd9c:	08024848 	.word	0x08024848
 801fda0:	08024808 	.word	0x08024808

0801fda4 <_lseek_r>:
 801fda4:	b538      	push	{r3, r4, r5, lr}
 801fda6:	4d07      	ldr	r5, [pc, #28]	; (801fdc4 <_lseek_r+0x20>)
 801fda8:	4604      	mov	r4, r0
 801fdaa:	4608      	mov	r0, r1
 801fdac:	4611      	mov	r1, r2
 801fdae:	2200      	movs	r2, #0
 801fdb0:	602a      	str	r2, [r5, #0]
 801fdb2:	461a      	mov	r2, r3
 801fdb4:	f7e1 ffe8 	bl	8001d88 <_lseek>
 801fdb8:	1c43      	adds	r3, r0, #1
 801fdba:	d102      	bne.n	801fdc2 <_lseek_r+0x1e>
 801fdbc:	682b      	ldr	r3, [r5, #0]
 801fdbe:	b103      	cbz	r3, 801fdc2 <_lseek_r+0x1e>
 801fdc0:	6023      	str	r3, [r4, #0]
 801fdc2:	bd38      	pop	{r3, r4, r5, pc}
 801fdc4:	20007540 	.word	0x20007540

0801fdc8 <__swhatbuf_r>:
 801fdc8:	b570      	push	{r4, r5, r6, lr}
 801fdca:	460e      	mov	r6, r1
 801fdcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fdd0:	2900      	cmp	r1, #0
 801fdd2:	b096      	sub	sp, #88	; 0x58
 801fdd4:	4614      	mov	r4, r2
 801fdd6:	461d      	mov	r5, r3
 801fdd8:	da08      	bge.n	801fdec <__swhatbuf_r+0x24>
 801fdda:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801fdde:	2200      	movs	r2, #0
 801fde0:	602a      	str	r2, [r5, #0]
 801fde2:	061a      	lsls	r2, r3, #24
 801fde4:	d410      	bmi.n	801fe08 <__swhatbuf_r+0x40>
 801fde6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fdea:	e00e      	b.n	801fe0a <__swhatbuf_r+0x42>
 801fdec:	466a      	mov	r2, sp
 801fdee:	f000 f8d7 	bl	801ffa0 <_fstat_r>
 801fdf2:	2800      	cmp	r0, #0
 801fdf4:	dbf1      	blt.n	801fdda <__swhatbuf_r+0x12>
 801fdf6:	9a01      	ldr	r2, [sp, #4]
 801fdf8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801fdfc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801fe00:	425a      	negs	r2, r3
 801fe02:	415a      	adcs	r2, r3
 801fe04:	602a      	str	r2, [r5, #0]
 801fe06:	e7ee      	b.n	801fde6 <__swhatbuf_r+0x1e>
 801fe08:	2340      	movs	r3, #64	; 0x40
 801fe0a:	2000      	movs	r0, #0
 801fe0c:	6023      	str	r3, [r4, #0]
 801fe0e:	b016      	add	sp, #88	; 0x58
 801fe10:	bd70      	pop	{r4, r5, r6, pc}
	...

0801fe14 <__smakebuf_r>:
 801fe14:	898b      	ldrh	r3, [r1, #12]
 801fe16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fe18:	079d      	lsls	r5, r3, #30
 801fe1a:	4606      	mov	r6, r0
 801fe1c:	460c      	mov	r4, r1
 801fe1e:	d507      	bpl.n	801fe30 <__smakebuf_r+0x1c>
 801fe20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801fe24:	6023      	str	r3, [r4, #0]
 801fe26:	6123      	str	r3, [r4, #16]
 801fe28:	2301      	movs	r3, #1
 801fe2a:	6163      	str	r3, [r4, #20]
 801fe2c:	b002      	add	sp, #8
 801fe2e:	bd70      	pop	{r4, r5, r6, pc}
 801fe30:	ab01      	add	r3, sp, #4
 801fe32:	466a      	mov	r2, sp
 801fe34:	f7ff ffc8 	bl	801fdc8 <__swhatbuf_r>
 801fe38:	9900      	ldr	r1, [sp, #0]
 801fe3a:	4605      	mov	r5, r0
 801fe3c:	4630      	mov	r0, r6
 801fe3e:	f7fb fdbb 	bl	801b9b8 <_malloc_r>
 801fe42:	b948      	cbnz	r0, 801fe58 <__smakebuf_r+0x44>
 801fe44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fe48:	059a      	lsls	r2, r3, #22
 801fe4a:	d4ef      	bmi.n	801fe2c <__smakebuf_r+0x18>
 801fe4c:	f023 0303 	bic.w	r3, r3, #3
 801fe50:	f043 0302 	orr.w	r3, r3, #2
 801fe54:	81a3      	strh	r3, [r4, #12]
 801fe56:	e7e3      	b.n	801fe20 <__smakebuf_r+0xc>
 801fe58:	4b0d      	ldr	r3, [pc, #52]	; (801fe90 <__smakebuf_r+0x7c>)
 801fe5a:	62b3      	str	r3, [r6, #40]	; 0x28
 801fe5c:	89a3      	ldrh	r3, [r4, #12]
 801fe5e:	6020      	str	r0, [r4, #0]
 801fe60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fe64:	81a3      	strh	r3, [r4, #12]
 801fe66:	9b00      	ldr	r3, [sp, #0]
 801fe68:	6163      	str	r3, [r4, #20]
 801fe6a:	9b01      	ldr	r3, [sp, #4]
 801fe6c:	6120      	str	r0, [r4, #16]
 801fe6e:	b15b      	cbz	r3, 801fe88 <__smakebuf_r+0x74>
 801fe70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fe74:	4630      	mov	r0, r6
 801fe76:	f000 f8a5 	bl	801ffc4 <_isatty_r>
 801fe7a:	b128      	cbz	r0, 801fe88 <__smakebuf_r+0x74>
 801fe7c:	89a3      	ldrh	r3, [r4, #12]
 801fe7e:	f023 0303 	bic.w	r3, r3, #3
 801fe82:	f043 0301 	orr.w	r3, r3, #1
 801fe86:	81a3      	strh	r3, [r4, #12]
 801fe88:	89a0      	ldrh	r0, [r4, #12]
 801fe8a:	4305      	orrs	r5, r0
 801fe8c:	81a5      	strh	r5, [r4, #12]
 801fe8e:	e7cd      	b.n	801fe2c <__smakebuf_r+0x18>
 801fe90:	0801e1c1 	.word	0x0801e1c1

0801fe94 <_realloc_r>:
 801fe94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fe98:	4680      	mov	r8, r0
 801fe9a:	4614      	mov	r4, r2
 801fe9c:	460e      	mov	r6, r1
 801fe9e:	b921      	cbnz	r1, 801feaa <_realloc_r+0x16>
 801fea0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fea4:	4611      	mov	r1, r2
 801fea6:	f7fb bd87 	b.w	801b9b8 <_malloc_r>
 801feaa:	b92a      	cbnz	r2, 801feb8 <_realloc_r+0x24>
 801feac:	f7fb fd18 	bl	801b8e0 <_free_r>
 801feb0:	4625      	mov	r5, r4
 801feb2:	4628      	mov	r0, r5
 801feb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801feb8:	f000 f894 	bl	801ffe4 <_malloc_usable_size_r>
 801febc:	4284      	cmp	r4, r0
 801febe:	4607      	mov	r7, r0
 801fec0:	d802      	bhi.n	801fec8 <_realloc_r+0x34>
 801fec2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801fec6:	d812      	bhi.n	801feee <_realloc_r+0x5a>
 801fec8:	4621      	mov	r1, r4
 801feca:	4640      	mov	r0, r8
 801fecc:	f7fb fd74 	bl	801b9b8 <_malloc_r>
 801fed0:	4605      	mov	r5, r0
 801fed2:	2800      	cmp	r0, #0
 801fed4:	d0ed      	beq.n	801feb2 <_realloc_r+0x1e>
 801fed6:	42bc      	cmp	r4, r7
 801fed8:	4622      	mov	r2, r4
 801feda:	4631      	mov	r1, r6
 801fedc:	bf28      	it	cs
 801fede:	463a      	movcs	r2, r7
 801fee0:	f7fb fcb8 	bl	801b854 <memcpy>
 801fee4:	4631      	mov	r1, r6
 801fee6:	4640      	mov	r0, r8
 801fee8:	f7fb fcfa 	bl	801b8e0 <_free_r>
 801feec:	e7e1      	b.n	801feb2 <_realloc_r+0x1e>
 801feee:	4635      	mov	r5, r6
 801fef0:	e7df      	b.n	801feb2 <_realloc_r+0x1e>
	...

0801fef4 <_read_r>:
 801fef4:	b538      	push	{r3, r4, r5, lr}
 801fef6:	4d07      	ldr	r5, [pc, #28]	; (801ff14 <_read_r+0x20>)
 801fef8:	4604      	mov	r4, r0
 801fefa:	4608      	mov	r0, r1
 801fefc:	4611      	mov	r1, r2
 801fefe:	2200      	movs	r2, #0
 801ff00:	602a      	str	r2, [r5, #0]
 801ff02:	461a      	mov	r2, r3
 801ff04:	f7e1 fee0 	bl	8001cc8 <_read>
 801ff08:	1c43      	adds	r3, r0, #1
 801ff0a:	d102      	bne.n	801ff12 <_read_r+0x1e>
 801ff0c:	682b      	ldr	r3, [r5, #0]
 801ff0e:	b103      	cbz	r3, 801ff12 <_read_r+0x1e>
 801ff10:	6023      	str	r3, [r4, #0]
 801ff12:	bd38      	pop	{r3, r4, r5, pc}
 801ff14:	20007540 	.word	0x20007540

0801ff18 <_raise_r>:
 801ff18:	291f      	cmp	r1, #31
 801ff1a:	b538      	push	{r3, r4, r5, lr}
 801ff1c:	4604      	mov	r4, r0
 801ff1e:	460d      	mov	r5, r1
 801ff20:	d904      	bls.n	801ff2c <_raise_r+0x14>
 801ff22:	2316      	movs	r3, #22
 801ff24:	6003      	str	r3, [r0, #0]
 801ff26:	f04f 30ff 	mov.w	r0, #4294967295
 801ff2a:	bd38      	pop	{r3, r4, r5, pc}
 801ff2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ff2e:	b112      	cbz	r2, 801ff36 <_raise_r+0x1e>
 801ff30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ff34:	b94b      	cbnz	r3, 801ff4a <_raise_r+0x32>
 801ff36:	4620      	mov	r0, r4
 801ff38:	f000 f830 	bl	801ff9c <_getpid_r>
 801ff3c:	462a      	mov	r2, r5
 801ff3e:	4601      	mov	r1, r0
 801ff40:	4620      	mov	r0, r4
 801ff42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ff46:	f000 b817 	b.w	801ff78 <_kill_r>
 801ff4a:	2b01      	cmp	r3, #1
 801ff4c:	d00a      	beq.n	801ff64 <_raise_r+0x4c>
 801ff4e:	1c59      	adds	r1, r3, #1
 801ff50:	d103      	bne.n	801ff5a <_raise_r+0x42>
 801ff52:	2316      	movs	r3, #22
 801ff54:	6003      	str	r3, [r0, #0]
 801ff56:	2001      	movs	r0, #1
 801ff58:	e7e7      	b.n	801ff2a <_raise_r+0x12>
 801ff5a:	2400      	movs	r4, #0
 801ff5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ff60:	4628      	mov	r0, r5
 801ff62:	4798      	blx	r3
 801ff64:	2000      	movs	r0, #0
 801ff66:	e7e0      	b.n	801ff2a <_raise_r+0x12>

0801ff68 <raise>:
 801ff68:	4b02      	ldr	r3, [pc, #8]	; (801ff74 <raise+0xc>)
 801ff6a:	4601      	mov	r1, r0
 801ff6c:	6818      	ldr	r0, [r3, #0]
 801ff6e:	f7ff bfd3 	b.w	801ff18 <_raise_r>
 801ff72:	bf00      	nop
 801ff74:	20000068 	.word	0x20000068

0801ff78 <_kill_r>:
 801ff78:	b538      	push	{r3, r4, r5, lr}
 801ff7a:	4d07      	ldr	r5, [pc, #28]	; (801ff98 <_kill_r+0x20>)
 801ff7c:	2300      	movs	r3, #0
 801ff7e:	4604      	mov	r4, r0
 801ff80:	4608      	mov	r0, r1
 801ff82:	4611      	mov	r1, r2
 801ff84:	602b      	str	r3, [r5, #0]
 801ff86:	f7e1 fe83 	bl	8001c90 <_kill>
 801ff8a:	1c43      	adds	r3, r0, #1
 801ff8c:	d102      	bne.n	801ff94 <_kill_r+0x1c>
 801ff8e:	682b      	ldr	r3, [r5, #0]
 801ff90:	b103      	cbz	r3, 801ff94 <_kill_r+0x1c>
 801ff92:	6023      	str	r3, [r4, #0]
 801ff94:	bd38      	pop	{r3, r4, r5, pc}
 801ff96:	bf00      	nop
 801ff98:	20007540 	.word	0x20007540

0801ff9c <_getpid_r>:
 801ff9c:	f7e1 be70 	b.w	8001c80 <_getpid>

0801ffa0 <_fstat_r>:
 801ffa0:	b538      	push	{r3, r4, r5, lr}
 801ffa2:	4d07      	ldr	r5, [pc, #28]	; (801ffc0 <_fstat_r+0x20>)
 801ffa4:	2300      	movs	r3, #0
 801ffa6:	4604      	mov	r4, r0
 801ffa8:	4608      	mov	r0, r1
 801ffaa:	4611      	mov	r1, r2
 801ffac:	602b      	str	r3, [r5, #0]
 801ffae:	f7e1 fed0 	bl	8001d52 <_fstat>
 801ffb2:	1c43      	adds	r3, r0, #1
 801ffb4:	d102      	bne.n	801ffbc <_fstat_r+0x1c>
 801ffb6:	682b      	ldr	r3, [r5, #0]
 801ffb8:	b103      	cbz	r3, 801ffbc <_fstat_r+0x1c>
 801ffba:	6023      	str	r3, [r4, #0]
 801ffbc:	bd38      	pop	{r3, r4, r5, pc}
 801ffbe:	bf00      	nop
 801ffc0:	20007540 	.word	0x20007540

0801ffc4 <_isatty_r>:
 801ffc4:	b538      	push	{r3, r4, r5, lr}
 801ffc6:	4d06      	ldr	r5, [pc, #24]	; (801ffe0 <_isatty_r+0x1c>)
 801ffc8:	2300      	movs	r3, #0
 801ffca:	4604      	mov	r4, r0
 801ffcc:	4608      	mov	r0, r1
 801ffce:	602b      	str	r3, [r5, #0]
 801ffd0:	f7e1 fecf 	bl	8001d72 <_isatty>
 801ffd4:	1c43      	adds	r3, r0, #1
 801ffd6:	d102      	bne.n	801ffde <_isatty_r+0x1a>
 801ffd8:	682b      	ldr	r3, [r5, #0]
 801ffda:	b103      	cbz	r3, 801ffde <_isatty_r+0x1a>
 801ffdc:	6023      	str	r3, [r4, #0]
 801ffde:	bd38      	pop	{r3, r4, r5, pc}
 801ffe0:	20007540 	.word	0x20007540

0801ffe4 <_malloc_usable_size_r>:
 801ffe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ffe8:	1f18      	subs	r0, r3, #4
 801ffea:	2b00      	cmp	r3, #0
 801ffec:	bfbc      	itt	lt
 801ffee:	580b      	ldrlt	r3, [r1, r0]
 801fff0:	18c0      	addlt	r0, r0, r3
 801fff2:	4770      	bx	lr

0801fff4 <_init>:
 801fff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fff6:	bf00      	nop
 801fff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fffa:	bc08      	pop	{r3}
 801fffc:	469e      	mov	lr, r3
 801fffe:	4770      	bx	lr

08020000 <_fini>:
 8020000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020002:	bf00      	nop
 8020004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020006:	bc08      	pop	{r3}
 8020008:	469e      	mov	lr, r3
 802000a:	4770      	bx	lr
